[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 2 projects.
[info] Excluded 2 projects, run ++ 2.12.6 -v for more details.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 31, 2018 3:55:31 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/ArrayOfFloatsBenchmark.scala:10:74: Unused import
[warn] import com.github.plokhotnyuk.jsoniter_scala.macros.UPickleReaderWriters._
[warn]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d10(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e8(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:12:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:33:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:42:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:48:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:60:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 64 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333441.573 ops/s
[info] # Warmup Iteration   2: 680412.575 ops/s
[info] # Warmup Iteration   3: 718014.145 ops/s
[info] # Warmup Iteration   4: 710434.559 ops/s
[info] # Warmup Iteration   5: 705074.072 ops/s
[info] Iteration   1: 720347.828 ops/s
[info]                  ·gc.alloc.rate:                   1892.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4396.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 724609.384 ops/s
[info]                  ·gc.alloc.rate:                   1903.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4376.753 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 720486.707 ops/s
[info]                  ·gc.alloc.rate:                   1893.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4408.710 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 708965.166 ops/s
[info]                  ·gc.alloc.rate:                   1862.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4489.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 708527.556 ops/s
[info]                  ·gc.alloc.rate:                   1861.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2999.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   716587.328 ±(99.9%) 28345.891 ops/s [Average]
[info]   (min, avg, max) = (708527.556, 716587.328, 724609.384), stdev = 7361.338
[info]   CI (99.9%): [688241.437, 744933.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1882.684 ±(99.9%) 73.994 MB/sec [Average]
[info]   (min, avg, max) = (1861.515, 1882.684, 1903.551), stdev = 19.216
[info]   CI (99.9%): [1808.690, 1956.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4136.001, 4136.001, 4136.001), stdev = 0.001
[info]   CI (99.9%): [4136.001, 4136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.226 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.082, 0.181), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1883.156 ±(99.9%) 1148.059 MB/sec [Average]
[info]   (min, avg, max) = (1349.860, 1883.156, 2022.023), stdev = 298.147
[info]   CI (99.9%): [735.097, 3031.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4134.120 ±(99.9%) 2448.588 B/op [Average]
[info]   (min, avg, max) = (2999.182, 4134.120, 4489.284), stdev = 635.891
[info]   CI (99.9%): [1685.531, 6582.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.20% complete, ETA 02:13:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 475015.077 ops/s
[info] # Warmup Iteration   2: 1634235.371 ops/s
[info] # Warmup Iteration   3: 1627845.827 ops/s
[info] # Warmup Iteration   4: 1618375.846 ops/s
[info] # Warmup Iteration   5: 1656301.689 ops/s
[info] Iteration   1: 1603313.269 ops/s
[info]                  ·gc.alloc.rate:                   1140.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1325.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1664654.869 ops/s
[info]                  ·gc.alloc.rate:                   1184.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1277.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1690774.619 ops/s
[info]                  ·gc.alloc.rate:                   1202.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 629.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1684498.226 ops/s
[info]                  ·gc.alloc.rate:                   1198.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1264.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1635460.736 ops/s
[info]                  ·gc.alloc.rate:                   1163.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1303.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1655740.344 ±(99.9%) 140082.828 ops/s [Average]
[info]   (min, avg, max) = (1603313.269, 1655740.344, 1690774.619), stdev = 36379.066
[info]   CI (99.9%): [1515657.516, 1795823.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1178.029 ±(99.9%) 99.480 MB/sec [Average]
[info]   (min, avg, max) = (1140.636, 1178.029, 1202.810), stdev = 25.835
[info]   CI (99.9%): [1078.549, 1277.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.044 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.079), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.635 ±(99.9%) 1164.647 MB/sec [Average]
[info]   (min, avg, max) = (675.593, 1216.635, 1354.076), stdev = 302.455
[info]   CI (99.9%): [51.987, 2381.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1159.845 ±(99.9%) 1146.118 B/op [Average]
[info]   (min, avg, max) = (629.081, 1159.845, 1325.383), stdev = 297.643
[info]   CI (99.9%): [13.726, 2305.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.40% complete, ETA 02:12:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3020420.218 ops/s
[info] # Warmup Iteration   2: 3798164.535 ops/s
[info] # Warmup Iteration   3: 3736402.012 ops/s
[info] # Warmup Iteration   4: 3881218.434 ops/s
[info] # Warmup Iteration   5: 3885025.106 ops/s
[info] Iteration   1: 3894363.172 ops/s
[info]                  ·gc.alloc.rate:                   257.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3909470.966 ops/s
[info]                  ·gc.alloc.rate:      258.293 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3890423.859 ops/s
[info]                  ·gc.alloc.rate:                   257.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3905615.982 ops/s
[info]                  ·gc.alloc.rate:      258.000 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3889453.882 ops/s
[info]                  ·gc.alloc.rate:                   256.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3897865.572 ±(99.9%) 35142.082 ops/s [Average]
[info]   (min, avg, max) = (3889453.882, 3897865.572, 3909470.966), stdev = 9126.287
[info]   CI (99.9%): [3862723.491, 3933007.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   257.500 ±(99.9%) 2.351 MB/sec [Average]
[info]   (min, avg, max) = (256.938, 257.500, 258.293), stdev = 0.611
[info]   CI (99.9%): [255.149, 259.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.848 ±(99.9%) 1078.612 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.848, 511.427), stdev = 280.112
[info]   CI (99.9%): [≈ 0, 1385.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   124.139 ±(99.9%) 436.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.139, 207.005), stdev = 113.322
[info]   CI (99.9%): [≈ 0, 560.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.60% complete, ETA 02:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27465.239 ops/s
[info] # Warmup Iteration   2: 164789.723 ops/s
[info] # Warmup Iteration   3: 170780.111 ops/s
[info] # Warmup Iteration   4: 171960.976 ops/s
[info] # Warmup Iteration   5: 172915.134 ops/s
[info] Iteration   1: 171669.850 ops/s
[info]                  ·gc.alloc.rate:                   1356.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12384.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 172979.895 ops/s
[info]                  ·gc.alloc.rate:                   1366.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12294.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 166899.206 ops/s
[info]                  ·gc.alloc.rate:                   1319.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12757.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 171087.557 ops/s
[info]                  ·gc.alloc.rate:                   1352.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12457.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 171898.380 ops/s
[info]                  ·gc.alloc.rate:                   1358.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              12440.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12404.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   170906.978 ±(99.9%) 9021.666 ops/s [Average]
[info]   (min, avg, max) = (166899.206, 170906.978, 172979.895), stdev = 2342.898
[info]   CI (99.9%): [161885.312, 179928.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1350.661 ±(99.9%) 70.702 MB/sec [Average]
[info]   (min, avg, max) = (1319.254, 1350.661, 1366.872), stdev = 18.361
[info]   CI (99.9%): [1279.959, 1421.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12440.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12440.002, 12440.002, 12440.003), stdev = 0.001
[info]   CI (99.9%): [12440.002, 12440.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.343 ±(99.9%) 0.959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.343, 0.573), stdev = 0.249
[info]   CI (99.9%): [≈ 0, 1.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1352.597 ±(99.9%) 7.264 MB/sec [Average]
[info]   (min, avg, max) = (1350.444, 1352.597, 1354.755), stdev = 1.887
[info]   CI (99.9%): [1345.332, 1359.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12459.743 ±(99.9%) 679.018 B/op [Average]
[info]   (min, avg, max) = (12294.628, 12459.743, 12757.102), stdev = 176.339
[info]   CI (99.9%): [11780.724, 13138.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.80% complete, ETA 02:11:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121499.976 ops/s
[info] # Warmup Iteration   2: 505448.453 ops/s
[info] # Warmup Iteration   3: 547044.466 ops/s
[info] # Warmup Iteration   4: 530738.617 ops/s
[info] # Warmup Iteration   5: 543234.999 ops/s
[info] Iteration   1: 541815.137 ops/s
[info]                  ·gc.alloc.rate:                   1646.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5845.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 546488.874 ops/s
[info]                  ·gc.alloc.rate:                   1660.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3865.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 540172.252 ops/s
[info]                  ·gc.alloc.rate:                   1641.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5871.872 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 550618.344 ops/s
[info]                  ·gc.alloc.rate:                   1673.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3845.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 545935.642 ops/s
[info]                  ·gc.alloc.rate:                   1659.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              4784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5825.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   545006.050 ±(99.9%) 15889.247 ops/s [Average]
[info]   (min, avg, max) = (540172.252, 545006.050, 550618.344), stdev = 4126.387
[info]   CI (99.9%): [529116.803, 560895.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1656.298 ±(99.9%) 48.152 MB/sec [Average]
[info]   (min, avg, max) = (1641.803, 1656.298, 1673.308), stdev = 12.505
[info]   CI (99.9%): [1608.146, 1704.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4784.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4784.001, 4784.001, 4784.001), stdev = 0.001
[info]   CI (99.9%): [4784.001, 4784.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.145 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.145, 0.242), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1746.836 ±(99.9%) 1417.343 MB/sec [Average]
[info]   (min, avg, max) = (1342.077, 1746.836, 2020.086), stdev = 368.080
[info]   CI (99.9%): [329.492, 3164.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5050.764 ±(99.9%) 4200.981 B/op [Average]
[info]   (min, avg, max) = (3845.945, 5050.764, 5871.872), stdev = 1090.981
[info]   CI (99.9%): [849.783, 9251.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.00% complete, ETA 02:11:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e1277c77/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 642274.832 ops/s
[info] # Warmup Iteration   2: 1965081.661 ops/s
[info] # Warmup Iteration   3: 2054157.033 ops/s
[info] # Warmup Iteration   4: 2084865.765 ops/s
[info] # Warmup Iteration   5: 2078535.716 ops/s
[info] Iteration   1: 2079977.485 ops/s
[info]                  ·gc.alloc.rate:                   866.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1020.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2081162.223 ops/s
[info]                  ·gc.alloc.rate:                   867.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 510.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2073923.838 ops/s
[info]                  ·gc.alloc.rate:                   864.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 512.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2084790.187 ops/s
[info]                  ·gc.alloc.rate:                   868.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2085323.536 ops/s
[info]                  ·gc.alloc.rate:                   869.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1019.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2081035.454 ±(99.9%) 17666.453 ops/s [Average]
[info]   (min, avg, max) = (2073923.838, 2081035.454, 2085323.536), stdev = 4587.922
[info]   CI (99.9%): [2063369.001, 2098701.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   867.266 ±(99.9%) 7.202 MB/sec [Average]
[info]   (min, avg, max) = (864.361, 867.266, 869.102), stdev = 1.870
[info]   CI (99.9%): [860.064, 874.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.032), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.616 ±(99.9%) 1423.050 MB/sec [Average]
[info]   (min, avg, max) = (674.240, 944.616, 1350.735), stdev = 369.562
[info]   CI (99.9%): [≈ 0, 2367.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   714.332 ±(99.9%) 1073.894 B/op [Average]
[info]   (min, avg, max) = (509.658, 714.332, 1020.131), stdev = 278.887
[info]   CI (99.9%): [≈ 0, 1788.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.20% complete, ETA 02:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10544634.318 ops/s
[info] # Warmup Iteration   2: 15220711.799 ops/s
[info] # Warmup Iteration   3: 15822528.645 ops/s
[info] # Warmup Iteration   4: 15843878.922 ops/s
[info] # Warmup Iteration   5: 15872473.392 ops/s
[info] Iteration   1: 16275932.552 ops/s
[info]                  ·gc.alloc.rate:                   826.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16261320.805 ops/s
[info]                  ·gc.alloc.rate:                   826.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 16236953.168 ops/s
[info]                  ·gc.alloc.rate:                   825.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16231408.701 ops/s
[info]                  ·gc.alloc.rate:                   824.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16301331.939 ops/s
[info]                  ·gc.alloc.rate:                   828.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.825 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   16261389.433 ±(99.9%) 110649.680 ops/s [Average]
[info]   (min, avg, max) = (16231408.701, 16261389.433, 16301331.939), stdev = 28735.371
[info]   CI (99.9%): [16150739.753, 16372039.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   826.363 ±(99.9%) 5.592 MB/sec [Average]
[info]   (min, avg, max) = (824.820, 826.363, 828.430), stdev = 1.452
[info]   CI (99.9%): [820.771, 831.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.710 ±(99.9%) 1153.289 MB/sec [Average]
[info]   (min, avg, max) = (671.285, 806.710, 1342.478), stdev = 299.506
[info]   CI (99.9%): [≈ 0, 1959.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   78.122 ±(99.9%) 112.121 B/op [Average]
[info]   (min, avg, max) = (64.825, 78.122, 130.208), stdev = 29.118
[info]   CI (99.9%): [≈ 0, 190.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.41% complete, ETA 02:11:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4372097.064 ops/s
[info] # Warmup Iteration   2: 15182790.920 ops/s
[info] # Warmup Iteration   3: 16816978.104 ops/s
[info] # Warmup Iteration   4: 16835546.203 ops/s
[info] # Warmup Iteration   5: 16752897.609 ops/s
[info] Iteration   1: 16846190.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16879784.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16821569.080 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 16836387.370 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 16803888.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   16837563.996 ±(99.9%) 109729.981 ops/s [Average]
[info]   (min, avg, max) = (16803888.878, 16837563.996, 16879784.372), stdev = 28496.528
[info]   CI (99.9%): [16727834.015, 16947293.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.61% complete, ETA 02:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66534.893 ops/s
[info] # Warmup Iteration   2: 300043.668 ops/s
[info] # Warmup Iteration   3: 308964.292 ops/s
[info] # Warmup Iteration   4: 290275.949 ops/s
[info] # Warmup Iteration   5: 310944.783 ops/s
[info] Iteration   1: 310725.663 ops/s
[info]                  ·gc.alloc.rate:                   1013.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6835.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 310587.555 ops/s
[info]                  ·gc.alloc.rate:                   1013.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3421.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 310984.620 ops/s
[info]                  ·gc.alloc.rate:                   1014.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6836.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 308662.128 ops/s
[info]                  ·gc.alloc.rate:                   1007.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3445.744 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 308766.784 ops/s
[info]                  ·gc.alloc.rate:                   1007.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6895.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   309945.350 ±(99.9%) 4363.765 ops/s [Average]
[info]   (min, avg, max) = (308662.128, 309945.350, 310984.620), stdev = 1133.256
[info]   CI (99.9%): [305581.586, 314309.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1011.202 ±(99.9%) 14.272 MB/sec [Average]
[info]   (min, avg, max) = (1007.035, 1011.202, 1014.623), stdev = 3.706
[info]   CI (99.9%): [996.929, 1025.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.148 ±(99.9%) 0.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.316), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1080.552 ±(99.9%) 1424.577 MB/sec [Average]
[info]   (min, avg, max) = (674.950, 1080.552, 1352.460), stdev = 369.958
[info]   CI (99.9%): [≈ 0, 2505.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5486.889 ±(99.9%) 7218.851 B/op [Average]
[info]   (min, avg, max) = (3421.137, 5486.889, 6895.757), stdev = 1874.713
[info]   CI (99.9%): [≈ 0, 12705.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1.81% complete, ETA 02:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 978385.376 ops/s
[info] # Warmup Iteration   2: 1659530.544 ops/s
[info] # Warmup Iteration   3: 1700653.580 ops/s
[info] # Warmup Iteration   4: 1700095.620 ops/s
[info] # Warmup Iteration   5: 1705874.722 ops/s
[info] Iteration   1: 1696237.048 ops/s
[info]                  ·gc.alloc.rate:                   2611.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2499.296 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1703277.020 ops/s
[info]                  ·gc.alloc.rate:                   2623.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2495.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1704652.102 ops/s
[info]                  ·gc.alloc.rate:                   2624.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2498.170 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1701291.875 ops/s
[info]                  ·gc.alloc.rate:                   2619.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1880.332 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1692649.102 ops/s
[info]                  ·gc.alloc.rate:                   2606.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2523.243 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1699621.429 ±(99.9%) 19399.831 ops/s [Average]
[info]   (min, avg, max) = (1692649.102, 1699621.429, 1704652.102), stdev = 5038.075
[info]   CI (99.9%): [1680221.598, 1719021.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2617.119 ±(99.9%) 30.420 MB/sec [Average]
[info]   (min, avg, max) = (2606.303, 2617.119, 2624.660), stdev = 7.900
[info]   CI (99.9%): [2586.699, 2647.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2424.000, 2424.000, 2424.000), stdev = 0.001
[info]   CI (99.9%): [2424.000, 2424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.054 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.054, 0.077), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2568.645 ±(99.9%) 1155.462 MB/sec [Average]
[info]   (min, avg, max) = (2032.024, 2568.645, 2713.010), stdev = 300.070
[info]   CI (99.9%): [1413.183, 3724.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2379.241 ±(99.9%) 1074.809 B/op [Average]
[info]   (min, avg, max) = (1880.332, 2379.241, 2523.243), stdev = 279.124
[info]   CI (99.9%): [1304.432, 3454.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.01% complete, ETA 02:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.922 ops/s
[info] # Warmup Iteration   2: 9299399.053 ops/s
[info] # Warmup Iteration   3: 10211254.862 ops/s
[info] # Warmup Iteration   4: 9994271.267 ops/s
[info] # Warmup Iteration   5: 10520180.240 ops/s
[info] Iteration   1: 10507450.900 ops/s
[info]                  ·gc.alloc.rate:                   1281.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 10458256.508 ops/s
[info]                  ·gc.alloc.rate:                   1275.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10484296.858 ops/s
[info]                  ·gc.alloc.rate:                   1278.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9239877.536 ops/s
[info]                  ·gc.alloc.rate:                   1127.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10129497.850 ops/s
[info]                  ·gc.alloc.rate:                   1235.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.585 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10163875.931 ±(99.9%) 2075715.086 ops/s [Average]
[info]   (min, avg, max) = (9239877.536, 10163875.931, 10507450.900), stdev = 539056.616
[info]   CI (99.9%): [8088160.845, 12239591.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1239.704 ±(99.9%) 253.054 MB/sec [Average]
[info]   (min, avg, max) = (1127.075, 1239.704, 1281.572), stdev = 65.717
[info]   CI (99.9%): [986.651, 1492.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.018), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1210.145 ±(99.9%) 1156.313 MB/sec [Average]
[info]   (min, avg, max) = (672.970, 1210.145, 1345.465), stdev = 300.291
[info]   CI (99.9%): [53.832, 2366.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   187.853 ±(99.9%) 184.967 B/op [Average]
[info]   (min, avg, max) = (104.585, 187.853, 229.203), stdev = 48.035
[info]   CI (99.9%): [2.887, 372.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.21% complete, ETA 02:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 932280.356 ops/s
[info] # Warmup Iteration   2: 2470293.772 ops/s
[info] # Warmup Iteration   3: 2504980.664 ops/s
[info] # Warmup Iteration   4: 2486599.520 ops/s
[info] # Warmup Iteration   5: 2564752.930 ops/s
[info] Iteration   1: 2573253.320 ops/s
[info]                  ·gc.alloc.rate:                   1804.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1241.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2530544.567 ops/s
[info]                  ·gc.alloc.rate:                   1774.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1263.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2576543.383 ops/s
[info]                  ·gc.alloc.rate:                   1806.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 828.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2571614.974 ops/s
[info]                  ·gc.alloc.rate:                   1803.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1245.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2565646.079 ops/s
[info]                  ·gc.alloc.rate:                   1798.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1249.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2563520.465 ±(99.9%) 72596.996 ops/s [Average]
[info]   (min, avg, max) = (2530544.567, 2563520.465, 2576543.383), stdev = 18853.209
[info]   CI (99.9%): [2490923.469, 2636117.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1797.759 ±(99.9%) 50.841 MB/sec [Average]
[info]   (min, avg, max) = (1774.686, 1797.759, 1806.699), stdev = 13.203
[info]   CI (99.9%): [1746.918, 1848.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.051 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.051, 0.078), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1897.293 ±(99.9%) 1167.254 MB/sec [Average]
[info]   (min, avg, max) = (1355.062, 1897.293, 2036.130), stdev = 303.132
[info]   CI (99.9%): [730.039, 3064.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1165.588 ±(99.9%) 727.358 B/op [Average]
[info]   (min, avg, max) = (828.023, 1165.588, 1263.598), stdev = 188.892
[info]   CI (99.9%): [438.231, 1892.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.41% complete, ETA 02:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9158686.897 ops/s
[info] # Warmup Iteration   2: 9909596.583 ops/s
[info] # Warmup Iteration   3: 10217183.252 ops/s
[info] # Warmup Iteration   4: 10444384.475 ops/s
[info] # Warmup Iteration   5: 10467952.006 ops/s
[info] Iteration   1: 10480119.656 ops/s
[info]                  ·gc.alloc.rate:                   1331.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10220854.083 ops/s
[info]                  ·gc.alloc.rate:                   1299.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.499 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 10453158.718 ops/s
[info]                  ·gc.alloc.rate:                   1327.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 10463426.288 ops/s
[info]                  ·gc.alloc.rate:                   1329.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10409372.785 ops/s
[info]                  ·gc.alloc.rate:                   1322.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10405386.306 ±(99.9%) 409799.476 ops/s [Average]
[info]   (min, avg, max) = (10220854.083, 10405386.306, 10480119.656), stdev = 106423.623
[info]   CI (99.9%): [9995586.830, 10815185.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1322.051 ±(99.9%) 51.100 MB/sec [Average]
[info]   (min, avg, max) = (1299.018, 1322.051, 1331.346), stdev = 13.270
[info]   CI (99.9%): [1270.951, 1373.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.008 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1210.078 ±(99.9%) 1157.751 MB/sec [Average]
[info]   (min, avg, max) = (672.236, 1210.078, 1345.983), stdev = 300.664
[info]   CI (99.9%): [52.327, 2367.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   182.717 ±(99.9%) 170.539 B/op [Average]
[info]   (min, avg, max) = (103.499, 182.717, 203.528), stdev = 44.288
[info]   CI (99.9%): [12.178, 353.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2.61% complete, ETA 02:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156091.297 ops/s
[info] # Warmup Iteration   2: 635858.564 ops/s
[info] # Warmup Iteration   3: 643133.795 ops/s
[info] # Warmup Iteration   4: 641925.998 ops/s
[info] # Warmup Iteration   5: 642300.974 ops/s
[info] Iteration   1: 639854.094 ops/s
[info]                  ·gc.alloc.rate:                   1690.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3325.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 642210.748 ops/s
[info]                  ·gc.alloc.rate:                   1696.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4976.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 641492.074 ops/s
[info]                  ·gc.alloc.rate:                   1695.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3323.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 640143.676 ops/s
[info]                  ·gc.alloc.rate:                   1691.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5002.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 641982.111 ops/s
[info]                  ·gc.alloc.rate:                   1696.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3327.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   641136.541 ±(99.9%) 4140.903 ops/s [Average]
[info]   (min, avg, max) = (639854.094, 641136.541, 642210.748), stdev = 1075.379
[info]   CI (99.9%): [636995.638, 645277.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1694.213 ±(99.9%) 10.764 MB/sec [Average]
[info]   (min, avg, max) = (1690.915, 1694.213, 1696.992), stdev = 2.795
[info]   CI (99.9%): [1683.449, 1704.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.112 ±(99.9%) 0.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.255), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.474 ±(99.9%) 1429.376 MB/sec [Average]
[info]   (min, avg, max) = (1351.876, 1625.474, 2034.059), stdev = 371.204
[info]   CI (99.9%): [196.098, 3054.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3991.196 ±(99.9%) 3509.185 B/op [Average]
[info]   (min, avg, max) = (3323.900, 3991.196, 5002.218), stdev = 911.324
[info]   CI (99.9%): [482.011, 7500.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2.81% complete, ETA 02:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1205250.233 ops/s
[info] # Warmup Iteration   2: 2168774.585 ops/s
[info] # Warmup Iteration   3: 2180489.857 ops/s
[info] # Warmup Iteration   4: 2199950.007 ops/s
[info] # Warmup Iteration   5: 2199518.014 ops/s
[info] Iteration   1: 2202284.658 ops/s
[info]                  ·gc.alloc.rate:                   1857.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 959.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2200416.782 ops/s
[info]                  ·gc.alloc.rate:                   1856.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1442.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2201048.690 ops/s
[info]                  ·gc.alloc.rate:                   1856.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1443.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2131037.241 ops/s
[info]                  ·gc.alloc.rate:                   1797.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1493.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2193501.908 ops/s
[info]                  ·gc.alloc.rate:                   1850.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 968.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2185657.856 ±(99.9%) 118310.916 ops/s [Average]
[info]   (min, avg, max) = (2131037.241, 2185657.856, 2202284.658), stdev = 30724.969
[info]   CI (99.9%): [2067346.939, 2303968.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1843.743 ±(99.9%) 100.098 MB/sec [Average]
[info]   (min, avg, max) = (1797.541, 1843.743, 1857.706), stdev = 25.995
[info]   CI (99.9%): [1743.645, 1943.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.039 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.039, 0.074), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1749.487 ±(99.9%) 1418.911 MB/sec [Average]
[info]   (min, avg, max) = (1341.864, 1749.487, 2021.604), stdev = 368.487
[info]   CI (99.9%): [330.576, 3168.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1261.433 ±(99.9%) 1048.528 B/op [Average]
[info]   (min, avg, max) = (959.245, 1261.433, 1493.535), stdev = 272.299
[info]   CI (99.9%): [212.905, 2309.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.01% complete, ETA 02:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.917 ops/s
[info] # Warmup Iteration   2: 17471810.377 ops/s
[info] # Warmup Iteration   3: 18128786.332 ops/s
[info] # Warmup Iteration   4: 18663994.632 ops/s
[info] # Warmup Iteration   5: 18866274.920 ops/s
[info] Iteration   1: 18401647.798 ops/s
[info]                  ·gc.alloc.rate:                   561.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.753 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18587174.058 ops/s
[info]                  ·gc.alloc.rate:                   566.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18693318.364 ops/s
[info]                  ·gc.alloc.rate:                   569.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.699 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 18701247.755 ops/s
[info]                  ·gc.alloc.rate:                   570.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 18681819.940 ops/s
[info]                  ·gc.alloc.rate:      569.632 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   18613041.583 ±(99.9%) 488256.540 ops/s [Average]
[info]   (min, avg, max) = (18401647.798, 18613041.583, 18701247.755), stdev = 126798.673
[info]   CI (99.9%): [18124785.043, 19101298.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   567.535 ±(99.9%) 14.898 MB/sec [Average]
[info]   (min, avg, max) = (561.078, 567.535, 570.228), stdev = 3.869
[info]   CI (99.9%): [552.637, 582.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.511 ±(99.9%) 4.402 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.556), stdev = 1.143
[info]   CI (99.9%): [≈ 0, 4.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.043 ±(99.9%) 0.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.216), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   505.988 ±(99.9%) 1121.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.988, 673.289), stdev = 291.363
[info]   CI (99.9%): [≈ 0, 1627.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   42.807 ±(99.9%) 94.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.807, 57.021), stdev = 24.585
[info]   CI (99.9%): [≈ 0, 137.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.21% complete, ETA 02:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e1277c77/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1861181.926 ops/s
[info] # Warmup Iteration   2: 6268461.511 ops/s
[info] # Warmup Iteration   3: 6370680.350 ops/s
[info] # Warmup Iteration   4: 6397165.050 ops/s
[info] # Warmup Iteration   5: 6292857.249 ops/s
[info] Iteration   1: 6320246.415 ops/s
[info]                  ·gc.alloc.rate:                   1734.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6378107.540 ops/s
[info]                  ·gc.alloc.rate:                   1750.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6371306.994 ops/s
[info]                  ·gc.alloc.rate:                   1748.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 501.936 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6362906.606 ops/s
[info]                  ·gc.alloc.rate:                   1746.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6354869.810 ops/s
[info]                  ·gc.alloc.rate:                   1743.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 504.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6357487.473 ±(99.9%) 86944.477 ops/s [Average]
[info]   (min, avg, max) = (6320246.415, 6357487.473, 6378107.540), stdev = 22579.205
[info]   CI (99.9%): [6270542.996, 6444431.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1744.651 ±(99.9%) 23.011 MB/sec [Average]
[info]   (min, avg, max) = (1734.887, 1744.651, 1750.257), stdev = 5.976
[info]   CI (99.9%): [1721.640, 1767.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.013, 0.021), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1760.494 ±(99.9%) 1430.304 MB/sec [Average]
[info]   (min, avg, max) = (1351.633, 1760.494, 2034.870), stdev = 371.445
[info]   CI (99.9%): [330.190, 3190.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   435.767 ±(99.9%) 350.815 B/op [Average]
[info]   (min, avg, max) = (335.383, 435.767, 504.127), stdev = 91.106
[info]   CI (99.9%): [84.951, 786.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3.41% complete, ETA 02:08:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15536477.872 ops/s
[info] # Warmup Iteration   2: 20438158.266 ops/s
[info] # Warmup Iteration   3: 20812293.980 ops/s
[info] # Warmup Iteration   4: 20690364.021 ops/s
[info] # Warmup Iteration   5: 21358654.418 ops/s
[info] Iteration   1: 21473490.929 ops/s
[info]                  ·gc.alloc.rate:                   654.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.453 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21146551.524 ops/s
[info]                  ·gc.alloc.rate:      644.759 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19110888.824 ops/s
[info]                  ·gc.alloc.rate:                   582.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 21123678.455 ops/s
[info]                  ·gc.alloc.rate:                   644.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21055777.052 ops/s
[info]                  ·gc.alloc.rate:                   641.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.238 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   20782077.357 ±(99.9%) 3650690.748 ops/s [Average]
[info]   (min, avg, max) = (19110888.824, 20782077.357, 21473490.929), stdev = 948072.794
[info]   CI (99.9%): [17131386.608, 24432768.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   633.632 ±(99.9%) 111.354 MB/sec [Average]
[info]   (min, avg, max) = (582.654, 633.632, 654.705), stdev = 28.918
[info]   CI (99.9%): [522.278, 744.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.677 ±(99.9%) 5.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 3.366), stdev = 1.503
[info]   CI (99.9%): [≈ 0, 6.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.050 ±(99.9%) 0.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.247), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.572 ±(99.9%) 1159.327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.572, 674.525), stdev = 301.074
[info]   CI (99.9%): [≈ 0, 1697.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.067 ±(99.9%) 88.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.067, 55.569), stdev = 23.089
[info]   CI (99.9%): [≈ 0, 129.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3.61% complete, ETA 02:08:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16840159.628 ops/s
[info] # Warmup Iteration   2: 21665048.225 ops/s
[info] # Warmup Iteration   3: 21989524.092 ops/s
[info] # Warmup Iteration   4: 22005426.987 ops/s
[info] # Warmup Iteration   5: 22005722.342 ops/s
[info] Iteration   1: 22101717.431 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22064994.949 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21949627.226 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22002313.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22014806.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   22026691.957 ±(99.9%) 225932.117 ops/s [Average]
[info]   (min, avg, max) = (21949627.226, 22026691.957, 22101717.431), stdev = 58673.853
[info]   CI (99.9%): [21800759.840, 22252624.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3.82% complete, ETA 02:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360211.335 ops/s
[info] # Warmup Iteration   2: 1177985.326 ops/s
[info] # Warmup Iteration   3: 1182310.557 ops/s
[info] # Warmup Iteration   4: 1189056.542 ops/s
[info] # Warmup Iteration   5: 1192437.963 ops/s
[info] Iteration   1: 1189036.885 ops/s
[info]                  ·gc.alloc.rate:                   1794.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2685.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1187303.911 ops/s
[info]                  ·gc.alloc.rate:                   1791.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2693.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1190632.297 ops/s
[info]                  ·gc.alloc.rate:                   1796.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1791.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1192430.237 ops/s
[info]                  ·gc.alloc.rate:                   1799.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2685.789 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1186569.067 ops/s
[info]                  ·gc.alloc.rate:                   1791.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2701.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1189194.479 ±(99.9%) 9239.404 ops/s [Average]
[info]   (min, avg, max) = (1186569.067, 1189194.479, 1192430.237), stdev = 2399.444
[info]   CI (99.9%): [1179955.076, 1198433.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1794.904 ±(99.9%) 13.653 MB/sec [Average]
[info]   (min, avg, max) = (1791.242, 1794.904, 1799.789), stdev = 3.546
[info]   CI (99.9%): [1781.251, 1808.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2376.000, 2376.000, 2376.000), stdev = 0.001
[info]   CI (99.9%): [2376.000, 2376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.022, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.077 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.077, 0.083), stdev = 0.012
[info]   CI (99.9%): [0.029, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1897.145 ±(99.9%) 1166.812 MB/sec [Average]
[info]   (min, avg, max) = (1355.125, 1897.145, 2036.916), stdev = 303.017
[info]   CI (99.9%): [730.333, 3063.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2511.559 ±(99.9%) 1549.628 B/op [Average]
[info]   (min, avg, max) = (1791.766, 2511.559, 2701.876), stdev = 402.433
[info]   CI (99.9%): [961.931, 4061.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.02% complete, ETA 02:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314172.312 ops/s
[info] # Warmup Iteration   2: 370417.714 ops/s
[info] # Warmup Iteration   3: 378328.309 ops/s
[info] # Warmup Iteration   4: 372014.577 ops/s
[info] # Warmup Iteration   5: 375525.947 ops/s
[info] Iteration   1: 379328.762 ops/s
[info]                  ·gc.alloc.rate:                   2087.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8367.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 374562.123 ops/s
[info]                  ·gc.alloc.rate:                   2061.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8486.868 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 378386.642 ops/s
[info]                  ·gc.alloc.rate:                   2082.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8418.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 378481.386 ops/s
[info]                  ·gc.alloc.rate:                   2083.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8427.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 374266.355 ops/s
[info]                  ·gc.alloc.rate:                   2059.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8536.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   377005.054 ±(99.9%) 9224.753 ops/s [Average]
[info]   (min, avg, max) = (374266.355, 377005.054, 379328.762), stdev = 2395.639
[info]   CI (99.9%): [367780.301, 386229.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2074.860 ±(99.9%) 50.680 MB/sec [Average]
[info]   (min, avg, max) = (2059.642, 2074.860, 2087.549), stdev = 13.161
[info]   CI (99.9%): [2024.180, 2125.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.225 ±(99.9%) 0.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 0.432), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2022.835 ±(99.9%) 20.129 MB/sec [Average]
[info]   (min, avg, max) = (2016.033, 2022.835, 2029.223), stdev = 5.228
[info]   CI (99.9%): [2002.706, 2042.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8447.078 ±(99.9%) 251.873 B/op [Average]
[info]   (min, avg, max) = (8367.187, 8447.078, 8536.041), stdev = 65.411
[info]   CI (99.9%): [8195.205, 8698.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.22% complete, ETA 02:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231462.599 ops/s
[info] # Warmup Iteration   2: 452547.069 ops/s
[info] # Warmup Iteration   3: 457924.807 ops/s
[info] # Warmup Iteration   4: 459308.749 ops/s
[info] # Warmup Iteration   5: 458340.616 ops/s
[info] Iteration   1: 458538.166 ops/s
[info]                  ·gc.alloc.rate:                   624.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2312.645 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 464335.080 ops/s
[info]                  ·gc.alloc.rate:                   632.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2283.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 468017.131 ops/s
[info]                  ·gc.alloc.rate:                   637.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2267.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 466891.657 ops/s
[info]                  ·gc.alloc.rate:                   635.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2273.499 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 459339.410 ops/s
[info]                  ·gc.alloc.rate:                   625.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2313.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   463424.289 ±(99.9%) 16618.865 ops/s [Average]
[info]   (min, avg, max) = (458538.166, 463424.289, 468017.131), stdev = 4315.866
[info]   CI (99.9%): [446805.424, 480043.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   631.218 ±(99.9%) 22.758 MB/sec [Average]
[info]   (min, avg, max) = (624.573, 631.218, 637.578), stdev = 5.910
[info]   CI (99.9%): [608.460, 653.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.001, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.505 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.312), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.271 ±(99.9%) 1.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 1.072), stdev = 0.451
[info]   CI (99.9%): [≈ 0, 2.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.211 ±(99.9%) 1.837 MB/sec [Average]
[info]   (min, avg, max) = (673.701, 674.211, 674.877), stdev = 0.477
[info]   CI (99.9%): [672.374, 676.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2290.191 ±(99.9%) 82.613 B/op [Average]
[info]   (min, avg, max) = (2267.885, 2290.191, 2313.022), stdev = 21.454
[info]   CI (99.9%): [2207.577, 2372.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.42% complete, ETA 02:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 968962.866 ops/s
[info] # Warmup Iteration   2: 1002619.641 ops/s
[info] # Warmup Iteration   3: 1003276.616 ops/s
[info] # Warmup Iteration   4: 1016517.712 ops/s
[info] # Warmup Iteration   5: 1033607.641 ops/s
[info] Iteration   1: 1033966.841 ops/s
[info]                  ·gc.alloc.rate:                   688.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1027.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1033121.782 ops/s
[info]                  ·gc.alloc.rate:                   687.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1028.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1039540.392 ops/s
[info]                  ·gc.alloc.rate:                   691.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1017.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1009160.894 ops/s
[info]                  ·gc.alloc.rate:                   672.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1048.173 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1029761.454 ops/s
[info]                  ·gc.alloc.rate:                   685.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1026.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1029110.273 ±(99.9%) 45024.039 ops/s [Average]
[info]   (min, avg, max) = (1009160.894, 1029110.273, 1039540.392), stdev = 11692.600
[info]   CI (99.9%): [984086.233, 1074134.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   685.125 ±(99.9%) 29.545 MB/sec [Average]
[info]   (min, avg, max) = (672.046, 685.125, 691.998), stdev = 7.673
[info]   CI (99.9%): [655.580, 714.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.687 ±(99.9%) 5.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.375), stdev = 1.502
[info]   CI (99.9%): [≈ 0, 6.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.047 ±(99.9%) 8.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.047, 5.139), stdev = 2.288
[info]   CI (99.9%): [≈ 0, 9.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.918 ±(99.9%) 6.059 MB/sec [Average]
[info]   (min, avg, max) = (671.281, 672.918, 674.678), stdev = 1.574
[info]   CI (99.9%): [666.859, 678.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1029.428 ±(99.9%) 43.403 B/op [Average]
[info]   (min, avg, max) = (1017.632, 1029.428, 1048.173), stdev = 11.272
[info]   CI (99.9%): [986.025, 1072.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4.62% complete, ETA 02:07:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71237.686 ops/s
[info] # Warmup Iteration   2: 110678.141 ops/s
[info] # Warmup Iteration   3: 110264.593 ops/s
[info] # Warmup Iteration   4: 112158.120 ops/s
[info] # Warmup Iteration   5: 111647.563 ops/s
[info] Iteration   1: 110985.317 ops/s
[info]                  ·gc.alloc.rate:                   3838.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4073.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57778.793 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 112486.955 ops/s
[info]                  ·gc.alloc.rate:                   3890.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57086.601 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 109144.673 ops/s
[info]                  ·gc.alloc.rate:                   3775.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49081.463 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 110868.827 ops/s
[info]                  ·gc.alloc.rate:                   3834.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57985.791 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 109830.980 ops/s
[info]                  ·gc.alloc.rate:                   3798.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48818.814 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   110663.350 ±(99.9%) 4897.528 ops/s [Average]
[info]   (min, avg, max) = (109144.673, 110663.350, 112486.955), stdev = 1271.872
[info]   CI (99.9%): [105765.822, 115560.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3827.474 ±(99.9%) 168.827 MB/sec [Average]
[info]   (min, avg, max) = (3775.247, 3827.474, 3890.355), stdev = 43.844
[info]   CI (99.9%): [3658.646, 3996.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54448.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54448.004, 54448.004, 54448.004), stdev = 0.001
[info]   CI (99.9%): [54448.003, 54448.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.243 ±(99.9%) 0.940 B/op [Average]
[info]   (min, avg, max) = (0.895, 1.243, 1.477), stdev = 0.244
[info]   CI (99.9%): [0.303, 2.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3809.011 ±(99.9%) 1421.961 MB/sec [Average]
[info]   (min, avg, max) = (3403.149, 3809.011, 4083.868), stdev = 369.279
[info]   CI (99.9%): [2387.050, 5230.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54150.292 ±(99.9%) 18327.677 B/op [Average]
[info]   (min, avg, max) = (48818.814, 54150.292, 57985.791), stdev = 4759.639
[info]   CI (99.9%): [35822.616, 72477.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4.82% complete, ETA 02:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 524173.269 ops/s
[info] # Warmup Iteration   2: 602962.383 ops/s
[info] # Warmup Iteration   3: 607038.915 ops/s
[info] # Warmup Iteration   4: 622228.729 ops/s
[info] # Warmup Iteration   5: 619307.801 ops/s
[info] Iteration   1: 609580.577 ops/s
[info]                  ·gc.alloc.rate:                   1865.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3469.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 619486.505 ops/s
[info]                  ·gc.alloc.rate:                   1895.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5127.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 622885.147 ops/s
[info]                  ·gc.alloc.rate:                   1905.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5109.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 614247.035 ops/s
[info]                  ·gc.alloc.rate:                   1879.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5187.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 621968.180 ops/s
[info]                  ·gc.alloc.rate:                   1902.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5132.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   617633.489 ±(99.9%) 21622.024 ops/s [Average]
[info]   (min, avg, max) = (609580.577, 617633.489, 622885.147), stdev = 5615.171
[info]   CI (99.9%): [596011.465, 639255.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1889.583 ±(99.9%) 65.905 MB/sec [Average]
[info]   (min, avg, max) = (1865.064, 1889.583, 1905.658), stdev = 17.115
[info]   CI (99.9%): [1823.678, 1955.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4816.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.001, 4816.001, 4816.001), stdev = 0.001
[info]   CI (99.9%): [4816.001, 4816.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.127 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.211), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1887.056 ±(99.9%) 1169.830 MB/sec [Average]
[info]   (min, avg, max) = (1343.638, 1887.056, 2027.779), stdev = 303.801
[info]   CI (99.9%): [717.226, 3056.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4805.347 ±(99.9%) 2877.581 B/op [Average]
[info]   (min, avg, max) = (3469.566, 4805.347, 5187.751), stdev = 747.299
[info]   CI (99.9%): [1927.765, 7682.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.02% complete, ETA 02:06:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260765.075 ops/s
[info] # Warmup Iteration   2: 326290.782 ops/s
[info] # Warmup Iteration   3: 325667.550 ops/s
[info] # Warmup Iteration   4: 308966.396 ops/s
[info] # Warmup Iteration   5: 321367.395 ops/s
[info] Iteration   1: 314659.804 ops/s
[info]                  ·gc.alloc.rate:                   481.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2558.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 311013.728 ops/s
[info]                  ·gc.alloc.rate:                   475.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2588.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 313685.631 ops/s
[info]                  ·gc.alloc.rate:                   479.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3382.352 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 314891.692 ops/s
[info]                  ·gc.alloc.rate:      481.673 MB/sec
[info]                  ·gc.alloc.rate.norm: 2408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 314370.726 ops/s
[info]                  ·gc.alloc.rate:                   480.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3374.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   313724.316 ±(99.9%) 6089.782 ops/s [Average]
[info]   (min, avg, max) = (311013.728, 313724.316, 314891.692), stdev = 1581.497
[info]   CI (99.9%): [307634.534, 319814.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   479.895 ±(99.9%) 9.253 MB/sec [Average]
[info]   (min, avg, max) = (475.771, 479.895, 481.673), stdev = 2.403
[info]   CI (99.9%): [470.642, 489.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.001, 2408.001, 2408.001), stdev = 0.001
[info]   CI (99.9%): [2408.001, 2408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.703 ±(99.9%) 6.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.703, 3.495), stdev = 1.561
[info]   CI (99.9%): [≈ 0, 6.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.529 ±(99.9%) 30.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.529, 17.541), stdev = 7.833
[info]   CI (99.9%): [≈ 0, 33.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.195 ±(99.9%) 1067.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.195, 674.029), stdev = 277.263
[info]   CI (99.9%): [≈ 0, 1541.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2381.018 ±(99.9%) 5354.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2381.018, 3382.352), stdev = 1390.569
[info]   CI (99.9%): [≈ 0, 7735.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.22% complete, ETA 02:06:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 376045.638 ops/s
[info] # Warmup Iteration   2: 613270.445 ops/s
[info] # Warmup Iteration   3: 595430.931 ops/s
[info] # Warmup Iteration   4: 609927.184 ops/s
[info] # Warmup Iteration   5: 617206.818 ops/s
[info] Iteration   1: 616795.868 ops/s
[info]                  ·gc.alloc.rate:                   454.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1305.438 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 617576.521 ops/s
[info]                  ·gc.alloc.rate:      455.031 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 628556.380 ops/s
[info]                  ·gc.alloc.rate:                   463.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1687.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 635103.952 ops/s
[info]                  ·gc.alloc.rate:                   468.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1669.757 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 635572.929 ops/s
[info]                  ·gc.alloc.rate:      468.351 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   626721.130 ±(99.9%) 35193.333 ops/s [Average]
[info]   (min, avg, max) = (616795.868, 626721.130, 635572.929), stdev = 9139.597
[info]   CI (99.9%): [591527.797, 661914.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   461.804 ±(99.9%) 26.023 MB/sec [Average]
[info]   (min, avg, max) = (454.479, 461.804, 468.351), stdev = 6.758
[info]   CI (99.9%): [435.781, 487.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.291), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.188 ±(99.9%) 1.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.188, 0.730), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   371.742 ±(99.9%) 1331.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.742, 673.672), stdev = 345.750
[info]   CI (99.9%): [≈ 0, 1703.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   932.446 ±(99.9%) 3329.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 932.446, 1687.034), stdev = 864.735
[info]   CI (99.9%): [≈ 0, 4262.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.42% complete, ETA 02:06:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2481603.270 ops/s
[info] # Warmup Iteration   2: 2648512.772 ops/s
[info] # Warmup Iteration   3: 2642196.037 ops/s
[info] # Warmup Iteration   4: 2523854.879 ops/s
[info] # Warmup Iteration   5: 2738612.369 ops/s
[info] Iteration   1: 2736531.132 ops/s
[info]                  ·gc.alloc.rate:                   1265.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 772.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2735879.290 ops/s
[info]                  ·gc.alloc.rate:                   1265.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 772.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2731386.031 ops/s
[info]                  ·gc.alloc.rate:                   1263.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 774.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2735384.425 ops/s
[info]                  ·gc.alloc.rate:                   1264.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 773.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2700092.899 ops/s
[info]                  ·gc.alloc.rate:                   1248.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392.157 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2727854.755 ±(99.9%) 60258.553 ops/s [Average]
[info]   (min, avg, max) = (2700092.899, 2727854.755, 2736531.132), stdev = 15648.955
[info]   CI (99.9%): [2667596.203, 2788113.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1261.506 ±(99.9%) 27.227 MB/sec [Average]
[info]   (min, avg, max) = (1248.973, 1261.506, 1265.371), stdev = 7.071
[info]   CI (99.9%): [1234.279, 1288.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.041 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.060), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1208.996 ±(99.9%) 1154.217 MB/sec [Average]
[info]   (min, avg, max) = (672.794, 1208.996, 1343.816), stdev = 299.746
[info]   CI (99.9%): [54.779, 2363.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   696.941 ±(99.9%) 656.075 B/op [Average]
[info]   (min, avg, max) = (392.157, 696.941, 774.177), stdev = 170.381
[info]   CI (99.9%): [40.866, 1353.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5.62% complete, ETA 02:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2568909.078 ops/s
[info] # Warmup Iteration   2: 2714037.680 ops/s
[info] # Warmup Iteration   3: 2699470.178 ops/s
[info] # Warmup Iteration   4: 2694382.008 ops/s
[info] # Warmup Iteration   5: 2706116.937 ops/s
[info] Iteration   1: 2704391.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2709619.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2705940.506 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2704139.515 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2703492.770 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2705516.727 ±(99.9%) 9485.910 ops/s [Average]
[info]   (min, avg, max) = (2703492.770, 2705516.727, 2709619.751), stdev = 2463.461
[info]   CI (99.9%): [2696030.817, 2715002.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.82% complete, ETA 02:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297954.436 ops/s
[info] # Warmup Iteration   2: 383206.917 ops/s
[info] # Warmup Iteration   3: 385001.664 ops/s
[info] # Warmup Iteration   4: 380831.478 ops/s
[info] # Warmup Iteration   5: 385460.993 ops/s
[info] Iteration   1: 379751.522 ops/s
[info]                  ·gc.alloc.rate:                   546.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2120.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 372829.225 ops/s
[info]                  ·gc.alloc.rate:                   536.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2842.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 373926.353 ops/s
[info]                  ·gc.alloc.rate:      537.755 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 373360.789 ops/s
[info]                  ·gc.alloc.rate:                   536.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2838.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 372949.633 ops/s
[info]                  ·gc.alloc.rate:                   536.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2828.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   374563.504 ±(99.9%) 11289.074 ops/s [Average]
[info]   (min, avg, max) = (372829.225, 374563.504, 379751.522), stdev = 2931.737
[info]   CI (99.9%): [363274.431, 385852.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   538.692 ±(99.9%) 16.140 MB/sec [Average]
[info]   (min, avg, max) = (536.194, 538.692, 546.112), stdev = 4.191
[info]   CI (99.9%): [522.552, 554.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.829 ±(99.9%) 6.889 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.029), stdev = 1.789
[info]   CI (99.9%): [≈ 0, 7.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.497 ±(99.9%) 29.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.497, 17.011), stdev = 7.554
[info]   CI (99.9%): [≈ 0, 32.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   505.626 ±(99.9%) 1120.947 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.626, 673.337), stdev = 291.106
[info]   CI (99.9%): [≈ 0, 1626.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2126.021 ±(99.9%) 4729.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2126.021, 2842.980), stdev = 1228.310
[info]   CI (99.9%): [≈ 0, 6855.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6.02% complete, ETA 02:05:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91548.406 ops/s
[info] # Warmup Iteration   2: 106711.449 ops/s
[info] # Warmup Iteration   3: 106334.311 ops/s
[info] # Warmup Iteration   4: 106338.360 ops/s
[info] # Warmup Iteration   5: 107856.435 ops/s
[info] Iteration   1: 107652.507 ops/s
[info]                  ·gc.alloc.rate:                   1986.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29467.403 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 108022.846 ops/s
[info]                  ·gc.alloc.rate:                   1993.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29416.924 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 107009.628 ops/s
[info]                  ·gc.alloc.rate:                   1975.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29741.834 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 107487.210 ops/s
[info]                  ·gc.alloc.rate:                   1983.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29661.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 107754.589 ops/s
[info]                  ·gc.alloc.rate:                   1988.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29627.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   107585.356 ±(99.9%) 1448.018 ops/s [Average]
[info]   (min, avg, max) = (107009.628, 107585.356, 108022.846), stdev = 376.046
[info]   CI (99.9%): [106137.338, 109033.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1985.726 ±(99.9%) 26.962 MB/sec [Average]
[info]   (min, avg, max) = (1975.029, 1985.726, 1993.946), stdev = 7.002
[info]   CI (99.9%): [1958.764, 2012.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   29056.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29056.004, 29056.004, 29056.004), stdev = 0.001
[info]   CI (99.9%): [29056.003, 29056.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.731 ±(99.9%) 0.649 B/op [Average]
[info]   (min, avg, max) = (0.607, 0.731, 0.918), stdev = 0.169
[info]   CI (99.9%): [0.082, 1.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2021.728 ±(99.9%) 19.719 MB/sec [Average]
[info]   (min, avg, max) = (2015.054, 2021.728, 2027.945), stdev = 5.121
[info]   CI (99.9%): [2002.009, 2041.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   29583.121 ±(99.9%) 525.019 B/op [Average]
[info]   (min, avg, max) = (29416.924, 29583.121, 29741.834), stdev = 136.346
[info]   CI (99.9%): [29058.102, 30108.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.22% complete, ETA 02:05:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17129.160 ops/s
[info] # Warmup Iteration   2: 20951.950 ops/s
[info] # Warmup Iteration   3: 20855.097 ops/s
[info] # Warmup Iteration   4: 20997.510 ops/s
[info] # Warmup Iteration   5: 21089.925 ops/s
[info] Iteration   1: 20980.524 ops/s
[info]                  ·gc.alloc.rate:                   1312.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100725.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20512.413 ops/s
[info]                  ·gc.alloc.rate:                   1283.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103038.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20536.994 ops/s
[info]                  ·gc.alloc.rate:                   1284.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102902.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21067.878 ops/s
[info]                  ·gc.alloc.rate:                   1317.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100409.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21043.299 ops/s
[info]                  ·gc.alloc.rate:                   1316.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100623.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   20828.222 ±(99.9%) 1074.458 ops/s [Average]
[info]   (min, avg, max) = (20512.413, 20828.222, 21067.878), stdev = 279.033
[info]   CI (99.9%): [19753.764, 21902.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1303.033 ±(99.9%) 67.417 MB/sec [Average]
[info]   (min, avg, max) = (1283.358, 1303.033, 1317.977), stdev = 17.508
[info]   CI (99.9%): [1235.615, 1370.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.026 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (98480.019, 98480.026, 98480.049), stdev = 0.013
[info]   CI (99.9%): [98479.976, 98480.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.531 ±(99.9%) 6.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.531, 4.785), stdev = 1.817
[info]   CI (99.9%): [≈ 0, 9.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.332 ±(99.9%) 5.227 MB/sec [Average]
[info]   (min, avg, max) = (1342.274, 1343.332, 1345.501), stdev = 1.358
[info]   CI (99.9%): [1338.105, 1348.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   101539.833 ±(99.9%) 5051.064 B/op [Average]
[info]   (min, avg, max) = (100409.337, 101539.833, 103038.078), stdev = 1311.745
[info]   CI (99.9%): [96488.769, 106590.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.43% complete, ETA 02:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19607.178 ops/s
[info] # Warmup Iteration   2: 32761.364 ops/s
[info] # Warmup Iteration   3: 33336.635 ops/s
[info] # Warmup Iteration   4: 33383.927 ops/s
[info] # Warmup Iteration   5: 32812.818 ops/s
[info] Iteration   1: 33555.872 ops/s
[info]                  ·gc.alloc.rate:                   840.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63251.359 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 33594.813 ops/s
[info]                  ·gc.alloc.rate:                   841.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31612.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 33514.770 ops/s
[info]                  ·gc.alloc.rate:                   839.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31716.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 33609.356 ops/s
[info]                  ·gc.alloc.rate:                   841.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31627.582 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 33674.708 ops/s
[info]                  ·gc.alloc.rate:                   843.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63197.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   33589.904 ±(99.9%) 231.019 ops/s [Average]
[info]   (min, avg, max) = (33514.770, 33589.904, 33674.708), stdev = 59.995
[info]   CI (99.9%): [33358.885, 33820.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   841.215 ±(99.9%) 5.419 MB/sec [Average]
[info]   (min, avg, max) = (839.535, 841.215, 843.224), stdev = 1.407
[info]   CI (99.9%): [835.797, 846.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39424.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (39424.012, 39424.012, 39424.013), stdev = 0.001
[info]   CI (99.9%): [39424.011, 39424.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.780 ±(99.9%) 4.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.780, 1.953), stdev = 1.068
[info]   CI (99.9%): [≈ 0, 4.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   945.024 ±(99.9%) 1423.296 MB/sec [Average]
[info]   (min, avg, max) = (674.668, 945.024, 1351.699), stdev = 369.625
[info]   CI (99.9%): [≈ 0, 2368.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44280.964 ±(99.9%) 66588.702 B/op [Average]
[info]   (min, avg, max) = (31612.377, 44280.964, 63251.359), stdev = 17292.874
[info]   CI (99.9%): [≈ 0, 110869.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.63% complete, ETA 02:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30907.571 ops/s
[info] # Warmup Iteration   2: 33290.954 ops/s
[info] # Warmup Iteration   3: 35177.561 ops/s
[info] # Warmup Iteration   4: 34990.821 ops/s
[info] # Warmup Iteration   5: 35316.871 ops/s
[info] Iteration   1: 35148.291 ops/s
[info]                  ·gc.alloc.rate:                   523.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22905.352 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 35524.603 ops/s
[info]                  ·gc.alloc.rate:      529.016 MB/sec
[info]                  ·gc.alloc.rate.norm: 23448.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35335.091 ops/s
[info]                  ·gc.alloc.rate:                   526.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30053.403 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35334.033 ops/s
[info]                  ·gc.alloc.rate:                   526.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30054.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 35177.830 ops/s
[info]                  ·gc.alloc.rate:                   523.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30068.297 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   35303.969 ±(99.9%) 579.834 ops/s [Average]
[info]   (min, avg, max) = (35148.291, 35303.969, 35524.603), stdev = 150.581
[info]   CI (99.9%): [34724.136, 35883.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   525.809 ±(99.9%) 8.460 MB/sec [Average]
[info]   (min, avg, max) = (523.517, 525.809, 529.016), stdev = 2.197
[info]   CI (99.9%): [517.349, 534.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (23448.011, 23448.012, 23448.013), stdev = 0.001
[info]   CI (99.9%): [23448.010, 23448.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.679 ±(99.9%) 5.756 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.353), stdev = 1.495
[info]   CI (99.9%): [≈ 0, 6.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.249 ±(99.9%) 256.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.249, 149.390), stdev = 66.607
[info]   CI (99.9%): [≈ 0, 286.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.475 ±(99.9%) 1123.300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.475, 674.563), stdev = 291.717
[info]   CI (99.9%): [≈ 0, 1629.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22616.261 ±(99.9%) 50122.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22616.261, 30068.297), stdev = 13016.782
[info]   CI (99.9%): [≈ 0, 72739.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.83% complete, ETA 02:04:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15139.474 ops/s
[info] # Warmup Iteration   2: 26894.212 ops/s
[info] # Warmup Iteration   3: 26910.319 ops/s
[info] # Warmup Iteration   4: 27079.382 ops/s
[info] # Warmup Iteration   5: 26636.002 ops/s
[info] Iteration   1: 27099.029 ops/s
[info]                  ·gc.alloc.rate:                   1436.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              83432.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117782.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27226.645 ops/s
[info]                  ·gc.alloc.rate:                   1443.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              83432.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78242.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 27185.599 ops/s
[info]                  ·gc.alloc.rate:                   1440.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              83432.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78437.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26723.190 ops/s
[info]                  ·gc.alloc.rate:                   1416.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              83432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79872.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26400.952 ops/s
[info]                  ·gc.alloc.rate:                   1399.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              83432.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80879.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   26927.083 ±(99.9%) 1367.548 ops/s [Average]
[info]   (min, avg, max) = (26400.952, 26927.083, 27226.645), stdev = 355.148
[info]   CI (99.9%): [25559.535, 28294.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1427.277 ±(99.9%) 72.701 MB/sec [Average]
[info]   (min, avg, max) = (1399.199, 1427.277, 1443.357), stdev = 18.880
[info]   CI (99.9%): [1354.577, 1499.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83432.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (83432.015, 83432.015, 83432.016), stdev = 0.001
[info]   CI (99.9%): [83432.013, 83432.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.215 ±(99.9%) 4.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.215, 2.452), stdev = 1.218
[info]   CI (99.9%): [≈ 0, 5.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.689 ±(99.9%) 1157.879 MB/sec [Average]
[info]   (min, avg, max) = (1353.583, 1489.689, 2027.589), stdev = 300.698
[info]   CI (99.9%): [331.810, 2647.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87043.048 ±(99.9%) 66300.679 B/op [Average]
[info]   (min, avg, max) = (78242.745, 87043.048, 117782.970), stdev = 17218.076
[info]   CI (99.9%): [20742.369, 153343.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.03% complete, ETA 02:04:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18996.013 ops/s
[info] # Warmup Iteration   2: 31067.700 ops/s
[info] # Warmup Iteration   3: 31106.462 ops/s
[info] # Warmup Iteration   4: 31539.821 ops/s
[info] # Warmup Iteration   5: 31486.881 ops/s
[info] Iteration   1: 31547.069 ops/s
[info]                  ·gc.alloc.rate:                   1731.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66942.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 31194.610 ops/s
[info]                  ·gc.alloc.rate:                   1712.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101604.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 31552.333 ops/s
[info]                  ·gc.alloc.rate:                   1732.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100651.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31549.861 ops/s
[info]                  ·gc.alloc.rate:                   1732.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67184.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31391.158 ops/s
[info]                  ·gc.alloc.rate:                   1723.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101437.931 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   31447.006 ±(99.9%) 604.282 ops/s [Average]
[info]   (min, avg, max) = (31194.610, 31447.006, 31552.333), stdev = 156.930
[info]   CI (99.9%): [30842.724, 32051.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.570 ±(99.9%) 33.024 MB/sec [Average]
[info]   (min, avg, max) = (1712.793, 1726.570, 1732.451), stdev = 8.576
[info]   CI (99.9%): [1693.546, 1759.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   86432.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (86432.013, 86432.013, 86432.014), stdev = 0.001
[info]   CI (99.9%): [86432.012, 86432.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.126 ±(99.9%) 9.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.126, 6.262), stdev = 2.551
[info]   CI (99.9%): [≈ 0, 12.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1748.298 ±(99.9%) 1421.513 MB/sec [Average]
[info]   (min, avg, max) = (1341.310, 1748.298, 2022.715), stdev = 369.163
[info]   CI (99.9%): [326.784, 3169.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87564.195 ±(99.9%) 72077.030 B/op [Average]
[info]   (min, avg, max) = (66942.049, 87564.195, 101604.639), stdev = 18718.176
[info]   CI (99.9%): [15487.165, 159641.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.23% complete, ETA 02:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13627.746 ops/s
[info] # Warmup Iteration   2: 28686.015 ops/s
[info] # Warmup Iteration   3: 28985.823 ops/s
[info] # Warmup Iteration   4: 29272.901 ops/s
[info] # Warmup Iteration   5: 29389.493 ops/s
[info] Iteration   1: 29277.722 ops/s
[info]                  ·gc.alloc.rate:                   1575.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109064.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 29469.713 ops/s
[info]                  ·gc.alloc.rate:                   1585.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72306.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 29449.994 ops/s
[info]                  ·gc.alloc.rate:                   1584.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72406.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29432.364 ops/s
[info]                  ·gc.alloc.rate:                   1583.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108761.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 29108.175 ops/s
[info]                  ·gc.alloc.rate:                   1566.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73395.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   29347.594 ±(99.9%) 592.762 ops/s [Average]
[info]   (min, avg, max) = (29108.175, 29347.594, 29469.713), stdev = 153.938
[info]   CI (99.9%): [28754.831, 29940.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1579.310 ±(99.9%) 31.468 MB/sec [Average]
[info]   (min, avg, max) = (1566.635, 1579.310, 1585.775), stdev = 8.172
[info]   CI (99.9%): [1547.841, 1610.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84720.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (84720.014, 84720.014, 84720.015), stdev = 0.001
[info]   CI (99.9%): [84720.012, 84720.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.785 ±(99.9%) 6.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.785, 4.476), stdev = 1.698
[info]   CI (99.9%): [≈ 0, 8.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1625.333 ±(99.9%) 1425.356 MB/sec [Average]
[info]   (min, avg, max) = (1353.419, 1625.333, 2033.378), stdev = 370.160
[info]   CI (99.9%): [199.978, 3050.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   87187.000 ±(99.9%) 76389.012 B/op [Average]
[info]   (min, avg, max) = (72306.386, 87187.000, 109064.794), stdev = 19837.984
[info]   CI (99.9%): [10797.987, 163576.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.43% complete, ETA 02:03:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25510.024 ops/s
[info] # Warmup Iteration   2: 33071.825 ops/s
[info] # Warmup Iteration   3: 32963.718 ops/s
[info] # Warmup Iteration   4: 33082.664 ops/s
[info] # Warmup Iteration   5: 33078.980 ops/s
[info] Iteration   1: 33752.640 ops/s
[info]                  ·gc.alloc.rate:                   1709.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93952.857 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 34275.184 ops/s
[info]                  ·gc.alloc.rate:                   1736.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61707.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 34095.127 ops/s
[info]                  ·gc.alloc.rate:                   1727.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93210.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34198.815 ops/s
[info]                  ·gc.alloc.rate:                   1732.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62045.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 34246.009 ops/s
[info]                  ·gc.alloc.rate:                   1734.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93041.797 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   34113.555 ±(99.9%) 820.324 ops/s [Average]
[info]   (min, avg, max) = (33752.640, 34113.555, 34275.184), stdev = 213.035
[info]   CI (99.9%): [33293.231, 34933.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1728.035 ±(99.9%) 41.105 MB/sec [Average]
[info]   (min, avg, max) = (1709.986, 1728.035, 1736.257), stdev = 10.675
[info]   CI (99.9%): [1686.930, 1769.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79736.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (79736.012, 79736.012, 79736.013), stdev = 0.001
[info]   CI (99.9%): [79736.010, 79736.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.312 ±(99.9%) 8.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.312, 4.853), stdev = 2.223
[info]   CI (99.9%): [≈ 0, 10.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1749.890 ±(99.9%) 1420.348 MB/sec [Average]
[info]   (min, avg, max) = (1343.694, 1749.890, 2024.036), stdev = 368.860
[info]   CI (99.9%): [329.543, 3170.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80791.656 ±(99.9%) 66503.920 B/op [Average]
[info]   (min, avg, max) = (61707.922, 80791.656, 93952.857), stdev = 17270.857
[info]   CI (99.9%): [14287.736, 147295.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7.63% complete, ETA 02:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26069.860 ops/s
[info] # Warmup Iteration   2: 34601.620 ops/s
[info] # Warmup Iteration   3: 34093.930 ops/s
[info] # Warmup Iteration   4: 34619.600 ops/s
[info] # Warmup Iteration   5: 33647.755 ops/s
[info] Iteration   1: 34880.412 ops/s
[info]                  ·gc.alloc.rate:                   1665.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60605.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34875.212 ops/s
[info]                  ·gc.alloc.rate:                   1666.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90981.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 33738.341 ops/s
[info]                  ·gc.alloc.rate:                   1611.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62768.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34891.396 ops/s
[info]                  ·gc.alloc.rate:                   1666.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91199.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35013.429 ops/s
[info]                  ·gc.alloc.rate:                   1672.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60659.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   34679.758 ±(99.9%) 2038.349 ops/s [Average]
[info]   (min, avg, max) = (33738.341, 34679.758, 35013.429), stdev = 529.353
[info]   CI (99.9%): [32641.409, 36718.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1656.487 ±(99.9%) 97.370 MB/sec [Average]
[info]   (min, avg, max) = (1611.496, 1656.487, 1672.261), stdev = 25.287
[info]   CI (99.9%): [1559.116, 1753.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   75192.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75192.012, 75192.012, 75192.012), stdev = 0.001
[info]   CI (99.9%): [75192.011, 75192.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.503 ±(99.9%) 6.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.503, 3.756), stdev = 1.571
[info]   CI (99.9%): [≈ 0, 7.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1614.890 ±(99.9%) 1419.489 MB/sec [Average]
[info]   (min, avg, max) = (1342.755, 1614.890, 2021.204), stdev = 368.637
[info]   CI (99.9%): [195.401, 3034.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   73242.756 ±(99.9%) 62827.302 B/op [Average]
[info]   (min, avg, max) = (60605.162, 73242.756, 91199.463), stdev = 16316.051
[info]   CI (99.9%): [10415.455, 136070.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.83% complete, ETA 02:03:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5049.163 ops/s
[info] # Warmup Iteration   2: 8104.774 ops/s
[info] # Warmup Iteration   3: 8475.867 ops/s
[info] # Warmup Iteration   4: 8513.782 ops/s
[info] # Warmup Iteration   5: 8584.727 ops/s
[info] Iteration   1: 8589.669 ops/s
[info]                  ·gc.alloc.rate:                   1106.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122773.214 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8594.653 ops/s
[info]                  ·gc.alloc.rate:                   1107.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245159.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8616.761 ops/s
[info]                  ·gc.alloc.rate:                   1110.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122266.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8734.408 ops/s
[info]                  ·gc.alloc.rate:                   1125.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 241231.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8645.419 ops/s
[info]                  ·gc.alloc.rate:                   1114.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243806.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8636.182 ±(99.9%) 227.799 ops/s [Average]
[info]   (min, avg, max) = (8589.669, 8636.182, 8734.408), stdev = 59.159
[info]   CI (99.9%): [8408.382, 8863.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1112.994 ±(99.9%) 29.510 MB/sec [Average]
[info]   (min, avg, max) = (1106.991, 1112.994, 1125.686), stdev = 7.664
[info]   CI (99.9%): [1083.485, 1142.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202880.049 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (202880.047, 202880.049, 202880.051), stdev = 0.002
[info]   CI (99.9%): [202880.041, 202880.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.023 ±(99.9%) 12.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.023, 7.501), stdev = 3.145
[info]   CI (99.9%): [≈ 0, 15.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.007 ±(99.9%) 1411.142 MB/sec [Average]
[info]   (min, avg, max) = (669.223, 1071.007, 1339.078), stdev = 366.469
[info]   CI (99.9%): [≈ 0, 2482.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   195047.618 ±(99.9%) 255003.332 B/op [Average]
[info]   (min, avg, max) = (122266.954, 195047.618, 245159.679), stdev = 66223.555
[info]   CI (99.9%): [≈ 0, 450050.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.03% complete, ETA 02:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15935.969 ops/s
[info] # Warmup Iteration   2: 21422.160 ops/s
[info] # Warmup Iteration   3: 21176.875 ops/s
[info] # Warmup Iteration   4: 21513.201 ops/s
[info] # Warmup Iteration   5: 21490.749 ops/s
[info] Iteration   1: 20935.028 ops/s
[info]                  ·gc.alloc.rate:                   1598.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100946.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20957.502 ops/s
[info]                  ·gc.alloc.rate:                   1601.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100890.989 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21018.772 ops/s
[info]                  ·gc.alloc.rate:                   1605.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151071.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21553.701 ops/s
[info]                  ·gc.alloc.rate:                   1646.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98340.476 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21231.501 ops/s
[info]                  ·gc.alloc.rate:                   1621.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150018.748 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   21139.301 ±(99.9%) 999.563 ops/s [Average]
[info]   (min, avg, max) = (20935.028, 21139.301, 21553.701), stdev = 259.583
[info]   CI (99.9%): [20139.738, 22138.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1614.672 ±(99.9%) 76.212 MB/sec [Average]
[info]   (min, avg, max) = (1598.793, 1614.672, 1646.302), stdev = 19.792
[info]   CI (99.9%): [1538.460, 1690.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120240.020 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (120240.019, 120240.020, 120240.021), stdev = 0.001
[info]   CI (99.9%): [120240.017, 120240.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.181 ±(99.9%) 10.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.181, 6.234), stdev = 2.610
[info]   CI (99.9%): [≈ 0, 12.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.514 ±(99.9%) 1425.857 MB/sec [Average]
[info]   (min, avg, max) = (1342.259, 1614.514, 2023.226), stdev = 370.290
[info]   CI (99.9%): [188.658, 3040.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   120253.815 ±(99.9%) 106565.812 B/op [Average]
[info]   (min, avg, max) = (98340.476, 120253.815, 151071.951), stdev = 27674.803
[info]   CI (99.9%): [13688.003, 226819.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.23% complete, ETA 02:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26334.017 ops/s
[info] # Warmup Iteration   2: 41428.001 ops/s
[info] # Warmup Iteration   3: 41515.014 ops/s
[info] # Warmup Iteration   4: 42256.045 ops/s
[info] # Warmup Iteration   5: 40984.337 ops/s
[info] Iteration   1: 42202.918 ops/s
[info]                  ·gc.alloc.rate:                   1039.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25163.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 42363.762 ops/s
[info]                  ·gc.alloc.rate:                   1043.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50186.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 42193.859 ops/s
[info]                  ·gc.alloc.rate:                   1039.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25218.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 42172.338 ops/s
[info]                  ·gc.alloc.rate:                   1039.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50484.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42147.261 ops/s
[info]                  ·gc.alloc.rate:                   1038.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50564.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   42216.028 ±(99.9%) 328.585 ops/s [Average]
[info]   (min, avg, max) = (42147.261, 42216.028, 42363.762), stdev = 85.333
[info]   CI (99.9%): [41887.443, 42544.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1040.284 ±(99.9%) 7.884 MB/sec [Average]
[info]   (min, avg, max) = (1038.720, 1040.284, 1043.859), stdev = 2.047
[info]   CI (99.9%): [1032.400, 1048.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38792.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38792.010, 38792.010, 38792.010), stdev = 0.001
[info]   CI (99.9%): [38792.008, 38792.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.085 ±(99.9%) 4.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.085, 2.330), stdev = 1.175
[info]   CI (99.9%): [≈ 0, 5.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.477 ±(99.9%) 1428.085 MB/sec [Average]
[info]   (min, avg, max) = (674.519, 1081.477, 1353.952), stdev = 370.869
[info]   CI (99.9%): [≈ 0, 2509.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40323.497 ±(99.9%) 53197.189 B/op [Average]
[info]   (min, avg, max) = (25163.042, 40323.497, 50564.648), stdev = 13815.141
[info]   CI (99.9%): [≈ 0, 93520.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.43% complete, ETA 02:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50391.863 ops/s
[info] # Warmup Iteration   2: 58259.818 ops/s
[info] # Warmup Iteration   3: 57917.782 ops/s
[info] # Warmup Iteration   4: 58405.025 ops/s
[info] # Warmup Iteration   5: 58346.752 ops/s
[info] Iteration   1: 58586.878 ops/s
[info]                  ·gc.alloc.rate:                   756.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18125.789 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 58758.204 ops/s
[info]                  ·gc.alloc.rate:                   759.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18002.913 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 58288.520 ops/s
[info]                  ·gc.alloc.rate:                   752.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18146.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 58335.949 ops/s
[info]                  ·gc.alloc.rate:                   753.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18113.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 58326.311 ops/s
[info]                  ·gc.alloc.rate:                   753.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18117.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   58459.172 ±(99.9%) 788.412 ops/s [Average]
[info]   (min, avg, max) = (58288.520, 58459.172, 58758.204), stdev = 204.748
[info]   CI (99.9%): [57670.761, 59247.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   755.178 ±(99.9%) 10.262 MB/sec [Average]
[info]   (min, avg, max) = (752.967, 755.178, 759.172), stdev = 2.665
[info]   CI (99.9%): [744.916, 765.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.561 ±(99.9%) 3.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.561, 2.246), stdev = 0.973
[info]   CI (99.9%): [≈ 0, 4.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.184 ±(99.9%) 5.033 MB/sec [Average]
[info]   (min, avg, max) = (671.243, 672.184, 674.428), stdev = 1.307
[info]   CI (99.9%): [667.152, 677.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18101.223 ±(99.9%) 217.230 B/op [Average]
[info]   (min, avg, max) = (18002.913, 18101.223, 18146.494), stdev = 56.414
[info]   CI (99.9%): [17883.993, 18318.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.63% complete, ETA 02:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15043.127 ops/s
[info] # Warmup Iteration   2: 32892.049 ops/s
[info] # Warmup Iteration   3: 33098.334 ops/s
[info] # Warmup Iteration   4: 32988.390 ops/s
[info] # Warmup Iteration   5: 33086.158 ops/s
[info] Iteration   1: 33101.429 ops/s
[info]                  ·gc.alloc.rate:                   2210.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128807.496 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33009.816 ops/s
[info]                  ·gc.alloc.rate:                   2204.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97009.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 33072.641 ops/s
[info]                  ·gc.alloc.rate:                   2208.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96879.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 33020.661 ops/s
[info]                  ·gc.alloc.rate:                   2205.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97146.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32993.637 ops/s
[info]                  ·gc.alloc.rate:                   2203.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129697.813 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   33039.637 ±(99.9%) 175.119 ops/s [Average]
[info]   (min, avg, max) = (32993.637, 33039.637, 33101.429), stdev = 45.478
[info]   CI (99.9%): [32864.518, 33214.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2206.645 ±(99.9%) 11.718 MB/sec [Average]
[info]   (min, avg, max) = (2203.654, 2206.645, 2210.722), stdev = 3.043
[info]   CI (99.9%): [2194.928, 2218.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105144.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (105144.012, 105144.013, 105144.013), stdev = 0.001
[info]   CI (99.9%): [105144.011, 105144.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.776 ±(99.9%) 5.669 B/op [Average]
[info]   (min, avg, max) = (0.993, 2.776, 4.962), stdev = 1.472
[info]   CI (99.9%): [≈ 0, 8.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2306.690 ±(99.9%) 1429.233 MB/sec [Average]
[info]   (min, avg, max) = (2033.897, 2306.690, 2718.263), stdev = 371.167
[info]   CI (99.9%): [877.457, 3735.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   109908.195 ±(99.9%) 68010.272 B/op [Average]
[info]   (min, avg, max) = (96879.649, 109908.195, 129697.813), stdev = 17662.052
[info]   CI (99.9%): [41897.923, 177918.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.84% complete, ETA 02:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18445.549 ops/s
[info] # Warmup Iteration   2: 33299.385 ops/s
[info] # Warmup Iteration   3: 33445.800 ops/s
[info] # Warmup Iteration   4: 33245.851 ops/s
[info] # Warmup Iteration   5: 33314.972 ops/s
[info] Iteration   1: 33478.763 ops/s
[info]                  ·gc.alloc.rate:                   1895.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63643.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33311.523 ops/s
[info]                  ·gc.alloc.rate:                   1886.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96033.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 32663.471 ops/s
[info]                  ·gc.alloc.rate:                   1849.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98047.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32322.766 ops/s
[info]                  ·gc.alloc.rate:                   1831.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99175.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 32596.387 ops/s
[info]                  ·gc.alloc.rate:                   1845.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65604.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   32874.582 ±(99.9%) 1908.316 ops/s [Average]
[info]   (min, avg, max) = (32322.766, 32874.582, 33478.763), stdev = 495.584
[info]   CI (99.9%): [30966.266, 34782.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1861.690 ±(99.9%) 107.072 MB/sec [Average]
[info]   (min, avg, max) = (1831.001, 1861.690, 1895.623), stdev = 27.806
[info]   CI (99.9%): [1754.618, 1968.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (89144.012, 89144.013, 89144.014), stdev = 0.001
[info]   CI (99.9%): [89144.010, 89144.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.986 ±(99.9%) 2.624 B/op [Average]
[info]   (min, avg, max) = (2.010, 2.986, 3.934), stdev = 0.681
[info]   CI (99.9%): [0.362, 5.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1763.062 ±(99.9%) 1431.222 MB/sec [Average]
[info]   (min, avg, max) = (1353.362, 1763.062, 2037.047), stdev = 371.684
[info]   CI (99.9%): [331.840, 3194.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   84500.778 ±(99.9%) 70055.109 B/op [Average]
[info]   (min, avg, max) = (63643.525, 84500.778, 99175.597), stdev = 18193.089
[info]   CI (99.9%): [14445.669, 154555.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.04% complete, ETA 02:01:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41796.825 ops/s
[info] # Warmup Iteration   2: 48521.826 ops/s
[info] # Warmup Iteration   3: 48964.604 ops/s
[info] # Warmup Iteration   4: 47649.360 ops/s
[info] # Warmup Iteration   5: 47698.472 ops/s
[info] Iteration   1: 47888.261 ops/s
[info]                  ·gc.alloc.rate:                   1839.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44164.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 48032.064 ops/s
[info]                  ·gc.alloc.rate:                   1845.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66134.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 48487.847 ops/s
[info]                  ·gc.alloc.rate:                   1862.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65629.239 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 49209.628 ops/s
[info]                  ·gc.alloc.rate:                   1890.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64750.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48449.568 ops/s
[info]                  ·gc.alloc.rate:                   1861.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43904.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   48413.473 ±(99.9%) 1984.126 ops/s [Average]
[info]   (min, avg, max) = (47888.261, 48413.473, 49209.628), stdev = 515.271
[info]   CI (99.9%): [46429.347, 50397.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1859.905 ±(99.9%) 76.544 MB/sec [Average]
[info]   (min, avg, max) = (1839.515, 1859.905, 1890.558), stdev = 19.878
[info]   CI (99.9%): [1783.361, 1936.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (60480.008, 60480.009, 60480.009), stdev = 0.001
[info]   CI (99.9%): [60480.007, 60480.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.626 ±(99.9%) 5.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.626, 3.410), stdev = 1.330
[info]   CI (99.9%): [≈ 0, 6.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1751.551 ±(99.9%) 1421.289 MB/sec [Average]
[info]   (min, avg, max) = (1343.261, 1751.551, 2024.048), stdev = 369.104
[info]   CI (99.9%): [330.263, 3172.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   56916.591 ±(99.9%) 45324.964 B/op [Average]
[info]   (min, avg, max) = (43904.346, 56916.591, 66134.870), stdev = 11770.749
[info]   CI (99.9%): [11591.627, 102241.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9.24% complete, ETA 02:01:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42501.673 ops/s
[info] # Warmup Iteration   2: 48040.553 ops/s
[info] # Warmup Iteration   3: 48368.053 ops/s
[info] # Warmup Iteration   4: 47385.195 ops/s
[info] # Warmup Iteration   5: 47573.448 ops/s
[info] Iteration   1: 48017.083 ops/s
[info]                  ·gc.alloc.rate:                   1917.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66074.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 48462.034 ops/s
[info]                  ·gc.alloc.rate:                   1935.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65580.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 48483.372 ops/s
[info]                  ·gc.alloc.rate:                   1936.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65656.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 47699.522 ops/s
[info]                  ·gc.alloc.rate:                   1904.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44549.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 48482.138 ops/s
[info]                  ·gc.alloc.rate:                   1935.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65841.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   48228.830 ±(99.9%) 1372.721 ops/s [Average]
[info]   (min, avg, max) = (47699.522, 48228.830, 48483.372), stdev = 356.491
[info]   CI (99.9%): [46856.109, 49601.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1925.831 ±(99.9%) 55.014 MB/sec [Average]
[info]   (min, avg, max) = (1904.422, 1925.831, 1936.207), stdev = 14.287
[info]   CI (99.9%): [1870.817, 1980.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   62856.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (62856.008, 62856.008, 62856.009), stdev = 0.001
[info]   CI (99.9%): [62856.008, 62856.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2.173 ±(99.9%) 2.879 B/op [Average]
[info]   (min, avg, max) = (1.374, 2.173, 3.411), stdev = 0.748
[info]   CI (99.9%): [≈ 0, 5.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1886.959 ±(99.9%) 1156.456 MB/sec [Average]
[info]   (min, avg, max) = (1349.773, 1886.959, 2027.671), stdev = 300.328
[info]   CI (99.9%): [730.503, 3043.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   61540.588 ±(99.9%) 36581.663 B/op [Average]
[info]   (min, avg, max) = (44549.645, 61540.588, 66074.981), stdev = 9500.142
[info]   CI (99.9%): [24958.925, 98122.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9.44% complete, ETA 02:01:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309340.748 ops/s
[info] # Warmup Iteration   2: 378887.521 ops/s
[info] # Warmup Iteration   3: 381339.815 ops/s
[info] # Warmup Iteration   4: 388958.086 ops/s
[info] # Warmup Iteration   5: 387485.972 ops/s
[info] Iteration   1: 384733.917 ops/s
[info]                  ·gc.alloc.rate:                   1944.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8245.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 387052.126 ops/s
[info]                  ·gc.alloc.rate:                   1957.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8210.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 387856.404 ops/s
[info]                  ·gc.alloc.rate:                   1961.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8206.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 384644.510 ops/s
[info]                  ·gc.alloc.rate:                   1944.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8289.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 388002.762 ops/s
[info]                  ·gc.alloc.rate:                   1961.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5485.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   386457.944 ±(99.9%) 6372.792 ops/s [Average]
[info]   (min, avg, max) = (384644.510, 386457.944, 388002.762), stdev = 1654.994
[info]   CI (99.9%): [380085.152, 392830.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1954.005 ±(99.9%) 32.556 MB/sec [Average]
[info]   (min, avg, max) = (1944.945, 1954.005, 1961.869), stdev = 8.455
[info]   CI (99.9%): [1921.449, 1986.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.238 ±(99.9%) 0.276 B/op [Average]
[info]   (min, avg, max) = (0.169, 0.238, 0.341), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1886.517 ±(99.9%) 1150.952 MB/sec [Average]
[info]   (min, avg, max) = (1351.877, 1886.517, 2025.449), stdev = 298.898
[info]   CI (99.9%): [735.565, 3037.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7687.380 ±(99.9%) 4742.444 B/op [Average]
[info]   (min, avg, max) = (5485.046, 7687.380, 8289.478), stdev = 1231.598
[info]   CI (99.9%): [2944.937, 12429.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9.64% complete, ETA 02:00:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143256.588 ops/s
[info] # Warmup Iteration   2: 1495084.827 ops/s
[info] # Warmup Iteration   3: 1546081.996 ops/s
[info] # Warmup Iteration   4: 1557256.130 ops/s
[info] # Warmup Iteration   5: 1561174.357 ops/s
[info] Iteration   1: 1556512.790 ops/s
[info]                  ·gc.alloc.rate:                   490.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517.313 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1565946.718 ops/s
[info]                  ·gc.alloc.rate:      493.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1554780.706 ops/s
[info]                  ·gc.alloc.rate:                   489.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 682.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1552010.830 ops/s
[info]                  ·gc.alloc.rate:                   489.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 683.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1559704.999 ops/s
[info]                  ·gc.alloc.rate:      491.407 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1557791.208 ±(99.9%) 20582.510 ops/s [Average]
[info]   (min, avg, max) = (1552010.830, 1557791.208, 1565946.718), stdev = 5345.213
[info]   CI (99.9%): [1537208.698, 1578373.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   490.802 ±(99.9%) 6.588 MB/sec [Average]
[info]   (min, avg, max) = (489.008, 490.802, 493.442), stdev = 1.711
[info]   CI (99.9%): [484.214, 497.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.506 ±(99.9%) 4.312 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.509), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 4.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.512 ±(99.9%) 4.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.541), stdev = 1.134
[info]   CI (99.9%): [≈ 0, 4.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   371.710 ±(99.9%) 1331.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.710, 673.614), stdev = 345.726
[info]   CI (99.9%): [≈ 0, 1702.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   376.516 ±(99.9%) 1348.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 376.516, 683.246), stdev = 350.274
[info]   CI (99.9%): [≈ 0, 1725.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 7.000), stdev = 2.881
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.84% complete, ETA 02:00:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424269.019 ops/s
[info] # Warmup Iteration   2: 640653.822 ops/s
[info] # Warmup Iteration   3: 675853.314 ops/s
[info] # Warmup Iteration   4: 676851.354 ops/s
[info] # Warmup Iteration   5: 679044.379 ops/s
[info] Iteration   1: 680270.878 ops/s
[info]                  ·gc.alloc.rate:      563.350 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 678975.962 ops/s
[info]                  ·gc.alloc.rate:                   562.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1561.898 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 677990.400 ops/s
[info]                  ·gc.alloc.rate:                   561.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1564.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 667578.769 ops/s
[info]                  ·gc.alloc.rate:                   552.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1591.614 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 665456.167 ops/s
[info]                  ·gc.alloc.rate:                   551.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1596.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   674054.435 ±(99.9%) 26831.962 ops/s [Average]
[info]   (min, avg, max) = (665456.167, 674054.435, 680270.878), stdev = 6968.175
[info]   CI (99.9%): [647222.473, 700886.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   558.300 ±(99.9%) 22.188 MB/sec [Average]
[info]   (min, avg, max) = (551.173, 558.300, 563.350), stdev = 5.762
[info]   CI (99.9%): [536.111, 580.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.107 ±(99.9%) 0.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.107, 0.241), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.408 ±(99.9%) 1161.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.408, 674.926), stdev = 301.539
[info]   CI (99.9%): [≈ 0, 1700.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1262.845 ±(99.9%) 2719.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1262.845, 1596.640), stdev = 706.126
[info]   CI (99.9%): [≈ 0, 3981.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.04% complete, ETA 02:00:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1686756.356 ops/s
[info] # Warmup Iteration   2: 1789516.931 ops/s
[info] # Warmup Iteration   3: 1788108.832 ops/s
[info] # Warmup Iteration   4: 1799605.976 ops/s
[info] # Warmup Iteration   5: 1799235.980 ops/s
[info] Iteration   1: 1800064.893 ops/s
[info]                  ·gc.alloc.rate:                   347.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447.292 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1804783.164 ops/s
[info]                  ·gc.alloc.rate:      348.526 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1803006.507 ops/s
[info]                  ·gc.alloc.rate:                   348.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446.560 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1803822.953 ops/s
[info]                  ·gc.alloc.rate:                   348.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446.349 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1809296.465 ops/s
[info]                  ·gc.alloc.rate:      349.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1804194.796 ±(99.9%) 12912.524 ops/s [Average]
[info]   (min, avg, max) = (1800064.893, 1804194.796, 1809296.465), stdev = 3353.342
[info]   CI (99.9%): [1791282.272, 1817107.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   348.400 ±(99.9%) 2.540 MB/sec [Average]
[info]   (min, avg, max) = (347.560, 348.400, 349.386), stdev = 0.660
[info]   CI (99.9%): [345.860, 350.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.860 ±(99.9%) 1078.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.860, 511.480), stdev = 280.124
[info]   CI (99.9%): [≈ 0, 1385.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   268.040 ±(99.9%) 942.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 268.040, 447.292), stdev = 244.686
[info]   CI (99.9%): [≈ 0, 1210.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10.24% complete, ETA 02:00:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63205.456 ops/s
[info] # Warmup Iteration   2: 101417.336 ops/s
[info] # Warmup Iteration   3: 102093.869 ops/s
[info] # Warmup Iteration   4: 101856.733 ops/s
[info] # Warmup Iteration   5: 105342.367 ops/s
[info] Iteration   1: 105042.563 ops/s
[info]                  ·gc.alloc.rate:                   3814.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61130.837 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 105297.147 ops/s
[info]                  ·gc.alloc.rate:                   3824.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50863.761 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 103253.180 ops/s
[info]                  ·gc.alloc.rate:                   3750.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62257.265 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 102318.254 ops/s
[info]                  ·gc.alloc.rate:                   3716.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52396.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 104949.539 ops/s
[info]                  ·gc.alloc.rate:                   3811.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61310.187 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   104172.136 ±(99.9%) 5060.707 ops/s [Average]
[info]   (min, avg, max) = (102318.254, 104172.136, 105297.147), stdev = 1314.250
[info]   CI (99.9%): [99111.429, 109232.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3783.434 ±(99.9%) 182.873 MB/sec [Average]
[info]   (min, avg, max) = (3716.227, 3783.434, 3824.063), stdev = 47.492
[info]   CI (99.9%): [3600.561, 3966.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.003, 57176.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.128 ±(99.9%) 1.810 B/op [Average]
[info]   (min, avg, max) = (0.320, 1.128, 1.556), stdev = 0.470
[info]   CI (99.9%): [≈ 0, 2.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3811.417 ±(99.9%) 1433.187 MB/sec [Average]
[info]   (min, avg, max) = (3401.885, 3811.417, 4087.130), stdev = 372.194
[info]   CI (99.9%): [2378.230, 5244.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   57591.613 ±(99.9%) 21124.252 B/op [Average]
[info]   (min, avg, max) = (50863.761, 57591.613, 62257.265), stdev = 5485.901
[info]   CI (99.9%): [36467.361, 78715.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10.44% complete, ETA 01:59:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 568080.979 ops/s
[info] # Warmup Iteration   2: 643338.553 ops/s
[info] # Warmup Iteration   3: 630927.149 ops/s
[info] # Warmup Iteration   4: 642329.379 ops/s
[info] # Warmup Iteration   5: 642294.399 ops/s
[info] Iteration   1: 636356.507 ops/s
[info]                  ·gc.alloc.rate:                   1662.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4983.429 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 641933.341 ops/s
[info]                  ·gc.alloc.rate:                   1677.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3294.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 637007.708 ops/s
[info]                  ·gc.alloc.rate:                   1663.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4990.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 642719.858 ops/s
[info]                  ·gc.alloc.rate:                   1678.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3301.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 639916.890 ops/s
[info]                  ·gc.alloc.rate:                   1671.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4979.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   639586.861 ±(99.9%) 10979.025 ops/s [Average]
[info]   (min, avg, max) = (636356.507, 639586.861, 642719.858), stdev = 2851.218
[info]   CI (99.9%): [628607.836, 650565.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1670.857 ±(99.9%) 28.734 MB/sec [Average]
[info]   (min, avg, max) = (1662.555, 1670.857, 1678.706), stdev = 7.462
[info]   CI (99.9%): [1642.123, 1699.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4112.001, 4112.001, 4112.001), stdev = 0.001
[info]   CI (99.9%): [4112.001, 4112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.022, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.143 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.143, 0.154), stdev = 0.023
[info]   CI (99.9%): [0.056, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1750.135 ±(99.9%) 1420.832 MB/sec [Average]
[info]   (min, avg, max) = (1344.107, 1750.135, 2024.358), stdev = 368.986
[info]   CI (99.9%): [329.303, 3170.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4310.020 ±(99.9%) 3556.833 B/op [Average]
[info]   (min, avg, max) = (3294.913, 4310.020, 4990.852), stdev = 923.698
[info]   CI (99.9%): [753.186, 7866.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.64% complete, ETA 01:59:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247934.538 ops/s
[info] # Warmup Iteration   2: 309516.810 ops/s
[info] # Warmup Iteration   3: 320921.253 ops/s
[info] # Warmup Iteration   4: 323173.300 ops/s
[info] # Warmup Iteration   5: 315108.598 ops/s
[info] Iteration   1: 323718.916 ops/s
[info]                  ·gc.alloc.rate:                   498.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2487.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 324428.311 ops/s
[info]                  ·gc.alloc.rate:                   499.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2481.783 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 323868.641 ops/s
[info]                  ·gc.alloc.rate:                   498.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3275.788 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 323478.507 ops/s
[info]                  ·gc.alloc.rate:                   498.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3279.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 324171.654 ops/s
[info]                  ·gc.alloc.rate:      499.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 2424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   323933.206 ±(99.9%) 1439.268 ops/s [Average]
[info]   (min, avg, max) = (323478.507, 323933.206, 324428.311), stdev = 373.773
[info]   CI (99.9%): [322493.938, 325372.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   498.803 ±(99.9%) 2.209 MB/sec [Average]
[info]   (min, avg, max) = (498.136, 498.803, 499.581), stdev = 0.574
[info]   CI (99.9%): [496.593, 501.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2424.001, 2424.001, 2424.001), stdev = 0.001
[info]   CI (99.9%): [2424.001, 2424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.715 ±(99.9%) 5.984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.715, 3.494), stdev = 1.554
[info]   CI (99.9%): [≈ 0, 6.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.474 ±(99.9%) 29.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.474, 16.986), stdev = 7.554
[info]   CI (99.9%): [≈ 0, 32.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.163 ±(99.9%) 1067.549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.163, 673.981), stdev = 277.239
[info]   CI (99.9%): [≈ 0, 1541.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2304.866 ±(99.9%) 5191.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2304.866, 3279.686), stdev = 1348.135
[info]   CI (99.9%): [≈ 0, 7496.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.84% complete, ETA 01:59:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76895.692 ops/s
[info] # Warmup Iteration   2: 1079737.328 ops/s
[info] # Warmup Iteration   3: 1080703.842 ops/s
[info] # Warmup Iteration   4: 1078383.423 ops/s
[info] # Warmup Iteration   5: 1086420.454 ops/s
[info] Iteration   1: 1082201.518 ops/s
[info]                  ·gc.alloc.rate:                   500.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 743.973 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1090883.272 ops/s
[info]                  ·gc.alloc.rate:      504.492 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1083972.709 ops/s
[info]                  ·gc.alloc.rate:                   501.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1088957.183 ops/s
[info]                  ·gc.alloc.rate:                   503.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 973.281 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1086568.252 ops/s
[info]                  ·gc.alloc.rate:                   502.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 973.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1086516.587 ±(99.9%) 13630.171 ops/s [Average]
[info]   (min, avg, max) = (1082201.518, 1086516.587, 1090883.272), stdev = 3539.712
[info]   CI (99.9%): [1072886.416, 1100146.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   502.455 ±(99.9%) 6.357 MB/sec [Average]
[info]   (min, avg, max) = (500.436, 502.455, 504.492), stdev = 1.651
[info]   CI (99.9%): [496.098, 508.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.504 ±(99.9%) 4.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.522), stdev = 1.128
[info]   CI (99.9%): [≈ 0, 4.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.732 ±(99.9%) 6.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.732, 3.662), stdev = 1.638
[info]   CI (99.9%): [≈ 0, 7.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   505.971 ±(99.9%) 1121.897 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.971, 673.261), stdev = 291.353
[info]   CI (99.9%): [≈ 0, 1627.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   733.702 ±(99.9%) 1625.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 733.702, 977.760), stdev = 422.163
[info]   CI (99.9%): [≈ 0, 2359.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.04% complete, ETA 01:59:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 693320.330 ops/s
[info] # Warmup Iteration   2: 1031213.301 ops/s
[info] # Warmup Iteration   3: 1026792.928 ops/s
[info] # Warmup Iteration   4: 1028412.268 ops/s
[info] # Warmup Iteration   5: 1029432.126 ops/s
[info] Iteration   1: 1019390.216 ops/s
[info]                  ·gc.alloc.rate:                   720.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1040.215 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1001206.303 ops/s
[info]                  ·gc.alloc.rate:                   707.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1061.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 990047.049 ops/s
[info]                  ·gc.alloc.rate:                   699.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1073.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 996716.050 ops/s
[info]                  ·gc.alloc.rate:                   704.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1067.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 998441.956 ops/s
[info]                  ·gc.alloc.rate:                   705.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1065.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1001160.315 ±(99.9%) 42312.298 ops/s [Average]
[info]   (min, avg, max) = (990047.049, 1001160.315, 1019390.216), stdev = 10988.369
[info]   CI (99.9%): [958848.017, 1043472.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   707.167 ±(99.9%) 29.851 MB/sec [Average]
[info]   (min, avg, max) = (699.333, 707.167, 720.021), stdev = 7.752
[info]   CI (99.9%): [677.315, 737.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.905 ±(99.9%) 3.146 MB/sec [Average]
[info]   (min, avg, max) = (673.540, 674.905, 675.539), stdev = 0.817
[info]   CI (99.9%): [671.759, 678.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1061.380 ±(99.9%) 48.452 B/op [Average]
[info]   (min, avg, max) = (1040.215, 1061.380, 1073.164), stdev = 12.583
[info]   CI (99.9%): [1012.927, 1109.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.24% complete, ETA 01:58:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1799026.115 ops/s
[info] # Warmup Iteration   2: 2001718.256 ops/s
[info] # Warmup Iteration   3: 1963160.279 ops/s
[info] # Warmup Iteration   4: 1960493.242 ops/s
[info] # Warmup Iteration   5: 2026674.043 ops/s
[info] Iteration   1: 2024386.940 ops/s
[info]                  ·gc.alloc.rate:                   935.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 522.503 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2023070.769 ops/s
[info]                  ·gc.alloc.rate:                   935.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1045.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2026177.556 ops/s
[info]                  ·gc.alloc.rate:                   937.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521.527 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2029944.234 ops/s
[info]                  ·gc.alloc.rate:                   938.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 520.555 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2004839.846 ops/s
[info]                  ·gc.alloc.rate:                   927.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1054.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2021683.869 ±(99.9%) 37599.425 ops/s [Average]
[info]   (min, avg, max) = (2004839.846, 2021683.869, 2029944.234), stdev = 9764.451
[info]   CI (99.9%): [1984084.444, 2059283.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   934.932 ±(99.9%) 17.529 MB/sec [Average]
[info]   (min, avg, max) = (927.097, 934.932, 938.871), stdev = 4.552
[info]   CI (99.9%): [917.403, 952.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.097), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.130 ±(99.9%) 1416.634 MB/sec [Average]
[info]   (min, avg, max) = (671.255, 940.130, 1343.481), stdev = 367.895
[info]   CI (99.9%): [≈ 0, 2356.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   732.856 ±(99.9%) 1114.340 B/op [Average]
[info]   (min, avg, max) = (520.555, 732.856, 1054.426), stdev = 289.391
[info]   CI (99.9%): [≈ 0, 1847.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11.45% complete, ETA 01:58:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2365668.804 ops/s
[info] # Warmup Iteration   2: 2525118.277 ops/s
[info] # Warmup Iteration   3: 2527917.006 ops/s
[info] # Warmup Iteration   4: 2528029.007 ops/s
[info] # Warmup Iteration   5: 2533012.916 ops/s
[info] Iteration   1: 2535167.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2535978.773 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2532885.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2529408.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2529250.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2532538.100 ±(99.9%) 12097.117 ops/s [Average]
[info]   (min, avg, max) = (2529250.020, 2532538.100, 2535978.773), stdev = 3141.583
[info]   CI (99.9%): [2520440.983, 2544635.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.65% complete, ETA 01:58:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 389227.679 ops/s
[info] # Warmup Iteration   2: 509944.154 ops/s
[info] # Warmup Iteration   3: 509741.217 ops/s
[info] # Warmup Iteration   4: 498618.649 ops/s
[info] # Warmup Iteration   5: 500926.150 ops/s
[info] Iteration   1: 502750.475 ops/s
[info]                  ·gc.alloc.rate:                   592.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1601.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 511652.605 ops/s
[info]                  ·gc.alloc.rate:                   603.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2071.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 515197.992 ops/s
[info]                  ·gc.alloc.rate:                   607.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2057.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 516974.796 ops/s
[info]                  ·gc.alloc.rate:                   609.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2041.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 510795.524 ops/s
[info]                  ·gc.alloc.rate:                   602.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2066.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   511474.278 ±(99.9%) 21153.934 ops/s [Average]
[info]   (min, avg, max) = (502750.475, 511474.278, 516974.796), stdev = 5493.610
[info]   CI (99.9%): [490320.344, 532628.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   603.012 ±(99.9%) 24.900 MB/sec [Average]
[info]   (min, avg, max) = (592.746, 603.012, 609.481), stdev = 6.466
[info]   CI (99.9%): [578.112, 627.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.001, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.826 ±(99.9%) 6.933 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.826, 4.046), stdev = 1.800
[info]   CI (99.9%): [≈ 0, 7.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.541 ±(99.9%) 21.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.541, 12.450), stdev = 5.540
[info]   CI (99.9%): [≈ 0, 23.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   639.808 ±(99.9%) 276.373 MB/sec [Average]
[info]   (min, avg, max) = (511.439, 639.808, 673.239), stdev = 71.773
[info]   CI (99.9%): [363.435, 916.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1967.738 ±(99.9%) 789.738 B/op [Average]
[info]   (min, avg, max) = (1601.411, 1967.738, 2071.426), stdev = 205.092
[info]   CI (99.9%): [1178.000, 2757.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11.85% complete, ETA 01:58:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100045.480 ops/s
[info] # Warmup Iteration   2: 112426.607 ops/s
[info] # Warmup Iteration   3: 113135.379 ops/s
[info] # Warmup Iteration   4: 113780.242 ops/s
[info] # Warmup Iteration   5: 113325.930 ops/s
[info] Iteration   1: 113727.482 ops/s
[info]                  ·gc.alloc.rate:                   2098.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27912.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 113713.520 ops/s
[info]                  ·gc.alloc.rate:                   2098.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37288.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 113169.676 ops/s
[info]                  ·gc.alloc.rate:                   2088.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28155.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 113579.363 ops/s
[info]                  ·gc.alloc.rate:                   2096.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28099.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 112227.705 ops/s
[info]                  ·gc.alloc.rate:                   2072.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28475.333 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   113283.549 ±(99.9%) 2433.253 ops/s [Average]
[info]   (min, avg, max) = (112227.705, 113283.549, 113727.482), stdev = 631.908
[info]   CI (99.9%): [110850.296, 115716.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2091.177 ±(99.9%) 43.638 MB/sec [Average]
[info]   (min, avg, max) = (2072.314, 2091.177, 2098.926), stdev = 11.333
[info]   CI (99.9%): [2047.539, 2134.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   29056.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29056.004, 29056.004, 29056.004), stdev = 0.001
[info]   CI (99.9%): [29056.003, 29056.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.982 ±(99.9%) 1.257 B/op [Average]
[info]   (min, avg, max) = (0.579, 0.982, 1.440), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 2.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2158.557 ±(99.9%) 1151.904 MB/sec [Average]
[info]   (min, avg, max) = (2016.287, 2158.557, 2693.596), stdev = 299.146
[info]   CI (99.9%): [1006.653, 3310.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   29986.234 ±(99.9%) 15737.319 B/op [Average]
[info]   (min, avg, max) = (27912.863, 29986.234, 37288.171), stdev = 4086.932
[info]   CI (99.9%): [14248.915, 45723.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.05% complete, ETA 01:57:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115218.166 ops/s
[info] # Warmup Iteration   2: 136801.950 ops/s
[info] # Warmup Iteration   3: 135747.972 ops/s
[info] # Warmup Iteration   4: 135757.763 ops/s
[info] # Warmup Iteration   5: 135294.463 ops/s
[info] Iteration   1: 138061.313 ops/s
[info]                  ·gc.alloc.rate:                   1659.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15307.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 139086.621 ops/s
[info]                  ·gc.alloc.rate:                   1671.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22809.387 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 138379.224 ops/s
[info]                  ·gc.alloc.rate:                   1663.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15303.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 138081.521 ops/s
[info]                  ·gc.alloc.rate:                   1659.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23037.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 138346.938 ops/s
[info]                  ·gc.alloc.rate:                   1662.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15351.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   138391.124 ±(99.9%) 1599.801 ops/s [Average]
[info]   (min, avg, max) = (138061.313, 138391.124, 139086.621), stdev = 415.463
[info]   CI (99.9%): [136791.323, 139990.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1663.379 ±(99.9%) 19.452 MB/sec [Average]
[info]   (min, avg, max) = (1659.149, 1663.379, 1671.749), stdev = 5.052
[info]   CI (99.9%): [1643.927, 1682.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.003, 18920.003, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.003, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.237 ±(99.9%) 0.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 0.474), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.676 ±(99.9%) 1418.374 MB/sec [Average]
[info]   (min, avg, max) = (1342.393, 1614.676, 2020.923), stdev = 368.347
[info]   CI (99.9%): [196.303, 3033.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18361.909 ±(99.9%) 16038.039 B/op [Average]
[info]   (min, avg, max) = (15303.034, 18361.909, 23037.742), stdev = 4165.028
[info]   CI (99.9%): [2323.870, 34399.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.25% complete, ETA 01:57:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261559.756 ops/s
[info] # Warmup Iteration   2: 401377.104 ops/s
[info] # Warmup Iteration   3: 398632.985 ops/s
[info] # Warmup Iteration   4: 397631.033 ops/s
[info] # Warmup Iteration   5: 396779.121 ops/s
[info] Iteration   1: 409231.228 ops/s
[info]                  ·gc.alloc.rate:      338.947 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 407422.546 ops/s
[info]                  ·gc.alloc.rate:                   337.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1976.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 407247.929 ops/s
[info]                  ·gc.alloc.rate:                   337.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1976.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 408279.375 ops/s
[info]                  ·gc.alloc.rate:      338.190 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 408387.785 ops/s
[info]                  ·gc.alloc.rate:                   338.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2597.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   408113.772 ±(99.9%) 3091.741 ops/s [Average]
[info]   (min, avg, max) = (407247.929, 408113.772, 409231.228), stdev = 802.915
[info]   CI (99.9%): [405022.032, 411205.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   338.044 ±(99.9%) 2.467 MB/sec [Average]
[info]   (min, avg, max) = (337.362, 338.044, 338.947), stdev = 0.641
[info]   CI (99.9%): [335.578, 340.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.481), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.349 ±(99.9%) 1219.867 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.349, 673.839), stdev = 316.796
[info]   CI (99.9%): [≈ 0, 1559.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1310.190 ±(99.9%) 4707.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1310.190, 2597.893), stdev = 1222.639
[info]   CI (99.9%): [≈ 0, 6018.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.45% complete, ETA 01:57:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1005876.837 ops/s
[info] # Warmup Iteration   2: 1055953.819 ops/s
[info] # Warmup Iteration   3: 1042795.867 ops/s
[info] # Warmup Iteration   4: 1077196.620 ops/s
[info] # Warmup Iteration   5: 1051855.109 ops/s
[info] Iteration   1: 1070804.792 ops/s
[info]                  ·gc.alloc.rate:      206.768 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1074727.211 ops/s
[info]                  ·gc.alloc.rate:      207.600 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1069342.385 ops/s
[info]                  ·gc.alloc.rate:                   206.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1081622.432 ops/s
[info]                  ·gc.alloc.rate:      208.866 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1054136.668 ops/s
[info]                  ·gc.alloc.rate:                   203.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 763.765 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1070126.698 ±(99.9%) 38988.252 ops/s [Average]
[info]   (min, avg, max) = (1054136.668, 1070126.698, 1081622.432), stdev = 10125.125
[info]   CI (99.9%): [1031138.445, 1109114.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   206.663 ±(99.9%) 7.512 MB/sec [Average]
[info]   (min, avg, max) = (203.588, 206.663, 208.866), stdev = 1.951
[info]   CI (99.9%): [199.150, 214.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.580 ±(99.9%) 1078.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.580, 511.492), stdev = 280.133
[info]   CI (99.9%): [≈ 0, 1283.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   303.333 ±(99.9%) 1599.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 303.333, 763.765), stdev = 415.374
[info]   CI (99.9%): [≈ 0, 1902.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.65% complete, ETA 01:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53026.818 ops/s
[info] # Warmup Iteration   2: 87155.104 ops/s
[info] # Warmup Iteration   3: 88121.354 ops/s
[info] # Warmup Iteration   4: 88568.151 ops/s
[info] # Warmup Iteration   5: 88823.698 ops/s
[info] Iteration   1: 87161.609 ops/s
[info]                  ·gc.alloc.rate:                   3710.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73666.361 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 88970.448 ops/s
[info]                  ·gc.alloc.rate:                   3787.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60190.946 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 88726.093 ops/s
[info]                  ·gc.alloc.rate:                   3777.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72451.666 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 88722.089 ops/s
[info]                  ·gc.alloc.rate:                   3776.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60402.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 88368.946 ops/s
[info]                  ·gc.alloc.rate:                   3761.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72814.647 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   88389.837 ±(99.9%) 2769.755 ops/s [Average]
[info]   (min, avg, max) = (87161.609, 88389.837, 88970.448), stdev = 719.297
[info]   CI (99.9%): [85620.082, 91159.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3762.763 ±(99.9%) 118.071 MB/sec [Average]
[info]   (min, avg, max) = (3710.421, 3762.763, 3787.533), stdev = 30.663
[info]   CI (99.9%): [3644.692, 3880.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.005), stdev = 0.001
[info]   CI (99.9%): [67016.004, 67016.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.121, 0.166), stdev = 0.027
[info]   CI (99.9%): [0.016, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.150 ±(99.9%) 1.860 B/op [Average]
[info]   (min, avg, max) = (1.841, 2.150, 2.954), stdev = 0.483
[info]   CI (99.9%): [0.290, 4.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3811.084 ±(99.9%) 1434.810 MB/sec [Average]
[info]   (min, avg, max) = (3401.803, 3811.084, 4087.316), stdev = 372.616
[info]   CI (99.9%): [2376.275, 5245.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67905.136 ±(99.9%) 26800.787 B/op [Average]
[info]   (min, avg, max) = (60190.946, 67905.136, 73666.361), stdev = 6960.079
[info]   CI (99.9%): [41104.350, 94705.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12.85% complete, ETA 01:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219512.802 ops/s
[info] # Warmup Iteration   2: 246350.451 ops/s
[info] # Warmup Iteration   3: 244898.041 ops/s
[info] # Warmup Iteration   4: 245748.834 ops/s
[info] # Warmup Iteration   5: 246661.418 ops/s
[info] Iteration   1: 246116.384 ops/s
[info]                  ·gc.alloc.rate:                   1123.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8596.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 246688.595 ops/s
[info]                  ·gc.alloc.rate:                   1125.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8567.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 246020.457 ops/s
[info]                  ·gc.alloc.rate:                   1122.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4295.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 245738.268 ops/s
[info]                  ·gc.alloc.rate:                   1121.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8604.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 237430.667 ops/s
[info]                  ·gc.alloc.rate:                   1083.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8914.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   244398.874 ±(99.9%) 15058.439 ops/s [Average]
[info]   (min, avg, max) = (237430.667, 244398.874, 246688.595), stdev = 3910.629
[info]   CI (99.9%): [229340.435, 259457.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1115.312 ±(99.9%) 68.713 MB/sec [Average]
[info]   (min, avg, max) = (1083.519, 1115.312, 1125.813), stdev = 17.845
[info]   CI (99.9%): [1046.599, 1184.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7184.002, 7184.002, 7184.002), stdev = 0.001
[info]   CI (99.9%): [7184.001, 7184.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.402 ±(99.9%) 1.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 0.799), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1209.097 ±(99.9%) 1157.763 MB/sec [Average]
[info]   (min, avg, max) = (671.248, 1209.097, 1344.535), stdev = 300.667
[info]   CI (99.9%): [51.334, 2366.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7795.643 ±(99.9%) 7554.500 B/op [Average]
[info]   (min, avg, max) = (4295.260, 7795.643, 8914.600), stdev = 1961.880
[info]   CI (99.9%): [241.144, 15350.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.05% complete, ETA 01:56:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235012.820 ops/s
[info] # Warmup Iteration   2: 324252.993 ops/s
[info] # Warmup Iteration   3: 326909.507 ops/s
[info] # Warmup Iteration   4: 327349.550 ops/s
[info] # Warmup Iteration   5: 330670.097 ops/s
[info] Iteration   1: 330246.504 ops/s
[info]                  ·gc.alloc.rate:                   1461.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6396.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 330061.622 ops/s
[info]                  ·gc.alloc.rate:                   1461.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9598.662 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 330644.203 ops/s
[info]                  ·gc.alloc.rate:                   1463.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6395.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 330053.182 ops/s
[info]                  ·gc.alloc.rate:                   1461.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6412.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 329209.691 ops/s
[info]                  ·gc.alloc.rate:                   1457.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6435.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   330043.040 ±(99.9%) 2017.194 ops/s [Average]
[info]   (min, avg, max) = (329209.691, 330043.040, 330644.203), stdev = 523.859
[info]   CI (99.9%): [328025.846, 332060.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1460.979 ±(99.9%) 8.797 MB/sec [Average]
[info]   (min, avg, max) = (1457.295, 1460.979, 1463.565), stdev = 2.284
[info]   CI (99.9%): [1452.183, 1469.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6968.001, 6968.001, 6968.001), stdev = 0.001
[info]   CI (99.9%): [6968.001, 6968.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.238 ±(99.9%) 0.435 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.238, 0.396), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.700 ±(99.9%) 1151.456 MB/sec [Average]
[info]   (min, avg, max) = (1341.753, 1477.700, 2012.613), stdev = 299.029
[info]   CI (99.9%): [326.245, 2629.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7047.750 ±(99.9%) 5491.397 B/op [Average]
[info]   (min, avg, max) = (6395.032, 7047.750, 9598.662), stdev = 1426.098
[info]   CI (99.9%): [1556.353, 12539.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.25% complete, ETA 01:56:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1088185.929 ops/s
[info] # Warmup Iteration   2: 1770091.315 ops/s
[info] # Warmup Iteration   3: 1792704.638 ops/s
[info] # Warmup Iteration   4: 1801846.656 ops/s
[info] # Warmup Iteration   5: 1790779.719 ops/s
[info] Iteration   1: 1798761.712 ops/s
[info]                  ·gc.alloc.rate:                   923.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 590.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1790860.367 ops/s
[info]                  ·gc.alloc.rate:                   919.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1187.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1786102.754 ops/s
[info]                  ·gc.alloc.rate:                   916.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.440 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1794181.504 ops/s
[info]                  ·gc.alloc.rate:                   920.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1186.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1778846.028 ops/s
[info]                  ·gc.alloc.rate:                   912.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1789750.473 ±(99.9%) 29469.448 ops/s [Average]
[info]   (min, avg, max) = (1778846.028, 1789750.473, 1798761.712), stdev = 7653.122
[info]   CI (99.9%): [1760281.025, 1819219.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   918.559 ±(99.9%) 15.062 MB/sec [Average]
[info]   (min, avg, max) = (912.989, 918.559, 923.159), stdev = 3.912
[info]   CI (99.9%): [903.497, 933.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.073), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   945.979 ±(99.9%) 1425.311 MB/sec [Average]
[info]   (min, avg, max) = (674.847, 945.979, 1352.405), stdev = 370.149
[info]   CI (99.9%): [≈ 0, 2371.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   831.763 ±(99.9%) 1248.606 B/op [Average]
[info]   (min, avg, max) = (590.664, 831.763, 1187.228), stdev = 324.259
[info]   CI (99.9%): [≈ 0, 2080.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.45% complete, ETA 01:55:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1763000.414 ops/s
[info] # Warmup Iteration   2: 1834182.828 ops/s
[info] # Warmup Iteration   3: 1841945.611 ops/s
[info] # Warmup Iteration   4: 1850205.830 ops/s
[info] # Warmup Iteration   5: 1821596.396 ops/s
[info] Iteration   1: 1894119.184 ops/s
[info]                  ·gc.alloc.rate:                   510.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1821258.843 ops/s
[info]                  ·gc.alloc.rate:                   490.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 442.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1834178.829 ops/s
[info]                  ·gc.alloc.rate:                   493.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 578.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1844931.518 ops/s
[info]                  ·gc.alloc.rate:                   496.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 575.602 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1842013.762 ops/s
[info]                  ·gc.alloc.rate:      496.115 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1847300.427 ±(99.9%) 106779.838 ops/s [Average]
[info]   (min, avg, max) = (1821258.843, 1847300.427, 1894119.184), stdev = 27730.385
[info]   CI (99.9%): [1740520.589, 1954080.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   497.537 ±(99.9%) 28.616 MB/sec [Average]
[info]   (min, avg, max) = (490.576, 497.537, 510.087), stdev = 7.431
[info]   CI (99.9%): [468.921, 526.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.309), stdev = 1.475
[info]   CI (99.9%): [≈ 0, 6.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.576 ±(99.9%) 4.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.576, 2.840), stdev = 1.266
[info]   CI (99.9%): [≈ 0, 5.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.399 ±(99.9%) 1068.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.399, 674.579), stdev = 277.459
[info]   CI (99.9%): [≈ 0, 1542.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   404.344 ±(99.9%) 913.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 404.344, 578.979), stdev = 237.263
[info]   CI (99.9%): [≈ 0, 1317.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:55:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1907187.247 ops/s
[info] # Warmup Iteration   2: 2010986.738 ops/s
[info] # Warmup Iteration   3: 1997368.469 ops/s
[info] # Warmup Iteration   4: 1992702.385 ops/s
[info] # Warmup Iteration   5: 1995903.332 ops/s
[info] Iteration   1: 1998878.854 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1997641.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2003827.469 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1997181.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1998816.906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1999269.181 ±(99.9%) 10214.013 ops/s [Average]
[info]   (min, avg, max) = (1997181.165, 1999269.181, 2003827.469), stdev = 2652.547
[info]   CI (99.9%): [1989055.168, 2009483.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.86% complete, ETA 01:55:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30925.356 ops/s
[info] # Warmup Iteration   2: 45851.546 ops/s
[info] # Warmup Iteration   3: 45867.674 ops/s
[info] # Warmup Iteration   4: 46449.111 ops/s
[info] # Warmup Iteration   5: 46630.970 ops/s
[info] Iteration   1: 46415.849 ops/s
[info]                  ·gc.alloc.rate:                   1955.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68138.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 46003.124 ops/s
[info]                  ·gc.alloc.rate:                   1938.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45919.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45928.452 ops/s
[info]                  ·gc.alloc.rate:                   1935.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69102.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46561.074 ops/s
[info]                  ·gc.alloc.rate:                   1961.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68298.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46546.096 ops/s
[info]                  ·gc.alloc.rate:                   1961.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68466.666 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   46290.919 ±(99.9%) 1167.823 ops/s [Average]
[info]   (min, avg, max) = (45928.452, 46290.919, 46561.074), stdev = 303.280
[info]   CI (99.9%): [45123.096, 47458.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1950.517 ±(99.9%) 49.592 MB/sec [Average]
[info]   (min, avg, max) = (1935.136, 1950.517, 1961.884), stdev = 12.879
[info]   CI (99.9%): [1900.926, 2000.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66336.009, 66336.009, 66336.010), stdev = 0.001
[info]   CI (99.9%): [66336.008, 66336.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.846 ±(99.9%) 5.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.846, 3.566), stdev = 1.478
[info]   CI (99.9%): [≈ 0, 7.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1882.185 ±(99.9%) 1163.623 MB/sec [Average]
[info]   (min, avg, max) = (1341.706, 1882.185, 2024.398), stdev = 302.189
[info]   CI (99.9%): [718.562, 3045.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   63985.091 ±(99.9%) 38913.663 B/op [Average]
[info]   (min, avg, max) = (45919.211, 63985.091, 69102.391), stdev = 10105.755
[info]   CI (99.9%): [25071.429, 102898.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14.06% complete, ETA 01:55:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80414.757 ops/s
[info] # Warmup Iteration   2: 91491.186 ops/s
[info] # Warmup Iteration   3: 92875.760 ops/s
[info] # Warmup Iteration   4: 94660.430 ops/s
[info] # Warmup Iteration   5: 94796.376 ops/s
[info] Iteration   1: 94660.689 ops/s
[info]                  ·gc.alloc.rate:                   2048.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              34080.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33533.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 94617.706 ops/s
[info]                  ·gc.alloc.rate:                   2048.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              34080.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33589.173 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 92183.153 ops/s
[info]                  ·gc.alloc.rate:                   1995.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              34080.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34554.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 92793.818 ops/s
[info]                  ·gc.alloc.rate:                   2008.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              34080.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34371.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 94753.180 ops/s
[info]                  ·gc.alloc.rate:                   2051.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              34080.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33716.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   93801.709 ±(99.9%) 4694.218 ops/s [Average]
[info]   (min, avg, max) = (92183.153, 93801.709, 94753.180), stdev = 1219.074
[info]   CI (99.9%): [89107.491, 98495.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2030.587 ±(99.9%) 101.210 MB/sec [Average]
[info]   (min, avg, max) = (1995.630, 2030.587, 2051.075), stdev = 26.284
[info]   CI (99.9%): [1929.377, 2131.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34080.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (34080.004, 34080.004, 34080.005), stdev = 0.001
[info]   CI (99.9%): [34080.004, 34080.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.910 ±(99.9%) 2.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.910, 1.384), stdev = 0.528
[info]   CI (99.9%): [≈ 0, 2.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2022.724 ±(99.9%) 20.529 MB/sec [Average]
[info]   (min, avg, max) = (2015.971, 2022.724, 2029.211), stdev = 5.331
[info]   CI (99.9%): [2002.194, 2043.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   33952.861 ±(99.9%) 1827.166 B/op [Average]
[info]   (min, avg, max) = (33533.169, 33952.861, 34554.131), stdev = 474.509
[info]   CI (99.9%): [32125.694, 35780.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.26% complete, ETA 01:54:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185126.609 ops/s
[info] # Warmup Iteration   2: 214574.586 ops/s
[info] # Warmup Iteration   3: 215252.671 ops/s
[info] # Warmup Iteration   4: 216733.914 ops/s
[info] # Warmup Iteration   5: 218617.292 ops/s
[info] Iteration   1: 218731.518 ops/s
[info]                  ·gc.alloc.rate:                   2250.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2690.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19364.816 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 218646.514 ops/s
[info]                  ·gc.alloc.rate:                   2250.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14557.961 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 216841.036 ops/s
[info]                  ·gc.alloc.rate:                   2231.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14704.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 218331.018 ops/s
[info]                  ·gc.alloc.rate:                   2246.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14623.644 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 217505.782 ops/s
[info]                  ·gc.alloc.rate:                   2238.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14707.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   218011.174 ±(99.9%) 3133.899 ops/s [Average]
[info]   (min, avg, max) = (216841.036, 218011.174, 218731.518), stdev = 813.864
[info]   CI (99.9%): [214877.274, 221145.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2243.552 ±(99.9%) 31.799 MB/sec [Average]
[info]   (min, avg, max) = (2231.333, 2243.552, 2250.412), stdev = 8.258
[info]   CI (99.9%): [2211.753, 2275.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.002, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.451 ±(99.9%) 0.580 B/op [Average]
[info]   (min, avg, max) = (0.300, 0.451, 0.604), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 1.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2159.680 ±(99.9%) 1141.759 MB/sec [Average]
[info]   (min, avg, max) = (2022.104, 2159.680, 2690.050), stdev = 296.511
[info]   CI (99.9%): [1017.921, 3301.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15591.653 ±(99.9%) 8125.534 B/op [Average]
[info]   (min, avg, max) = (14557.961, 15591.653, 19364.816), stdev = 2110.175
[info]   CI (99.9%): [7466.119, 23717.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.46% complete, ETA 01:54:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220911.646 ops/s
[info] # Warmup Iteration   2: 342759.313 ops/s
[info] # Warmup Iteration   3: 344645.492 ops/s
[info] # Warmup Iteration   4: 354868.061 ops/s
[info] # Warmup Iteration   5: 347574.908 ops/s
[info] Iteration   1: 346249.908 ops/s
[info]                  ·gc.alloc.rate:                   1668.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9226.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 355999.216 ops/s
[info]                  ·gc.alloc.rate:                   1715.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5990.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 354225.022 ops/s
[info]                  ·gc.alloc.rate:                   1706.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9036.999 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 354625.505 ops/s
[info]                  ·gc.alloc.rate:                   1708.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6023.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 348582.354 ops/s
[info]                  ·gc.alloc.rate:                   1679.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9196.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   351936.401 ±(99.9%) 16400.462 ops/s [Average]
[info]   (min, avg, max) = (346249.908, 351936.401, 355999.216), stdev = 4259.148
[info]   CI (99.9%): [335535.939, 368336.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1695.592 ±(99.9%) 78.352 MB/sec [Average]
[info]   (min, avg, max) = (1668.359, 1695.592, 1715.108), stdev = 20.348
[info]   CI (99.9%): [1617.239, 1773.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7584.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7584.001, 7584.001, 7584.001), stdev = 0.001
[info]   CI (99.9%): [7584.001, 7584.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.186 ±(99.9%) 0.437 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.186, 0.370), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1762.251 ±(99.9%) 1429.099 MB/sec [Average]
[info]   (min, avg, max) = (1354.646, 1762.251, 2036.828), stdev = 371.132
[info]   CI (99.9%): [333.152, 3191.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7894.607 ±(99.9%) 6642.393 B/op [Average]
[info]   (min, avg, max) = (5990.079, 7894.607, 9226.216), stdev = 1725.008
[info]   CI (99.9%): [1252.213, 14537.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.66% complete, ETA 01:54:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1248561.859 ops/s
[info] # Warmup Iteration   2: 1235961.740 ops/s
[info] # Warmup Iteration   3: 1303818.795 ops/s
[info] # Warmup Iteration   4: 1252621.388 ops/s
[info] # Warmup Iteration   5: 1301427.302 ops/s
[info] Iteration   1: 1299629.722 ops/s
[info]                  ·gc.alloc.rate:                   449.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 619.507 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1302856.742 ops/s
[info]                  ·gc.alloc.rate:                   450.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.997 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1303870.812 ops/s
[info]                  ·gc.alloc.rate:      450.622 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1297967.607 ops/s
[info]                  ·gc.alloc.rate:                   448.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 818.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1299927.234 ops/s
[info]                  ·gc.alloc.rate:                   449.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 816.934 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1300850.423 ±(99.9%) 9392.943 ops/s [Average]
[info]   (min, avg, max) = (1297967.607, 1300850.423, 1303870.812), stdev = 2439.318
[info]   CI (99.9%): [1291457.480, 1310243.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   449.538 ±(99.9%) 3.345 MB/sec [Average]
[info]   (min, avg, max) = (448.533, 449.538, 450.622), stdev = 0.869
[info]   CI (99.9%): [446.193, 452.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.672 ±(99.9%) 5.629 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.672, 3.287), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.815 ±(99.9%) 6.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.815, 3.987), stdev = 1.773
[info]   CI (99.9%): [≈ 0, 7.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.413 ±(99.9%) 1068.418 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.413, 674.583), stdev = 277.465
[info]   CI (99.9%): [≈ 0, 1542.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   574.520 ±(99.9%) 1294.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 574.520, 818.163), stdev = 336.197
[info]   CI (99.9%): [≈ 0, 1869.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.86% complete, ETA 01:54:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37944.439 ops/s
[info] # Warmup Iteration   2: 84497.625 ops/s
[info] # Warmup Iteration   3: 82564.071 ops/s
[info] # Warmup Iteration   4: 85000.883 ops/s
[info] # Warmup Iteration   5: 85805.778 ops/s
[info] Iteration   1: 85852.797 ops/s
[info]                  ·gc.alloc.rate:                   3607.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4076.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74730.822 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 85712.421 ops/s
[info]                  ·gc.alloc.rate:                   3601.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62442.177 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 85894.151 ops/s
[info]                  ·gc.alloc.rate:                   3608.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62366.564 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 84800.962 ops/s
[info]                  ·gc.alloc.rate:                   3563.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63169.463 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 84138.794 ops/s
[info]                  ·gc.alloc.rate:                   3535.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4086.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76449.452 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   85279.825 ±(99.9%) 2997.631 ops/s [Average]
[info]   (min, avg, max) = (84138.794, 85279.825, 85894.151), stdev = 778.475
[info]   CI (99.9%): [82282.194, 88277.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3583.347 ±(99.9%) 126.274 MB/sec [Average]
[info]   (min, avg, max) = (3535.204, 3583.347, 3608.865), stdev = 32.793
[info]   CI (99.9%): [3457.073, 3709.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66144.005, 66144.005, 66144.005), stdev = 0.001
[info]   CI (99.9%): [66144.004, 66144.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.922 ±(99.9%) 1.103 B/op [Average]
[info]   (min, avg, max) = (1.526, 1.922, 2.336), stdev = 0.287
[info]   CI (99.9%): [0.819, 3.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3673.600 ±(99.9%) 1432.593 MB/sec [Average]
[info]   (min, avg, max) = (3399.918, 3673.600, 4086.000), stdev = 372.040
[info]   CI (99.9%): [2241.007, 5106.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67831.696 ±(99.9%) 27398.803 B/op [Average]
[info]   (min, avg, max) = (62366.564, 67831.696, 76449.452), stdev = 7115.382
[info]   CI (99.9%): [40432.892, 95230.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:53:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209079.419 ops/s
[info] # Warmup Iteration   2: 230294.169 ops/s
[info] # Warmup Iteration   3: 232688.264 ops/s
[info] # Warmup Iteration   4: 228780.106 ops/s
[info] # Warmup Iteration   5: 227160.229 ops/s
[info] Iteration   1: 228789.431 ops/s
[info]                  ·gc.alloc.rate:                   2422.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13899.667 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 231768.870 ops/s
[info]                  ·gc.alloc.rate:                   2454.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18327.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 234912.539 ops/s
[info]                  ·gc.alloc.rate:                   2488.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18122.599 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 234192.743 ops/s
[info]                  ·gc.alloc.rate:                   2480.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13654.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 234884.885 ops/s
[info]                  ·gc.alloc.rate:                   2487.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18180.084 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   232909.694 ±(99.9%) 10158.155 ops/s [Average]
[info]   (min, avg, max) = (228789.431, 232909.694, 234912.539), stdev = 2638.041
[info]   CI (99.9%): [222751.538, 243067.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2466.644 ±(99.9%) 108.188 MB/sec [Average]
[info]   (min, avg, max) = (2422.721, 2466.644, 2488.145), stdev = 28.096
[info]   CI (99.9%): [2358.456, 2574.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   16672.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16672.002, 16672.002, 16672.002), stdev = 0.001
[info]   CI (99.9%): [16672.001, 16672.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.451 ±(99.9%) 0.461 B/op [Average]
[info]   (min, avg, max) = (0.280, 0.451, 0.573), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2433.360 ±(99.9%) 1433.785 MB/sec [Average]
[info]   (min, avg, max) = (2019.854, 2433.360, 2712.683), stdev = 372.349
[info]   CI (99.9%): [999.576, 3867.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   16436.963 ±(99.9%) 9359.997 B/op [Average]
[info]   (min, avg, max) = (13654.639, 16436.963, 18327.826), stdev = 2430.761
[info]   CI (99.9%): [7076.966, 25796.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.26% complete, ETA 01:53:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166485.261 ops/s
[info] # Warmup Iteration   2: 221886.058 ops/s
[info] # Warmup Iteration   3: 225753.733 ops/s
[info] # Warmup Iteration   4: 223276.039 ops/s
[info] # Warmup Iteration   5: 220999.472 ops/s
[info] Iteration   1: 223091.807 ops/s
[info]                  ·gc.alloc.rate:                   1889.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14208.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 223038.185 ops/s
[info]                  ·gc.alloc.rate:                   1889.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14231.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 227296.719 ops/s
[info]                  ·gc.alloc.rate:                   1925.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13989.500 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 224738.663 ops/s
[info]                  ·gc.alloc.rate:                   1904.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14171.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 222517.276 ops/s
[info]                  ·gc.alloc.rate:                   1885.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14343.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   224136.530 ±(99.9%) 7523.342 ops/s [Average]
[info]   (min, avg, max) = (222517.276, 224136.530, 227296.719), stdev = 1953.788
[info]   CI (99.9%): [216613.188, 231659.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1898.852 ±(99.9%) 63.923 MB/sec [Average]
[info]   (min, avg, max) = (1885.036, 1898.852, 1925.594), stdev = 16.601
[info]   CI (99.9%): [1834.929, 1962.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.002, 13336.002, 13336.002), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.410 ±(99.9%) 1.090 B/op [Average]
[info]   (min, avg, max) = (0.147, 0.410, 0.881), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2020.192 ±(99.9%) 21.370 MB/sec [Average]
[info]   (min, avg, max) = (2013.433, 2020.192, 2027.455), stdev = 5.550
[info]   CI (99.9%): [1998.822, 2041.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14189.055 ±(99.9%) 495.353 B/op [Average]
[info]   (min, avg, max) = (13989.500, 14189.055, 14343.564), stdev = 128.642
[info]   CI (99.9%): [13693.702, 14684.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.46% complete, ETA 01:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 822113.823 ops/s
[info] # Warmup Iteration   2: 1184784.910 ops/s
[info] # Warmup Iteration   3: 1214870.816 ops/s
[info] # Warmup Iteration   4: 1217809.539 ops/s
[info] # Warmup Iteration   5: 1221027.825 ops/s
[info] Iteration   1: 1222455.606 ops/s
[info]                  ·gc.alloc.rate:                   714.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1224356.546 ops/s
[info]                  ·gc.alloc.rate:                   715.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867.874 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1223385.427 ops/s
[info]                  ·gc.alloc.rate:                   715.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 868.561 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1217136.737 ops/s
[info]                  ·gc.alloc.rate:                   711.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873.830 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1215911.503 ops/s
[info]                  ·gc.alloc.rate:                   710.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874.693 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1220649.164 ±(99.9%) 14823.432 ops/s [Average]
[info]   (min, avg, max) = (1215911.503, 1220649.164, 1224356.546), stdev = 3849.598
[info]   CI (99.9%): [1205825.732, 1235472.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   713.409 ±(99.9%) 8.840 MB/sec [Average]
[info]   (min, avg, max) = (710.589, 713.409, 715.519), stdev = 2.296
[info]   CI (99.9%): [704.569, 722.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.081), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.998 ±(99.9%) 2.988 MB/sec [Average]
[info]   (min, avg, max) = (673.700, 674.998, 675.595), stdev = 0.776
[info]   CI (99.9%): [672.010, 677.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   870.474 ±(99.9%) 13.458 B/op [Average]
[info]   (min, avg, max) = (867.412, 870.474, 874.693), stdev = 3.495
[info]   CI (99.9%): [857.016, 883.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.66% complete, ETA 01:52:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2250062.245 ops/s
[info] # Warmup Iteration   2: 2369854.500 ops/s
[info] # Warmup Iteration   3: 2352595.670 ops/s
[info] # Warmup Iteration   4: 2340318.802 ops/s
[info] # Warmup Iteration   5: 2406950.300 ops/s
[info] Iteration   1: 2453176.985 ops/s
[info]                  ·gc.alloc.rate:                   835.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432.913 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2382104.636 ops/s
[info]                  ·gc.alloc.rate:                   811.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 444.532 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2445088.441 ops/s
[info]                  ·gc.alloc.rate:                   832.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 865.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2446494.099 ops/s
[info]                  ·gc.alloc.rate:                   833.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.964 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2446683.850 ops/s
[info]                  ·gc.alloc.rate:                   833.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.925 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2434709.602 ±(99.9%) 113875.983 ops/s [Average]
[info]   (min, avg, max) = (2382104.636, 2434709.602, 2453176.985), stdev = 29573.231
[info]   CI (99.9%): [2320833.620, 2548585.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   828.955 ±(99.9%) 38.709 MB/sec [Average]
[info]   (min, avg, max) = (811.071, 828.955, 835.186), stdev = 10.053
[info]   CI (99.9%): [790.246, 867.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.743 ±(99.9%) 1156.117 MB/sec [Average]
[info]   (min, avg, max) = (671.336, 806.743, 1343.824), stdev = 300.240
[info]   CI (99.9%): [≈ 0, 1962.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   521.332 ±(99.9%) 740.754 B/op [Average]
[info]   (min, avg, max) = (431.925, 521.332, 865.324), stdev = 192.372
[info]   CI (99.9%): [≈ 0, 1262.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15.86% complete, ETA 01:52:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2652505.715 ops/s
[info] # Warmup Iteration   2: 2838685.727 ops/s
[info] # Warmup Iteration   3: 2770796.298 ops/s
[info] # Warmup Iteration   4: 2771023.831 ops/s
[info] # Warmup Iteration   5: 2741154.058 ops/s
[info] Iteration   1: 2776749.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2770951.515 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2777664.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2769354.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2770223.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2772988.549 ±(99.9%) 15038.880 ops/s [Average]
[info]   (min, avg, max) = (2769354.095, 2772988.549, 2777664.568), stdev = 3905.549
[info]   CI (99.9%): [2757949.669, 2788027.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.06% complete, ETA 01:52:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173861.815 ops/s
[info] # Warmup Iteration   2: 308473.400 ops/s
[info] # Warmup Iteration   3: 310255.747 ops/s
[info] # Warmup Iteration   4: 309096.187 ops/s
[info] # Warmup Iteration   5: 310301.420 ops/s
[info] Iteration   1: 308883.276 ops/s
[info]                  ·gc.alloc.rate:                   2527.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13820.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 305403.977 ops/s
[info]                  ·gc.alloc.rate:                   2498.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10494.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 303040.864 ops/s
[info]                  ·gc.alloc.rate:                   2479.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14113.850 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 309801.837 ops/s
[info]                  ·gc.alloc.rate:                   2534.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13819.716 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 306752.806 ops/s
[info]                  ·gc.alloc.rate:                   2509.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2041.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10474.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   306776.552 ±(99.9%) 10444.854 ops/s [Average]
[info]   (min, avg, max) = (303040.864, 306776.552, 309801.837), stdev = 2712.495
[info]   CI (99.9%): [296331.698, 317221.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2509.955 ±(99.9%) 85.590 MB/sec [Average]
[info]   (min, avg, max) = (2479.358, 2509.955, 2534.861), stdev = 22.228
[info]   CI (99.9%): [2424.364, 2595.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12880.001, 12880.001, 12880.001), stdev = 0.001
[info]   CI (99.9%): [12880.001, 12880.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.364 ±(99.9%) 0.630 B/op [Average]
[info]   (min, avg, max) = (0.107, 0.364, 0.541), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2445.028 ±(99.9%) 1429.089 MB/sec [Average]
[info]   (min, avg, max) = (2035.892, 2445.028, 2719.803), stdev = 371.130
[info]   CI (99.9%): [1015.939, 3874.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12544.520 ±(99.9%) 7255.992 B/op [Average]
[info]   (min, avg, max) = (10474.517, 12544.520, 14113.850), stdev = 1884.358
[info]   CI (99.9%): [5288.528, 19800.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16.27% complete, ETA 01:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50615.177 ops/s
[info] # Warmup Iteration   2: 56401.837 ops/s
[info] # Warmup Iteration   3: 58368.068 ops/s
[info] # Warmup Iteration   4: 58268.052 ops/s
[info] # Warmup Iteration   5: 58395.191 ops/s
[info] Iteration   1: 58609.211 ops/s
[info]                  ·gc.alloc.rate:                   2077.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              55808.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54160.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 58490.912 ops/s
[info]                  ·gc.alloc.rate:                   2074.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              55808.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54342.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 58350.856 ops/s
[info]                  ·gc.alloc.rate:                   2068.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              55808.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54588.256 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 58657.466 ops/s
[info]                  ·gc.alloc.rate:                   2079.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              55808.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54375.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 58416.353 ops/s
[info]                  ·gc.alloc.rate:                   2070.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              55808.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54688.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   58504.960 ±(99.9%) 494.335 ops/s [Average]
[info]   (min, avg, max) = (58350.856, 58504.960, 58657.466), stdev = 128.377
[info]   CI (99.9%): [58010.625, 58999.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2074.077 ±(99.9%) 17.168 MB/sec [Average]
[info]   (min, avg, max) = (2068.607, 2074.077, 2079.437), stdev = 4.459
[info]   CI (99.9%): [2056.908, 2091.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   55808.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (55808.007, 55808.007, 55808.007), stdev = 0.001
[info]   CI (99.9%): [55808.006, 55808.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1.793 ±(99.9%) 3.206 B/op [Average]
[info]   (min, avg, max) = (0.558, 1.793, 2.807), stdev = 0.833
[info]   CI (99.9%): [≈ 0, 4.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2022.881 ±(99.9%) 20.190 MB/sec [Average]
[info]   (min, avg, max) = (2016.031, 2022.881, 2029.353), stdev = 5.243
[info]   CI (99.9%): [2002.691, 2043.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   54430.735 ±(99.9%) 805.882 B/op [Average]
[info]   (min, avg, max) = (54160.210, 54430.735, 54688.105), stdev = 209.285
[info]   CI (99.9%): [53624.854, 55236.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20954.239 ops/s
[info] # Warmup Iteration   2: 26194.782 ops/s
[info] # Warmup Iteration   3: 26976.504 ops/s
[info] # Warmup Iteration   4: 27183.786 ops/s
[info] # Warmup Iteration   5: 27202.174 ops/s
[info] Iteration   1: 27272.632 ops/s
[info]                  ·gc.alloc.rate:                   1597.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116235.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27327.112 ops/s
[info]                  ·gc.alloc.rate:                   1600.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77375.349 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 27380.259 ops/s
[info]                  ·gc.alloc.rate:                   1603.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77299.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27016.533 ops/s
[info]                  ·gc.alloc.rate:                   1582.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117646.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27345.572 ops/s
[info]                  ·gc.alloc.rate:                   1601.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77589.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   27268.421 ±(99.9%) 562.544 ops/s [Average]
[info]   (min, avg, max) = (27016.533, 27268.421, 27380.259), stdev = 146.091
[info]   CI (99.9%): [26705.878, 27830.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1597.028 ±(99.9%) 33.229 MB/sec [Average]
[info]   (min, avg, max) = (1582.240, 1597.028, 1603.965), stdev = 8.629
[info]   CI (99.9%): [1563.799, 1630.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (92192.015, 92192.015, 92192.016), stdev = 0.001
[info]   CI (99.9%): [92192.013, 92192.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.445 ±(99.9%) 6.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.445, 3.604), stdev = 1.570
[info]   CI (99.9%): [≈ 0, 7.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1613.708 ±(99.9%) 1415.330 MB/sec [Average]
[info]   (min, avg, max) = (1343.197, 1613.708, 2019.104), stdev = 367.557
[info]   CI (99.9%): [198.378, 3029.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   93229.279 ±(99.9%) 83372.737 B/op [Average]
[info]   (min, avg, max) = (77299.363, 93229.279, 117646.626), stdev = 21651.635
[info]   CI (99.9%): [9856.543, 176602.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16.67% complete, ETA 01:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2747.562 ops/s
[info] # Warmup Iteration   2: 95275.831 ops/s
[info] # Warmup Iteration   3: 96763.082 ops/s
[info] # Warmup Iteration   4: 98728.216 ops/s
[info] # Warmup Iteration   5: 99548.205 ops/s
[info] Iteration   1: 99492.561 ops/s
[info]                  ·gc.alloc.rate:                   896.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10652.662 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 95241.322 ops/s
[info]                  ·gc.alloc.rate:                   857.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22212.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 99189.682 ops/s
[info]                  ·gc.alloc.rate:                   893.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10664.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 97286.383 ops/s
[info]                  ·gc.alloc.rate:                   876.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10872.717 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 99317.910 ops/s
[info]                  ·gc.alloc.rate:                   894.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21300.420 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   98105.572 ±(99.9%) 7059.344 ops/s [Average]
[info]   (min, avg, max) = (95241.322, 98105.572, 99492.561), stdev = 1833.289
[info]   CI (99.9%): [91046.228, 105164.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   883.590 ±(99.9%) 63.440 MB/sec [Average]
[info]   (min, avg, max) = (857.912, 883.590, 896.174), stdev = 16.475
[info]   CI (99.9%): [820.150, 947.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.004), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.403 ±(99.9%) 1.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 0.990), stdev = 0.434
[info]   CI (99.9%): [≈ 0, 2.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   941.105 ±(99.9%) 1416.292 MB/sec [Average]
[info]   (min, avg, max) = (671.958, 941.105, 1344.254), stdev = 367.807
[info]   CI (99.9%): [≈ 0, 2357.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   15140.418 ±(99.9%) 23291.403 B/op [Average]
[info]   (min, avg, max) = (10652.662, 15140.418, 22212.235), stdev = 6048.703
[info]   CI (99.9%): [≈ 0, 38431.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.87% complete, ETA 01:51:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36884.800 ops/s
[info] # Warmup Iteration   2: 60302.724 ops/s
[info] # Warmup Iteration   3: 60547.225 ops/s
[info] # Warmup Iteration   4: 62416.488 ops/s
[info] # Warmup Iteration   5: 62208.328 ops/s
[info] Iteration   1: 62410.562 ops/s
[info]                  ·gc.alloc.rate:                   1029.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17024.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 62140.162 ops/s
[info]                  ·gc.alloc.rate:                   1025.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34232.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 62081.486 ops/s
[info]                  ·gc.alloc.rate:                   1024.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17139.389 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 62121.812 ops/s
[info]                  ·gc.alloc.rate:                   1025.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34272.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 62259.050 ops/s
[info]                  ·gc.alloc.rate:                   1027.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17106.688 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   62202.615 ±(99.9%) 514.925 ops/s [Average]
[info]   (min, avg, max) = (62081.486, 62202.615, 62410.562), stdev = 133.724
[info]   CI (99.9%): [61687.690, 62717.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1026.328 ±(99.9%) 8.433 MB/sec [Average]
[info]   (min, avg, max) = (1024.333, 1026.328, 1029.719), stdev = 2.190
[info]   CI (99.9%): [1017.895, 1034.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25976.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25976.007, 25976.007, 25976.007), stdev = 0.001
[info]   CI (99.9%): [25976.006, 25976.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.054 ±(99.9%) 4.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.054, 2.636), stdev = 1.237
[info]   CI (99.9%): [≈ 0, 5.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.162 ±(99.9%) 1425.797 MB/sec [Average]
[info]   (min, avg, max) = (674.857, 946.162, 1352.462), stdev = 370.275
[info]   CI (99.9%): [≈ 0, 2371.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23954.964 ±(99.9%) 36197.001 B/op [Average]
[info]   (min, avg, max) = (17024.137, 23954.964, 34272.484), stdev = 9400.246
[info]   CI (99.9%): [≈ 0, 60151.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.07% complete, ETA 01:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120140.280 ops/s
[info] # Warmup Iteration   2: 130215.718 ops/s
[info] # Warmup Iteration   3: 131987.590 ops/s
[info] # Warmup Iteration   4: 131926.478 ops/s
[info] # Warmup Iteration   5: 130819.555 ops/s
[info] Iteration   1: 129531.282 ops/s
[info]                  ·gc.alloc.rate:                   834.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8198.449 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 128573.012 ops/s
[info]                  ·gc.alloc.rate:                   828.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16453.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 132342.117 ops/s
[info]                  ·gc.alloc.rate:                   852.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7984.745 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 132716.972 ops/s
[info]                  ·gc.alloc.rate:                   855.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7962.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 132271.287 ops/s
[info]                  ·gc.alloc.rate:                   852.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15977.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   131086.934 ±(99.9%) 7299.753 ops/s [Average]
[info]   (min, avg, max) = (128573.012, 131086.934, 132716.972), stdev = 1895.723
[info]   CI (99.9%): [123787.181, 138386.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   844.675 ±(99.9%) 47.138 MB/sec [Average]
[info]   (min, avg, max) = (828.504, 844.675, 855.209), stdev = 12.242
[info]   CI (99.9%): [797.537, 891.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10144.003, 10144.003), stdev = 0.001
[info]   CI (99.9%): [10144.003, 10144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.350 ±(99.9%) 1.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.350, 0.991), stdev = 0.415
[info]   CI (99.9%): [≈ 0, 1.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.674 ±(99.9%) 1414.866 MB/sec [Average]
[info]   (min, avg, max) = (671.263, 940.674, 1343.854), stdev = 367.436
[info]   CI (99.9%): [≈ 0, 2355.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11315.403 ±(99.9%) 17241.483 B/op [Average]
[info]   (min, avg, max) = (7962.189, 11315.403, 16453.815), stdev = 4477.558
[info]   CI (99.9%): [≈ 0, 28556.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.27% complete, ETA 01:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17481.296 ops/s
[info] # Warmup Iteration   2: 35012.035 ops/s
[info] # Warmup Iteration   3: 35255.955 ops/s
[info] # Warmup Iteration   4: 35516.172 ops/s
[info] # Warmup Iteration   5: 35638.339 ops/s
[info] Iteration   1: 35621.480 ops/s
[info]                  ·gc.alloc.rate:                   1860.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89735.832 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 35625.199 ops/s
[info]                  ·gc.alloc.rate:                   1860.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89843.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34895.913 ops/s
[info]                  ·gc.alloc.rate:                   1822.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61194.972 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 34945.368 ops/s
[info]                  ·gc.alloc.rate:                   1825.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91738.775 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35261.691 ops/s
[info]                  ·gc.alloc.rate:                   1841.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90971.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   35269.930 ±(99.9%) 1354.723 ops/s [Average]
[info]   (min, avg, max) = (34895.913, 35269.930, 35625.199), stdev = 351.817
[info]   CI (99.9%): [33915.207, 36624.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1842.001 ±(99.9%) 70.561 MB/sec [Average]
[info]   (min, avg, max) = (1822.473, 1842.001, 1860.433), stdev = 18.325
[info]   CI (99.9%): [1771.440, 1912.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82216.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82216.011, 82216.012, 82216.013), stdev = 0.001
[info]   CI (99.9%): [82216.010, 82216.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.229 ±(99.9%) 6.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.229, 3.750), stdev = 1.695
[info]   CI (99.9%): [≈ 0, 8.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.860 ±(99.9%) 1167.517 MB/sec [Average]
[info]   (min, avg, max) = (1356.502, 1898.860, 2037.752), stdev = 303.201
[info]   CI (99.9%): [731.342, 3066.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   84696.835 ±(99.9%) 50690.204 B/op [Average]
[info]   (min, avg, max) = (61194.972, 84696.835, 91738.775), stdev = 13164.085
[info]   CI (99.9%): [34006.631, 135387.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17.47% complete, ETA 01:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57173.495 ops/s
[info] # Warmup Iteration   2: 67000.850 ops/s
[info] # Warmup Iteration   3: 67112.405 ops/s
[info] # Warmup Iteration   4: 67359.602 ops/s
[info] # Warmup Iteration   5: 65933.126 ops/s
[info] Iteration   1: 65793.132 ops/s
[info]                  ·gc.alloc.rate:                   1183.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32122.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 67674.672 ops/s
[info]                  ·gc.alloc.rate:                   1217.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15615.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 67178.907 ops/s
[info]                  ·gc.alloc.rate:                   1208.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31461.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 65842.875 ops/s
[info]                  ·gc.alloc.rate:                   1184.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32114.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 66027.921 ops/s
[info]                  ·gc.alloc.rate:                   1187.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32054.552 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   66503.501 ±(99.9%) 3331.997 ops/s [Average]
[info]   (min, avg, max) = (65793.132, 66503.501, 67674.672), stdev = 865.309
[info]   CI (99.9%): [63171.504, 69835.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1196.037 ±(99.9%) 60.186 MB/sec [Average]
[info]   (min, avg, max) = (1183.126, 1196.037, 1217.158), stdev = 15.630
[info]   CI (99.9%): [1135.851, 1256.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28312.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28312.006, 28312.006, 28312.006), stdev = 0.001
[info]   CI (99.9%): [28312.006, 28312.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.889 ±(99.9%) 3.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.889, 1.985), stdev = 0.883
[info]   CI (99.9%): [≈ 0, 4.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.805 ±(99.9%) 1156.933 MB/sec [Average]
[info]   (min, avg, max) = (671.343, 1208.805, 1344.454), stdev = 300.452
[info]   CI (99.9%): [51.873, 2365.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   28673.778 ±(99.9%) 28128.188 B/op [Average]
[info]   (min, avg, max) = (15615.936, 28673.778, 32122.678), stdev = 7304.801
[info]   CI (99.9%): [545.590, 56801.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.67% complete, ETA 01:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29398.223 ops/s
[info] # Warmup Iteration   2: 40099.517 ops/s
[info] # Warmup Iteration   3: 40931.575 ops/s
[info] # Warmup Iteration   4: 41178.920 ops/s
[info] # Warmup Iteration   5: 41101.753 ops/s
[info] Iteration   1: 41056.000 ops/s
[info]                  ·gc.alloc.rate:                   459.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              17632.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19610.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41117.495 ops/s
[info]                  ·gc.alloc.rate:                   460.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              17632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19581.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41059.225 ops/s
[info]                  ·gc.alloc.rate:      459.877 MB/sec
[info]                  ·gc.alloc.rate.norm: 17632.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 40959.270 ops/s
[info]                  ·gc.alloc.rate:                   458.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              17632.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25901.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40972.808 ops/s
[info]                  ·gc.alloc.rate:                   458.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              17632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25892.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   41032.960 ±(99.9%) 254.079 ops/s [Average]
[info]   (min, avg, max) = (40959.270, 41032.960, 41117.495), stdev = 65.984
[info]   CI (99.9%): [40778.880, 41287.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   459.627 ±(99.9%) 2.997 MB/sec [Average]
[info]   (min, avg, max) = (458.756, 459.627, 460.641), stdev = 0.778
[info]   CI (99.9%): [456.629, 462.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17632.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (17632.010, 17632.010, 17632.011), stdev = 0.001
[info]   CI (99.9%): [17632.009, 17632.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.718 ±(99.9%) 6.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.718, 3.541), stdev = 1.578
[info]   CI (99.9%): [≈ 0, 6.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27.584 ±(99.9%) 233.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.584, 136.095), stdev = 60.661
[info]   CI (99.9%): [≈ 0, 261.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.187 ±(99.9%) 1067.524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.187, 673.927), stdev = 277.233
[info]   CI (99.9%): [≈ 0, 1541.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18197.006 ±(99.9%) 41006.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18197.006, 25901.509), stdev = 10649.145
[info]   CI (99.9%): [≈ 0, 59203.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.87% complete, ETA 01:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26106.050 ops/s
[info] # Warmup Iteration   2: 41712.759 ops/s
[info] # Warmup Iteration   3: 42284.473 ops/s
[info] # Warmup Iteration   4: 42453.324 ops/s
[info] # Warmup Iteration   5: 40627.226 ops/s
[info] Iteration   1: 42385.372 ops/s
[info]                  ·gc.alloc.rate:                   382.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18994.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 42363.478 ops/s
[info]                  ·gc.alloc.rate:                   382.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19006.523 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 42313.755 ops/s
[info]                  ·gc.alloc.rate:      382.091 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42266.984 ops/s
[info]                  ·gc.alloc.rate:                   381.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25086.559 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 42418.380 ops/s
[info]                  ·gc.alloc.rate:      383.047 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   42349.594 ±(99.9%) 230.342 ops/s [Average]
[info]   (min, avg, max) = (42266.984, 42349.594, 42418.380), stdev = 59.819
[info]   CI (99.9%): [42119.252, 42579.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   382.426 ±(99.9%) 2.079 MB/sec [Average]
[info]   (min, avg, max) = (381.681, 382.426, 383.047), stdev = 0.540
[info]   CI (99.9%): [380.347, 384.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.010), stdev = 0.001
[info]   CI (99.9%): [14216.008, 14216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.930 ±(99.9%) 6.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.930, 3.875), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 7.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.287 ±(99.9%) 1219.558 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.287, 673.540), stdev = 316.715
[info]   CI (99.9%): [≈ 0, 1558.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12617.590 ±(99.9%) 45372.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12617.590, 25086.559), stdev = 11783.150
[info]   CI (99.9%): [≈ 0, 57990.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.07% complete, ETA 01:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38558.513 ops/s
[info] # Warmup Iteration   2: 44381.049 ops/s
[info] # Warmup Iteration   3: 44572.061 ops/s
[info] # Warmup Iteration   4: 44391.176 ops/s
[info] # Warmup Iteration   5: 44531.835 ops/s
[info] Iteration   1: 43936.748 ops/s
[info]                  ·gc.alloc.rate:                   386.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18324.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 44642.901 ops/s
[info]                  ·gc.alloc.rate:                   392.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18035.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44643.389 ops/s
[info]                  ·gc.alloc.rate:                   392.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18034.765 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 44471.238 ops/s
[info]                  ·gc.alloc.rate:      390.798 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 44629.103 ops/s
[info]                  ·gc.alloc.rate:                   392.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23795.504 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44464.676 ±(99.9%) 1170.320 ops/s [Average]
[info]   (min, avg, max) = (43936.748, 44464.676, 44643.389), stdev = 303.928
[info]   CI (99.9%): [43294.356, 45634.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   390.687 ±(99.9%) 10.365 MB/sec [Average]
[info]   (min, avg, max) = (386.000, 390.687, 392.259), stdev = 2.692
[info]   CI (99.9%): [380.323, 401.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.670 ±(99.9%) 5.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.339), stdev = 1.492
[info]   CI (99.9%): [≈ 0, 6.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23.629 ±(99.9%) 202.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.629, 117.783), stdev = 52.634
[info]   CI (99.9%): [≈ 0, 226.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.777 ±(99.9%) 989.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.777, 674.599), stdev = 256.869
[info]   CI (99.9%): [≈ 0, 1430.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15638.231 ±(99.9%) 34964.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15638.231, 23795.504), stdev = 9080.283
[info]   CI (99.9%): [≈ 0, 50603.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18.27% complete, ETA 01:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39011.977 ops/s
[info] # Warmup Iteration   2: 44628.559 ops/s
[info] # Warmup Iteration   3: 45215.669 ops/s
[info] # Warmup Iteration   4: 45267.884 ops/s
[info] # Warmup Iteration   5: 45208.257 ops/s
[info] Iteration   1: 44858.313 ops/s
[info]                  ·gc.alloc.rate:                   342.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17949.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45536.848 ops/s
[info]                  ·gc.alloc.rate:      348.153 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 45140.044 ops/s
[info]                  ·gc.alloc.rate:                   344.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17836.638 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45212.206 ops/s
[info]                  ·gc.alloc.rate:                   345.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17807.451 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 45333.438 ops/s
[info]                  ·gc.alloc.rate:      346.477 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   45216.170 ±(99.9%) 963.544 ops/s [Average]
[info]   (min, avg, max) = (44858.313, 45216.170, 45536.848), stdev = 250.229
[info]   CI (99.9%): [44252.626, 46179.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   345.607 ±(99.9%) 7.471 MB/sec [Average]
[info]   (min, avg, max) = (342.884, 345.607, 348.153), stdev = 1.940
[info]   CI (99.9%): [338.137, 353.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.010), stdev = 0.001
[info]   CI (99.9%): [12032.008, 12032.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.123 ±(99.9%) 1.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.617), stdev = 0.276
[info]   CI (99.9%): [≈ 0, 1.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.867 ±(99.9%) 1078.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.867, 511.520), stdev = 280.130
[info]   CI (99.9%): [≈ 0, 1385.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   10718.727 ±(99.9%) 37678.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10718.727, 17949.546), stdev = 9784.958
[info]   CI (99.9%): [≈ 0, 48397.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18.47% complete, ETA 01:49:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24426.355 ops/s
[info] # Warmup Iteration   2: 29448.155 ops/s
[info] # Warmup Iteration   3: 29844.539 ops/s
[info] # Warmup Iteration   4: 29777.459 ops/s
[info] # Warmup Iteration   5: 30124.336 ops/s
[info] Iteration   1: 29792.313 ops/s
[info]                  ·gc.alloc.rate:                   1026.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71007.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30312.805 ops/s
[info]                  ·gc.alloc.rate:                   1044.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69720.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30477.156 ops/s
[info]                  ·gc.alloc.rate:                   1050.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34670.492 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30118.020 ops/s
[info]                  ·gc.alloc.rate:                   1037.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70167.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30088.912 ops/s
[info]                  ·gc.alloc.rate:                   1036.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              54240.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35118.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   30157.841 ±(99.9%) 992.846 ops/s [Average]
[info]   (min, avg, max) = (29792.313, 30157.841, 30477.156), stdev = 257.839
[info]   CI (99.9%): [29164.995, 31150.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1039.126 ±(99.9%) 33.859 MB/sec [Average]
[info]   (min, avg, max) = (1026.723, 1039.126, 1050.086), stdev = 8.793
[info]   CI (99.9%): [1005.267, 1072.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   54240.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (54240.013, 54240.014, 54240.014), stdev = 0.001
[info]   CI (99.9%): [54240.012, 54240.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2.176 ±(99.9%) 8.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.176, 5.438), stdev = 2.305
[info]   CI (99.9%): [≈ 0, 11.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1074.295 ±(99.9%) 1416.819 MB/sec [Average]
[info]   (min, avg, max) = (671.220, 1074.295, 1344.121), stdev = 367.944
[info]   CI (99.9%): [≈ 0, 2491.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   56136.916 ±(99.9%) 74693.602 B/op [Average]
[info]   (min, avg, max) = (34670.492, 56136.916, 71007.596), stdev = 19397.691
[info]   CI (99.9%): [≈ 0, 130830.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.67% complete, ETA 01:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16567.178 ops/s
[info] # Warmup Iteration   2: 20406.238 ops/s
[info] # Warmup Iteration   3: 19705.228 ops/s
[info] # Warmup Iteration   4: 19993.872 ops/s
[info] # Warmup Iteration   5: 20522.234 ops/s
[info] Iteration   1: 20468.549 ops/s
[info]                  ·gc.alloc.rate:                   767.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51880.799 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 19972.578 ops/s
[info]                  ·gc.alloc.rate:                   749.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53014.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20615.768 ops/s
[info]                  ·gc.alloc.rate:                   773.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51358.409 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20247.913 ops/s
[info]                  ·gc.alloc.rate:                   759.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52239.825 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 19944.718 ops/s
[info]                  ·gc.alloc.rate:                   748.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53033.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   20249.905 ±(99.9%) 1141.822 ops/s [Average]
[info]   (min, avg, max) = (19944.718, 20249.905, 20615.768), stdev = 296.527
[info]   CI (99.9%): [19108.083, 21391.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   759.440 ±(99.9%) 42.602 MB/sec [Average]
[info]   (min, avg, max) = (748.021, 759.440, 773.140), stdev = 11.064
[info]   CI (99.9%): [716.838, 802.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040.026 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (59040.020, 59040.026, 59040.049), stdev = 0.013
[info]   CI (99.9%): [59039.978, 59040.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.328 ±(99.9%) 2.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 1.640), stdev = 0.734
[info]   CI (99.9%): [≈ 0, 3.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   672.701 ±(99.9%) 4.026 MB/sec [Average]
[info]   (min, avg, max) = (671.902, 672.701, 674.460), stdev = 1.046
[info]   CI (99.9%): [668.675, 676.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   52305.266 ±(99.9%) 2798.892 B/op [Average]
[info]   (min, avg, max) = (51358.409, 52305.266, 53033.242), stdev = 726.863
[info]   CI (99.9%): [49506.374, 55104.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.88% complete, ETA 01:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12689.007 ops/s
[info] # Warmup Iteration   2: 20739.109 ops/s
[info] # Warmup Iteration   3: 20704.934 ops/s
[info] # Warmup Iteration   4: 20798.608 ops/s
[info] # Warmup Iteration   5: 20906.214 ops/s
[info] Iteration   1: 20666.587 ops/s
[info]                  ·gc.alloc.rate:                   586.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              44670.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51312.754 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20837.207 ops/s
[info]                  ·gc.alloc.rate:                   591.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50891.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20842.186 ops/s
[info]                  ·gc.alloc.rate:      591.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 44648.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20858.311 ops/s
[info]                  ·gc.alloc.rate:                   591.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50913.459 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 20884.568 ops/s
[info]                  ·gc.alloc.rate:                   592.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50847.654 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   20817.772 ±(99.9%) 333.118 ops/s [Average]
[info]   (min, avg, max) = (20666.587, 20817.772, 20884.568), stdev = 86.510
[info]   CI (99.9%): [20484.653, 21150.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   590.515 ±(99.9%) 9.058 MB/sec [Average]
[info]   (min, avg, max) = (586.428, 590.515, 592.439), stdev = 2.352
[info]   CI (99.9%): [581.457, 599.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44652.532 ±(99.9%) 38.848 B/op [Average]
[info]   (min, avg, max) = (44648.020, 44652.532, 44670.579), stdev = 10.089
[info]   CI (99.9%): [44613.683, 44691.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.896 ±(99.9%) 10.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.896, 6.341), stdev = 2.832
[info]   CI (99.9%): [≈ 0, 12.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.323 ±(99.9%) 1160.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.323, 674.702), stdev = 301.491
[info]   CI (99.9%): [≈ 0, 1700.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40793.120 ±(99.9%) 87813.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40793.120, 51312.754), stdev = 22804.814
[info]   CI (99.9%): [≈ 0, 128606.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.08% complete, ETA 01:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72943.207 ops/s
[info] # Warmup Iteration   2: 75692.897 ops/s
[info] # Warmup Iteration   3: 74964.060 ops/s
[info] # Warmup Iteration   4: 76448.156 ops/s
[info] # Warmup Iteration   5: 76170.500 ops/s
[info] Iteration   1: 76437.071 ops/s
[info]                  ·gc.alloc.rate:      198.873 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 76517.908 ops/s
[info]                  ·gc.alloc.rate:      199.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76097.165 ops/s
[info]                  ·gc.alloc.rate:                   197.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10580.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 76419.939 ops/s
[info]                  ·gc.alloc.rate:      198.819 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 75962.967 ops/s
[info]                  ·gc.alloc.rate:                   197.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10598.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   76287.010 ±(99.9%) 932.434 ops/s [Average]
[info]   (min, avg, max) = (75962.967, 76287.010, 76517.908), stdev = 242.150
[info]   CI (99.9%): [75354.576, 77219.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   198.490 ±(99.9%) 2.476 MB/sec [Average]
[info]   (min, avg, max) = (197.644, 198.490, 199.138), stdev = 0.643
[info]   CI (99.9%): [196.015, 200.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.129 ±(99.9%) 1.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.647), stdev = 0.289
[info]   CI (99.9%): [≈ 0, 1.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.561 ±(99.9%) 1078.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.561, 511.415), stdev = 280.107
[info]   CI (99.9%): [≈ 0, 1283.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4235.783 ±(99.9%) 22334.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4235.783, 10598.647), stdev = 5800.088
[info]   CI (99.9%): [≈ 0, 26569.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.28% complete, ETA 01:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9606.120 ops/s
[info] # Warmup Iteration   2: 16318.488 ops/s
[info] # Warmup Iteration   3: 16521.640 ops/s
[info] # Warmup Iteration   4: 16472.501 ops/s
[info] # Warmup Iteration   5: 16515.922 ops/s
[info] Iteration   1: 16812.766 ops/s
[info]                  ·gc.alloc.rate:                   1090.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              102080.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126450.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16722.045 ops/s
[info]                  ·gc.alloc.rate:                   1084.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              102080.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63608.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 16847.602 ops/s
[info]                  ·gc.alloc.rate:                   1092.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              102079.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126374.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16852.201 ops/s
[info]                  ·gc.alloc.rate:                   1092.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              102080.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63199.455 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16442.412 ops/s
[info]                  ·gc.alloc.rate:                   1066.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              102080.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129613.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16735.405 ±(99.9%) 662.034 ops/s [Average]
[info]   (min, avg, max) = (16442.412, 16735.405, 16852.201), stdev = 171.928
[info]   CI (99.9%): [16073.371, 17397.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1085.195 ±(99.9%) 43.137 MB/sec [Average]
[info]   (min, avg, max) = (1066.119, 1085.195, 1092.799), stdev = 11.202
[info]   CI (99.9%): [1042.059, 1128.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102079.831 ±(99.9%) 1.676 B/op [Average]
[info]   (min, avg, max) = (102079.053, 102079.831, 102080.031), stdev = 0.435
[info]   CI (99.9%): [102078.156, 102081.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.167 ±(99.9%) 6.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.167, 3.889), stdev = 1.740
[info]   CI (99.9%): [≈ 0, 7.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1081.798 ±(99.9%) 1426.123 MB/sec [Average]
[info]   (min, avg, max) = (675.613, 1081.798, 1353.678), stdev = 370.360
[info]   CI (99.9%): [≈ 0, 2507.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   101849.082 ±(99.9%) 135235.683 B/op [Average]
[info]   (min, avg, max) = (63199.455, 101849.082, 129613.608), stdev = 35120.277
[info]   CI (99.9%): [≈ 0, 237084.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19.48% complete, ETA 01:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13689.317 ops/s
[info] # Warmup Iteration   2: 16137.864 ops/s
[info] # Warmup Iteration   3: 16250.177 ops/s
[info] # Warmup Iteration   4: 16406.743 ops/s
[info] # Warmup Iteration   5: 16683.576 ops/s
[info] Iteration   1: 16543.667 ops/s
[info]                  ·gc.alloc.rate:                   570.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              54280.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48664.876 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16750.750 ops/s
[info]                  ·gc.alloc.rate:                   577.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              54275.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63525.405 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16756.017 ops/s
[info]                  ·gc.alloc.rate:                   577.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63502.663 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16821.273 ops/s
[info]                  ·gc.alloc.rate:                   579.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63066.618 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 16798.901 ops/s
[info]                  ·gc.alloc.rate:      579.160 MB/sec
[info]                  ·gc.alloc.rate.norm: 54256.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   16734.121 ±(99.9%) 425.408 ops/s [Average]
[info]   (min, avg, max) = (16543.667, 16734.121, 16821.273), stdev = 110.477
[info]   CI (99.9%): [16308.714, 17159.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   576.860 ±(99.9%) 14.392 MB/sec [Average]
[info]   (min, avg, max) = (570.402, 576.860, 579.688), stdev = 3.738
[info]   CI (99.9%): [562.468, 591.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   54264.789 ±(99.9%) 46.559 B/op [Average]
[info]   (min, avg, max) = (54256.024, 54264.789, 54280.025), stdev = 12.091
[info]   CI (99.9%): [54218.230, 54311.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.549 ±(99.9%) 4.682 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 2.724), stdev = 1.216
[info]   CI (99.9%): [≈ 0, 5.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   51.588 ±(99.9%) 439.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.588, 255.987), stdev = 114.265
[info]   CI (99.9%): [≈ 0, 491.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   507.422 ±(99.9%) 1125.916 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507.422, 675.995), stdev = 292.397
[info]   CI (99.9%): [≈ 0, 1633.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   47751.913 ±(99.9%) 105673.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47751.913, 63525.405), stdev = 27443.160
[info]   CI (99.9%): [≈ 0, 153425.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.68% complete, ETA 01:47:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41932.898 ops/s
[info] # Warmup Iteration   2: 59581.743 ops/s
[info] # Warmup Iteration   3: 59782.120 ops/s
[info] # Warmup Iteration   4: 60660.408 ops/s
[info] # Warmup Iteration   5: 60149.348 ops/s
[info] Iteration   1: 61130.857 ops/s
[info]                  ·gc.alloc.rate:                   925.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34674.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 61230.607 ops/s
[info]                  ·gc.alloc.rate:                   927.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17276.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 58582.881 ops/s
[info]                  ·gc.alloc.rate:                   887.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36075.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 60589.703 ops/s
[info]                  ·gc.alloc.rate:                   917.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17440.797 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 61022.127 ops/s
[info]                  ·gc.alloc.rate:                   924.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17315.934 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   60511.235 ±(99.9%) 4256.288 ops/s [Average]
[info]   (min, avg, max) = (58582.881, 60511.235, 61230.607), stdev = 1105.344
[info]   CI (99.9%): [56254.947, 64767.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   916.726 ±(99.9%) 64.471 MB/sec [Average]
[info]   (min, avg, max) = (887.540, 916.726, 927.818), stdev = 16.743
[info]   CI (99.9%): [852.255, 981.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.007), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.858 ±(99.9%) 4.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 2.679), stdev = 1.234
[info]   CI (99.9%): [≈ 0, 5.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   940.712 ±(99.9%) 1419.225 MB/sec [Average]
[info]   (min, avg, max) = (671.247, 940.712, 1346.297), stdev = 368.568
[info]   CI (99.9%): [≈ 0, 2359.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24556.567 ±(99.9%) 38076.666 B/op [Average]
[info]   (min, avg, max) = (17276.223, 24556.567, 36075.724), stdev = 9888.389
[info]   CI (99.9%): [≈ 0, 62633.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.88% complete, ETA 01:47:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55824.502 ops/s
[info] # Warmup Iteration   2: 86608.723 ops/s
[info] # Warmup Iteration   3: 88628.787 ops/s
[info] # Warmup Iteration   4: 87529.867 ops/s
[info] # Warmup Iteration   5: 87245.048 ops/s
[info] Iteration   1: 89620.967 ops/s
[info]                  ·gc.alloc.rate:                   1062.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23722.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 90466.055 ops/s
[info]                  ·gc.alloc.rate:                   1072.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11756.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 90040.661 ops/s
[info]                  ·gc.alloc.rate:                   1067.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23634.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 90290.798 ops/s
[info]                  ·gc.alloc.rate:                   1070.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11796.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 90041.567 ops/s
[info]                  ·gc.alloc.rate:                   1067.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23669.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   90092.009 ±(99.9%) 1227.517 ops/s [Average]
[info]   (min, avg, max) = (89620.967, 90092.009, 90466.055), stdev = 318.782
[info]   CI (99.9%): [88864.492, 91319.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1068.150 ±(99.9%) 14.790 MB/sec [Average]
[info]   (min, avg, max) = (1062.458, 1068.150, 1072.683), stdev = 3.841
[info]   CI (99.9%): [1053.359, 1082.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.005, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.729 ±(99.9%) 2.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 1.462), stdev = 0.729
[info]   CI (99.9%): [≈ 0, 3.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.683 ±(99.9%) 1425.554 MB/sec [Average]
[info]   (min, avg, max) = (675.704, 1081.683, 1353.659), stdev = 370.212
[info]   CI (99.9%): [≈ 0, 2507.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18915.787 ±(99.9%) 25095.624 B/op [Average]
[info]   (min, avg, max) = (11756.817, 18915.787, 23722.010), stdev = 6517.254
[info]   CI (99.9%): [≈ 0, 44011.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.08% complete, ETA 01:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198436.698 ops/s
[info] # Warmup Iteration   2: 202898.355 ops/s
[info] # Warmup Iteration   3: 195253.083 ops/s
[info] # Warmup Iteration   4: 199701.061 ops/s
[info] # Warmup Iteration   5: 200825.337 ops/s
[info] Iteration   1: 201322.482 ops/s
[info]                  ·gc.alloc.rate:      319.173 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 198665.971 ops/s
[info]                  ·gc.alloc.rate:                   314.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4052.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 199779.386 ops/s
[info]                  ·gc.alloc.rate:                   316.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4029.957 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 201587.207 ops/s
[info]                  ·gc.alloc.rate:      319.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 200637.249 ops/s
[info]                  ·gc.alloc.rate:                   318.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4012.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   200398.459 ±(99.9%) 4600.161 ops/s [Average]
[info]   (min, avg, max) = (198665.971, 200398.459, 201587.207), stdev = 1194.647
[info]   CI (99.9%): [195798.298, 204998.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   317.734 ±(99.9%) 7.259 MB/sec [Average]
[info]   (min, avg, max) = (314.994, 317.734, 319.610), stdev = 1.885
[info]   CI (99.9%): [310.476, 324.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.860 ±(99.9%) 1078.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.860, 511.491), stdev = 280.124
[info]   CI (99.9%): [≈ 0, 1385.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2419.030 ±(99.9%) 8503.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2419.030, 4052.203), stdev = 2208.306
[info]   CI (99.9%): [≈ 0, 10922.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.28% complete, ETA 01:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230454.802 ops/s
[info] # Warmup Iteration   2: 246668.209 ops/s
[info] # Warmup Iteration   3: 248763.078 ops/s
[info] # Warmup Iteration   4: 249773.679 ops/s
[info] # Warmup Iteration   5: 249988.438 ops/s
[info] Iteration   1: 249295.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 249863.308 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 250072.976 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 249809.485 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 249258.218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   249659.986 ±(99.9%) 1399.265 ops/s [Average]
[info]   (min, avg, max) = (249258.218, 249659.986, 250072.976), stdev = 363.385
[info]   CI (99.9%): [248260.721, 251059.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.48% complete, ETA 01:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53114.465 ops/s
[info] # Warmup Iteration   2: 74071.442 ops/s
[info] # Warmup Iteration   3: 74475.372 ops/s
[info] # Warmup Iteration   4: 74618.882 ops/s
[info] # Warmup Iteration   5: 75013.797 ops/s
[info] Iteration   1: 74819.233 ops/s
[info]                  ·gc.alloc.rate:                   1165.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28191.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 75100.738 ops/s
[info]                  ·gc.alloc.rate:                   1169.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28060.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 75131.821 ops/s
[info]                  ·gc.alloc.rate:                   1170.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14023.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 73864.401 ops/s
[info]                  ·gc.alloc.rate:                   1150.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28542.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 74921.432 ops/s
[info]                  ·gc.alloc.rate:                   1166.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28165.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   74767.525 ±(99.9%) 2006.159 ops/s [Average]
[info]   (min, avg, max) = (73864.401, 74767.525, 75131.821), stdev = 520.993
[info]   CI (99.9%): [72761.366, 76773.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1164.589 ±(99.9%) 31.207 MB/sec [Average]
[info]   (min, avg, max) = (1150.554, 1164.589, 1170.255), stdev = 8.104
[info]   CI (99.9%): [1133.382, 1195.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24520.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24520.005, 24520.006, 24520.006), stdev = 0.001
[info]   CI (99.9%): [24520.005, 24520.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.614 ±(99.9%) 2.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.614, 1.751), stdev = 0.732
[info]   CI (99.9%): [≈ 0, 3.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1205.512 ±(99.9%) 1154.280 MB/sec [Average]
[info]   (min, avg, max) = (669.281, 1205.512, 1340.454), stdev = 299.763
[info]   CI (99.9%): [51.232, 2359.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25396.370 ±(99.9%) 24491.462 B/op [Average]
[info]   (min, avg, max) = (14023.246, 25396.370, 28542.046), stdev = 6360.355
[info]   CI (99.9%): [904.908, 49887.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20.68% complete, ETA 01:46:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9687.151 ops/s
[info] # Warmup Iteration   2: 11242.950 ops/s
[info] # Warmup Iteration   3: 11304.655 ops/s
[info] # Warmup Iteration   4: 11338.914 ops/s
[info] # Warmup Iteration   5: 11255.492 ops/s
[info] Iteration   1: 11286.581 ops/s
[info]                  ·gc.alloc.rate:                   1490.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              207946.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187796.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 11455.590 ops/s
[info]                  ·gc.alloc.rate:                   1513.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              207960.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185042.824 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11398.011 ops/s
[info]                  ·gc.alloc.rate:                   1506.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              207960.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279273.838 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 11408.697 ops/s
[info]                  ·gc.alloc.rate:                   1507.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              207960.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186156.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11351.834 ops/s
[info]                  ·gc.alloc.rate:                   1499.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              207955.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187275.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   11380.143 ±(99.9%) 246.426 ops/s [Average]
[info]   (min, avg, max) = (11286.581, 11380.143, 11455.590), stdev = 63.996
[info]   CI (99.9%): [11133.716, 11626.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1503.341 ±(99.9%) 33.234 MB/sec [Average]
[info]   (min, avg, max) = (1490.616, 1503.341, 1513.268), stdev = 8.631
[info]   CI (99.9%): [1470.107, 1536.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   207956.309 ±(99.9%) 23.462 B/op [Average]
[info]   (min, avg, max) = (207946.012, 207956.309, 207960.038), stdev = 6.093
[info]   CI (99.9%): [207932.847, 207979.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6.893 ±(99.9%) 16.692 B/op [Average]
[info]   (min, avg, max) = (2.886, 6.893, 11.497), stdev = 4.335
[info]   CI (99.9%): [≈ 0, 23.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1482.975 ±(99.9%) 1161.799 MB/sec [Average]
[info]   (min, avg, max) = (1346.177, 1482.975, 2022.690), stdev = 301.715
[info]   CI (99.9%): [321.176, 2644.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   205108.927 ±(99.9%) 159697.855 B/op [Average]
[info]   (min, avg, max) = (185042.824, 205108.927, 279273.838), stdev = 41473.026
[info]   CI (99.9%): [45411.072, 364806.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.88% complete, ETA 01:46:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19617.524 ops/s
[info] # Warmup Iteration   2: 27205.500 ops/s
[info] # Warmup Iteration   3: 27809.532 ops/s
[info] # Warmup Iteration   4: 27637.400 ops/s
[info] # Warmup Iteration   5: 27671.147 ops/s
[info] Iteration   1: 27519.902 ops/s
[info]                  ·gc.alloc.rate:                   572.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29256.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27497.217 ops/s
[info]                  ·gc.alloc.rate:                   571.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38586.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27827.038 ops/s
[info]                  ·gc.alloc.rate:                   578.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38127.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27745.397 ops/s
[info]                  ·gc.alloc.rate:                   576.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38123.854 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27766.999 ops/s
[info]                  ·gc.alloc.rate:      577.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 32736.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27671.311 ±(99.9%) 584.390 ops/s [Average]
[info]   (min, avg, max) = (27497.217, 27671.311, 27827.038), stdev = 151.764
[info]   CI (99.9%): [27086.921, 28255.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   575.458 ±(99.9%) 12.274 MB/sec [Average]
[info]   (min, avg, max) = (571.837, 575.458, 578.788), stdev = 3.187
[info]   CI (99.9%): [563.184, 587.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.015, 32736.016), stdev = 0.001
[info]   CI (99.9%): [32736.013, 32736.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.715 ±(99.9%) 6.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.715, 3.556), stdev = 1.588
[info]   CI (99.9%): [≈ 0, 6.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40.945 ±(99.9%) 350.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.945, 203.548), stdev = 90.899
[info]   CI (99.9%): [≈ 0, 390.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   506.298 ±(99.9%) 1122.794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.298, 674.108), stdev = 291.586
[info]   CI (99.9%): [≈ 0, 1629.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28818.710 ±(99.9%) 63836.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28818.710, 38586.194), stdev = 16578.214
[info]   CI (99.9%): [≈ 0, 92655.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.08% complete, ETA 01:45:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18672.076 ops/s
[info] # Warmup Iteration   2: 27768.482 ops/s
[info] # Warmup Iteration   3: 28695.399 ops/s
[info] # Warmup Iteration   4: 28643.853 ops/s
[info] # Warmup Iteration   5: 27909.753 ops/s
[info] Iteration   1: 28682.907 ops/s
[info]                  ·gc.alloc.rate:                   376.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28069.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 28789.974 ops/s
[info]                  ·gc.alloc.rate:      377.763 MB/sec
[info]                  ·gc.alloc.rate.norm: 20656.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28652.965 ops/s
[info]                  ·gc.alloc.rate:                   375.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28098.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28634.144 ops/s
[info]                  ·gc.alloc.rate:                   375.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37030.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28681.995 ops/s
[info]                  ·gc.alloc.rate:      376.335 MB/sec
[info]                  ·gc.alloc.rate.norm: 20656.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28688.397 ±(99.9%) 232.540 ops/s [Average]
[info]   (min, avg, max) = (28634.144, 28688.397, 28789.974), stdev = 60.390
[info]   CI (99.9%): [28455.857, 28920.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   376.427 ±(99.9%) 3.037 MB/sec [Average]
[info]   (min, avg, max) = (375.734, 376.427, 377.763), stdev = 0.789
[info]   CI (99.9%): [373.390, 379.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (20656.014, 20656.014, 20656.015), stdev = 0.001
[info]   CI (99.9%): [20656.012, 20656.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.187), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.059 ±(99.9%) 17.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.059, 10.296), stdev = 4.605
[info]   CI (99.9%): [≈ 0, 19.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.284 ±(99.9%) 1219.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.284, 673.591), stdev = 316.720
[info]   CI (99.9%): [≈ 0, 1558.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18639.720 ±(99.9%) 67013.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18639.720, 37030.746), stdev = 17403.266
[info]   CI (99.9%): [≈ 0, 85653.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.29% complete, ETA 01:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106556.245 ops/s
[info] # Warmup Iteration   2: 120486.236 ops/s
[info] # Warmup Iteration   3: 124947.329 ops/s
[info] # Warmup Iteration   4: 125385.914 ops/s
[info] # Warmup Iteration   5: 125030.897 ops/s
[info] Iteration   1: 125250.551 ops/s
[info]                  ·gc.alloc.rate:                   488.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6428.360 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 123527.508 ops/s
[info]                  ·gc.alloc.rate:                   482.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6518.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 122382.498 ops/s
[info]                  ·gc.alloc.rate:                   477.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8677.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 122663.842 ops/s
[info]                  ·gc.alloc.rate:      478.734 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 122674.994 ops/s
[info]                  ·gc.alloc.rate:                   478.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8656.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   123299.879 ±(99.9%) 4512.632 ops/s [Average]
[info]   (min, avg, max) = (122382.498, 123299.879, 125250.551), stdev = 1171.916
[info]   CI (99.9%): [118787.247, 127812.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   481.218 ±(99.9%) 17.554 MB/sec [Average]
[info]   (min, avg, max) = (477.622, 481.218, 488.775), stdev = 4.559
[info]   CI (99.9%): [463.664, 498.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.675 ±(99.9%) 5.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.309), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.677 ±(99.9%) 72.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.677, 42.564), stdev = 18.945
[info]   CI (99.9%): [≈ 0, 81.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.415 ±(99.9%) 1068.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.415, 674.566), stdev = 277.459
[info]   CI (99.9%): [≈ 0, 1542.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6056.098 ±(99.9%) 13703.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6056.098, 8677.315), stdev = 3558.856
[info]   CI (99.9%): [≈ 0, 19759.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.49% complete, ETA 01:45:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10667.808 ops/s
[info] # Warmup Iteration   2: 22672.338 ops/s
[info] # Warmup Iteration   3: 22712.608 ops/s
[info] # Warmup Iteration   4: 22397.871 ops/s
[info] # Warmup Iteration   5: 22716.080 ops/s
[info] Iteration   1: 22738.179 ops/s
[info]                  ·gc.alloc.rate:                   1255.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93489.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22793.382 ops/s
[info]                  ·gc.alloc.rate:                   1258.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93372.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22101.222 ops/s
[info]                  ·gc.alloc.rate:                   1220.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96334.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22864.831 ops/s
[info]                  ·gc.alloc.rate:                   1262.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93207.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22830.994 ops/s
[info]                  ·gc.alloc.rate:                   1260.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46696.229 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   22665.721 ±(99.9%) 1228.540 ops/s [Average]
[info]   (min, avg, max) = (22101.222, 22665.721, 22864.831), stdev = 319.048
[info]   CI (99.9%): [21437.181, 23894.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1251.577 ±(99.9%) 67.533 MB/sec [Average]
[info]   (min, avg, max) = (1220.546, 1251.577, 1262.513), stdev = 17.538
[info]   CI (99.9%): [1184.044, 1319.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86920.019 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (86920.018, 86920.019, 86920.025), stdev = 0.003
[info]   CI (99.9%): [86920.007, 86920.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.455 ±(99.9%) 4.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.455, 2.964), stdev = 1.048
[info]   CI (99.9%): [≈ 0, 5.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1217.247 ±(99.9%) 1162.126 MB/sec [Average]
[info]   (min, avg, max) = (677.374, 1217.247, 1353.842), stdev = 301.801
[info]   CI (99.9%): [55.121, 2379.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   84619.988 ±(99.9%) 81785.487 B/op [Average]
[info]   (min, avg, max) = (46696.229, 84619.988, 96334.096), stdev = 21239.431
[info]   CI (99.9%): [2834.501, 166405.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21.69% complete, ETA 01:44:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59319.107 ops/s
[info] # Warmup Iteration   2: 77034.895 ops/s
[info] # Warmup Iteration   3: 77173.101 ops/s
[info] # Warmup Iteration   4: 78254.638 ops/s
[info] # Warmup Iteration   5: 76492.064 ops/s
[info] Iteration   1: 77092.377 ops/s
[info]                  ·gc.alloc.rate:                   1471.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27413.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 78465.742 ops/s
[info]                  ·gc.alloc.rate:                   1497.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26934.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 76322.526 ops/s
[info]                  ·gc.alloc.rate:                   1456.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27719.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 76448.969 ops/s
[info]                  ·gc.alloc.rate:                   1458.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27699.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 76328.955 ops/s
[info]                  ·gc.alloc.rate:                   1456.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27770.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   76931.714 ±(99.9%) 3522.089 ops/s [Average]
[info]   (min, avg, max) = (76322.526, 76931.714, 78465.742), stdev = 914.675
[info]   CI (99.9%): [73409.625, 80453.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1468.111 ±(99.9%) 66.982 MB/sec [Average]
[info]   (min, avg, max) = (1456.411, 1468.111, 1497.205), stdev = 17.395
[info]   CI (99.9%): [1401.130, 1535.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30040.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30040.005, 30040.005, 30040.006), stdev = 0.001
[info]   CI (99.9%): [30040.005, 30040.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.683 ±(99.9%) 0.921 B/op [Average]
[info]   (min, avg, max) = (0.418, 0.683, 0.858), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1344.184 ±(99.9%) 6.773 MB/sec [Average]
[info]   (min, avg, max) = (1342.426, 1344.184, 1346.693), stdev = 1.759
[info]   CI (99.9%): [1337.411, 1350.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   27507.554 ±(99.9%) 1345.039 B/op [Average]
[info]   (min, avg, max) = (26934.524, 27507.554, 27770.481), stdev = 349.302
[info]   CI (99.9%): [26162.515, 28852.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.89% complete, ETA 01:44:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134935.183 ops/s
[info] # Warmup Iteration   2: 173014.751 ops/s
[info] # Warmup Iteration   3: 175767.338 ops/s
[info] # Warmup Iteration   4: 178579.545 ops/s
[info] # Warmup Iteration   5: 179086.935 ops/s
[info] Iteration   1: 179265.664 ops/s
[info]                  ·gc.alloc.rate:                   623.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4491.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 178743.829 ops/s
[info]                  ·gc.alloc.rate:                   621.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5934.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 178475.615 ops/s
[info]                  ·gc.alloc.rate:                   620.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5944.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 178222.788 ops/s
[info]                  ·gc.alloc.rate:                   619.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5935.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 178500.173 ops/s
[info]                  ·gc.alloc.rate:                   620.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5926.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   178641.614 ±(99.9%) 1519.496 ops/s [Average]
[info]   (min, avg, max) = (178222.788, 178641.614, 179265.664), stdev = 394.608
[info]   CI (99.9%): [177122.118, 180161.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   620.982 ±(99.9%) 5.022 MB/sec [Average]
[info]   (min, avg, max) = (619.611, 620.982, 623.057), stdev = 1.304
[info]   CI (99.9%): [615.961, 626.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.002, 5472.002, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.002, 5472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.731 ±(99.9%) 6.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.731, 3.571), stdev = 1.588
[info]   CI (99.9%): [≈ 0, 6.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.437 ±(99.9%) 53.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.437, 31.448), stdev = 13.986
[info]   CI (99.9%): [≈ 0, 60.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.652 ±(99.9%) 278.306 MB/sec [Average]
[info]   (min, avg, max) = (511.374, 640.652, 673.991), stdev = 72.275
[info]   CI (99.9%): [362.346, 918.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5646.295 ±(99.9%) 2486.678 B/op [Average]
[info]   (min, avg, max) = (4491.140, 5646.295, 5944.235), stdev = 645.782
[info]   CI (99.9%): [3159.617, 8132.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.09% complete, ETA 01:44:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191977.660 ops/s
[info] # Warmup Iteration   2: 280274.029 ops/s
[info] # Warmup Iteration   3: 269653.536 ops/s
[info] # Warmup Iteration   4: 281887.426 ops/s
[info] # Warmup Iteration   5: 283588.135 ops/s
[info] Iteration   1: 277178.024 ops/s
[info]                  ·gc.alloc.rate:                   280.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2904.685 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 283139.241 ops/s
[info]                  ·gc.alloc.rate:      286.331 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 281727.354 ops/s
[info]                  ·gc.alloc.rate:                   284.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2857.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 282641.792 ops/s
[info]                  ·gc.alloc.rate:      285.822 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 282146.835 ops/s
[info]                  ·gc.alloc.rate:                   285.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2853.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   281366.649 ±(99.9%) 9243.842 ops/s [Average]
[info]   (min, avg, max) = (277178.024, 281366.649, 283139.241), stdev = 2400.596
[info]   CI (99.9%): [272122.807, 290610.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   284.544 ±(99.9%) 9.394 MB/sec [Average]
[info]   (min, avg, max) = (280.278, 284.544, 286.331), stdev = 2.440
[info]   CI (99.9%): [275.150, 293.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.855 ±(99.9%) 1078.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.855, 511.530), stdev = 280.119
[info]   CI (99.9%): [≈ 0, 1385.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1723.133 ±(99.9%) 6057.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1723.133, 2904.685), stdev = 1573.127
[info]   CI (99.9%): [≈ 0, 7780.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.29% complete, ETA 01:44:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462866.569 ops/s
[info] # Warmup Iteration   2: 476349.710 ops/s
[info] # Warmup Iteration   3: 487701.602 ops/s
[info] # Warmup Iteration   4: 486076.242 ops/s
[info] # Warmup Iteration   5: 480856.816 ops/s
[info] Iteration   1: 460804.226 ops/s
[info]                  ·gc.alloc.rate:                   353.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1747.342 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 487613.731 ops/s
[info]                  ·gc.alloc.rate:                   374.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1651.321 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 486684.603 ops/s
[info]                  ·gc.alloc.rate:      373.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 485530.241 ops/s
[info]                  ·gc.alloc.rate:                   372.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1658.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 486056.963 ops/s
[info]                  ·gc.alloc.rate:                   373.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2185.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   481337.953 ±(99.9%) 44301.251 ops/s [Average]
[info]   (min, avg, max) = (460804.226, 481337.953, 487613.731), stdev = 11504.894
[info]   CI (99.9%): [437036.702, 525639.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   369.371 ±(99.9%) 34.037 MB/sec [Average]
[info]   (min, avg, max) = (353.595, 369.371, 374.207), stdev = 8.839
[info]   CI (99.9%): [335.334, 403.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.718 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.327), stdev = 1.485
[info]   CI (99.9%): [≈ 0, 6.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.172 ±(99.9%) 18.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.172, 10.774), stdev = 4.809
[info]   CI (99.9%): [≈ 0, 20.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.838 ±(99.9%) 989.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.838, 674.692), stdev = 256.905
[info]   CI (99.9%): [≈ 0, 1431.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1448.403 ±(99.9%) 3230.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1448.403, 2185.037), stdev = 838.914
[info]   CI (99.9%): [≈ 0, 4678.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.49% complete, ETA 01:43:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497908.887 ops/s
[info] # Warmup Iteration   2: 532817.510 ops/s
[info] # Warmup Iteration   3: 533036.798 ops/s
[info] # Warmup Iteration   4: 532893.149 ops/s
[info] # Warmup Iteration   5: 534288.617 ops/s
[info] Iteration   1: 534218.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 532968.142 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 534094.704 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 533273.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 532933.750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   533497.560 ±(99.9%) 2377.102 ops/s [Average]
[info]   (min, avg, max) = (532933.750, 533497.560, 534218.132), stdev = 617.326
[info]   CI (99.9%): [531120.459, 535874.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.69% complete, ETA 01:43:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159010.063 ops/s
[info] # Warmup Iteration   2: 282337.224 ops/s
[info] # Warmup Iteration   3: 283093.662 ops/s
[info] # Warmup Iteration   4: 279281.775 ops/s
[info] # Warmup Iteration   5: 278756.456 ops/s
[info] Iteration   1: 277082.876 ops/s
[info]                  ·gc.alloc.rate:                   766.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3826.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 277397.779 ops/s
[info]                  ·gc.alloc.rate:                   767.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3828.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 275757.338 ops/s
[info]                  ·gc.alloc.rate:                   762.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7698.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 276639.295 ops/s
[info]                  ·gc.alloc.rate:                   764.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3842.562 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 276757.062 ops/s
[info]                  ·gc.alloc.rate:                   765.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3842.984 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   276726.870 ±(99.9%) 2377.934 ops/s [Average]
[info]   (min, avg, max) = (275757.338, 276726.870, 277397.779), stdev = 617.542
[info]   CI (99.9%): [274348.936, 279104.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   765.133 ±(99.9%) 6.107 MB/sec [Average]
[info]   (min, avg, max) = (762.765, 765.133, 767.016), stdev = 1.586
[info]   CI (99.9%): [759.026, 771.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.002), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.142 ±(99.9%) 0.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.237), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.709 ±(99.9%) 1161.616 MB/sec [Average]
[info]   (min, avg, max) = (673.601, 809.709, 1349.347), stdev = 301.668
[info]   CI (99.9%): [≈ 0, 1971.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4607.942 ±(99.9%) 6653.324 B/op [Average]
[info]   (min, avg, max) = (3826.920, 4607.942, 7698.779), stdev = 1727.847
[info]   CI (99.9%): [≈ 0, 11261.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22.89% complete, ETA 01:43:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24195.987 ops/s
[info] # Warmup Iteration   2: 27303.701 ops/s
[info] # Warmup Iteration   3: 27632.274 ops/s
[info] # Warmup Iteration   4: 27805.957 ops/s
[info] # Warmup Iteration   5: 27796.139 ops/s
[info] Iteration   1: 27772.985 ops/s
[info]                  ·gc.alloc.rate:                   1699.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114138.938 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27916.244 ops/s
[info]                  ·gc.alloc.rate:                   1708.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75786.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27757.111 ops/s
[info]                  ·gc.alloc.rate:                   1698.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114469.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27882.387 ops/s
[info]                  ·gc.alloc.rate:                   1706.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76077.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27583.431 ops/s
[info]                  ·gc.alloc.rate:                   1687.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115513.999 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   27782.432 ±(99.9%) 502.904 ops/s [Average]
[info]   (min, avg, max) = (27583.431, 27782.432, 27916.244), stdev = 130.603
[info]   CI (99.9%): [27279.527, 28285.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1699.892 ±(99.9%) 30.935 MB/sec [Average]
[info]   (min, avg, max) = (1687.703, 1699.892, 1708.222), stdev = 8.034
[info]   CI (99.9%): [1668.957, 1730.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   96320.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (96320.015, 96320.015, 96320.016), stdev = 0.001
[info]   CI (99.9%): [96320.013, 96320.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3.538 ±(99.9%) 3.225 B/op [Average]
[info]   (min, avg, max) = (2.350, 3.538, 4.718), stdev = 0.837
[info]   CI (99.9%): [0.314, 6.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1749.484 ±(99.9%) 1419.204 MB/sec [Average]
[info]   (min, avg, max) = (1344.058, 1749.484, 2024.017), stdev = 368.563
[info]   CI (99.9%): [330.280, 3168.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   99197.084 ±(99.9%) 81805.397 B/op [Average]
[info]   (min, avg, max) = (75786.196, 99197.084, 115513.999), stdev = 21244.602
[info]   CI (99.9%): [17391.687, 181002.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.09% complete, ETA 01:43:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28941.327 ops/s
[info] # Warmup Iteration   2: 37889.775 ops/s
[info] # Warmup Iteration   3: 38193.363 ops/s
[info] # Warmup Iteration   4: 37887.160 ops/s
[info] # Warmup Iteration   5: 37327.868 ops/s
[info] Iteration   1: 38287.497 ops/s
[info]                  ·gc.alloc.rate:                   1707.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82797.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38322.211 ops/s
[info]                  ·gc.alloc.rate:                   1708.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55204.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38385.743 ops/s
[info]                  ·gc.alloc.rate:                   1711.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82779.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37333.017 ops/s
[info]                  ·gc.alloc.rate:                   1664.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56820.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37905.744 ops/s
[info]                  ·gc.alloc.rate:                   1690.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84064.747 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38046.842 ±(99.9%) 1698.272 ops/s [Average]
[info]   (min, avg, max) = (37333.017, 38046.842, 38385.743), stdev = 441.036
[info]   CI (99.9%): [36348.570, 39745.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1696.635 ±(99.9%) 75.793 MB/sec [Average]
[info]   (min, avg, max) = (1664.809, 1696.635, 1711.687), stdev = 19.683
[info]   CI (99.9%): [1620.842, 1772.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.011, 70200.012), stdev = 0.001
[info]   CI (99.9%): [70200.009, 70200.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.402 ±(99.9%) 6.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.402, 4.321), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 8.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1749.560 ±(99.9%) 1419.779 MB/sec [Average]
[info]   (min, avg, max) = (1343.843, 1749.560, 2024.065), stdev = 368.712
[info]   CI (99.9%): [329.781, 3169.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   72333.250 ±(99.9%) 57447.662 B/op [Average]
[info]   (min, avg, max) = (55204.048, 72333.250, 84064.747), stdev = 14918.975
[info]   CI (99.9%): [14885.588, 129780.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:42:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26522.733 ops/s
[info] # Warmup Iteration   2: 300242.631 ops/s
[info] # Warmup Iteration   3: 290950.368 ops/s
[info] # Warmup Iteration   4: 300002.954 ops/s
[info] # Warmup Iteration   5: 300707.949 ops/s
[info] Iteration   1: 298540.108 ops/s
[info]                  ·gc.alloc.rate:                   309.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2696.850 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 302073.169 ops/s
[info]                  ·gc.alloc.rate:      313.190 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 300698.070 ops/s
[info]                  ·gc.alloc.rate:                   311.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2677.447 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 298277.587 ops/s
[info]                  ·gc.alloc.rate:                   309.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2699.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 300975.335 ops/s
[info]                  ·gc.alloc.rate:      312.016 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   300112.854 ±(99.9%) 6318.729 ops/s [Average]
[info]   (min, avg, max) = (298277.587, 300112.854, 302073.169), stdev = 1640.954
[info]   CI (99.9%): [293794.125, 306431.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   311.127 ±(99.9%) 6.601 MB/sec [Average]
[info]   (min, avg, max) = (309.228, 311.127, 313.190), stdev = 1.714
[info]   CI (99.9%): [304.527, 317.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.007 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.019), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.039 ±(99.9%) 0.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.099), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   306.853 ±(99.9%) 1078.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.853, 511.446), stdev = 280.118
[info]   CI (99.9%): [≈ 0, 1385.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1614.708 ±(99.9%) 5676.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1614.708, 2699.245), stdev = 1474.045
[info]   CI (99.9%): [≈ 0, 7290.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.49% complete, ETA 01:42:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62888.370 ops/s
[info] # Warmup Iteration   2: 98957.941 ops/s
[info] # Warmup Iteration   3: 100138.766 ops/s
[info] # Warmup Iteration   4: 100139.242 ops/s
[info] # Warmup Iteration   5: 97792.200 ops/s
[info] Iteration   1: 100546.919 ops/s
[info]                  ·gc.alloc.rate:                   1108.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21134.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 96953.610 ops/s
[info]                  ·gc.alloc.rate:                   1069.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21938.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 97552.991 ops/s
[info]                  ·gc.alloc.rate:                   1075.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10907.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 97393.400 ops/s
[info]                  ·gc.alloc.rate:                   1073.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21871.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 99417.012 ops/s
[info]                  ·gc.alloc.rate:                   1096.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10723.641 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   98372.786 ±(99.9%) 5922.543 ops/s [Average]
[info]   (min, avg, max) = (96953.610, 98372.786, 100546.919), stdev = 1538.066
[info]   CI (99.9%): [92450.243, 104295.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1084.748 ±(99.9%) 65.187 MB/sec [Average]
[info]   (min, avg, max) = (1069.110, 1084.748, 1108.644), stdev = 16.929
[info]   CI (99.9%): [1019.562, 1149.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17360.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17360.004, 17360.004, 17360.004), stdev = 0.001
[info]   CI (99.9%): [17360.004, 17360.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.532 ±(99.9%) 2.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.532, 1.352), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 2.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.393 ±(99.9%) 1423.144 MB/sec [Average]
[info]   (min, avg, max) = (675.866, 1081.393, 1353.120), stdev = 369.586
[info]   CI (99.9%): [≈ 0, 2504.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17315.190 ±(99.9%) 22881.014 B/op [Average]
[info]   (min, avg, max) = (10723.641, 17315.190, 21938.591), stdev = 5942.127
[info]   CI (99.9%): [≈ 0, 40196.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.69% complete, ETA 01:42:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 410453.303 ops/s
[info] # Warmup Iteration   2: 421567.043 ops/s
[info] # Warmup Iteration   3: 432659.033 ops/s
[info] # Warmup Iteration   4: 430156.129 ops/s
[info] # Warmup Iteration   5: 432229.127 ops/s
[info] Iteration   1: 429859.394 ops/s
[info]                  ·gc.alloc.rate:                   279.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1872.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 432881.319 ops/s
[info]                  ·gc.alloc.rate:      281.594 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 430013.410 ops/s
[info]                  ·gc.alloc.rate:                   279.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1872.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 429917.779 ops/s
[info]                  ·gc.alloc.rate:                   279.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1872.745 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 430550.094 ops/s
[info]                  ·gc.alloc.rate:      280.066 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   430644.399 ±(99.9%) 4929.373 ops/s [Average]
[info]   (min, avg, max) = (429859.394, 430644.399, 432881.319), stdev = 1280.143
[info]   CI (99.9%): [425715.026, 435573.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   280.125 ±(99.9%) 3.241 MB/sec [Average]
[info]   (min, avg, max) = (279.578, 280.125, 281.594), stdev = 0.842
[info]   CI (99.9%): [276.885, 283.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.009 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.137), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.856 ±(99.9%) 1078.643 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.856, 511.493), stdev = 280.120
[info]   CI (99.9%): [≈ 0, 1385.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1123.601 ±(99.9%) 3949.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1123.601, 1872.954), stdev = 1025.702
[info]   CI (99.9%): [≈ 0, 5073.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.90% complete, ETA 01:42:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22337.932 ops/s
[info] # Warmup Iteration   2: 40215.439 ops/s
[info] # Warmup Iteration   3: 40406.449 ops/s
[info] # Warmup Iteration   4: 39762.456 ops/s
[info] # Warmup Iteration   5: 39635.933 ops/s
[info] Iteration   1: 39593.330 ops/s
[info]                  ·gc.alloc.rate:                   2112.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80812.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40388.109 ops/s
[info]                  ·gc.alloc.rate:                   2156.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105747.918 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40338.054 ops/s
[info]                  ·gc.alloc.rate:                   2152.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79500.185 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 40487.289 ops/s
[info]                  ·gc.alloc.rate:                   2160.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79257.504 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 40362.885 ops/s
[info]                  ·gc.alloc.rate:                   2153.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79552.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   40233.933 ±(99.9%) 1396.093 ops/s [Average]
[info]   (min, avg, max) = (39593.330, 40233.933, 40487.289), stdev = 362.561
[info]   CI (99.9%): [38837.841, 41630.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2147.325 ±(99.9%) 74.975 MB/sec [Average]
[info]   (min, avg, max) = (2112.943, 2147.325, 2160.927), stdev = 19.471
[info]   CI (99.9%): [2072.350, 2222.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (84016.010, 84016.010, 84016.011), stdev = 0.001
[info]   CI (99.9%): [84016.009, 84016.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.119 ±(99.9%) 5.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.119, 4.061), stdev = 1.478
[info]   CI (99.9%): [≈ 0, 7.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2172.243 ±(99.9%) 1165.552 MB/sec [Average]
[info]   (min, avg, max) = (2032.376, 2172.243, 2713.689), stdev = 302.690
[info]   CI (99.9%): [1006.691, 3337.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   84974.187 ±(99.9%) 44777.860 B/op [Average]
[info]   (min, avg, max) = (79257.504, 84974.187, 105747.918), stdev = 11628.668
[info]   CI (99.9%): [40196.328, 129752.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24.10% complete, ETA 01:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66757.873 ops/s
[info] # Warmup Iteration   2: 78259.913 ops/s
[info] # Warmup Iteration   3: 77547.059 ops/s
[info] # Warmup Iteration   4: 77669.265 ops/s
[info] # Warmup Iteration   5: 79178.769 ops/s
[info] Iteration   1: 77021.357 ops/s
[info]                  ·gc.alloc.rate:                   1408.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41120.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 77454.158 ops/s
[info]                  ·gc.alloc.rate:                   1416.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27288.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 79597.353 ops/s
[info]                  ·gc.alloc.rate:                   1455.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26579.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 79673.855 ops/s
[info]                  ·gc.alloc.rate:                   1456.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26578.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 79447.150 ops/s
[info]                  ·gc.alloc.rate:                   1452.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26680.853 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   78638.775 ±(99.9%) 4969.826 ops/s [Average]
[info]   (min, avg, max) = (77021.357, 78638.775, 79673.855), stdev = 1290.648
[info]   CI (99.9%): [73668.948, 83608.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1438.105 ±(99.9%) 90.365 MB/sec [Average]
[info]   (min, avg, max) = (1408.472, 1438.105, 1456.751), stdev = 23.468
[info]   CI (99.9%): [1347.740, 1528.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28784.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28784.005, 28784.005, 28784.006), stdev = 0.001
[info]   CI (99.9%): [28784.004, 28784.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.834 ±(99.9%) 2.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.834, 1.275), stdev = 0.588
[info]   CI (99.9%): [≈ 0, 3.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1478.262 ±(99.9%) 1149.150 MB/sec [Average]
[info]   (min, avg, max) = (1343.247, 1478.262, 2012.107), stdev = 298.431
[info]   CI (99.9%): [329.112, 2627.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   29649.578 ±(99.9%) 24717.371 B/op [Average]
[info]   (min, avg, max) = (26578.873, 29649.578, 41120.094), stdev = 6419.023
[info]   CI (99.9%): [4932.207, 54366.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.30% complete, ETA 01:41:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68961.488 ops/s
[info] # Warmup Iteration   2: 87672.159 ops/s
[info] # Warmup Iteration   3: 88757.930 ops/s
[info] # Warmup Iteration   4: 88217.710 ops/s
[info] # Warmup Iteration   5: 88982.362 ops/s
[info] Iteration   1: 89059.421 ops/s
[info]                  ·gc.alloc.rate:                   429.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              7600.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9040.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 89666.096 ops/s
[info]                  ·gc.alloc.rate:      432.931 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 88875.539 ops/s
[info]                  ·gc.alloc.rate:                   429.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              7600.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9058.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 89039.667 ops/s
[info]                  ·gc.alloc.rate:                   429.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              7600.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11915.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 89342.759 ops/s
[info]                  ·gc.alloc.rate:      431.330 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   89196.696 ±(99.9%) 1199.762 ops/s [Average]
[info]   (min, avg, max) = (88875.539, 89196.696, 89666.096), stdev = 311.574
[info]   CI (99.9%): [87996.934, 90396.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   430.627 ±(99.9%) 5.869 MB/sec [Average]
[info]   (min, avg, max) = (429.073, 430.627, 432.931), stdev = 1.524
[info]   CI (99.9%): [424.758, 436.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7600.005, 7600.005, 7600.005), stdev = 0.001
[info]   CI (99.9%): [7600.004, 7600.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.711 ±(99.9%) 6.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.711, 3.546), stdev = 1.585
[info]   CI (99.9%): [≈ 0, 6.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.572 ±(99.9%) 107.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.572, 62.708), stdev = 28.027
[info]   CI (99.9%): [≈ 0, 120.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   339.349 ±(99.9%) 1219.872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.349, 673.847), stdev = 316.797
[info]   CI (99.9%): [≈ 0, 1559.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6002.806 ±(99.9%) 21576.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6002.806, 11915.101), stdev = 5603.280
[info]   CI (99.9%): [≈ 0, 27579.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.50% complete, ETA 01:41:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4781.903 ops/s
[info] # Warmup Iteration   2: 114986.735 ops/s
[info] # Warmup Iteration   3: 111370.621 ops/s
[info] # Warmup Iteration   4: 114076.627 ops/s
[info] # Warmup Iteration   5: 114356.242 ops/s
[info] Iteration   1: 112660.038 ops/s
[info]                  ·gc.alloc.rate:                   344.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7146.971 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 114145.689 ops/s
[info]                  ·gc.alloc.rate:                   349.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7053.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 114718.488 ops/s
[info]                  ·gc.alloc.rate:      350.985 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 114226.715 ops/s
[info]                  ·gc.alloc.rate:                   349.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7048.942 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 114185.620 ops/s
[info]                  ·gc.alloc.rate:                   349.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9282.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   113987.310 ±(99.9%) 2993.859 ops/s [Average]
[info]   (min, avg, max) = (112660.038, 113987.310, 114718.488), stdev = 777.496
[info]   CI (99.9%): [110993.451, 116981.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   348.740 ±(99.9%) 9.215 MB/sec [Average]
[info]   (min, avg, max) = (344.654, 348.740, 350.985), stdev = 2.393
[info]   CI (99.9%): [339.526, 357.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.507 ±(99.9%) 4.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.507, 2.497), stdev = 1.113
[info]   CI (99.9%): [≈ 0, 4.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6.993 ±(99.9%) 59.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.993, 34.429), stdev = 15.338
[info]   CI (99.9%): [≈ 0, 66.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   441.572 ±(99.9%) 988.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.572, 673.358), stdev = 256.603
[info]   CI (99.9%): [≈ 0, 1429.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   6106.508 ±(99.9%) 13647.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6106.508, 9282.684), stdev = 3544.217
[info]   CI (99.9%): [≈ 0, 19754.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.70% complete, ETA 01:40:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65317.229 ops/s
[info] # Warmup Iteration   2: 96809.301 ops/s
[info] # Warmup Iteration   3: 97543.545 ops/s
[info] # Warmup Iteration   4: 97388.731 ops/s
[info] # Warmup Iteration   5: 97425.121 ops/s
[info] Iteration   1: 97389.255 ops/s
[info]                  ·gc.alloc.rate:      321.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 97390.884 ops/s
[info]                  ·gc.alloc.rate:                   321.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8267.608 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 97491.773 ops/s
[info]                  ·gc.alloc.rate:      321.999 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 96716.303 ops/s
[info]                  ·gc.alloc.rate:                   319.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8324.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 97800.338 ops/s
[info]                  ·gc.alloc.rate:      323.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   97357.711 ±(99.9%) 1525.009 ops/s [Average]
[info]   (min, avg, max) = (96716.303, 97357.711, 97800.338), stdev = 396.040
[info]   CI (99.9%): [95832.702, 98882.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   321.604 ±(99.9%) 5.041 MB/sec [Average]
[info]   (min, avg, max) = (319.478, 321.604, 323.068), stdev = 1.309
[info]   CI (99.9%): [316.562, 326.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.005), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.068 ±(99.9%) 0.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.339), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204.600 ±(99.9%) 1078.798 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.600, 511.554), stdev = 280.160
[info]   CI (99.9%): [≈ 0, 1283.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3318.444 ±(99.9%) 17497.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3318.444, 8324.613), stdev = 4544.011
[info]   CI (99.9%): [≈ 0, 20815.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.90% complete, ETA 01:40:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107244.494 ops/s
[info] # Warmup Iteration   2: 113287.896 ops/s
[info] # Warmup Iteration   3: 115394.354 ops/s
[info] # Warmup Iteration   4: 115933.999 ops/s
[info] # Warmup Iteration   5: 115315.987 ops/s
[info] Iteration   1: 113721.695 ops/s
[info]                  ·gc.alloc.rate:                   347.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7079.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 115837.787 ops/s
[info]                  ·gc.alloc.rate:      354.367 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 114118.948 ops/s
[info]                  ·gc.alloc.rate:                   349.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7055.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 114707.092 ops/s
[info]                  ·gc.alloc.rate:                   350.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7018.654 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 115460.542 ops/s
[info]                  ·gc.alloc.rate:      353.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   114769.213 ±(99.9%) 3413.735 ops/s [Average]
[info]   (min, avg, max) = (113721.695, 114769.213, 115837.787), stdev = 886.536
[info]   CI (99.9%): [111355.478, 118182.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   351.111 ±(99.9%) 10.409 MB/sec [Average]
[info]   (min, avg, max) = (347.884, 351.111, 354.367), stdev = 2.703
[info]   CI (99.9%): [340.702, 361.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.079 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.256), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.863 ±(99.9%) 1078.668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.863, 511.528), stdev = 280.127
[info]   CI (99.9%): [≈ 0, 1385.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4230.690 ±(99.9%) 14871.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4230.690, 7079.679), stdev = 3862.135
[info]   CI (99.9%): [≈ 0, 19102.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.10% complete, ETA 01:40:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106514.991 ops/s
[info] # Warmup Iteration   2: 112696.243 ops/s
[info] # Warmup Iteration   3: 115174.915 ops/s
[info] # Warmup Iteration   4: 114289.279 ops/s
[info] # Warmup Iteration   5: 115491.095 ops/s
[info] Iteration   1: 114324.838 ops/s
[info]                  ·gc.alloc.rate:                   259.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7042.285 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 115592.170 ops/s
[info]                  ·gc.alloc.rate:      262.605 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 113986.835 ops/s
[info]                  ·gc.alloc.rate:                   258.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7063.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 114678.942 ops/s
[info]                  ·gc.alloc.rate:      260.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 114649.410 ops/s
[info]                  ·gc.alloc.rate:                   260.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7022.510 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   114646.439 ±(99.9%) 2305.550 ops/s [Average]
[info]   (min, avg, max) = (113986.835, 114646.439, 115592.170), stdev = 598.744
[info]   CI (99.9%): [112340.889, 116951.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   260.449 ±(99.9%) 5.276 MB/sec [Average]
[info]   (min, avg, max) = (258.923, 260.449, 262.605), stdev = 1.370
[info]   CI (99.9%): [255.174, 265.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.054 ±(99.9%) 0.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.271), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.891 ±(99.9%) 1078.764 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.891, 511.563), stdev = 280.152
[info]   CI (99.9%): [≈ 0, 1385.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4225.591 ±(99.9%) 14853.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4225.591, 7063.162), stdev = 3857.446
[info]   CI (99.9%): [≈ 0, 19079.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.30% complete, ETA 01:40:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6016.812 ops/s
[info] # Warmup Iteration   2: 9639.137 ops/s
[info] # Warmup Iteration   3: 9931.284 ops/s
[info] # Warmup Iteration   4: 10029.912 ops/s
[info] # Warmup Iteration   5: 10099.111 ops/s
[info] Iteration   1: 10039.048 ops/s
[info]                  ·gc.alloc.rate:                   1651.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316107.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10040.252 ops/s
[info]                  ·gc.alloc.rate:                   1651.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210780.062 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 9828.140 ops/s
[info]                  ·gc.alloc.rate:                   1616.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 323393.595 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9841.414 ops/s
[info]                  ·gc.alloc.rate:                   1618.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215595.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9845.420 ops/s
[info]                  ·gc.alloc.rate:                   1618.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215698.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9918.855 ±(99.9%) 425.328 ops/s [Average]
[info]   (min, avg, max) = (9828.140, 9918.855, 10040.252), stdev = 110.456
[info]   CI (99.9%): [9493.527, 10344.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1631.067 ±(99.9%) 70.488 MB/sec [Average]
[info]   (min, avg, max) = (1616.031, 1631.067, 1651.127), stdev = 18.305
[info]   CI (99.9%): [1560.579, 1701.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258856.042 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (258856.041, 258856.042, 258856.044), stdev = 0.001
[info]   CI (99.9%): [258856.037, 258856.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.611 ±(99.9%) 24.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.611, 13.054), stdev = 6.405
[info]   CI (99.9%): [≈ 0, 29.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1615.286 ±(99.9%) 1414.293 MB/sec [Average]
[info]   (min, avg, max) = (1344.405, 1615.286, 2018.937), stdev = 367.287
[info]   CI (99.9%): [200.994, 3029.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   256315.036 ±(99.9%) 223337.102 B/op [Average]
[info]   (min, avg, max) = (210780.062, 256315.036, 323393.595), stdev = 57999.936
[info]   CI (99.9%): [32977.935, 479652.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.50% complete, ETA 01:39:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5187.234 ops/s
[info] # Warmup Iteration   2: 10384.784 ops/s
[info] # Warmup Iteration   3: 10471.242 ops/s
[info] # Warmup Iteration   4: 10411.576 ops/s
[info] # Warmup Iteration   5: 10118.266 ops/s
[info] Iteration   1: 10222.777 ops/s
[info]                  ·gc.alloc.rate:                   1581.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              243480.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208259.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10305.287 ops/s
[info]                  ·gc.alloc.rate:                   1593.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              243497.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206805.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10384.950 ops/s
[info]                  ·gc.alloc.rate:                   1606.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308173.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10371.789 ops/s
[info]                  ·gc.alloc.rate:                   1604.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205854.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 10372.022 ops/s
[info]                  ·gc.alloc.rate:                   1604.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205975.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10331.365 ±(99.9%) 262.790 ops/s [Average]
[info]   (min, avg, max) = (10222.777, 10331.365, 10384.950), stdev = 68.246
[info]   CI (99.9%): [10068.575, 10594.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1598.096 ±(99.9%) 40.210 MB/sec [Average]
[info]   (min, avg, max) = (1581.578, 1598.096, 1606.338), stdev = 10.442
[info]   CI (99.9%): [1557.885, 1638.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243502.794 ±(99.9%) 54.424 B/op [Average]
[info]   (min, avg, max) = (243480.040, 243502.794, 243512.042), stdev = 14.134
[info]   CI (99.9%): [243448.370, 243557.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.156 ±(99.9%) 14.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.156, 9.463), stdev = 3.863
[info]   CI (99.9%): [≈ 0, 18.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1490.531 ±(99.9%) 1167.462 MB/sec [Average]
[info]   (min, avg, max) = (1352.793, 1490.531, 2032.878), stdev = 303.186
[info]   CI (99.9%): [323.069, 2657.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   227013.727 ±(99.9%) 174740.770 B/op [Average]
[info]   (min, avg, max) = (205854.791, 227013.727, 308173.135), stdev = 45379.623
[info]   CI (99.9%): [52272.958, 401754.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.70% complete, ETA 01:39:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174222.466 ops/s
[info] # Warmup Iteration   2: 184670.230 ops/s
[info] # Warmup Iteration   3: 185691.482 ops/s
[info] # Warmup Iteration   4: 184898.747 ops/s
[info] # Warmup Iteration   5: 185434.944 ops/s
[info] Iteration   1: 185359.776 ops/s
[info]                  ·gc.alloc.rate:                   482.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4343.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 184096.215 ops/s
[info]                  ·gc.alloc.rate:                   479.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4373.670 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 184376.950 ops/s
[info]                  ·gc.alloc.rate:                   479.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5771.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 189672.614 ops/s
[info]                  ·gc.alloc.rate:      493.477 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185787.700 ops/s
[info]                  ·gc.alloc.rate:                   483.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5727.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   185858.651 ±(99.9%) 8632.196 ops/s [Average]
[info]   (min, avg, max) = (184096.215, 185858.651, 189672.614), stdev = 2241.754
[info]   CI (99.9%): [177226.455, 194490.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   483.568 ±(99.9%) 22.390 MB/sec [Average]
[info]   (min, avg, max) = (479.082, 483.568, 493.477), stdev = 5.815
[info]   CI (99.9%): [461.178, 505.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.545 ±(99.9%) 4.645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.703), stdev = 1.206
[info]   CI (99.9%): [≈ 0, 5.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.651 ±(99.9%) 39.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.651, 23.077), stdev = 10.300
[info]   CI (99.9%): [≈ 0, 44.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.924 ±(99.9%) 1070.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.924, 675.869), stdev = 277.928
[info]   CI (99.9%): [≈ 0, 1545.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4043.041 ±(99.9%) 9105.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4043.041, 5771.185), stdev = 2364.747
[info]   CI (99.9%): [≈ 0, 13148.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25.90% complete, ETA 01:39:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2687.942 ops/s
[info] # Warmup Iteration   2: 5905.534 ops/s
[info] # Warmup Iteration   3: 5882.975 ops/s
[info] # Warmup Iteration   4: 6030.062 ops/s
[info] # Warmup Iteration   5: 6037.508 ops/s
[info] Iteration   1: 6013.287 ops/s
[info]                  ·gc.alloc.rate:                   1596.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 531173.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5894.353 ops/s
[info]                  ·gc.alloc.rate:                   1565.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 361559.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5948.939 ops/s
[info]                  ·gc.alloc.rate:                   1580.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358570.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6026.756 ops/s
[info]                  ·gc.alloc.rate:                   1600.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 531331.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5887.102 ops/s
[info]                  ·gc.alloc.rate:                   1563.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 362817.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5954.088 ±(99.9%) 250.048 ops/s [Average]
[info]   (min, avg, max) = (5887.102, 5954.088, 6026.756), stdev = 64.937
[info]   CI (99.9%): [5704.040, 6204.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1581.142 ±(99.9%) 66.242 MB/sec [Average]
[info]   (min, avg, max) = (1563.421, 1581.142, 1600.340), stdev = 17.203
[info]   CI (99.9%): [1514.900, 1647.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418024.072 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (418024.069, 418024.072, 418024.078), stdev = 0.004
[info]   CI (99.9%): [418024.056, 418024.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9.913 ±(99.9%) 23.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.913, 16.673), stdev = 6.069
[info]   CI (99.9%): [≈ 0, 33.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.817 ±(99.9%) 1426.165 MB/sec [Average]
[info]   (min, avg, max) = (1353.709, 1625.817, 2034.121), stdev = 370.370
[info]   CI (99.9%): [199.652, 3051.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   429090.723 ±(99.9%) 359163.562 B/op [Average]
[info]   (min, avg, max) = (358570.351, 429090.723, 531331.843), stdev = 93273.636
[info]   CI (99.9%): [69927.162, 788254.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26.10% complete, ETA 01:39:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7438.754 ops/s
[info] # Warmup Iteration   2: 10228.151 ops/s
[info] # Warmup Iteration   3: 10605.109 ops/s
[info] # Warmup Iteration   4: 10722.465 ops/s
[info] # Warmup Iteration   5: 10622.792 ops/s
[info] Iteration   1: 10679.272 ops/s
[info]                  ·gc.alloc.rate:                   1717.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              253152.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198466.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10732.143 ops/s
[info]                  ·gc.alloc.rate:                   1726.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              253173.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296383.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10723.359 ops/s
[info]                  ·gc.alloc.rate:                   1725.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296967.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10713.263 ops/s
[info]                  ·gc.alloc.rate:                   1723.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198326.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10665.235 ops/s
[info]                  ·gc.alloc.rate:                   1715.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299199.976 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   10702.654 ±(99.9%) 111.565 ops/s [Average]
[info]   (min, avg, max) = (10665.235, 10702.654, 10732.143), stdev = 28.973
[info]   CI (99.9%): [10591.089, 10814.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1721.391 ±(99.9%) 18.266 MB/sec [Average]
[info]   (min, avg, max) = (1715.723, 1721.391, 1726.146), stdev = 4.744
[info]   CI (99.9%): [1703.125, 1739.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   253170.735 ±(99.9%) 40.461 B/op [Average]
[info]   (min, avg, max) = (253152.041, 253170.735, 253176.048), stdev = 10.508
[info]   CI (99.9%): [253130.274, 253211.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4.288 ±(99.9%) 13.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.288, 9.215), stdev = 3.499
[info]   CI (99.9%): [≈ 0, 17.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1753.530 ±(99.9%) 1425.834 MB/sec [Average]
[info]   (min, avg, max) = (1346.109, 1753.530, 2027.618), stdev = 370.285
[info]   CI (99.9%): [327.696, 3179.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   257868.872 ±(99.9%) 209092.781 B/op [Average]
[info]   (min, avg, max) = (198326.356, 257868.872, 299199.976), stdev = 54300.731
[info]   CI (99.9%): [48776.091, 466961.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.31% complete, ETA 01:38:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16974.588 ops/s
[info] # Warmup Iteration   2: 25706.374 ops/s
[info] # Warmup Iteration   3: 25868.907 ops/s
[info] # Warmup Iteration   4: 26239.921 ops/s
[info] # Warmup Iteration   5: 25737.911 ops/s
[info] Iteration   1: 26090.559 ops/s
[info]                  ·gc.alloc.rate:                   1351.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80990.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26104.128 ops/s
[info]                  ·gc.alloc.rate:                   1352.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80959.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26153.485 ops/s
[info]                  ·gc.alloc.rate:                   1355.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80884.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 26266.928 ops/s
[info]                  ·gc.alloc.rate:                   1361.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80576.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26136.821 ops/s
[info]                  ·gc.alloc.rate:                   1354.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121631.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   26150.384 ±(99.9%) 268.820 ops/s [Average]
[info]   (min, avg, max) = (26090.559, 26150.384, 26266.928), stdev = 69.812
[info]   CI (99.9%): [25881.565, 26419.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1355.014 ±(99.9%) 14.056 MB/sec [Average]
[info]   (min, avg, max) = (1351.845, 1355.014, 1361.102), stdev = 3.650
[info]   CI (99.9%): [1340.959, 1369.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81568.016, 81568.016, 81568.017), stdev = 0.001
[info]   CI (99.9%): [81568.014, 81568.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.759 ±(99.9%) 6.836 B/op [Average]
[info]   (min, avg, max) = (1.253, 3.759, 6.275), stdev = 1.775
[info]   CI (99.9%): [≈ 0, 10.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.540 ±(99.9%) 1164.443 MB/sec [Average]
[info]   (min, avg, max) = (1342.272, 1478.540, 2019.490), stdev = 302.402
[info]   CI (99.9%): [314.096, 2642.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   89008.509 ±(99.9%) 70225.824 B/op [Average]
[info]   (min, avg, max) = (80576.804, 89008.509, 121631.286), stdev = 18237.423
[info]   CI (99.9%): [18782.685, 159234.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.51% complete, ETA 01:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16691.049 ops/s
[info] # Warmup Iteration   2: 30820.444 ops/s
[info] # Warmup Iteration   3: 31059.116 ops/s
[info] # Warmup Iteration   4: 30788.301 ops/s
[info] # Warmup Iteration   5: 30726.143 ops/s
[info] Iteration   1: 30754.256 ops/s
[info]                  ·gc.alloc.rate:                   1503.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69200.562 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30812.257 ops/s
[info]                  ·gc.alloc.rate:                   1506.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69138.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30776.810 ops/s
[info]                  ·gc.alloc.rate:                   1504.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103961.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 31460.269 ops/s
[info]                  ·gc.alloc.rate:                   1537.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67862.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30870.028 ops/s
[info]                  ·gc.alloc.rate:                   1508.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69184.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   30934.724 ±(99.9%) 1143.724 ops/s [Average]
[info]   (min, avg, max) = (30754.256, 30934.724, 31460.269), stdev = 297.021
[info]   CI (99.9%): [29791.000, 32078.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1512.091 ±(99.9%) 55.601 MB/sec [Average]
[info]   (min, avg, max) = (1503.190, 1512.091, 1537.662), stdev = 14.439
[info]   CI (99.9%): [1456.490, 1567.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (76944.013, 76944.013, 76944.014), stdev = 0.001
[info]   CI (99.9%): [76944.011, 76944.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.485 ±(99.9%) 4.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.485, 3.193), stdev = 1.216
[info]   CI (99.9%): [≈ 0, 6.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1490.220 ±(99.9%) 1168.588 MB/sec [Average]
[info]   (min, avg, max) = (1351.913, 1490.220, 2033.088), stdev = 303.479
[info]   CI (99.9%): [321.631, 2658.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   75869.422 ±(99.9%) 60510.430 B/op [Average]
[info]   (min, avg, max) = (67862.365, 75869.422, 103961.731), stdev = 15714.366
[info]   CI (99.9%): [15358.993, 136379.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.71% complete, ETA 01:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 337988.295 ops/s
[info] # Warmup Iteration   2: 353172.439 ops/s
[info] # Warmup Iteration   3: 358563.408 ops/s
[info] # Warmup Iteration   4: 358335.001 ops/s
[info] # Warmup Iteration   5: 359867.280 ops/s
[info] Iteration   1: 359585.623 ops/s
[info]                  ·gc.alloc.rate:                   794.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2959.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 360345.576 ops/s
[info]                  ·gc.alloc.rate:                   796.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2944.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 359156.150 ops/s
[info]                  ·gc.alloc.rate:                   793.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2953.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 360295.822 ops/s
[info]                  ·gc.alloc.rate:                   796.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5883.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 361035.530 ops/s
[info]                  ·gc.alloc.rate:                   798.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2935.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   360083.740 ±(99.9%) 2808.585 ops/s [Average]
[info]   (min, avg, max) = (359156.150, 360083.740, 361035.530), stdev = 729.381
[info]   CI (99.9%): [357275.155, 362892.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   795.972 ±(99.9%) 6.257 MB/sec [Average]
[info]   (min, avg, max) = (793.949, 795.972, 798.065), stdev = 1.625
[info]   CI (99.9%): [789.715, 802.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.091 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.273), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.692 ±(99.9%) 1157.682 MB/sec [Average]
[info]   (min, avg, max) = (673.250, 808.692, 1346.502), stdev = 300.646
[info]   CI (99.9%): [≈ 0, 1966.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3535.258 ±(99.9%) 5054.297 B/op [Average]
[info]   (min, avg, max) = (2935.740, 3535.258, 5883.226), stdev = 1312.585
[info]   CI (99.9%): [≈ 0, 8589.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26.91% complete, ETA 01:38:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375235.076 ops/s
[info] # Warmup Iteration   2: 397586.875 ops/s
[info] # Warmup Iteration   3: 407957.945 ops/s
[info] # Warmup Iteration   4: 407870.902 ops/s
[info] # Warmup Iteration   5: 387301.243 ops/s
[info] Iteration   1: 395129.164 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 409359.300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 410096.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 408955.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 409921.070 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   406692.293 ±(99.9%) 24951.555 ops/s [Average]
[info]   (min, avg, max) = (395129.164, 406692.293, 410096.060), stdev = 6479.840
[info]   CI (99.9%): [381740.738, 431643.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.11% complete, ETA 01:37:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19288.162 ops/s
[info] # Warmup Iteration   2: 28479.801 ops/s
[info] # Warmup Iteration   3: 28201.029 ops/s
[info] # Warmup Iteration   4: 28622.401 ops/s
[info] # Warmup Iteration   5: 28390.073 ops/s
[info] Iteration   1: 27884.665 ops/s
[info]                  ·gc.alloc.rate:                   1467.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75569.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28244.260 ops/s
[info]                  ·gc.alloc.rate:                   1486.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74646.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28210.593 ops/s
[info]                  ·gc.alloc.rate:                   1484.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74802.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28759.045 ops/s
[info]                  ·gc.alloc.rate:                   1513.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73453.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28676.651 ops/s
[info]                  ·gc.alloc.rate:                   1508.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110665.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28355.043 ±(99.9%) 1389.762 ops/s [Average]
[info]   (min, avg, max) = (27884.665, 28355.043, 28759.045), stdev = 360.917
[info]   CI (99.9%): [26965.281, 29744.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1491.965 ±(99.9%) 73.397 MB/sec [Average]
[info]   (min, avg, max) = (1467.052, 1491.965, 1513.389), stdev = 19.061
[info]   CI (99.9%): [1418.568, 1565.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82824.014, 82824.015, 82824.016), stdev = 0.001
[info]   CI (99.9%): [82824.012, 82824.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.465 ±(99.9%) 9.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.465, 6.960), stdev = 2.589
[info]   CI (99.9%): [≈ 0, 13.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1475.360 ±(99.9%) 1163.777 MB/sec [Average]
[info]   (min, avg, max) = (1338.556, 1475.360, 2015.998), stdev = 302.229
[info]   CI (99.9%): [311.583, 2639.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81827.587 ±(99.9%) 62145.335 B/op [Average]
[info]   (min, avg, max) = (73453.177, 81827.587, 110665.964), stdev = 16138.946
[info]   CI (99.9%): [19682.252, 143972.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27.31% complete, ETA 01:37:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5880.001 ops/s
[info] # Warmup Iteration   2: 7219.183 ops/s
[info] # Warmup Iteration   3: 7229.384 ops/s
[info] # Warmup Iteration   4: 7277.035 ops/s
[info] # Warmup Iteration   5: 7294.866 ops/s
[info] Iteration   1: 7296.746 ops/s
[info]                  ·gc.alloc.rate:                   1557.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              336000.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 290520.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7204.359 ops/s
[info]                  ·gc.alloc.rate:                   1537.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              336000.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441417.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7290.473 ops/s
[info]                  ·gc.alloc.rate:                   1555.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              336000.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 291007.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7284.819 ops/s
[info]                  ·gc.alloc.rate:                   1554.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              336008.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 291534.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7263.818 ops/s
[info]                  ·gc.alloc.rate:                   1550.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              336024.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 439071.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   7268.043 ±(99.9%) 145.128 ops/s [Average]
[info]   (min, avg, max) = (7204.359, 7268.043, 7296.746), stdev = 37.689
[info]   CI (99.9%): [7122.915, 7413.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1551.272 ±(99.9%) 30.629 MB/sec [Average]
[info]   (min, avg, max) = (1537.803, 1551.272, 1557.323), stdev = 7.954
[info]   CI (99.9%): [1520.643, 1581.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   336006.538 ±(99.9%) 40.228 B/op [Average]
[info]   (min, avg, max) = (336000.056, 336006.538, 336024.056), stdev = 10.447
[info]   CI (99.9%): [335966.310, 336046.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9.911 ±(99.9%) 25.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.911, 17.972), stdev = 6.658
[info]   CI (99.9%): [≈ 0, 35.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1617.874 ±(99.9%) 1424.447 MB/sec [Average]
[info]   (min, avg, max) = (1346.532, 1617.874, 2025.919), stdev = 369.924
[info]   CI (99.9%): [193.426, 3042.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   350710.438 ±(99.9%) 314744.025 B/op [Average]
[info]   (min, avg, max) = (290520.783, 350710.438, 441417.610), stdev = 81738.024
[info]   CI (99.9%): [35966.413, 665454.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.51% complete, ETA 01:37:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81908.376 ops/s
[info] # Warmup Iteration   2: 95880.351 ops/s
[info] # Warmup Iteration   3: 97236.439 ops/s
[info] # Warmup Iteration   4: 98437.104 ops/s
[info] # Warmup Iteration   5: 98390.926 ops/s
[info] Iteration   1: 98065.254 ops/s
[info]                  ·gc.alloc.rate:                   1597.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21551.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 98593.771 ops/s
[info]                  ·gc.alloc.rate:                   1606.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21447.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 98406.180 ops/s
[info]                  ·gc.alloc.rate:                   1602.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32268.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 98479.066 ops/s
[info]                  ·gc.alloc.rate:                   1603.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21524.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 98450.590 ops/s
[info]                  ·gc.alloc.rate:                   1603.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21562.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   98398.972 ±(99.9%) 766.379 ops/s [Average]
[info]   (min, avg, max) = (98065.254, 98398.972, 98593.771), stdev = 199.026
[info]   CI (99.9%): [97632.594, 99165.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1602.745 ±(99.9%) 12.498 MB/sec [Average]
[info]   (min, avg, max) = (1597.320, 1602.745, 1606.016), stdev = 3.246
[info]   CI (99.9%): [1590.247, 1615.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.004, 25640.004, 25640.004), stdev = 0.001
[info]   CI (99.9%): [25640.004, 25640.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.400 ±(99.9%) 2.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.332), stdev = 0.547
[info]   CI (99.9%): [≈ 0, 2.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479.676 ±(99.9%) 1157.536 MB/sec [Average]
[info]   (min, avg, max) = (1342.591, 1479.676, 2017.404), stdev = 300.608
[info]   CI (99.9%): [322.140, 2637.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23670.917 ±(99.9%) 18508.024 B/op [Average]
[info]   (min, avg, max) = (21447.904, 23670.917, 32268.630), stdev = 4806.475
[info]   CI (99.9%): [5162.894, 42178.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27.71% complete, ETA 01:36:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51369.724 ops/s
[info] # Warmup Iteration   2: 464947.814 ops/s
[info] # Warmup Iteration   3: 458013.756 ops/s
[info] # Warmup Iteration   4: 465554.812 ops/s
[info] # Warmup Iteration   5: 471263.348 ops/s
[info] Iteration   1: 469662.272 ops/s
[info]                  ·gc.alloc.rate:                   486.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1714.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 473046.291 ops/s
[info]                  ·gc.alloc.rate:      490.516 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 470240.761 ops/s
[info]                  ·gc.alloc.rate:                   487.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2253.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 472020.631 ops/s
[info]                  ·gc.alloc.rate:                   489.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2245.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 471058.036 ops/s
[info]                  ·gc.alloc.rate:      488.412 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   471205.598 ±(99.9%) 5232.829 ops/s [Average]
[info]   (min, avg, max) = (469662.272, 471205.598, 473046.291), stdev = 1358.949
[info]   CI (99.9%): [465972.769, 476438.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   488.558 ±(99.9%) 5.504 MB/sec [Average]
[info]   (min, avg, max) = (486.873, 488.558, 490.516), stdev = 1.429
[info]   CI (99.9%): [483.054, 494.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.512 ±(99.9%) 4.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.547), stdev = 1.138
[info]   CI (99.9%): [≈ 0, 4.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.714 ±(99.9%) 14.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.714, 8.526), stdev = 3.808
[info]   CI (99.9%): [≈ 0, 16.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   371.622 ±(99.9%) 1330.878 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.622, 673.451), stdev = 345.625
[info]   CI (99.9%): [≈ 0, 1702.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1242.685 ±(99.9%) 4448.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1242.685, 2253.871), stdev = 1155.276
[info]   CI (99.9%): [≈ 0, 5691.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.91% complete, ETA 01:36:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178172.946 ops/s
[info] # Warmup Iteration   2: 282172.744 ops/s
[info] # Warmup Iteration   3: 287666.710 ops/s
[info] # Warmup Iteration   4: 288475.340 ops/s
[info] # Warmup Iteration   5: 285779.962 ops/s
[info] Iteration   1: 288923.155 ops/s
[info]                  ·gc.alloc.rate:                   408.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2786.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 289011.171 ops/s
[info]                  ·gc.alloc.rate:                   408.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2785.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 288571.433 ops/s
[info]                  ·gc.alloc.rate:      407.733 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 287878.349 ops/s
[info]                  ·gc.alloc.rate:                   406.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3683.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 288618.238 ops/s
[info]                  ·gc.alloc.rate:                   407.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3674.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   288600.469 ±(99.9%) 1717.122 ops/s [Average]
[info]   (min, avg, max) = (287878.349, 288600.469, 289011.171), stdev = 445.931
[info]   CI (99.9%): [286883.347, 290317.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   407.768 ±(99.9%) 2.477 MB/sec [Average]
[info]   (min, avg, max) = (406.714, 407.768, 408.350), stdev = 0.643
[info]   CI (99.9%): [405.291, 410.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.182 ±(99.9%) 1.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.910), stdev = 0.407
[info]   CI (99.9%): [≈ 0, 1.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   474.058 ±(99.9%) 1067.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.058, 673.735), stdev = 277.135
[info]   CI (99.9%): [≈ 0, 1541.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2585.939 ±(99.9%) 5825.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2585.939, 3683.335), stdev = 1512.906
[info]   CI (99.9%): [≈ 0, 8411.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.11% complete, ETA 01:36:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 583515.096 ops/s
[info] # Warmup Iteration   2: 611014.934 ops/s
[info] # Warmup Iteration   3: 620401.213 ops/s
[info] # Warmup Iteration   4: 618246.274 ops/s
[info] # Warmup Iteration   5: 619718.032 ops/s
[info] Iteration   1: 633653.658 ops/s
[info]                  ·gc.alloc.rate:      412.153 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 631715.313 ops/s
[info]                  ·gc.alloc.rate:                   410.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1274.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 631746.400 ops/s
[info]                  ·gc.alloc.rate:                   410.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1274.417 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 631395.890 ops/s
[info]                  ·gc.alloc.rate:      410.701 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 628784.170 ops/s
[info]                  ·gc.alloc.rate:                   409.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1688.939 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   631459.086 ±(99.9%) 6703.748 ops/s [Average]
[info]   (min, avg, max) = (628784.170, 631459.086, 633653.658), stdev = 1740.942
[info]   CI (99.9%): [624755.338, 638162.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   410.750 ±(99.9%) 4.336 MB/sec [Average]
[info]   (min, avg, max) = (409.010, 410.750, 412.153), stdev = 1.126
[info]   CI (99.9%): [406.413, 415.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.662 ±(99.9%) 5.661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.292), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.657 ±(99.9%) 14.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.657, 8.241), stdev = 3.681
[info]   CI (99.9%): [≈ 0, 15.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.501 ±(99.9%) 1220.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.501, 674.602), stdev = 316.997
[info]   CI (99.9%): [≈ 0, 1560.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   847.568 ±(99.9%) 3049.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 847.568, 1688.939), stdev = 792.008
[info]   CI (99.9%): [≈ 0, 3897.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.31% complete, ETA 01:36:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44605.306 ops/s
[info] # Warmup Iteration   2: 78080.372 ops/s
[info] # Warmup Iteration   3: 78469.382 ops/s
[info] # Warmup Iteration   4: 77028.352 ops/s
[info] # Warmup Iteration   5: 77945.232 ops/s
[info] Iteration   1: 78716.004 ops/s
[info]                  ·gc.alloc.rate:                   3447.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              68952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67948.215 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 77998.797 ops/s
[info]                  ·gc.alloc.rate:                   3416.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              68952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68630.840 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 77911.027 ops/s
[info]                  ·gc.alloc.rate:                   3412.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              68952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68760.406 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 78772.381 ops/s
[info]                  ·gc.alloc.rate:                   3450.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              68952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67996.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 77516.705 ops/s
[info]                  ·gc.alloc.rate:                   3395.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              68952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69132.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   78182.983 ±(99.9%) 2094.368 ops/s [Average]
[info]   (min, avg, max) = (77516.705, 78182.983, 78772.381), stdev = 543.901
[info]   CI (99.9%): [76088.615, 80277.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3424.440 ±(99.9%) 91.225 MB/sec [Average]
[info]   (min, avg, max) = (3395.399, 3424.440, 3450.448), stdev = 23.691
[info]   CI (99.9%): [3333.215, 3515.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68952.005, 68952.005, 68952.006), stdev = 0.001
[info]   CI (99.9%): [68952.004, 68952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.761 ±(99.9%) 1.385 B/op [Average]
[info]   (min, avg, max) = (1.249, 1.761, 2.113), stdev = 0.360
[info]   CI (99.9%): [0.377, 3.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3401.533 ±(99.9%) 10.907 MB/sec [Average]
[info]   (min, avg, max) = (3397.100, 3401.533, 3404.283), stdev = 2.833
[info]   CI (99.9%): [3390.626, 3412.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68493.583 ±(99.9%) 1966.403 B/op [Average]
[info]   (min, avg, max) = (67948.215, 68493.583, 69132.421), stdev = 510.669
[info]   CI (99.9%): [66527.179, 70459.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28.51% complete, ETA 01:35:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167993.689 ops/s
[info] # Warmup Iteration   2: 188165.731 ops/s
[info] # Warmup Iteration   3: 193625.082 ops/s
[info] # Warmup Iteration   4: 195148.101 ops/s
[info] # Warmup Iteration   5: 194349.363 ops/s
[info] Iteration   1: 193962.970 ops/s
[info]                  ·gc.alloc.rate:                   1472.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10896.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 194911.676 ops/s
[info]                  ·gc.alloc.rate:                   1479.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10849.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 190062.164 ops/s
[info]                  ·gc.alloc.rate:                   1442.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11130.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 188918.805 ops/s
[info]                  ·gc.alloc.rate:                   1434.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11209.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 188929.795 ops/s
[info]                  ·gc.alloc.rate:                   1434.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11224.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   191357.082 ±(99.9%) 11049.993 ops/s [Average]
[info]   (min, avg, max) = (188918.805, 191357.082, 194911.676), stdev = 2869.648
[info]   CI (99.9%): [180307.088, 202407.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1452.764 ±(99.9%) 83.663 MB/sec [Average]
[info]   (min, avg, max) = (1434.315, 1452.764, 1479.703), stdev = 21.727
[info]   CI (99.9%): [1369.101, 1536.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   11952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11952.002, 11952.002, 11952.002), stdev = 0.001
[info]   CI (99.9%): [11952.002, 11952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.410 ±(99.9%) 0.739 B/op [Average]
[info]   (min, avg, max) = (0.173, 0.410, 0.676), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 1.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1344.332 ±(99.9%) 7.183 MB/sec [Average]
[info]   (min, avg, max) = (1342.393, 1344.332, 1347.121), stdev = 1.866
[info]   CI (99.9%): [1337.149, 1351.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11062.045 ±(99.9%) 682.667 B/op [Average]
[info]   (min, avg, max) = (10849.156, 11062.045, 11224.656), stdev = 177.286
[info]   CI (99.9%): [10379.378, 11744.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:35:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191864.756 ops/s
[info] # Warmup Iteration   2: 245043.810 ops/s
[info] # Warmup Iteration   3: 248356.178 ops/s
[info] # Warmup Iteration   4: 252085.966 ops/s
[info] # Warmup Iteration   5: 252377.716 ops/s
[info] Iteration   1: 252726.304 ops/s
[info]                  ·gc.alloc.rate:                   1501.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8354.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 253583.835 ops/s
[info]                  ·gc.alloc.rate:                   1506.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8330.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 253031.681 ops/s
[info]                  ·gc.alloc.rate:                   1503.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8356.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 248629.811 ops/s
[info]                  ·gc.alloc.rate:                   1476.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12773.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 250775.213 ops/s
[info]                  ·gc.alloc.rate:                   1489.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8454.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   251749.369 ±(99.9%) 7854.892 ops/s [Average]
[info]   (min, avg, max) = (248629.811, 251749.369, 253583.835), stdev = 2039.891
[info]   CI (99.9%): [243894.476, 259604.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1495.520 ±(99.9%) 46.674 MB/sec [Average]
[info]   (min, avg, max) = (1476.972, 1495.520, 1506.451), stdev = 12.121
[info]   CI (99.9%): [1448.846, 1542.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.002, 9352.002, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.001, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.261 ±(99.9%) 1.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 0.659), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.047 ±(99.9%) 1160.910 MB/sec [Average]
[info]   (min, avg, max) = (1341.091, 1478.047, 2017.345), stdev = 301.485
[info]   CI (99.9%): [317.137, 2638.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9253.809 ±(99.9%) 7578.813 B/op [Average]
[info]   (min, avg, max) = (8330.004, 9253.809, 12773.578), stdev = 1968.194
[info]   CI (99.9%): [1674.996, 16832.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.92% complete, ETA 01:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86947.867 ops/s
[info] # Warmup Iteration   2: 1197676.068 ops/s
[info] # Warmup Iteration   3: 1202108.215 ops/s
[info] # Warmup Iteration   4: 1198958.858 ops/s
[info] # Warmup Iteration   5: 1206686.602 ops/s
[info] Iteration   1: 1208308.362 ops/s
[info]                  ·gc.alloc.rate:                   657.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 877.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1216068.045 ops/s
[info]                  ·gc.alloc.rate:                   661.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 871.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1193920.951 ops/s
[info]                  ·gc.alloc.rate:                   649.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 885.970 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1211854.258 ops/s
[info]                  ·gc.alloc.rate:                   658.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872.849 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1210269.922 ops/s
[info]                  ·gc.alloc.rate:                   658.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1208084.308 ±(99.9%) 32410.688 ops/s [Average]
[info]   (min, avg, max) = (1193920.951, 1208084.308, 1216068.045), stdev = 8416.953
[info]   CI (99.9%): [1175673.619, 1240494.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   656.949 ±(99.9%) 17.864 MB/sec [Average]
[info]   (min, avg, max) = (649.194, 656.949, 661.485), stdev = 4.639
[info]   CI (99.9%): [639.085, 674.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.518 ±(99.9%) 4.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.518, 2.527), stdev = 1.124
[info]   CI (99.9%): [≈ 0, 4.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.675 ±(99.9%) 5.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.293), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.523 ±(99.9%) 3.118 MB/sec [Average]
[info]   (min, avg, max) = (671.923, 672.523, 673.557), stdev = 0.810
[info]   CI (99.9%): [669.405, 675.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   876.325 ±(99.9%) 22.214 B/op [Average]
[info]   (min, avg, max) = (871.623, 876.325, 885.970), stdev = 5.769
[info]   CI (99.9%): [854.111, 898.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.12% complete, ETA 01:35:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 529656.145 ops/s
[info] # Warmup Iteration   2: 787264.233 ops/s
[info] # Warmup Iteration   3: 802075.108 ops/s
[info] # Warmup Iteration   4: 798160.660 ops/s
[info] # Warmup Iteration   5: 805461.804 ops/s
[info] Iteration   1: 821746.431 ops/s
[info]                  ·gc.alloc.rate:                   647.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1290.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 823617.768 ops/s
[info]                  ·gc.alloc.rate:                   648.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1287.456 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 805786.933 ops/s
[info]                  ·gc.alloc.rate:                   634.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1318.550 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 807305.092 ops/s
[info]                  ·gc.alloc.rate:                   635.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1316.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 805179.586 ops/s
[info]                  ·gc.alloc.rate:                   634.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1320.846 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   812727.162 ±(99.9%) 35212.029 ops/s [Average]
[info]   (min, avg, max) = (805179.586, 812727.162, 823617.768), stdev = 9144.452
[info]   CI (99.9%): [777515.133, 847939.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   640.150 ±(99.9%) 27.697 MB/sec [Average]
[info]   (min, avg, max) = (634.207, 640.150, 648.739), stdev = 7.193
[info]   CI (99.9%): [612.452, 667.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.056 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.159), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.485 ±(99.9%) 3.502 MB/sec [Average]
[info]   (min, avg, max) = (673.501, 674.485, 675.556), stdev = 0.910
[info]   CI (99.9%): [670.983, 677.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1306.657 ±(99.9%) 62.845 B/op [Average]
[info]   (min, avg, max) = (1287.456, 1306.657, 1320.846), stdev = 16.321
[info]   CI (99.9%): [1243.812, 1369.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.32% complete, ETA 01:34:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 984368.029 ops/s
[info] # Warmup Iteration   2: 1065679.004 ops/s
[info] # Warmup Iteration   3: 1049951.896 ops/s
[info] # Warmup Iteration   4: 1065023.214 ops/s
[info] # Warmup Iteration   5: 1067890.361 ops/s
[info] Iteration   1: 1067719.735 ops/s
[info]                  ·gc.alloc.rate:                   580.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1068408.300 ops/s
[info]                  ·gc.alloc.rate:                   580.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 994.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1065018.191 ops/s
[info]                  ·gc.alloc.rate:                   579.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 997.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1067384.613 ops/s
[info]                  ·gc.alloc.rate:                   580.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 991.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1064634.850 ops/s
[info]                  ·gc.alloc.rate:                   578.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 994.532 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1066633.138 ±(99.9%) 6528.465 ops/s [Average]
[info]   (min, avg, max) = (1064634.850, 1066633.138, 1068408.300), stdev = 1695.422
[info]   CI (99.9%): [1060104.673, 1073161.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   579.977 ±(99.9%) 3.498 MB/sec [Average]
[info]   (min, avg, max) = (578.920, 579.977, 580.973), stdev = 0.908
[info]   CI (99.9%): [576.479, 583.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.674 ±(99.9%) 5.629 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.289), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.993 ±(99.9%) 8.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.993, 4.846), stdev = 2.154
[info]   CI (99.9%): [≈ 0, 9.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   641.161 ±(99.9%) 279.378 MB/sec [Average]
[info]   (min, avg, max) = (511.386, 641.161, 674.660), stdev = 72.554
[info]   CI (99.9%): [361.782, 920.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   946.348 ±(99.9%) 413.957 B/op [Average]
[info]   (min, avg, max) = (754.068, 946.348, 997.121), stdev = 107.503
[info]   CI (99.9%): [532.391, 1360.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.52% complete, ETA 01:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035288.359 ops/s
[info] # Warmup Iteration   2: 1091742.614 ops/s
[info] # Warmup Iteration   3: 1091657.524 ops/s
[info] # Warmup Iteration   4: 1092303.805 ops/s
[info] # Warmup Iteration   5: 1093478.364 ops/s
[info] Iteration   1: 1095058.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1093244.730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1095257.373 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1088576.267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1092250.487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1092877.477 ±(99.9%) 10448.181 ops/s [Average]
[info]   (min, avg, max) = (1088576.267, 1092877.477, 1095257.373), stdev = 2713.359
[info]   CI (99.9%): [1082429.296, 1103325.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.72% complete, ETA 01:34:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19894.929 ops/s
[info] # Warmup Iteration   2: 28160.222 ops/s
[info] # Warmup Iteration   3: 28606.765 ops/s
[info] # Warmup Iteration   4: 28314.149 ops/s
[info] # Warmup Iteration   5: 28912.482 ops/s
[info] Iteration   1: 29096.265 ops/s
[info]                  ·gc.alloc.rate:                   1573.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72414.972 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 29188.344 ops/s
[info]                  ·gc.alloc.rate:                   1578.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108366.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 29201.571 ops/s
[info]                  ·gc.alloc.rate:                   1579.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72303.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29120.333 ops/s
[info]                  ·gc.alloc.rate:                   1574.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72578.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 29003.356 ops/s
[info]                  ·gc.alloc.rate:                   1568.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109502.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29121.974 ±(99.9%) 307.296 ops/s [Average]
[info]   (min, avg, max) = (29003.356, 29121.974, 29201.571), stdev = 79.804
[info]   CI (99.9%): [28814.678, 29429.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1574.750 ±(99.9%) 16.590 MB/sec [Average]
[info]   (min, avg, max) = (1568.309, 1574.750, 1579.070), stdev = 4.308
[info]   CI (99.9%): [1558.160, 1591.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85128.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (85128.014, 85128.014, 85128.015), stdev = 0.001
[info]   CI (99.9%): [85128.012, 85128.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.575 ±(99.9%) 2.378 B/op [Average]
[info]   (min, avg, max) = (1.122, 1.575, 2.259), stdev = 0.618
[info]   CI (99.9%): [≈ 0, 3.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1609.728 ±(99.9%) 1418.458 MB/sec [Average]
[info]   (min, avg, max) = (1338.504, 1609.728, 2017.355), stdev = 368.369
[info]   CI (99.9%): [191.270, 3028.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87033.097 ±(99.9%) 77002.160 B/op [Average]
[info]   (min, avg, max) = (72303.207, 87033.097, 109502.275), stdev = 19997.217
[info]   CI (99.9%): [10030.936, 164035.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29.92% complete, ETA 01:33:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69913.412 ops/s
[info] # Warmup Iteration   2: 82622.024 ops/s
[info] # Warmup Iteration   3: 84787.856 ops/s
[info] # Warmup Iteration   4: 84465.670 ops/s
[info] # Warmup Iteration   5: 84511.875 ops/s
[info] Iteration   1: 84564.867 ops/s
[info]                  ·gc.alloc.rate:                   2099.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              39088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37536.361 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 84814.396 ops/s
[info]                  ·gc.alloc.rate:                   2105.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              39088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37477.396 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 84530.125 ops/s
[info]                  ·gc.alloc.rate:                   2098.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              39088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37682.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 84009.362 ops/s
[info]                  ·gc.alloc.rate:                   2085.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              39088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50635.712 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 84330.782 ops/s
[info]                  ·gc.alloc.rate:                   2094.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              39088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37895.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   84449.906 ±(99.9%) 1156.434 ops/s [Average]
[info]   (min, avg, max) = (84009.362, 84449.906, 84814.396), stdev = 300.322
[info]   CI (99.9%): [83293.472, 85606.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2096.868 ±(99.9%) 28.529 MB/sec [Average]
[info]   (min, avg, max) = (2085.965, 2096.868, 2105.949), stdev = 7.409
[info]   CI (99.9%): [2068.339, 2125.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39088.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39088.005, 39088.005, 39088.005), stdev = 0.001
[info]   CI (99.9%): [39088.004, 39088.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.931 ±(99.9%) 1.339 B/op [Average]
[info]   (min, avg, max) = (0.388, 0.931, 1.170), stdev = 0.348
[info]   CI (99.9%): [≈ 0, 2.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2158.223 ±(99.9%) 1171.170 MB/sec [Average]
[info]   (min, avg, max) = (2016.113, 2158.223, 2702.219), stdev = 304.149
[info]   CI (99.9%): [987.053, 3329.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   40245.470 ±(99.9%) 22374.405 B/op [Average]
[info]   (min, avg, max) = (37477.396, 40245.470, 50635.712), stdev = 5810.562
[info]   CI (99.9%): [17871.066, 62619.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:33:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83871.349 ops/s
[info] # Warmup Iteration   2: 118954.694 ops/s
[info] # Warmup Iteration   3: 121050.606 ops/s
[info] # Warmup Iteration   4: 118529.129 ops/s
[info] # Warmup Iteration   5: 121198.881 ops/s
[info] Iteration   1: 120905.608 ops/s
[info]                  ·gc.alloc.rate:                   1491.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26193.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 121572.372 ops/s
[info]                  ·gc.alloc.rate:                   1500.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17376.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 120845.850 ops/s
[info]                  ·gc.alloc.rate:                   1491.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17488.556 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 121513.844 ops/s
[info]                  ·gc.alloc.rate:                   1499.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17418.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 120978.908 ops/s
[info]                  ·gc.alloc.rate:                   1492.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26276.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   121163.316 ±(99.9%) 1349.652 ops/s [Average]
[info]   (min, avg, max) = (120845.850, 121163.316, 121572.372), stdev = 350.500
[info]   CI (99.9%): [119813.665, 122512.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1494.970 ±(99.9%) 16.815 MB/sec [Average]
[info]   (min, avg, max) = (1491.036, 1494.970, 1500.072), stdev = 4.367
[info]   CI (99.9%): [1478.156, 1511.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19424.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19424.003, 19424.003, 19424.004), stdev = 0.001
[info]   CI (99.9%): [19424.003, 19424.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.042), stdev = 0.009
[info]   CI (99.9%): [0.002, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.487 ±(99.9%) 0.468 B/op [Average]
[info]   (min, avg, max) = (0.269, 0.487, 0.542), stdev = 0.122
[info]   CI (99.9%): [0.019, 0.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1611.971 ±(99.9%) 1418.331 MB/sec [Average]
[info]   (min, avg, max) = (1341.960, 1611.971, 2019.386), stdev = 368.336
[info]   CI (99.9%): [193.641, 3030.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20950.755 ±(99.9%) 18575.759 B/op [Average]
[info]   (min, avg, max) = (17376.663, 20950.755, 26276.788), stdev = 4824.066
[info]   CI (99.9%): [2374.996, 39526.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.32% complete, ETA 01:33:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109842.494 ops/s
[info] # Warmup Iteration   2: 188758.677 ops/s
[info] # Warmup Iteration   3: 189354.966 ops/s
[info] # Warmup Iteration   4: 189083.157 ops/s
[info] # Warmup Iteration   5: 188898.805 ops/s
[info] Iteration   1: 189557.627 ops/s
[info]                  ·gc.alloc.rate:                   1007.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5602.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 182968.722 ops/s
[info]                  ·gc.alloc.rate:                   972.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11619.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 184112.149 ops/s
[info]                  ·gc.alloc.rate:                   978.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5779.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 184440.225 ops/s
[info]                  ·gc.alloc.rate:                   980.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5768.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 189270.522 ops/s
[info]                  ·gc.alloc.rate:                   1006.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11254.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   186069.849 ±(99.9%) 11948.504 ops/s [Average]
[info]   (min, avg, max) = (182968.722, 186069.849, 189557.627), stdev = 3102.989
[info]   CI (99.9%): [174121.345, 198018.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   989.111 ±(99.9%) 63.619 MB/sec [Average]
[info]   (min, avg, max) = (972.665, 989.111, 1007.469), stdev = 16.522
[info]   CI (99.9%): [925.492, 1052.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.142 ±(99.9%) 0.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.358), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.084 ±(99.9%) 1427.132 MB/sec [Average]
[info]   (min, avg, max) = (674.484, 946.084, 1353.553), stdev = 370.622
[info]   CI (99.9%): [≈ 0, 2373.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8004.916 ±(99.9%) 12077.587 B/op [Average]
[info]   (min, avg, max) = (5602.242, 8004.916, 11619.459), stdev = 3136.511
[info]   CI (99.9%): [≈ 0, 20082.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.52% complete, ETA 01:33:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250108.013 ops/s
[info] # Warmup Iteration   2: 270466.261 ops/s
[info] # Warmup Iteration   3: 272415.452 ops/s
[info] # Warmup Iteration   4: 274377.556 ops/s
[info] # Warmup Iteration   5: 274574.263 ops/s
[info] Iteration   1: 272750.367 ops/s
[info]                  ·gc.alloc.rate:                   709.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3893.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 272000.848 ops/s
[info]                  ·gc.alloc.rate:                   707.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3904.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 271323.265 ops/s
[info]                  ·gc.alloc.rate:                   705.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3898.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 270943.387 ops/s
[info]                  ·gc.alloc.rate:                   704.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3904.281 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 270318.926 ops/s
[info]                  ·gc.alloc.rate:                   703.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7818.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   271467.359 ±(99.9%) 3624.993 ops/s [Average]
[info]   (min, avg, max) = (270318.926, 271467.359, 272750.367), stdev = 941.399
[info]   CI (99.9%): [267842.366, 275092.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   706.338 ±(99.9%) 9.317 MB/sec [Average]
[info]   (min, avg, max) = (703.395, 706.338, 709.589), stdev = 2.420
[info]   CI (99.9%): [697.021, 715.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.682 ±(99.9%) 5.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.682, 3.328), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.939 ±(99.9%) 32.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.939, 19.211), stdev = 8.540
[info]   CI (99.9%): [≈ 0, 36.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.169 ±(99.9%) 1152.803 MB/sec [Average]
[info]   (min, avg, max) = (671.953, 807.169, 1342.709), stdev = 299.379
[info]   CI (99.9%): [≈ 0, 1959.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4683.983 ±(99.9%) 6748.072 B/op [Average]
[info]   (min, avg, max) = (3893.380, 4683.983, 7818.855), stdev = 1752.453
[info]   CI (99.9%): [≈ 0, 11432.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.72% complete, ETA 01:32:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33449.896 ops/s
[info] # Warmup Iteration   2: 70958.151 ops/s
[info] # Warmup Iteration   3: 70511.244 ops/s
[info] # Warmup Iteration   4: 71307.110 ops/s
[info] # Warmup Iteration   5: 69678.791 ops/s
[info] Iteration   1: 69766.940 ops/s
[info]                  ·gc.alloc.rate:                   2944.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61229.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 70075.962 ops/s
[info]                  ·gc.alloc.rate:                   2958.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61042.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 69891.166 ops/s
[info]                  ·gc.alloc.rate:                   2950.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76572.882 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 71663.743 ops/s
[info]                  ·gc.alloc.rate:                   3025.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59789.474 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71612.017 ops/s
[info]                  ·gc.alloc.rate:                   3022.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74809.401 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   70601.965 ±(99.9%) 3666.593 ops/s [Average]
[info]   (min, avg, max) = (69766.940, 70601.965, 71663.743), stdev = 952.203
[info]   CI (99.9%): [66935.372, 74268.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2980.226 ±(99.9%) 154.910 MB/sec [Average]
[info]   (min, avg, max) = (2944.932, 2980.226, 3025.218), stdev = 40.230
[info]   CI (99.9%): [2825.316, 3135.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.006), stdev = 0.001
[info]   CI (99.9%): [66448.005, 66448.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.763 ±(99.9%) 1.471 B/op [Average]
[info]   (min, avg, max) = (1.371, 1.763, 2.287), stdev = 0.382
[info]   CI (99.9%): [0.292, 3.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2991.187 ±(99.9%) 1442.120 MB/sec [Average]
[info]   (min, avg, max) = (2713.642, 2991.187, 3403.126), stdev = 374.514
[info]   CI (99.9%): [1549.067, 4433.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66688.611 ±(99.9%) 31807.605 B/op [Average]
[info]   (min, avg, max) = (59789.474, 66688.611, 76572.882), stdev = 8260.334
[info]   CI (99.9%): [34881.005, 98496.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30.92% complete, ETA 01:32:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125272.470 ops/s
[info] # Warmup Iteration   2: 140861.173 ops/s
[info] # Warmup Iteration   3: 146824.263 ops/s
[info] # Warmup Iteration   4: 145856.599 ops/s
[info] # Warmup Iteration   5: 144055.556 ops/s
[info] Iteration   1: 147835.422 ops/s
[info]                  ·gc.alloc.rate:                   1666.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14295.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 148190.444 ops/s
[info]                  ·gc.alloc.rate:                   1670.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21408.173 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 148224.013 ops/s
[info]                  ·gc.alloc.rate:                   1671.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14286.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 148278.312 ops/s
[info]                  ·gc.alloc.rate:                   1672.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21454.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 147734.584 ops/s
[info]                  ·gc.alloc.rate:                   1665.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14376.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   148052.555 ±(99.9%) 958.086 ops/s [Average]
[info]   (min, avg, max) = (147734.584, 148052.555, 148278.312), stdev = 248.812
[info]   CI (99.9%): [147094.469, 149010.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1669.451 ±(99.9%) 11.143 MB/sec [Average]
[info]   (min, avg, max) = (1665.864, 1669.451, 1672.067), stdev = 2.894
[info]   CI (99.9%): [1658.308, 1680.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17752.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17752.003, 17752.003, 17752.003), stdev = 0.001
[info]   CI (99.9%): [17752.002, 17752.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.442 ±(99.9%) 1.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 0.886), stdev = 0.313
[info]   CI (99.9%): [≈ 0, 1.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1614.491 ±(99.9%) 1418.114 MB/sec [Average]
[info]   (min, avg, max) = (1342.295, 1614.491, 2020.770), stdev = 368.280
[info]   CI (99.9%): [196.377, 3032.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   17164.143 ±(99.9%) 14999.851 B/op [Average]
[info]   (min, avg, max) = (14286.547, 17164.143, 21454.123), stdev = 3895.414
[info]   CI (99.9%): [2164.293, 32163.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.12% complete, ETA 01:32:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134019.652 ops/s
[info] # Warmup Iteration   2: 173901.964 ops/s
[info] # Warmup Iteration   3: 172015.267 ops/s
[info] # Warmup Iteration   4: 176651.915 ops/s
[info] # Warmup Iteration   5: 175524.217 ops/s
[info] Iteration   1: 176534.493 ops/s
[info]                  ·gc.alloc.rate:                   613.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4560.730 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 176365.920 ops/s
[info]                  ·gc.alloc.rate:                   613.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6015.845 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 174762.138 ops/s
[info]                  ·gc.alloc.rate:                   607.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6070.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 176617.979 ops/s
[info]                  ·gc.alloc.rate:                   613.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5988.946 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 177547.155 ops/s
[info]                  ·gc.alloc.rate:                   617.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5957.483 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   176365.537 ±(99.9%) 3879.120 ops/s [Average]
[info]   (min, avg, max) = (174762.138, 176365.537, 177547.155), stdev = 1007.395
[info]   CI (99.9%): [172486.417, 180244.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   613.039 ±(99.9%) 13.318 MB/sec [Average]
[info]   (min, avg, max) = (607.582, 613.039, 617.174), stdev = 3.459
[info]   CI (99.9%): [599.721, 626.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.002, 5472.002, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.002, 5472.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.717 ±(99.9%) 6.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.717, 3.545), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 6.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.403 ±(99.9%) 54.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.403, 31.642), stdev = 14.110
[info]   CI (99.9%): [≈ 0, 60.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.631 ±(99.9%) 278.302 MB/sec [Average]
[info]   (min, avg, max) = (511.357, 640.631, 674.039), stdev = 72.274
[info]   CI (99.9%): [362.329, 918.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5718.707 ±(99.9%) 2497.747 B/op [Average]
[info]   (min, avg, max) = (4560.730, 5718.707, 6070.530), stdev = 648.657
[info]   CI (99.9%): [3220.960, 8216.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.33% complete, ETA 01:32:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321320.179 ops/s
[info] # Warmup Iteration   2: 500331.367 ops/s
[info] # Warmup Iteration   3: 498516.242 ops/s
[info] # Warmup Iteration   4: 516647.885 ops/s
[info] # Warmup Iteration   5: 516910.490 ops/s
[info] Iteration   1: 515775.605 ops/s
[info]                  ·gc.alloc.rate:                   521.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1560.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 515987.759 ops/s
[info]                  ·gc.alloc.rate:                   521.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2055.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 515507.901 ops/s
[info]                  ·gc.alloc.rate:                   521.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2056.956 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 516274.173 ops/s
[info]                  ·gc.alloc.rate:      522.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 515145.562 ops/s
[info]                  ·gc.alloc.rate:                   520.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2061.514 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   515738.200 ±(99.9%) 1673.152 ops/s [Average]
[info]   (min, avg, max) = (515145.562, 515738.200, 516274.173), stdev = 434.512
[info]   CI (99.9%): [514065.048, 517411.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   521.525 ±(99.9%) 1.706 MB/sec [Average]
[info]   (min, avg, max) = (520.947, 521.525, 522.073), stdev = 0.443
[info]   CI (99.9%): [519.819, 523.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.187), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.127 ±(99.9%) 0.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.571), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.606 ±(99.9%) 1123.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.606, 674.584), stdev = 291.821
[info]   CI (99.9%): [≈ 0, 1630.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1546.887 ±(99.9%) 3431.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1546.887, 2061.514), stdev = 891.102
[info]   CI (99.9%): [≈ 0, 4978.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:31:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463466.104 ops/s
[info] # Warmup Iteration   2: 492104.219 ops/s
[info] # Warmup Iteration   3: 495649.990 ops/s
[info] # Warmup Iteration   4: 498701.862 ops/s
[info] # Warmup Iteration   5: 514295.757 ops/s
[info] Iteration   1: 512443.002 ops/s
[info]                  ·gc.alloc.rate:                   393.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1571.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 505204.777 ops/s
[info]                  ·gc.alloc.rate:                   387.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1593.659 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 498914.875 ops/s
[info]                  ·gc.alloc.rate:                   382.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1613.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 502234.152 ops/s
[info]                  ·gc.alloc.rate:      385.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 507895.473 ops/s
[info]                  ·gc.alloc.rate:                   389.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2090.997 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   505338.456 ±(99.9%) 20002.037 ops/s [Average]
[info]   (min, avg, max) = (498914.875, 505338.456, 512443.002), stdev = 5194.465
[info]   CI (99.9%): [485336.419, 525340.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   387.779 ±(99.9%) 15.512 MB/sec [Average]
[info]   (min, avg, max) = (382.829, 387.779, 393.337), stdev = 4.028
[info]   CI (99.9%): [372.267, 403.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.672 ±(99.9%) 5.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.672, 3.318), stdev = 1.479
[info]   CI (99.9%): [≈ 0, 6.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.083 ±(99.9%) 17.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.083, 10.284), stdev = 4.584
[info]   CI (99.9%): [≈ 0, 19.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.787 ±(99.9%) 989.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.787, 674.602), stdev = 256.873
[info]   CI (99.9%): [≈ 0, 1430.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1373.902 ±(99.9%) 3072.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1373.902, 2090.997), stdev = 797.894
[info]   CI (99.9%): [≈ 0, 4446.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.73% complete, ETA 01:31:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505906.161 ops/s
[info] # Warmup Iteration   2: 548322.920 ops/s
[info] # Warmup Iteration   3: 548503.800 ops/s
[info] # Warmup Iteration   4: 549086.837 ops/s
[info] # Warmup Iteration   5: 534087.708 ops/s
[info] Iteration   1: 549978.435 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 548984.995 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 550174.296 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 548878.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 548796.900 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   549362.528 ±(99.9%) 2536.409 ops/s [Average]
[info]   (min, avg, max) = (548796.900, 549362.528, 550174.296), stdev = 658.697
[info]   CI (99.9%): [546826.119, 551898.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.93% complete, ETA 01:31:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168309.541 ops/s
[info] # Warmup Iteration   2: 302299.975 ops/s
[info] # Warmup Iteration   3: 303249.386 ops/s
[info] # Warmup Iteration   4: 303964.768 ops/s
[info] # Warmup Iteration   5: 304944.293 ops/s
[info] Iteration   1: 303527.384 ops/s
[info]                  ·gc.alloc.rate:                   835.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6990.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 304329.968 ops/s
[info]                  ·gc.alloc.rate:                   838.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3487.698 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 304433.677 ops/s
[info]                  ·gc.alloc.rate:                   838.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3489.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 300234.536 ops/s
[info]                  ·gc.alloc.rate:                   827.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3538.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 298437.277 ops/s
[info]                  ·gc.alloc.rate:                   821.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7127.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   302192.568 ±(99.9%) 10423.246 ops/s [Average]
[info]   (min, avg, max) = (298437.277, 302192.568, 304433.677), stdev = 2706.884
[info]   CI (99.9%): [291769.323, 312615.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   832.330 ±(99.9%) 28.663 MB/sec [Average]
[info]   (min, avg, max) = (821.958, 832.330, 838.500), stdev = 7.444
[info]   CI (99.9%): [803.667, 860.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.087 ±(99.9%) 0.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.216), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.590 ±(99.9%) 1423.135 MB/sec [Average]
[info]   (min, avg, max) = (674.210, 944.590, 1351.101), stdev = 369.584
[info]   CI (99.9%): [≈ 0, 2367.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4926.876 ±(99.9%) 7497.371 B/op [Average]
[info]   (min, avg, max) = (3487.698, 4926.876, 7127.339), stdev = 1947.043
[info]   CI (99.9%): [≈ 0, 12424.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32.13% complete, ETA 01:31:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23541.066 ops/s
[info] # Warmup Iteration   2: 25672.104 ops/s
[info] # Warmup Iteration   3: 26864.218 ops/s
[info] # Warmup Iteration   4: 27728.235 ops/s
[info] # Warmup Iteration   5: 26950.702 ops/s
[info] Iteration   1: 27186.205 ops/s
[info]                  ·gc.alloc.rate:                   1663.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77743.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 27170.779 ops/s
[info]                  ·gc.alloc.rate:                   1662.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116761.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27246.185 ops/s
[info]                  ·gc.alloc.rate:                   1667.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77723.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27107.826 ops/s
[info]                  ·gc.alloc.rate:                   1658.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117348.474 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27165.086 ops/s
[info]                  ·gc.alloc.rate:                   1662.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              96320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78183.975 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   27175.216 ±(99.9%) 190.802 ops/s [Average]
[info]   (min, avg, max) = (27107.826, 27175.216, 27246.185), stdev = 49.551
[info]   CI (99.9%): [26984.414, 27366.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1662.745 ±(99.9%) 11.575 MB/sec [Average]
[info]   (min, avg, max) = (1658.607, 1662.745, 1667.029), stdev = 3.006
[info]   CI (99.9%): [1651.170, 1674.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   96320.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (96320.015, 96320.015, 96320.016), stdev = 0.001
[info]   CI (99.9%): [96320.013, 96320.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3.134 ±(99.9%) 5.284 B/op [Average]
[info]   (min, avg, max) = (1.206, 3.134, 4.820), stdev = 1.372
[info]   CI (99.9%): [≈ 0, 8.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1614.617 ±(99.9%) 1418.391 MB/sec [Average]
[info]   (min, avg, max) = (1342.505, 1614.617, 2020.712), stdev = 368.352
[info]   CI (99.9%): [196.227, 3033.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   93552.231 ±(99.9%) 82622.222 B/op [Average]
[info]   (min, avg, max) = (77723.599, 93552.231, 117348.474), stdev = 21456.729
[info]   CI (99.9%): [10930.010, 176174.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.33% complete, ETA 01:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7364.100 ops/s
[info] # Warmup Iteration   2: 10282.464 ops/s
[info] # Warmup Iteration   3: 10595.221 ops/s
[info] # Warmup Iteration   4: 10390.042 ops/s
[info] # Warmup Iteration   5: 10503.936 ops/s
[info] Iteration   1: 10519.894 ops/s
[info]                  ·gc.alloc.rate:                   1331.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201085.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10205.508 ops/s
[info]                  ·gc.alloc.rate:                   1291.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207311.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 10209.506 ops/s
[info]                  ·gc.alloc.rate:                   1292.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207209.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10519.329 ops/s
[info]                  ·gc.alloc.rate:                   1331.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201304.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 10501.450 ops/s
[info]                  ·gc.alloc.rate:                   1329.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201829.669 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10391.138 ±(99.9%) 646.142 ops/s [Average]
[info]   (min, avg, max) = (10205.508, 10391.138, 10519.894), stdev = 167.801
[info]   CI (99.9%): [9744.996, 11037.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1315.106 ±(99.9%) 81.706 MB/sec [Average]
[info]   (min, avg, max) = (1291.709, 1315.106, 1331.327), stdev = 21.219
[info]   CI (99.9%): [1233.400, 1396.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   199232.047 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (199232.039, 199232.047, 199232.074), stdev = 0.016
[info]   CI (99.9%): [199231.987, 199232.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.287 ±(99.9%) 14.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.287, 9.626), stdev = 3.874
[info]   CI (99.9%): [≈ 0, 21.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1344.643 ±(99.9%) 4.473 MB/sec [Average]
[info]   (min, avg, max) = (1343.715, 1344.643, 1346.441), stdev = 1.162
[info]   CI (99.9%): [1340.170, 1349.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   203748.173 ±(99.9%) 12391.046 B/op [Average]
[info]   (min, avg, max) = (201085.847, 203748.173, 207311.293), stdev = 3217.915
[info]   CI (99.9%): [191357.128, 216139.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.53% complete, ETA 01:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6370.116 ops/s
[info] # Warmup Iteration   2: 11025.131 ops/s
[info] # Warmup Iteration   3: 11261.819 ops/s
[info] # Warmup Iteration   4: 11291.474 ops/s
[info] # Warmup Iteration   5: 11268.243 ops/s
[info] Iteration   1: 10935.894 ops/s
[info]                  ·gc.alloc.rate:                   1296.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              186577.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194493.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 11285.810 ops/s
[info]                  ·gc.alloc.rate:                   1337.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188632.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 11287.291 ops/s
[info]                  ·gc.alloc.rate:                   1337.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188817.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 11034.703 ops/s
[info]                  ·gc.alloc.rate:                   1307.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193336.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 11212.696 ops/s
[info]                  ·gc.alloc.rate:                   1328.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190390.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11151.279 ±(99.9%) 609.906 ops/s [Average]
[info]   (min, avg, max) = (10935.894, 11151.279, 11287.291), stdev = 158.391
[info]   CI (99.9%): [10541.373, 11761.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1321.586 ±(99.9%) 72.358 MB/sec [Average]
[info]   (min, avg, max) = (1296.046, 1321.586, 1337.693), stdev = 18.791
[info]   CI (99.9%): [1249.227, 1393.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.337 ±(99.9%) 1.779 B/op [Average]
[info]   (min, avg, max) = (186576.036, 186576.337, 186577.096), stdev = 0.462
[info]   CI (99.9%): [186574.557, 186578.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.946 ±(99.9%) 14.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.946, 8.907), stdev = 3.636
[info]   CI (99.9%): [≈ 0, 16.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.657 ±(99.9%) 7.915 MB/sec [Average]
[info]   (min, avg, max) = (1351.034, 1353.657, 1356.108), stdev = 2.056
[info]   CI (99.9%): [1345.741, 1361.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   191134.116 ±(99.9%) 10243.867 B/op [Average]
[info]   (min, avg, max) = (188632.228, 191134.116, 194493.162), stdev = 2660.300
[info]   CI (99.9%): [180890.249, 201377.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.73% complete, ETA 01:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185710.378 ops/s
[info] # Warmup Iteration   2: 204967.090 ops/s
[info] # Warmup Iteration   3: 204583.227 ops/s
[info] # Warmup Iteration   4: 206069.893 ops/s
[info] # Warmup Iteration   5: 205980.538 ops/s
[info] Iteration   1: 206048.045 ops/s
[info]                  ·gc.alloc.rate:                   1340.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10288.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 206330.815 ops/s
[info]                  ·gc.alloc.rate:                   1342.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10274.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 205542.490 ops/s
[info]                  ·gc.alloc.rate:                   1336.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10317.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 206069.737 ops/s
[info]                  ·gc.alloc.rate:                   1340.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10299.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 205609.680 ops/s
[info]                  ·gc.alloc.rate:                   1337.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10329.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   205920.154 ±(99.9%) 1286.366 ops/s [Average]
[info]   (min, avg, max) = (205542.490, 205920.154, 206330.815), stdev = 334.065
[info]   CI (99.9%): [204633.788, 207206.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1339.401 ±(99.9%) 8.223 MB/sec [Average]
[info]   (min, avg, max) = (1336.918, 1339.401, 1342.036), stdev = 2.135
[info]   CI (99.9%): [1331.178, 1347.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.002, 10240.002, 10240.002), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.318 ±(99.9%) 1.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.318, 0.795), stdev = 0.373
[info]   CI (99.9%): [≈ 0, 1.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1347.475 ±(99.9%) 4.407 MB/sec [Average]
[info]   (min, avg, max) = (1346.515, 1347.475, 1349.166), stdev = 1.144
[info]   CI (99.9%): [1343.068, 1351.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10301.755 ±(99.9%) 85.426 B/op [Average]
[info]   (min, avg, max) = (10274.179, 10301.755, 10329.291), stdev = 22.185
[info]   CI (99.9%): [10216.329, 10387.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.93% complete, ETA 01:29:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4769.671 ops/s
[info] # Warmup Iteration   2: 8557.637 ops/s
[info] # Warmup Iteration   3: 8716.780 ops/s
[info] # Warmup Iteration   4: 8771.354 ops/s
[info] # Warmup Iteration   5: 8742.716 ops/s
[info] Iteration   1: 8920.088 ops/s
[info]                  ·gc.alloc.rate:                   1660.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238729.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8928.600 ops/s
[info]                  ·gc.alloc.rate:                   1662.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358015.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8685.493 ops/s
[info]                  ·gc.alloc.rate:                   1617.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245701.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8754.046 ops/s
[info]                  ·gc.alloc.rate:                   1629.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243913.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8994.015 ops/s
[info]                  ·gc.alloc.rate:                   1674.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356362.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8856.449 ±(99.9%) 501.664 ops/s [Average]
[info]   (min, avg, max) = (8685.493, 8856.449, 8994.015), stdev = 130.281
[info]   CI (99.9%): [8354.784, 9358.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1648.871 ±(99.9%) 93.442 MB/sec [Average]
[info]   (min, avg, max) = (1617.049, 1648.871, 1674.613), stdev = 24.267
[info]   CI (99.9%): [1555.429, 1742.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.067 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (293096.046, 293096.067, 293096.146), stdev = 0.044
[info]   CI (99.9%): [293095.897, 293096.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.309 ±(99.9%) 32.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.309, 18.341), stdev = 8.318
[info]   CI (99.9%): [≈ 0, 42.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1626.200 ±(99.9%) 1430.853 MB/sec [Average]
[info]   (min, avg, max) = (1352.615, 1626.200, 2036.085), stdev = 371.588
[info]   CI (99.9%): [195.347, 3057.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   288544.455 ±(99.9%) 241507.120 B/op [Average]
[info]   (min, avg, max) = (238729.367, 288544.455, 358015.986), stdev = 62718.632
[info]   CI (99.9%): [47037.336, 530051.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33.13% complete, ETA 01:29:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8064.022 ops/s
[info] # Warmup Iteration   2: 10820.576 ops/s
[info] # Warmup Iteration   3: 10683.242 ops/s
[info] # Warmup Iteration   4: 10861.453 ops/s
[info] # Warmup Iteration   5: 10878.244 ops/s
[info] Iteration   1: 10846.337 ops/s
[info]                  ·gc.alloc.rate:                   1281.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              185945.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195412.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10903.064 ops/s
[info]                  ·gc.alloc.rate:                   1288.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194408.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10867.360 ops/s
[info]                  ·gc.alloc.rate:                   1283.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195052.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 10893.380 ops/s
[info]                  ·gc.alloc.rate:                   1286.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194683.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10737.675 ops/s
[info]                  ·gc.alloc.rate:                   1268.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197669.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   10849.563 ±(99.9%) 255.629 ops/s [Average]
[info]   (min, avg, max) = (10737.675, 10849.563, 10903.064), stdev = 66.386
[info]   CI (99.9%): [10593.934, 11105.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1281.889 ±(99.9%) 30.029 MB/sec [Average]
[info]   (min, avg, max) = (1268.821, 1281.889, 1288.490), stdev = 7.798
[info]   CI (99.9%): [1251.860, 1311.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   185963.563 ±(99.9%) 38.552 B/op [Average]
[info]   (min, avg, max) = (185945.653, 185963.563, 185968.048), stdev = 10.012
[info]   CI (99.9%): [185925.011, 186002.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5.455 ±(99.9%) 19.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.455, 12.202), stdev = 5.002
[info]   CI (99.9%): [≈ 0, 24.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1347.204 ±(99.9%) 3.294 MB/sec [Average]
[info]   (min, avg, max) = (1346.515, 1347.204, 1348.658), stdev = 0.855
[info]   CI (99.9%): [1343.911, 1350.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   195445.209 ±(99.9%) 5005.105 B/op [Average]
[info]   (min, avg, max) = (194408.644, 195445.209, 197669.559), stdev = 1299.810
[info]   CI (99.9%): [190440.104, 200450.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.33% complete, ETA 01:29:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15754.991 ops/s
[info] # Warmup Iteration   2: 21139.151 ops/s
[info] # Warmup Iteration   3: 21826.804 ops/s
[info] # Warmup Iteration   4: 21984.333 ops/s
[info] # Warmup Iteration   5: 21785.145 ops/s
[info] Iteration   1: 21670.916 ops/s
[info]                  ·gc.alloc.rate:                   909.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              66085.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97862.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21388.098 ops/s
[info]                  ·gc.alloc.rate:                   897.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49507.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 21832.469 ops/s
[info]                  ·gc.alloc.rate:                   916.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96800.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21469.678 ops/s
[info]                  ·gc.alloc.rate:                   901.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49218.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 21422.410 ops/s
[info]                  ·gc.alloc.rate:                   899.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49326.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   21556.714 ±(99.9%) 728.391 ops/s [Average]
[info]   (min, avg, max) = (21388.098, 21556.714, 21832.469), stdev = 189.161
[info]   CI (99.9%): [20828.323, 22285.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   904.878 ±(99.9%) 30.439 MB/sec [Average]
[info]   (min, avg, max) = (897.888, 904.878, 916.445), stdev = 7.905
[info]   CI (99.9%): [874.439, 935.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66081.205 ±(99.9%) 10.205 B/op [Average]
[info]   (min, avg, max) = (66080.019, 66081.205, 66085.945), stdev = 2.650
[info]   CI (99.9%): [66071.000, 66091.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.507 ±(99.9%) 8.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.507, 4.535), stdev = 2.134
[info]   CI (99.9%): [≈ 0, 9.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   940.931 ±(99.9%) 1419.385 MB/sec [Average]
[info]   (min, avg, max) = (671.222, 940.931, 1346.940), stdev = 368.610
[info]   CI (99.9%): [≈ 0, 2360.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68543.031 ±(99.9%) 101206.766 B/op [Average]
[info]   (min, avg, max) = (49218.375, 68543.031, 97862.578), stdev = 26283.076
[info]   CI (99.9%): [≈ 0, 169749.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.53% complete, ETA 01:29:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15096.051 ops/s
[info] # Warmup Iteration   2: 26015.452 ops/s
[info] # Warmup Iteration   3: 26267.716 ops/s
[info] # Warmup Iteration   4: 26698.301 ops/s
[info] # Warmup Iteration   5: 26596.437 ops/s
[info] Iteration   1: 26698.895 ops/s
[info]                  ·gc.alloc.rate:                   1026.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39775.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 26485.929 ops/s
[info]                  ·gc.alloc.rate:                   1018.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80254.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 26584.229 ops/s
[info]                  ·gc.alloc.rate:                   1022.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40023.490 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 25873.434 ops/s
[info]                  ·gc.alloc.rate:                   995.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82270.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 25832.645 ops/s
[info]                  ·gc.alloc.rate:                   993.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41228.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   26295.026 ±(99.9%) 1581.495 ops/s [Average]
[info]   (min, avg, max) = (25832.645, 26295.026, 26698.895), stdev = 410.709
[info]   CI (99.9%): [24713.531, 27876.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1011.416 ±(99.9%) 60.741 MB/sec [Average]
[info]   (min, avg, max) = (993.573, 1011.416, 1026.877), stdev = 15.774
[info]   CI (99.9%): [950.675, 1072.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (60552.015, 60552.016, 60552.017), stdev = 0.001
[info]   CI (99.9%): [60552.014, 60552.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.008 ±(99.9%) 11.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.008, 6.329), stdev = 2.901
[info]   CI (99.9%): [≈ 0, 13.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   945.897 ±(99.9%) 1424.965 MB/sec [Average]
[info]   (min, avg, max) = (674.538, 945.897, 1352.295), stdev = 370.059
[info]   CI (99.9%): [≈ 0, 2370.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   56710.680 ±(99.9%) 86373.493 B/op [Average]
[info]   (min, avg, max) = (39775.603, 56710.680, 82270.643), stdev = 22430.922
[info]   CI (99.9%): [≈ 0, 143084.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.73% complete, ETA 01:28:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638158.349 ops/s
[info] # Warmup Iteration   2: 709133.513 ops/s
[info] # Warmup Iteration   3: 708581.097 ops/s
[info] # Warmup Iteration   4: 700874.786 ops/s
[info] # Warmup Iteration   5: 701479.484 ops/s
[info] Iteration   1: 698181.850 ops/s
[info]                  ·gc.alloc.rate:                   1259.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3036.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 692634.862 ops/s
[info]                  ·gc.alloc.rate:                   1249.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3060.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 700411.240 ops/s
[info]                  ·gc.alloc.rate:                   1263.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3026.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 705066.749 ops/s
[info]                  ·gc.alloc.rate:                   1271.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3009.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 706319.010 ops/s
[info]                  ·gc.alloc.rate:                   1274.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3005.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   700522.742 ±(99.9%) 21262.004 ops/s [Average]
[info]   (min, avg, max) = (692634.862, 700522.742, 706319.010), stdev = 5521.675
[info]   CI (99.9%): [679260.738, 721784.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1263.789 ±(99.9%) 38.124 MB/sec [Average]
[info]   (min, avg, max) = (1249.574, 1263.789, 1274.196), stdev = 9.901
[info]   CI (99.9%): [1225.665, 1301.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.196 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.196, 0.232), stdev = 0.038
[info]   CI (99.9%): [0.050, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1347.208 ±(99.9%) 3.322 MB/sec [Average]
[info]   (min, avg, max) = (1346.548, 1347.208, 1348.506), stdev = 0.863
[info]   CI (99.9%): [1343.886, 1350.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3027.599 ±(99.9%) 85.443 B/op [Average]
[info]   (min, avg, max) = (3005.626, 3027.599, 3060.400), stdev = 22.189
[info]   CI (99.9%): [2942.156, 3113.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.94% complete, ETA 01:28:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 660258.802 ops/s
[info] # Warmup Iteration   2: 706872.016 ops/s
[info] # Warmup Iteration   3: 707543.814 ops/s
[info] # Warmup Iteration   4: 707733.666 ops/s
[info] # Warmup Iteration   5: 708718.373 ops/s
[info] Iteration   1: 711347.939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 709805.013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 711596.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 709818.292 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 710156.656 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   710544.830 ±(99.9%) 3321.574 ops/s [Average]
[info]   (min, avg, max) = (709805.013, 710544.830, 711596.249), stdev = 862.602
[info]   CI (99.9%): [707223.255, 713866.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.14% complete, ETA 01:28:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18124.509 ops/s
[info] # Warmup Iteration   2: 23593.017 ops/s
[info] # Warmup Iteration   3: 23707.160 ops/s
[info] # Warmup Iteration   4: 24250.002 ops/s
[info] # Warmup Iteration   5: 24200.193 ops/s
[info] Iteration   1: 24535.944 ops/s
[info]                  ·gc.alloc.rate:                   1035.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85967.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 24470.626 ops/s
[info]                  ·gc.alloc.rate:                   1032.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43056.951 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 24396.105 ops/s
[info]                  ·gc.alloc.rate:                   1029.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86371.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 24092.667 ops/s
[info]                  ·gc.alloc.rate:                   1016.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43728.739 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 23775.917 ops/s
[info]                  ·gc.alloc.rate:                   1003.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88623.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   24254.252 ±(99.9%) 1219.512 ops/s [Average]
[info]   (min, avg, max) = (23775.917, 24254.252, 24535.944), stdev = 316.703
[info]   CI (99.9%): [23034.740, 25473.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1023.234 ±(99.9%) 51.326 MB/sec [Average]
[info]   (min, avg, max) = (1003.101, 1023.234, 1035.116), stdev = 13.329
[info]   CI (99.9%): [971.908, 1074.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66416.017, 66416.017, 66416.018), stdev = 0.001
[info]   CI (99.9%): [66416.015, 66416.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.151 ±(99.9%) 9.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.151, 5.371), stdev = 2.432
[info]   CI (99.9%): [≈ 0, 11.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.049 ±(99.9%) 1412.437 MB/sec [Average]
[info]   (min, avg, max) = (669.231, 1071.049, 1339.836), stdev = 366.805
[info]   CI (99.9%): [≈ 0, 2483.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69549.641 ±(99.9%) 92031.877 B/op [Average]
[info]   (min, avg, max) = (43056.951, 69549.641, 88623.234), stdev = 23900.386
[info]   CI (99.9%): [≈ 0, 161581.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34.34% complete, ETA 01:28:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7735.085 ops/s
[info] # Warmup Iteration   2: 8912.988 ops/s
[info] # Warmup Iteration   3: 8921.426 ops/s
[info] # Warmup Iteration   4: 8984.681 ops/s
[info] # Warmup Iteration   5: 8877.913 ops/s
[info] Iteration   1: 8919.480 ops/s
[info]                  ·gc.alloc.rate:                   1503.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              265216.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237639.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8979.770 ops/s
[info]                  ·gc.alloc.rate:                   1512.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              265216.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236052.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9010.416 ops/s
[info]                  ·gc.alloc.rate:                   1518.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              265239.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353151.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9027.708 ops/s
[info]                  ·gc.alloc.rate:                   1520.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              265240.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235261.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8960.579 ops/s
[info]                  ·gc.alloc.rate:                   1509.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              265240.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237196.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   8979.590 ±(99.9%) 163.825 ops/s [Average]
[info]   (min, avg, max) = (8919.480, 8979.590, 9027.708), stdev = 42.545
[info]   CI (99.9%): [8815.766, 9143.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1512.963 ±(99.9%) 27.159 MB/sec [Average]
[info]   (min, avg, max) = (1503.100, 1512.963, 1520.975), stdev = 7.053
[info]   CI (99.9%): [1485.804, 1540.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   265230.398 ±(99.9%) 50.445 B/op [Average]
[info]   (min, avg, max) = (265216.046, 265230.398, 265240.046), stdev = 13.100
[info]   CI (99.9%): [265179.953, 265280.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8.762 ±(99.9%) 25.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.762, 14.593), stdev = 6.621
[info]   CI (99.9%): [≈ 0, 34.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1482.762 ±(99.9%) 1159.250 MB/sec [Average]
[info]   (min, avg, max) = (1346.580, 1482.762, 2021.296), stdev = 301.053
[info]   CI (99.9%): [323.512, 2642.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   259860.197 ±(99.9%) 200848.483 B/op [Average]
[info]   (min, avg, max) = (235261.902, 259860.197, 353151.276), stdev = 52159.713
[info]   CI (99.9%): [59011.714, 460708.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.54% complete, ETA 01:27:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18840.355 ops/s
[info] # Warmup Iteration   2: 27389.928 ops/s
[info] # Warmup Iteration   3: 27182.221 ops/s
[info] # Warmup Iteration   4: 27165.539 ops/s
[info] # Warmup Iteration   5: 27573.663 ops/s
[info] Iteration   1: 27582.675 ops/s
[info]                  ·gc.alloc.rate:                   1496.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115043.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26750.150 ops/s
[info]                  ·gc.alloc.rate:                   1451.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79122.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26707.025 ops/s
[info]                  ·gc.alloc.rate:                   1449.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79288.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26827.177 ops/s
[info]                  ·gc.alloc.rate:                   1455.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79012.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 26825.509 ops/s
[info]                  ·gc.alloc.rate:                   1456.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79096.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   26938.507 ±(99.9%) 1400.567 ops/s [Average]
[info]   (min, avg, max) = (26707.025, 26938.507, 27582.675), stdev = 363.723
[info]   CI (99.9%): [25537.940, 28339.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1462.072 ±(99.9%) 75.753 MB/sec [Average]
[info]   (min, avg, max) = (1449.384, 1462.072, 1496.881), stdev = 19.673
[info]   CI (99.9%): [1386.319, 1537.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85440.016 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (85440.015, 85440.016, 85440.016), stdev = 0.001
[info]   CI (99.9%): [85440.013, 85440.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.684 ±(99.9%) 7.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.684, 4.751), stdev = 1.991
[info]   CI (99.9%): [≈ 0, 9.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479.929 ±(99.9%) 1152.908 MB/sec [Average]
[info]   (min, avg, max) = (1344.488, 1479.929, 2015.517), stdev = 299.407
[info]   CI (99.9%): [327.020, 2632.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   86312.657 ±(99.9%) 61845.684 B/op [Average]
[info]   (min, avg, max) = (79012.472, 86312.657, 115043.115), stdev = 16061.128
[info]   CI (99.9%): [24466.973, 148158.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.74% complete, ETA 01:27:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17629.479 ops/s
[info] # Warmup Iteration   2: 31217.046 ops/s
[info] # Warmup Iteration   3: 31357.288 ops/s
[info] # Warmup Iteration   4: 31216.278 ops/s
[info] # Warmup Iteration   5: 31367.070 ops/s
[info] Iteration   1: 30297.458 ops/s
[info]                  ·gc.alloc.rate:                   1382.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105342.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 31217.839 ops/s
[info]                  ·gc.alloc.rate:                   1426.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68043.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 31398.120 ops/s
[info]                  ·gc.alloc.rate:                   1433.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67912.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31293.981 ops/s
[info]                  ·gc.alloc.rate:                   1428.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68203.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 31293.207 ops/s
[info]                  ·gc.alloc.rate:                   1428.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68241.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   31100.121 ±(99.9%) 1745.358 ops/s [Average]
[info]   (min, avg, max) = (30297.458, 31100.121, 31398.120), stdev = 453.264
[info]   CI (99.9%): [29354.763, 32845.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1419.819 ±(99.9%) 80.129 MB/sec [Average]
[info]   (min, avg, max) = (1382.867, 1419.819, 1433.169), stdev = 20.809
[info]   CI (99.9%): [1339.691, 1499.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71856.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (71856.013, 71856.013, 71856.014), stdev = 0.001
[info]   CI (99.9%): [71856.012, 71856.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.700 ±(99.9%) 8.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.700, 4.325), stdev = 2.328
[info]   CI (99.9%): [≈ 0, 10.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1488.948 ±(99.9%) 1158.883 MB/sec [Average]
[info]   (min, avg, max) = (1350.671, 1488.948, 2027.304), stdev = 300.958
[info]   CI (99.9%): [330.065, 2647.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   75548.531 ±(99.9%) 64134.701 B/op [Average]
[info]   (min, avg, max) = (67912.867, 75548.531, 105342.011), stdev = 16655.578
[info]   CI (99.9%): [11413.831, 139683.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.94% complete, ETA 01:27:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328968.208 ops/s
[info] # Warmup Iteration   2: 346473.354 ops/s
[info] # Warmup Iteration   3: 349323.224 ops/s
[info] # Warmup Iteration   4: 351243.610 ops/s
[info] # Warmup Iteration   5: 350430.511 ops/s
[info] Iteration   1: 350640.402 ops/s
[info]                  ·gc.alloc.rate:                   912.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3025.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 350001.107 ops/s
[info]                  ·gc.alloc.rate:                   910.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3031.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 344988.587 ops/s
[info]                  ·gc.alloc.rate:                   897.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6144.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 350216.164 ops/s
[info]                  ·gc.alloc.rate:                   911.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3026.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 349125.638 ops/s
[info]                  ·gc.alloc.rate:                   908.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3035.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   348994.380 ±(99.9%) 8881.402 ops/s [Average]
[info]   (min, avg, max) = (344988.587, 348994.380, 350640.402), stdev = 2306.472
[info]   CI (99.9%): [340112.978, 357875.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   908.092 ±(99.9%) 22.736 MB/sec [Average]
[info]   (min, avg, max) = (897.859, 908.092, 912.394), stdev = 5.905
[info]   CI (99.9%): [885.356, 930.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.076 ±(99.9%) 0.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.380), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.239 ±(99.9%) 1159.410 MB/sec [Average]
[info]   (min, avg, max) = (673.207, 808.239, 1346.854), stdev = 301.095
[info]   CI (99.9%): [≈ 0, 1967.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3652.633 ±(99.9%) 5363.530 B/op [Average]
[info]   (min, avg, max) = (3025.684, 3652.633, 6144.303), stdev = 1392.892
[info]   CI (99.9%): [≈ 0, 9016.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.14% complete, ETA 01:26:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9791.480 ops/s
[info] # Warmup Iteration   2: 17634.689 ops/s
[info] # Warmup Iteration   3: 17585.220 ops/s
[info] # Warmup Iteration   4: 17579.813 ops/s
[info] # Warmup Iteration   5: 18051.726 ops/s
[info] Iteration   1: 18088.458 ops/s
[info]                  ·gc.alloc.rate:                   1802.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117822.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18059.993 ops/s
[info]                  ·gc.alloc.rate:                   1799.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177171.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18185.626 ops/s
[info]                  ·gc.alloc.rate:                   1812.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176107.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17791.157 ops/s
[info]                  ·gc.alloc.rate:                   1773.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120089.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18085.407 ops/s
[info]                  ·gc.alloc.rate:                   1802.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177380.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18042.128 ±(99.9%) 570.872 ops/s [Average]
[info]   (min, avg, max) = (17791.157, 18042.128, 18185.626), stdev = 148.254
[info]   CI (99.9%): [17471.256, 18613.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1798.112 ±(99.9%) 56.816 MB/sec [Average]
[info]   (min, avg, max) = (1773.161, 1798.112, 1812.461), stdev = 14.755
[info]   CI (99.9%): [1741.296, 1854.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   156904.024 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (156904.022, 156904.024, 156904.028), stdev = 0.002
[info]   CI (99.9%): [156904.015, 156904.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.262 ±(99.9%) 5.769 B/op [Average]
[info]   (min, avg, max) = (1.811, 3.262, 5.404), stdev = 1.498
[info]   CI (99.9%): [≈ 0, 9.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1763.010 ±(99.9%) 1432.834 MB/sec [Average]
[info]   (min, avg, max) = (1353.674, 1763.010, 2037.634), stdev = 372.103
[info]   CI (99.9%): [330.176, 3195.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   153714.454 ±(99.9%) 122234.208 B/op [Average]
[info]   (min, avg, max) = (117822.086, 153714.454, 177380.870), stdev = 31743.836
[info]   CI (99.9%): [31480.246, 275948.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35.34% complete, ETA 01:26:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21234.696 ops/s
[info] # Warmup Iteration   2: 26753.011 ops/s
[info] # Warmup Iteration   3: 27251.842 ops/s
[info] # Warmup Iteration   4: 27483.769 ops/s
[info] # Warmup Iteration   5: 27295.642 ops/s
[info] Iteration   1: 27056.508 ops/s
[info]                  ·gc.alloc.rate:                   1398.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78343.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 27424.392 ops/s
[info]                  ·gc.alloc.rate:                   1417.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77290.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27419.360 ops/s
[info]                  ·gc.alloc.rate:                   1417.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77320.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27519.581 ops/s
[info]                  ·gc.alloc.rate:                   1422.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77093.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27493.458 ops/s
[info]                  ·gc.alloc.rate:                   1421.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115892.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   27382.660 ±(99.9%) 721.642 ops/s [Average]
[info]   (min, avg, max) = (27056.508, 27382.660, 27519.581), stdev = 187.408
[info]   CI (99.9%): [26661.018, 28104.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1415.293 ±(99.9%) 37.556 MB/sec [Average]
[info]   (min, avg, max) = (1398.318, 1415.293, 1422.379), stdev = 9.753
[info]   CI (99.9%): [1377.737, 1452.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   81368.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81368.015, 81368.015, 81368.016), stdev = 0.001
[info]   CI (99.9%): [81368.013, 81368.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3.342 ±(99.9%) 9.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.342, 5.958), stdev = 2.580
[info]   CI (99.9%): [≈ 0, 13.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1482.242 ±(99.9%) 1166.331 MB/sec [Average]
[info]   (min, avg, max) = (1346.348, 1482.242, 2024.072), stdev = 302.892
[info]   CI (99.9%): [315.911, 2648.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   85188.061 ±(99.9%) 66119.326 B/op [Average]
[info]   (min, avg, max) = (77093.895, 85188.061, 115892.031), stdev = 17170.979
[info]   CI (99.9%): [19068.735, 151307.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.54% complete, ETA 01:26:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31781.443 ops/s
[info] # Warmup Iteration   2: 42591.707 ops/s
[info] # Warmup Iteration   3: 42430.885 ops/s
[info] # Warmup Iteration   4: 42776.788 ops/s
[info] # Warmup Iteration   5: 42880.015 ops/s
[info] Iteration   1: 42869.882 ops/s
[info]                  ·gc.alloc.rate:                   1040.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              38200.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49398.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42153.467 ops/s
[info]                  ·gc.alloc.rate:                   1023.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              38200.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25095.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 42886.334 ops/s
[info]                  ·gc.alloc.rate:                   1040.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              38200.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49307.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 42758.521 ops/s
[info]                  ·gc.alloc.rate:                   1037.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              38200.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49454.655 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42892.644 ops/s
[info]                  ·gc.alloc.rate:                   1040.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              38200.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24661.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   42712.169 ±(99.9%) 1220.833 ops/s [Average]
[info]   (min, avg, max) = (42153.467, 42712.169, 42892.644), stdev = 317.047
[info]   CI (99.9%): [41491.336, 43933.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1036.484 ±(99.9%) 29.432 MB/sec [Average]
[info]   (min, avg, max) = (1023.011, 1036.484, 1040.826), stdev = 7.643
[info]   CI (99.9%): [1007.052, 1065.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38200.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38200.010, 38200.010, 38200.010), stdev = 0.001
[info]   CI (99.9%): [38200.008, 38200.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.918 ±(99.9%) 5.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.918, 3.056), stdev = 1.367
[info]   CI (99.9%): [≈ 0, 6.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1075.173 ±(99.9%) 1417.193 MB/sec [Average]
[info]   (min, avg, max) = (671.952, 1075.173, 1345.171), stdev = 368.041
[info]   CI (99.9%): [≈ 0, 2492.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   39583.500 ±(99.9%) 51694.043 B/op [Average]
[info]   (min, avg, max) = (24661.737, 39583.500, 49454.655), stdev = 13424.779
[info]   CI (99.9%): [≈ 0, 91277.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.74% complete, ETA 01:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86542.624 ops/s
[info] # Warmup Iteration   2: 131652.660 ops/s
[info] # Warmup Iteration   3: 129637.853 ops/s
[info] # Warmup Iteration   4: 133582.166 ops/s
[info] # Warmup Iteration   5: 134235.561 ops/s
[info] Iteration   1: 133972.939 ops/s
[info]                  ·gc.alloc.rate:                   1134.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7934.510 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 134315.824 ops/s
[info]                  ·gc.alloc.rate:                   1137.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15837.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 134165.857 ops/s
[info]                  ·gc.alloc.rate:                   1136.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15870.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 134281.211 ops/s
[info]                  ·gc.alloc.rate:                   1137.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7932.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 132175.294 ops/s
[info]                  ·gc.alloc.rate:                   1119.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16132.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   133782.225 ±(99.9%) 3497.251 ops/s [Average]
[info]   (min, avg, max) = (132175.294, 133782.225, 134315.824), stdev = 908.225
[info]   CI (99.9%): [130284.974, 137279.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1133.491 ±(99.9%) 29.404 MB/sec [Average]
[info]   (min, avg, max) = (1119.995, 1133.491, 1137.993), stdev = 7.636
[info]   CI (99.9%): [1104.087, 1162.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.393 ±(99.9%) 1.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 0.744), stdev = 0.373
[info]   CI (99.9%): [≈ 0, 1.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082.260 ±(99.9%) 1428.215 MB/sec [Average]
[info]   (min, avg, max) = (675.250, 1082.260, 1354.888), stdev = 370.903
[info]   CI (99.9%): [≈ 0, 2510.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12741.698 ±(99.9%) 16907.380 B/op [Average]
[info]   (min, avg, max) = (7932.401, 12741.698, 16132.915), stdev = 4390.793
[info]   CI (99.9%): [≈ 0, 29649.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.94% complete, ETA 01:25:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 919993.983 ops/s
[info] # Warmup Iteration   2: 1010323.320 ops/s
[info] # Warmup Iteration   3: 1014640.924 ops/s
[info] # Warmup Iteration   4: 1031728.008 ops/s
[info] # Warmup Iteration   5: 1029280.288 ops/s
[info] Iteration   1: 1027041.751 ops/s
[info]                  ·gc.alloc.rate:                   1101.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2064.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1008316.769 ops/s
[info]                  ·gc.alloc.rate:                   1081.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1051.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1027972.117 ops/s
[info]                  ·gc.alloc.rate:                   1102.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2062.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1028429.188 ops/s
[info]                  ·gc.alloc.rate:                   1102.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2061.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1029904.175 ops/s
[info]                  ·gc.alloc.rate:                   1104.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1030.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1024332.800 ±(99.9%) 34704.798 ops/s [Average]
[info]   (min, avg, max) = (1008316.769, 1024332.800, 1029904.175), stdev = 9012.726
[info]   CI (99.9%): [989628.002, 1059037.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1098.327 ±(99.9%) 36.938 MB/sec [Average]
[info]   (min, avg, max) = (1081.287, 1098.327, 1104.290), stdev = 9.593
[info]   CI (99.9%): [1061.389, 1135.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.064 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.128), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.443 ±(99.9%) 1419.437 MB/sec [Average]
[info]   (min, avg, max) = (673.369, 1077.443, 1347.005), stdev = 368.623
[info]   CI (99.9%): [≈ 0, 2496.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1653.888 ±(99.9%) 2155.783 B/op [Average]
[info]   (min, avg, max) = (1030.119, 1653.888, 2064.930), stdev = 559.850
[info]   CI (99.9%): [≈ 0, 3809.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.14% complete, ETA 01:25:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 847743.839 ops/s
[info] # Warmup Iteration   2: 912755.095 ops/s
[info] # Warmup Iteration   3: 911974.757 ops/s
[info] # Warmup Iteration   4: 910901.363 ops/s
[info] # Warmup Iteration   5: 911264.078 ops/s
[info] Iteration   1: 908988.984 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 910233.613 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 912181.546 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 909676.098 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 907620.763 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   909740.201 ±(99.9%) 6461.764 ops/s [Average]
[info]   (min, avg, max) = (907620.763, 909740.201, 912181.546), stdev = 1678.100
[info]   CI (99.9%): [903278.437, 916201.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.35% complete, ETA 01:25:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42827.998 ops/s
[info] # Warmup Iteration   2: 55988.622 ops/s
[info] # Warmup Iteration   3: 55168.927 ops/s
[info] # Warmup Iteration   4: 56882.787 ops/s
[info] # Warmup Iteration   5: 57456.267 ops/s
[info] Iteration   1: 57638.394 ops/s
[info]                  ·gc.alloc.rate:                   1339.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36557.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 57586.863 ops/s
[info]                  ·gc.alloc.rate:                   1338.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36587.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 57643.911 ops/s
[info]                  ·gc.alloc.rate:                   1339.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36571.677 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 57597.639 ops/s
[info]                  ·gc.alloc.rate:                   1338.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36619.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 57596.860 ops/s
[info]                  ·gc.alloc.rate:                   1338.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36674.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   57612.733 ±(99.9%) 101.507 ops/s [Average]
[info]   (min, avg, max) = (57586.863, 57612.733, 57643.911), stdev = 26.361
[info]   CI (99.9%): [57511.226, 57714.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1338.810 ±(99.9%) 2.155 MB/sec [Average]
[info]   (min, avg, max) = (1338.202, 1338.810, 1339.436), stdev = 0.560
[info]   CI (99.9%): [1336.655, 1340.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36584.007, 36584.007, 36584.008), stdev = 0.001
[info]   CI (99.9%): [36584.006, 36584.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.478 ±(99.9%) 3.322 B/op [Average]
[info]   (min, avg, max) = (0.569, 1.478, 2.844), stdev = 0.863
[info]   CI (99.9%): [≈ 0, 4.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1339.469 ±(99.9%) 5.593 MB/sec [Average]
[info]   (min, avg, max) = (1338.316, 1339.469, 1341.839), stdev = 1.453
[info]   CI (99.9%): [1333.876, 1345.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36602.025 ±(99.9%) 180.127 B/op [Average]
[info]   (min, avg, max) = (36557.296, 36602.025, 36674.952), stdev = 46.778
[info]   CI (99.9%): [36421.898, 36782.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36.55% complete, ETA 01:25:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15090.429 ops/s
[info] # Warmup Iteration   2: 16812.838 ops/s
[info] # Warmup Iteration   3: 16514.380 ops/s
[info] # Warmup Iteration   4: 17003.670 ops/s
[info] # Warmup Iteration   5: 17252.457 ops/s
[info] Iteration   1: 17137.880 ops/s
[info]                  ·gc.alloc.rate:                   1591.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              146200.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185517.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17105.043 ops/s
[info]                  ·gc.alloc.rate:                   1588.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              146189.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123954.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17224.753 ops/s
[info]                  ·gc.alloc.rate:                   1599.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              146176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184804.749 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17122.678 ops/s
[info]                  ·gc.alloc.rate:                   1589.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              146176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124100.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17285.831 ops/s
[info]                  ·gc.alloc.rate:                   1605.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              146176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123058.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   17175.237 ±(99.9%) 296.825 ops/s [Average]
[info]   (min, avg, max) = (17105.043, 17175.237, 17285.831), stdev = 77.084
[info]   CI (99.9%): [16878.412, 17472.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1594.890 ±(99.9%) 27.159 MB/sec [Average]
[info]   (min, avg, max) = (1588.610, 1594.890, 1605.101), stdev = 7.053
[info]   CI (99.9%): [1567.732, 1622.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   146183.554 ±(99.9%) 42.133 B/op [Average]
[info]   (min, avg, max) = (146176.024, 146183.554, 146200.026), stdev = 10.942
[info]   CI (99.9%): [146141.421, 146225.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4.953 ±(99.9%) 15.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.953, 9.557), stdev = 3.955
[info]   CI (99.9%): [≈ 0, 20.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1617.899 ±(99.9%) 1415.907 MB/sec [Average]
[info]   (min, avg, max) = (1346.990, 1617.899, 2021.930), stdev = 367.707
[info]   CI (99.9%): [201.992, 3033.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   148287.249 ±(99.9%) 129630.065 B/op [Average]
[info]   (min, avg, max) = (123058.633, 148287.249, 185517.763), stdev = 33664.516
[info]   CI (99.9%): [18657.184, 277917.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.75% complete, ETA 01:24:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11476.322 ops/s
[info] # Warmup Iteration   2: 16172.925 ops/s
[info] # Warmup Iteration   3: 16233.472 ops/s
[info] # Warmup Iteration   4: 16306.293 ops/s
[info] # Warmup Iteration   5: 16250.965 ops/s
[info] Iteration   1: 15819.442 ops/s
[info]                  ·gc.alloc.rate:                   1411.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133722.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15801.193 ops/s
[info]                  ·gc.alloc.rate:                   1409.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133883.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15641.867 ops/s
[info]                  ·gc.alloc.rate:                   1395.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202999.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15867.530 ops/s
[info]                  ·gc.alloc.rate:                   1416.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133582.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16292.311 ops/s
[info]                  ·gc.alloc.rate:                   1453.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130227.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   15884.469 ±(99.9%) 936.588 ops/s [Average]
[info]   (min, avg, max) = (15641.867, 15884.469, 16292.311), stdev = 243.229
[info]   CI (99.9%): [14947.881, 16821.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1417.518 ±(99.9%) 83.748 MB/sec [Average]
[info]   (min, avg, max) = (1395.839, 1417.518, 1453.962), stdev = 21.749
[info]   CI (99.9%): [1333.769, 1501.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480.028 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (140480.026, 140480.028, 140480.032), stdev = 0.003
[info]   CI (99.9%): [140480.019, 140480.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.120 ±(99.9%) 11.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.120, 6.283), stdev = 2.910
[info]   CI (99.9%): [≈ 0, 15.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479.808 ±(99.9%) 1156.475 MB/sec [Average]
[info]   (min, avg, max) = (1343.637, 1479.808, 2017.050), stdev = 300.333
[info]   CI (99.9%): [323.332, 2636.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   146883.166 ±(99.9%) 120937.275 B/op [Average]
[info]   (min, avg, max) = (130227.516, 146883.166, 202999.917), stdev = 31407.026
[info]   CI (99.9%): [25945.891, 267820.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.95% complete, ETA 01:24:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9672.306 ops/s
[info] # Warmup Iteration   2: 17041.555 ops/s
[info] # Warmup Iteration   3: 17068.790 ops/s
[info] # Warmup Iteration   4: 16510.864 ops/s
[info] # Warmup Iteration   5: 16612.954 ops/s
[info] Iteration   1: 16528.965 ops/s
[info]                  ·gc.alloc.rate:                   1335.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128677.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16495.509 ops/s
[info]                  ·gc.alloc.rate:                   1332.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              127183.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129054.530 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16618.842 ops/s
[info]                  ·gc.alloc.rate:                   1342.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              127153.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128233.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16650.841 ops/s
[info]                  ·gc.alloc.rate:                   1344.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128113.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16647.772 ops/s
[info]                  ·gc.alloc.rate:                   1344.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128230.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   16588.386 ±(99.9%) 275.743 ops/s [Average]
[info]   (min, avg, max) = (16495.509, 16588.386, 16650.841), stdev = 71.610
[info]   CI (99.9%): [16312.643, 16864.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1339.951 ±(99.9%) 21.967 MB/sec [Average]
[info]   (min, avg, max) = (1332.543, 1339.951, 1344.990), stdev = 5.705
[info]   CI (99.9%): [1317.984, 1361.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127165.004 ±(99.9%) 65.604 B/op [Average]
[info]   (min, avg, max) = (127152.024, 127165.004, 127184.025), stdev = 17.037
[info]   CI (99.9%): [127099.400, 127230.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.954 ±(99.9%) 10.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.954, 5.957), stdev = 2.800
[info]   CI (99.9%): [≈ 0, 14.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.604 ±(99.9%) 8.095 MB/sec [Average]
[info]   (min, avg, max) = (1350.921, 1353.604, 1356.039), stdev = 2.102
[info]   CI (99.9%): [1345.509, 1361.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   128461.960 ±(99.9%) 1522.256 B/op [Average]
[info]   (min, avg, max) = (128113.122, 128461.960, 129054.530), stdev = 395.325
[info]   CI (99.9%): [126939.704, 129984.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.15% complete, ETA 01:24:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 387133.136 ops/s
[info] # Warmup Iteration   2: 408703.372 ops/s
[info] # Warmup Iteration   3: 409173.667 ops/s
[info] # Warmup Iteration   4: 410819.005 ops/s
[info] # Warmup Iteration   5: 411214.733 ops/s
[info] Iteration   1: 411572.259 ops/s
[info]                  ·gc.alloc.rate:                   1071.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5148.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 412365.886 ops/s
[info]                  ·gc.alloc.rate:                   1072.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2570.450 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 410782.756 ops/s
[info]                  ·gc.alloc.rate:                   1068.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5160.169 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 411652.289 ops/s
[info]                  ·gc.alloc.rate:                   1071.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2574.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 410119.497 ops/s
[info]                  ·gc.alloc.rate:                   1067.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5171.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   411298.537 ±(99.9%) 3332.234 ops/s [Average]
[info]   (min, avg, max) = (410119.497, 411298.537, 412365.886), stdev = 865.371
[info]   CI (99.9%): [407966.303, 414630.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1070.183 ±(99.9%) 8.767 MB/sec [Average]
[info]   (min, avg, max) = (1067.040, 1070.183, 1072.842), stdev = 2.277
[info]   CI (99.9%): [1061.415, 1078.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.159 ±(99.9%) 0.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.319), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.322 ±(99.9%) 1420.323 MB/sec [Average]
[info]   (min, avg, max) = (673.263, 1077.322, 1347.086), stdev = 368.853
[info]   CI (99.9%): [≈ 0, 2497.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4125.047 ±(99.9%) 5457.196 B/op [Average]
[info]   (min, avg, max) = (2570.450, 4125.047, 5171.002), stdev = 1417.217
[info]   CI (99.9%): [≈ 0, 9582.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.35% complete, ETA 01:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6625.775 ops/s
[info] # Warmup Iteration   2: 11874.995 ops/s
[info] # Warmup Iteration   3: 12145.388 ops/s
[info] # Warmup Iteration   4: 11795.987 ops/s
[info] # Warmup Iteration   5: 11924.316 ops/s
[info] Iteration   1: 12116.191 ops/s
[info]                  ·gc.alloc.rate:                   1672.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175772.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 12147.762 ops/s
[info]                  ·gc.alloc.rate:                   1677.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263222.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 12322.828 ops/s
[info]                  ·gc.alloc.rate:                   1701.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173203.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12349.953 ops/s
[info]                  ·gc.alloc.rate:                   1704.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259385.483 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12244.708 ops/s
[info]                  ·gc.alloc.rate:                   1690.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174548.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12236.288 ±(99.9%) 398.034 ops/s [Average]
[info]   (min, avg, max) = (12116.191, 12236.288, 12349.953), stdev = 103.368
[info]   CI (99.9%): [11838.254, 12634.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1689.162 ±(99.9%) 54.841 MB/sec [Average]
[info]   (min, avg, max) = (1672.594, 1689.162, 1704.825), stdev = 14.242
[info]   CI (99.9%): [1634.320, 1744.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320.050 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (217320.033, 217320.050, 217320.105), stdev = 0.031
[info]   CI (99.9%): [217319.930, 217320.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.755 ±(99.9%) 20.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.755, 10.815), stdev = 5.239
[info]   CI (99.9%): [≈ 0, 23.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1626.450 ±(99.9%) 1429.184 MB/sec [Average]
[info]   (min, avg, max) = (1352.822, 1626.450, 2034.819), stdev = 371.154
[info]   CI (99.9%): [197.266, 3055.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   209226.414 ±(99.9%) 183168.466 B/op [Average]
[info]   (min, avg, max) = (173203.045, 209226.414, 263222.782), stdev = 47568.269
[info]   CI (99.9%): [26057.948, 392394.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37.55% complete, ETA 01:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12659.969 ops/s
[info] # Warmup Iteration   2: 16579.484 ops/s
[info] # Warmup Iteration   3: 16603.711 ops/s
[info] # Warmup Iteration   4: 16656.188 ops/s
[info] # Warmup Iteration   5: 16735.529 ops/s
[info] Iteration   1: 16671.703 ops/s
[info]                  ·gc.alloc.rate:                   1392.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              131504.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127142.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16674.104 ops/s
[info]                  ·gc.alloc.rate:                   1392.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              131499.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127126.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16612.030 ops/s
[info]                  ·gc.alloc.rate:                   1387.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127617.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16248.654 ops/s
[info]                  ·gc.alloc.rate:                   1357.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130572.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16275.320 ops/s
[info]                  ·gc.alloc.rate:                   1359.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130460.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   16496.362 ±(99.9%) 830.202 ops/s [Average]
[info]   (min, avg, max) = (16248.654, 16496.362, 16674.104), stdev = 215.601
[info]   CI (99.9%): [15666.160, 17326.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1377.851 ±(99.9%) 69.286 MB/sec [Average]
[info]   (min, avg, max) = (1357.029, 1377.851, 1392.692), stdev = 17.993
[info]   CI (99.9%): [1308.564, 1447.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   131488.752 ±(99.9%) 46.393 B/op [Average]
[info]   (min, avg, max) = (131480.025, 131488.752, 131504.024), stdev = 12.048
[info]   CI (99.9%): [131442.359, 131535.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2.380 ±(99.9%) 6.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.380, 4.032), stdev = 1.668
[info]   CI (99.9%): [≈ 0, 8.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1347.214 ±(99.9%) 4.418 MB/sec [Average]
[info]   (min, avg, max) = (1346.380, 1347.214, 1349.038), stdev = 1.147
[info]   CI (99.9%): [1342.797, 1351.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   128583.665 ±(99.9%) 6836.713 B/op [Average]
[info]   (min, avg, max) = (127126.794, 128583.665, 130572.033), stdev = 1775.473
[info]   CI (99.9%): [121746.952, 135420.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.75% complete, ETA 01:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27569.162 ops/s
[info] # Warmup Iteration   2: 37184.675 ops/s
[info] # Warmup Iteration   3: 38568.310 ops/s
[info] # Warmup Iteration   4: 37469.680 ops/s
[info] # Warmup Iteration   5: 38272.233 ops/s
[info] Iteration   1: 38472.268 ops/s
[info]                  ·gc.alloc.rate:                   1195.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55014.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38008.234 ops/s
[info]                  ·gc.alloc.rate:                   1181.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55635.349 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 37203.966 ops/s
[info]                  ·gc.alloc.rate:                   1156.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56834.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 38511.832 ops/s
[info]                  ·gc.alloc.rate:                   1197.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27465.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38750.406 ops/s
[info]                  ·gc.alloc.rate:                   1204.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54621.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   38189.341 ±(99.9%) 2360.075 ops/s [Average]
[info]   (min, avg, max) = (37203.966, 38189.341, 38750.406), stdev = 612.904
[info]   CI (99.9%): [35829.267, 40549.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1186.987 ±(99.9%) 73.224 MB/sec [Average]
[info]   (min, avg, max) = (1156.336, 1186.987, 1204.408), stdev = 19.016
[info]   CI (99.9%): [1113.763, 1260.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.011 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48928.011, 48928.012), stdev = 0.001
[info]   CI (99.9%): [48928.008, 48928.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.231 ±(99.9%) 5.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.231, 3.406), stdev = 1.424
[info]   CI (99.9%): [≈ 0, 7.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1209.513 ±(99.9%) 1157.189 MB/sec [Average]
[info]   (min, avg, max) = (671.930, 1209.513, 1344.558), stdev = 300.518
[info]   CI (99.9%): [52.324, 2366.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   49914.217 ±(99.9%) 48430.674 B/op [Average]
[info]   (min, avg, max) = (27465.168, 49914.217, 56834.380), stdev = 12577.292
[info]   CI (99.9%): [1483.542, 98344.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.95% complete, ETA 01:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29825.700 ops/s
[info] # Warmup Iteration   2: 46131.298 ops/s
[info] # Warmup Iteration   3: 46360.969 ops/s
[info] # Warmup Iteration   4: 46744.043 ops/s
[info] # Warmup Iteration   5: 46725.652 ops/s
[info] Iteration   1: 46661.306 ops/s
[info]                  ·gc.alloc.rate:                   1237.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45586.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 46737.443 ops/s
[info]                  ·gc.alloc.rate:                   1239.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45537.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45236.808 ops/s
[info]                  ·gc.alloc.rate:                   1199.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47091.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46607.433 ops/s
[info]                  ·gc.alloc.rate:                   1236.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45748.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 46587.332 ops/s
[info]                  ·gc.alloc.rate:                   1235.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22906.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   46366.065 ±(99.9%) 2441.083 ops/s [Average]
[info]   (min, avg, max) = (45236.808, 46366.065, 46737.443), stdev = 633.942
[info]   CI (99.9%): [43924.982, 48807.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1229.673 ±(99.9%) 64.541 MB/sec [Average]
[info]   (min, avg, max) = (1199.812, 1229.673, 1239.421), stdev = 16.761
[info]   CI (99.9%): [1165.132, 1294.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.009), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.264 ±(99.9%) 5.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.264, 2.811), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.705 ±(99.9%) 1162.168 MB/sec [Average]
[info]   (min, avg, max) = (677.814, 1217.705, 1354.509), stdev = 301.811
[info]   CI (99.9%): [55.537, 2379.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41374.178 ±(99.9%) 39829.083 B/op [Average]
[info]   (min, avg, max) = (22906.660, 41374.178, 47091.598), stdev = 10343.486
[info]   CI (99.9%): [1545.094, 81203.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.15% complete, ETA 01:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1109557.256 ops/s
[info] # Warmup Iteration   2: 1199030.875 ops/s
[info] # Warmup Iteration   3: 1209942.179 ops/s
[info] # Warmup Iteration   4: 1214492.072 ops/s
[info] # Warmup Iteration   5: 1209259.062 ops/s
[info] Iteration   1: 1210884.760 ops/s
[info]                  ·gc.alloc.rate:                   1101.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1751.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1213808.570 ops/s
[info]                  ·gc.alloc.rate:                   1104.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1216306.724 ops/s
[info]                  ·gc.alloc.rate:                   1106.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1742.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1199777.515 ops/s
[info]                  ·gc.alloc.rate:                   1091.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1766.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1192938.658 ops/s
[info]                  ·gc.alloc.rate:                   1085.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 889.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1206743.246 ±(99.9%) 38391.669 ops/s [Average]
[info]   (min, avg, max) = (1192938.658, 1206743.246, 1216306.724), stdev = 9970.194
[info]   CI (99.9%): [1168351.577, 1245134.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1097.701 ±(99.9%) 35.098 MB/sec [Average]
[info]   (min, avg, max) = (1085.114, 1097.701, 1106.492), stdev = 9.115
[info]   CI (99.9%): [1062.602, 1132.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.054 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.135), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.495 ±(99.9%) 1419.729 MB/sec [Average]
[info]   (min, avg, max) = (673.335, 1077.495, 1347.158), stdev = 368.699
[info]   CI (99.9%): [≈ 0, 2497.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1404.737 ±(99.9%) 1840.514 B/op [Average]
[info]   (min, avg, max) = (873.223, 1404.737, 1766.770), stdev = 477.976
[info]   CI (99.9%): [≈ 0, 3245.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1356759.890 ops/s
[info] # Warmup Iteration   2: 1426448.460 ops/s
[info] # Warmup Iteration   3: 1423910.153 ops/s
[info] # Warmup Iteration   4: 1426732.294 ops/s
[info] # Warmup Iteration   5: 1425284.731 ops/s
[info] Iteration   1: 1425885.127 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1426533.545 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1427222.273 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1423696.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1422230.146 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1425113.611 ±(99.9%) 8026.345 ops/s [Average]
[info]   (min, avg, max) = (1422230.146, 1425113.611, 1427222.273), stdev = 2084.416
[info]   CI (99.9%): [1417087.266, 1433139.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.55% complete, ETA 01:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25412.272 ops/s
[info] # Warmup Iteration   2: 36502.578 ops/s
[info] # Warmup Iteration   3: 35771.951 ops/s
[info] # Warmup Iteration   4: 36547.694 ops/s
[info] # Warmup Iteration   5: 36963.014 ops/s
[info] Iteration   1: 37015.148 ops/s
[info]                  ·gc.alloc.rate:                   1120.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28492.989 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 37021.600 ops/s
[info]                  ·gc.alloc.rate:                   1120.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56920.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 36759.420 ops/s
[info]                  ·gc.alloc.rate:                   1112.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57321.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 36577.960 ops/s
[info]                  ·gc.alloc.rate:                   1106.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28802.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 36686.972 ops/s
[info]                  ·gc.alloc.rate:                   1110.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57463.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   36812.220 ±(99.9%) 766.202 ops/s [Average]
[info]   (min, avg, max) = (36577.960, 36812.220, 37021.600), stdev = 198.980
[info]   CI (99.9%): [36046.018, 37578.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1113.955 ±(99.9%) 23.370 MB/sec [Average]
[info]   (min, avg, max) = (1106.780, 1113.955, 1120.228), stdev = 6.069
[info]   CI (99.9%): [1090.585, 1137.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47632.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (47632.011, 47632.011, 47632.012), stdev = 0.001
[info]   CI (99.9%): [47632.010, 47632.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.780 ±(99.9%) 6.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.780, 3.565), stdev = 1.665
[info]   CI (99.9%): [≈ 0, 8.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.197 ±(99.9%) 1411.389 MB/sec [Average]
[info]   (min, avg, max) = (669.252, 1071.197, 1339.163), stdev = 366.533
[info]   CI (99.9%): [≈ 0, 2482.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   45800.023 ±(99.9%) 60299.364 B/op [Average]
[info]   (min, avg, max) = (28492.989, 45800.023, 57463.656), stdev = 15659.553
[info]   CI (99.9%): [≈ 0, 106099.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38.76% complete, ETA 01:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16616.512 ops/s
[info] # Warmup Iteration   2: 19187.425 ops/s
[info] # Warmup Iteration   3: 18716.326 ops/s
[info] # Warmup Iteration   4: 19407.199 ops/s
[info] # Warmup Iteration   5: 19582.496 ops/s
[info] Iteration   1: 19378.853 ops/s
[info]                  ·gc.alloc.rate:                   1566.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              127251.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164078.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19652.219 ops/s
[info]                  ·gc.alloc.rate:                   1588.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              127232.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107898.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19654.601 ops/s
[info]                  ·gc.alloc.rate:                   1588.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              127232.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107951.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19546.155 ops/s
[info]                  ·gc.alloc.rate:                   1579.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              127232.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163008.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19544.060 ops/s
[info]                  ·gc.alloc.rate:                   1579.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              127232.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108826.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   19555.178 ±(99.9%) 433.079 ops/s [Average]
[info]   (min, avg, max) = (19378.853, 19555.178, 19654.601), stdev = 112.469
[info]   CI (99.9%): [19122.099, 19988.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1580.539 ±(99.9%) 35.581 MB/sec [Average]
[info]   (min, avg, max) = (1566.157, 1580.539, 1588.767), stdev = 9.240
[info]   CI (99.9%): [1544.958, 1616.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   127235.994 ±(99.9%) 34.211 B/op [Average]
[info]   (min, avg, max) = (127232.021, 127235.994, 127251.888), stdev = 8.884
[info]   CI (99.9%): [127201.784, 127270.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1.675 ±(99.9%) 6.436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.675, 3.352), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 8.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1617.891 ±(99.9%) 1419.103 MB/sec [Average]
[info]   (min, avg, max) = (1347.213, 1617.891, 2023.793), stdev = 368.537
[info]   CI (99.9%): [198.788, 3036.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   130352.658 ±(99.9%) 116688.385 B/op [Average]
[info]   (min, avg, max) = (107898.497, 130352.658, 164078.368), stdev = 30303.603
[info]   CI (99.9%): [13664.273, 247041.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.96% complete, ETA 01:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60707.528 ops/s
[info] # Warmup Iteration   2: 77023.508 ops/s
[info] # Warmup Iteration   3: 77493.085 ops/s
[info] # Warmup Iteration   4: 75725.641 ops/s
[info] # Warmup Iteration   5: 76225.554 ops/s
[info] Iteration   1: 77999.436 ops/s
[info]                  ·gc.alloc.rate:                   1337.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27095.751 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 78029.386 ops/s
[info]                  ·gc.alloc.rate:                   1338.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27087.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 77708.332 ops/s
[info]                  ·gc.alloc.rate:                   1332.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27196.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 77167.102 ops/s
[info]                  ·gc.alloc.rate:                   1323.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27416.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 77827.819 ops/s
[info]                  ·gc.alloc.rate:                   1334.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27207.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   77746.415 ±(99.9%) 1344.658 ops/s [Average]
[info]   (min, avg, max) = (77167.102, 77746.415, 78029.386), stdev = 349.203
[info]   CI (99.9%): [76401.757, 79091.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1333.408 ±(99.9%) 23.043 MB/sec [Average]
[info]   (min, avg, max) = (1323.499, 1333.408, 1338.334), stdev = 5.984
[info]   CI (99.9%): [1310.365, 1356.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.005, 27000.005, 27000.005), stdev = 0.001
[info]   CI (99.9%): [27000.005, 27000.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.756 ±(99.9%) 2.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 1.680), stdev = 0.690
[info]   CI (99.9%): [≈ 0, 3.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.293 ±(99.9%) 4.631 MB/sec [Average]
[info]   (min, avg, max) = (1342.378, 1343.293, 1345.135), stdev = 1.203
[info]   CI (99.9%): [1338.662, 1347.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27200.626 ±(99.9%) 510.748 B/op [Average]
[info]   (min, avg, max) = (27087.071, 27200.626, 27416.060), stdev = 132.640
[info]   CI (99.9%): [26689.878, 27711.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.16% complete, ETA 01:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27522.079 ops/s
[info] # Warmup Iteration   2: 325819.508 ops/s
[info] # Warmup Iteration   3: 329730.008 ops/s
[info] # Warmup Iteration   4: 328094.942 ops/s
[info] # Warmup Iteration   5: 323603.544 ops/s
[info] Iteration   1: 330862.249 ops/s
[info]                  ·gc.alloc.rate:                   662.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3203.505 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 331705.654 ops/s
[info]                  ·gc.alloc.rate:                   664.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3195.384 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 330116.739 ops/s
[info]                  ·gc.alloc.rate:                   660.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3204.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 331070.290 ops/s
[info]                  ·gc.alloc.rate:                   662.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3195.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 330666.363 ops/s
[info]                  ·gc.alloc.rate:                   662.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3198.792 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   330884.259 ±(99.9%) 2233.994 ops/s [Average]
[info]   (min, avg, max) = (330116.739, 330884.259, 331705.654), stdev = 580.161
[info]   CI (99.9%): [328650.265, 333118.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   662.537 ±(99.9%) 4.802 MB/sec [Average]
[info]   (min, avg, max) = (660.952, 662.537, 664.362), stdev = 1.247
[info]   CI (99.9%): [657.735, 667.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.514 ±(99.9%) 4.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.509), stdev = 1.115
[info]   CI (99.9%): [≈ 0, 4.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2.447 ±(99.9%) 20.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.447, 11.939), stdev = 5.307
[info]   CI (99.9%): [≈ 0, 22.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.499 ±(99.9%) 3.164 MB/sec [Average]
[info]   (min, avg, max) = (671.861, 672.499, 673.506), stdev = 0.822
[info]   CI (99.9%): [669.336, 675.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   3199.402 ±(99.9%) 16.707 B/op [Average]
[info]   (min, avg, max) = (3195.092, 3199.402, 3204.236), stdev = 4.339
[info]   CI (99.9%): [3182.695, 3216.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.36% complete, ETA 01:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165035.899 ops/s
[info] # Warmup Iteration   2: 258932.473 ops/s
[info] # Warmup Iteration   3: 248535.755 ops/s
[info] # Warmup Iteration   4: 252852.151 ops/s
[info] # Warmup Iteration   5: 261142.325 ops/s
[info] Iteration   1: 261431.373 ops/s
[info]                  ·gc.alloc.rate:                   573.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4056.088 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 262405.480 ops/s
[info]                  ·gc.alloc.rate:      576.097 MB/sec
[info]                  ·gc.alloc.rate.norm: 3456.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 260175.129 ops/s
[info]                  ·gc.alloc.rate:                   571.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4075.602 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 261975.977 ops/s
[info]                  ·gc.alloc.rate:                   575.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4053.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 261112.605 ops/s
[info]                  ·gc.alloc.rate:                   573.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4067.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   261420.113 ±(99.9%) 3292.586 ops/s [Average]
[info]   (min, avg, max) = (260175.129, 261420.113, 262405.480), stdev = 855.074
[info]   CI (99.9%): [258127.527, 264712.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   573.916 ±(99.9%) 7.407 MB/sec [Average]
[info]   (min, avg, max) = (571.087, 573.916, 576.097), stdev = 1.924
[info]   CI (99.9%): [566.509, 581.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.175 ±(99.9%) 1.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.752), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.271 ±(99.9%) 1160.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.271, 674.680), stdev = 301.462
[info]   CI (99.9%): [≈ 0, 1700.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3250.482 ±(99.9%) 6996.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3250.482, 4075.602), stdev = 1817.096
[info]   CI (99.9%): [≈ 0, 10247.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.56% complete, ETA 01:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 395142.497 ops/s
[info] # Warmup Iteration   2: 455819.983 ops/s
[info] # Warmup Iteration   3: 459269.985 ops/s
[info] # Warmup Iteration   4: 467996.796 ops/s
[info] # Warmup Iteration   5: 468675.355 ops/s
[info] Iteration   1: 468660.554 ops/s
[info]                  ·gc.alloc.rate:                   590.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1717.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 470161.827 ops/s
[info]                  ·gc.alloc.rate:                   592.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2258.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 468077.423 ops/s
[info]                  ·gc.alloc.rate:                   589.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2268.661 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 469425.027 ops/s
[info]                  ·gc.alloc.rate:                   591.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2253.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 470386.383 ops/s
[info]                  ·gc.alloc.rate:                   592.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2248.728 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   469342.243 ±(99.9%) 3769.537 ops/s [Average]
[info]   (min, avg, max) = (468077.423, 469342.243, 470386.383), stdev = 978.937
[info]   CI (99.9%): [465572.706, 473111.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   591.485 ±(99.9%) 4.814 MB/sec [Average]
[info]   (min, avg, max) = (589.908, 591.485, 592.812), stdev = 1.250
[info]   CI (99.9%): [586.671, 596.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.673 ±(99.9%) 5.662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.673, 3.304), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.255 ±(99.9%) 18.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.255, 11.061), stdev = 4.923
[info]   CI (99.9%): [≈ 0, 21.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   640.873 ±(99.9%) 278.808 MB/sec [Average]
[info]   (min, avg, max) = (511.373, 640.873, 674.628), stdev = 72.406
[info]   CI (99.9%): [362.065, 919.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2149.503 ±(99.9%) 929.327 B/op [Average]
[info]   (min, avg, max) = (1717.980, 2149.503, 2268.661), stdev = 241.343
[info]   CI (99.9%): [1220.176, 3078.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44312.887 ops/s
[info] # Warmup Iteration   2: 71932.586 ops/s
[info] # Warmup Iteration   3: 70820.777 ops/s
[info] # Warmup Iteration   4: 71345.232 ops/s
[info] # Warmup Iteration   5: 72549.395 ops/s
[info] Iteration   1: 72483.540 ops/s
[info]                  ·gc.alloc.rate:                   3233.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59012.774 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 72366.662 ops/s
[info]                  ·gc.alloc.rate:                   3228.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73959.690 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 70799.156 ops/s
[info]                  ·gc.alloc.rate:                   3158.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75648.146 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72069.508 ops/s
[info]                  ·gc.alloc.rate:                   3215.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74329.954 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 72056.699 ops/s
[info]                  ·gc.alloc.rate:                   3214.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59492.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   71955.113 ±(99.9%) 2589.003 ops/s [Average]
[info]   (min, avg, max) = (70799.156, 71955.113, 72483.540), stdev = 672.356
[info]   CI (99.9%): [69366.110, 74544.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3210.156 ±(99.9%) 115.393 MB/sec [Average]
[info]   (min, avg, max) = (3158.661, 3210.156, 3233.699), stdev = 29.967
[info]   CI (99.9%): [3094.763, 3325.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.006), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.640 ±(99.9%) 0.987 B/op [Average]
[info]   (min, avg, max) = (1.356, 1.640, 1.851), stdev = 0.256
[info]   CI (99.9%): [0.653, 2.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3129.050 ±(99.9%) 1437.876 MB/sec [Average]
[info]   (min, avg, max) = (2717.131, 3129.050, 3403.016), stdev = 373.412
[info]   CI (99.9%): [1691.175, 4566.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68488.621 ±(99.9%) 32562.069 B/op [Average]
[info]   (min, avg, max) = (59012.774, 68488.621, 75648.146), stdev = 8456.266
[info]   CI (99.9%): [35926.551, 101050.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.96% complete, ETA 01:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146635.834 ops/s
[info] # Warmup Iteration   2: 189089.748 ops/s
[info] # Warmup Iteration   3: 188925.302 ops/s
[info] # Warmup Iteration   4: 191931.254 ops/s
[info] # Warmup Iteration   5: 190900.584 ops/s
[info] Iteration   1: 191068.746 ops/s
[info]                  ·gc.alloc.rate:                   1347.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11050.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 195251.768 ops/s
[info]                  ·gc.alloc.rate:                   1377.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10817.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 194712.124 ops/s
[info]                  ·gc.alloc.rate:                   1373.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10851.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 194620.080 ops/s
[info]                  ·gc.alloc.rate:                   1372.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10867.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 194621.333 ops/s
[info]                  ·gc.alloc.rate:                   1372.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10880.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   194054.810 ±(99.9%) 6506.855 ops/s [Average]
[info]   (min, avg, max) = (191068.746, 194054.810, 195251.768), stdev = 1689.810
[info]   CI (99.9%): [187547.955, 200561.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1368.850 ±(99.9%) 45.453 MB/sec [Average]
[info]   (min, avg, max) = (1347.992, 1368.850, 1377.186), stdev = 11.804
[info]   CI (99.9%): [1323.397, 1414.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.002, 11104.002, 11104.002), stdev = 0.001
[info]   CI (99.9%): [11104.002, 11104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.271 ±(99.9%) 0.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 0.514), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1342.803 ±(99.9%) 5.939 MB/sec [Average]
[info]   (min, avg, max) = (1341.443, 1342.803, 1345.171), stdev = 1.542
[info]   CI (99.9%): [1336.863, 1348.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10893.332 ±(99.9%) 349.589 B/op [Average]
[info]   (min, avg, max) = (10817.175, 10893.332, 11050.059), stdev = 90.787
[info]   CI (99.9%): [10543.743, 11242.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.16% complete, ETA 01:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58967.295 ops/s
[info] # Warmup Iteration   2: 716249.840 ops/s
[info] # Warmup Iteration   3: 712752.683 ops/s
[info] # Warmup Iteration   4: 668596.146 ops/s
[info] # Warmup Iteration   5: 684270.556 ops/s
[info] Iteration   1: 662612.078 ops/s
[info]                  ·gc.alloc.rate:                   518.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1215.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 682400.156 ops/s
[info]                  ·gc.alloc.rate:                   534.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1553.143 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 687246.861 ops/s
[info]                  ·gc.alloc.rate:                   537.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1542.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 686063.521 ops/s
[info]                  ·gc.alloc.rate:      536.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 685688.353 ops/s
[info]                  ·gc.alloc.rate:                   536.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1542.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   680802.194 ±(99.9%) 39762.613 ops/s [Average]
[info]   (min, avg, max) = (662612.078, 680802.194, 687246.861), stdev = 10326.224
[info]   CI (99.9%): [641039.580, 720564.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   532.840 ±(99.9%) 30.883 MB/sec [Average]
[info]   (min, avg, max) = (518.705, 532.840, 537.847), stdev = 8.020
[info]   CI (99.9%): [501.957, 563.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.509 ±(99.9%) 4.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.509, 2.525), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 4.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.174 ±(99.9%) 10.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.174, 5.825), stdev = 2.600
[info]   CI (99.9%): [≈ 0, 11.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.025 ±(99.9%) 1121.954 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.025, 673.359), stdev = 291.368
[info]   CI (99.9%): [≈ 0, 1627.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1170.608 ±(99.9%) 2579.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1170.608, 1553.143), stdev = 669.906
[info]   CI (99.9%): [≈ 0, 3750.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.36% complete, ETA 01:19:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315242.423 ops/s
[info] # Warmup Iteration   2: 463070.300 ops/s
[info] # Warmup Iteration   3: 467517.797 ops/s
[info] # Warmup Iteration   4: 468720.302 ops/s
[info] # Warmup Iteration   5: 467775.005 ops/s
[info] Iteration   1: 468200.482 ops/s
[info]                  ·gc.alloc.rate:                   480.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1719.594 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 470002.188 ops/s
[info]                  ·gc.alloc.rate:                   482.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2256.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 469128.962 ops/s
[info]                  ·gc.alloc.rate:      481.558 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 467569.932 ops/s
[info]                  ·gc.alloc.rate:                   479.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2267.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 468444.428 ops/s
[info]                  ·gc.alloc.rate:                   480.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2266.981 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   468669.198 ±(99.9%) 3584.848 ops/s [Average]
[info]   (min, avg, max) = (467569.932, 468669.198, 470002.188), stdev = 930.974
[info]   CI (99.9%): [465084.350, 472254.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   481.106 ±(99.9%) 3.941 MB/sec [Average]
[info]   (min, avg, max) = (479.969, 481.106, 482.621), stdev = 1.024
[info]   CI (99.9%): [477.165, 485.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.209), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.658 ±(99.9%) 1123.837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.658, 674.561), stdev = 291.857
[info]   CI (99.9%): [≈ 0, 1630.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1702.130 ±(99.9%) 3774.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1702.130, 2267.786), stdev = 980.264
[info]   CI (99.9%): [≈ 0, 5476.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.56% complete, ETA 01:19:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 592961.115 ops/s
[info] # Warmup Iteration   2: 601997.048 ops/s
[info] # Warmup Iteration   3: 562598.940 ops/s
[info] # Warmup Iteration   4: 573800.376 ops/s
[info] # Warmup Iteration   5: 566135.336 ops/s
[info] Iteration   1: 574397.875 ops/s
[info]                  ·gc.alloc.rate:                   449.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1401.659 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 575204.928 ops/s
[info]                  ·gc.alloc.rate:                   450.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1399.805 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 578674.228 ops/s
[info]                  ·gc.alloc.rate:      452.935 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 576360.814 ops/s
[info]                  ·gc.alloc.rate:                   451.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1842.562 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 576801.078 ops/s
[info]                  ·gc.alloc.rate:                   451.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1841.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   576287.785 ±(99.9%) 6300.321 ops/s [Average]
[info]   (min, avg, max) = (574397.875, 576287.785, 578674.228), stdev = 1636.173
[info]   CI (99.9%): [569987.464, 582588.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   451.030 ±(99.9%) 5.123 MB/sec [Average]
[info]   (min, avg, max) = (449.482, 451.030, 452.935), stdev = 1.330
[info]   CI (99.9%): [445.907, 456.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.664 ±(99.9%) 5.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.288), stdev = 1.467
[info]   CI (99.9%): [≈ 0, 6.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.813 ±(99.9%) 15.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.813, 8.981), stdev = 4.007
[info]   CI (99.9%): [≈ 0, 17.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.440 ±(99.9%) 1068.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.440, 674.706), stdev = 277.503
[info]   CI (99.9%): [≈ 0, 1543.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1297.023 ±(99.9%) 2918.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1297.023, 1842.562), stdev = 757.859
[info]   CI (99.9%): [≈ 0, 4215.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.76% complete, ETA 01:19:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 651932.442 ops/s
[info] # Warmup Iteration   2: 688060.695 ops/s
[info] # Warmup Iteration   3: 711494.143 ops/s
[info] # Warmup Iteration   4: 711917.616 ops/s
[info] # Warmup Iteration   5: 712878.209 ops/s
[info] Iteration   1: 712853.613 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 711509.496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 713291.999 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 711586.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 695687.352 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   708985.869 ±(99.9%) 28782.547 ops/s [Average]
[info]   (min, avg, max) = (695687.352, 708985.869, 713291.999), stdev = 7474.736
[info]   CI (99.9%): [680203.322, 737768.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.96% complete, ETA 01:19:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19536.804 ops/s
[info] # Warmup Iteration   2: 27701.607 ops/s
[info] # Warmup Iteration   3: 27450.746 ops/s
[info] # Warmup Iteration   4: 27424.812 ops/s
[info] # Warmup Iteration   5: 27814.351 ops/s
[info] Iteration   1: 27705.462 ops/s
[info]                  ·gc.alloc.rate:                   1673.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76071.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 27663.643 ops/s
[info]                  ·gc.alloc.rate:                   1670.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114350.491 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27870.997 ops/s
[info]                  ·gc.alloc.rate:                   1683.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75790.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27865.723 ops/s
[info]                  ·gc.alloc.rate:                   1683.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113875.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27866.613 ops/s
[info]                  ·gc.alloc.rate:                   1683.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76048.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27794.487 ±(99.9%) 390.685 ops/s [Average]
[info]   (min, avg, max) = (27663.643, 27794.487, 27870.997), stdev = 101.460
[info]   CI (99.9%): [27403.803, 28185.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1678.780 ±(99.9%) 23.775 MB/sec [Average]
[info]   (min, avg, max) = (1670.774, 1678.780, 1683.424), stdev = 6.174
[info]   CI (99.9%): [1655.005, 1702.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   95088.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (95088.015, 95088.015, 95088.016), stdev = 0.001
[info]   CI (99.9%): [95088.013, 95088.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.887 ±(99.9%) 7.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.887, 4.702), stdev = 1.969
[info]   CI (99.9%): [≈ 0, 9.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1610.317 ±(99.9%) 1413.714 MB/sec [Average]
[info]   (min, avg, max) = (1338.749, 1610.317, 2015.724), stdev = 367.137
[info]   CI (99.9%): [196.603, 3024.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   91227.082 ±(99.9%) 80450.163 B/op [Average]
[info]   (min, avg, max) = (75790.252, 91227.082, 114350.491), stdev = 20892.652
[info]   CI (99.9%): [10776.920, 171677.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.16% complete, ETA 01:18:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4911.402 ops/s
[info] # Warmup Iteration   2: 7777.492 ops/s
[info] # Warmup Iteration   3: 7739.233 ops/s
[info] # Warmup Iteration   4: 7946.976 ops/s
[info] # Warmup Iteration   5: 8022.296 ops/s
[info] Iteration   1: 7787.927 ops/s
[info]                  ·gc.alloc.rate:                   1198.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271733.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7699.047 ops/s
[info]                  ·gc.alloc.rate:                   1184.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274772.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7989.929 ops/s
[info]                  ·gc.alloc.rate:                   1229.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264734.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7912.465 ops/s
[info]                  ·gc.alloc.rate:                   1217.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267476.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8025.212 ops/s
[info]                  ·gc.alloc.rate:                   1235.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131920.997 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7882.916 ±(99.9%) 528.689 ops/s [Average]
[info]   (min, avg, max) = (7699.047, 7882.916, 8025.212), stdev = 137.299
[info]   CI (99.9%): [7354.228, 8411.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1213.199 ±(99.9%) 81.747 MB/sec [Average]
[info]   (min, avg, max) = (1184.708, 1213.199, 1235.200), stdev = 21.230
[info]   CI (99.9%): [1131.451, 1294.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.053 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (242296.051, 242296.053, 242296.057), stdev = 0.003
[info]   CI (99.9%): [242296.042, 242296.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.373 ±(99.9%) 21.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.373, 12.765), stdev = 5.542
[info]   CI (99.9%): [≈ 0, 24.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1209.634 ±(99.9%) 1156.180 MB/sec [Average]
[info]   (min, avg, max) = (672.520, 1209.634, 1344.313), stdev = 300.256
[info]   CI (99.9%): [53.454, 2365.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   242127.715 ±(99.9%) 237692.404 B/op [Average]
[info]   (min, avg, max) = (131920.997, 242127.715, 274772.934), stdev = 61727.963
[info]   CI (99.9%): [4435.311, 479820.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.37% complete, ETA 01:18:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3862.321 ops/s
[info] # Warmup Iteration   2: 8139.325 ops/s
[info] # Warmup Iteration   3: 8324.955 ops/s
[info] # Warmup Iteration   4: 8330.353 ops/s
[info] # Warmup Iteration   5: 8333.456 ops/s
[info] Iteration   1: 8314.266 ops/s
[info]                  ·gc.alloc.rate:                   1198.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255682.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8348.245 ops/s
[info]                  ·gc.alloc.rate:                   1203.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127461.634 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8071.385 ops/s
[info]                  ·gc.alloc.rate:                   1163.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263767.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8082.719 ops/s
[info]                  ·gc.alloc.rate:                   1164.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263635.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8098.691 ops/s
[info]                  ·gc.alloc.rate:                   1167.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131622.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8183.061 ±(99.9%) 524.306 ops/s [Average]
[info]   (min, avg, max) = (8071.385, 8183.061, 8348.245), stdev = 136.161
[info]   CI (99.9%): [7658.755, 8707.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1179.329 ±(99.9%) 75.839 MB/sec [Average]
[info]   (min, avg, max) = (1163.159, 1179.329, 1203.188), stdev = 19.695
[info]   CI (99.9%): [1103.491, 1255.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.051 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (226864.049, 226864.051, 226864.054), stdev = 0.002
[info]   CI (99.9%): [226864.043, 226864.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.838 ±(99.9%) 20.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.838, 12.133), stdev = 5.282
[info]   CI (99.9%): [≈ 0, 25.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.950 ±(99.9%) 1425.037 MB/sec [Average]
[info]   (min, avg, max) = (676.001, 1081.950, 1353.702), stdev = 370.078
[info]   CI (99.9%): [≈ 0, 2506.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   208433.790 ±(99.9%) 277660.512 B/op [Average]
[info]   (min, avg, max) = (127461.634, 208433.790, 263767.384), stdev = 72107.553
[info]   CI (99.9%): [≈ 0, 486094.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.57% complete, ETA 01:18:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145266.975 ops/s
[info] # Warmup Iteration   2: 153525.206 ops/s
[info] # Warmup Iteration   3: 156343.220 ops/s
[info] # Warmup Iteration   4: 157715.227 ops/s
[info] # Warmup Iteration   5: 157301.060 ops/s
[info] Iteration   1: 157176.448 ops/s
[info]                  ·gc.alloc.rate:                   1522.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13486.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 157193.178 ops/s
[info]                  ·gc.alloc.rate:                   1522.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20235.595 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 157358.644 ops/s
[info]                  ·gc.alloc.rate:                   1524.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13487.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 156802.785 ops/s
[info]                  ·gc.alloc.rate:                   1519.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13545.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 153517.948 ops/s
[info]                  ·gc.alloc.rate:                   1486.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13847.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   156409.801 ±(99.9%) 6274.004 ops/s [Average]
[info]   (min, avg, max) = (153517.948, 156409.801, 157358.644), stdev = 1629.339
[info]   CI (99.9%): [150135.796, 162683.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1515.149 ±(99.9%) 61.240 MB/sec [Average]
[info]   (min, avg, max) = (1486.911, 1515.149, 1524.504), stdev = 15.904
[info]   CI (99.9%): [1453.909, 1576.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.003, 15248.003, 15248.003), stdev = 0.001
[info]   CI (99.9%): [15248.002, 15248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.210 ±(99.9%) 0.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.210, 0.625), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1483.144 ±(99.9%) 1157.722 MB/sec [Average]
[info]   (min, avg, max) = (1346.413, 1483.144, 2020.969), stdev = 300.657
[info]   CI (99.9%): [325.421, 2640.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14920.364 ±(99.9%) 11455.968 B/op [Average]
[info]   (min, avg, max) = (13486.036, 14920.364, 20235.595), stdev = 2975.078
[info]   CI (99.9%): [3464.396, 26376.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.77% complete, ETA 01:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3644.980 ops/s
[info] # Warmup Iteration   2: 7564.993 ops/s
[info] # Warmup Iteration   3: 7801.123 ops/s
[info] # Warmup Iteration   4: 7827.577 ops/s
[info] # Warmup Iteration   5: 7828.333 ops/s
[info] Iteration   1: 7543.494 ops/s
[info]                  ·gc.alloc.rate:                   1371.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              286296.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 282084.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7627.245 ops/s
[info]                  ·gc.alloc.rate:                   1386.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              286296.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279221.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7743.827 ops/s
[info]                  ·gc.alloc.rate:                   1408.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              286296.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 275242.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7771.930 ops/s
[info]                  ·gc.alloc.rate:                   1413.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              286296.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274485.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7599.138 ops/s
[info]                  ·gc.alloc.rate:                   1382.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              286296.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280903.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7657.127 ±(99.9%) 374.646 ops/s [Average]
[info]   (min, avg, max) = (7543.494, 7657.127, 7771.930), stdev = 97.294
[info]   CI (99.9%): [7282.481, 8031.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1392.573 ±(99.9%) 68.262 MB/sec [Average]
[info]   (min, avg, max) = (1371.945, 1392.573, 1413.519), stdev = 17.728
[info]   CI (99.9%): [1324.310, 1460.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286296.078 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (286296.053, 286296.078, 286296.174), stdev = 0.054
[info]   CI (99.9%): [286295.870, 286296.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.116 ±(99.9%) 21.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.116, 12.645), stdev = 5.516
[info]   CI (99.9%): [≈ 0, 26.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353.938 ±(99.9%) 6.710 MB/sec [Average]
[info]   (min, avg, max) = (1351.763, 1353.938, 1356.001), stdev = 1.743
[info]   CI (99.9%): [1347.228, 1360.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   278387.532 ±(99.9%) 13030.399 B/op [Average]
[info]   (min, avg, max) = (274485.742, 278387.532, 282084.453), stdev = 3383.953
[info]   CI (99.9%): [265357.133, 291417.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41.97% complete, ETA 01:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5799.628 ops/s
[info] # Warmup Iteration   2: 8148.771 ops/s
[info] # Warmup Iteration   3: 8233.234 ops/s
[info] # Warmup Iteration   4: 8460.704 ops/s
[info] # Warmup Iteration   5: 8466.001 ops/s
[info] Iteration   1: 8499.924 ops/s
[info]                  ·gc.alloc.rate:                   1177.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              218072.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249473.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8382.229 ops/s
[info]                  ·gc.alloc.rate:                   1161.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              218072.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252858.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8408.599 ops/s
[info]                  ·gc.alloc.rate:                   1165.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              218080.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126038.561 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8484.158 ops/s
[info]                  ·gc.alloc.rate:                   1175.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              218096.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249819.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8487.697 ops/s
[info]                  ·gc.alloc.rate:                   1176.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              218096.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249825.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   8452.521 ±(99.9%) 205.166 ops/s [Average]
[info]   (min, avg, max) = (8382.229, 8452.521, 8499.924), stdev = 53.281
[info]   CI (99.9%): [8247.355, 8657.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1171.158 ±(99.9%) 28.333 MB/sec [Average]
[info]   (min, avg, max) = (1161.365, 1171.158, 1177.536), stdev = 7.358
[info]   CI (99.9%): [1142.825, 1199.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   218083.347 ±(99.9%) 46.602 B/op [Average]
[info]   (min, avg, max) = (218072.048, 218083.347, 218096.052), stdev = 12.102
[info]   CI (99.9%): [218036.745, 218129.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4.637 ±(99.9%) 19.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.637, 11.583), stdev = 5.031
[info]   CI (99.9%): [≈ 0, 24.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1212.189 ±(99.9%) 1159.766 MB/sec [Average]
[info]   (min, avg, max) = (673.409, 1212.189, 1347.102), stdev = 301.188
[info]   CI (99.9%): [52.423, 2371.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   225603.154 ±(99.9%) 214385.451 B/op [Average]
[info]   (min, avg, max) = (126038.561, 225603.154, 252858.756), stdev = 55675.221
[info]   CI (99.9%): [11217.702, 439988.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.17% complete, ETA 01:17:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12108.219 ops/s
[info] # Warmup Iteration   2: 18371.238 ops/s
[info] # Warmup Iteration   3: 18182.177 ops/s
[info] # Warmup Iteration   4: 18275.346 ops/s
[info] # Warmup Iteration   5: 18155.399 ops/s
[info] Iteration   1: 18141.803 ops/s
[info]                  ·gc.alloc.rate:                   823.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              71432.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58536.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 18244.701 ops/s
[info]                  ·gc.alloc.rate:                   827.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              71414.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58037.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 18253.814 ops/s
[info]                  ·gc.alloc.rate:                   828.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115889.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18284.749 ops/s
[info]                  ·gc.alloc.rate:                   829.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57789.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 18092.198 ops/s
[info]                  ·gc.alloc.rate:                   821.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58405.515 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18203.453 ±(99.9%) 316.509 ops/s [Average]
[info]   (min, avg, max) = (18092.198, 18203.453, 18284.749), stdev = 82.196
[info]   CI (99.9%): [17886.944, 18519.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   825.849 ±(99.9%) 13.855 MB/sec [Average]
[info]   (min, avg, max) = (821.037, 825.849, 829.457), stdev = 3.598
[info]   CI (99.9%): [811.995, 839.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71414.037 ±(99.9%) 40.027 B/op [Average]
[info]   (min, avg, max) = (71408.023, 71414.037, 71432.030), stdev = 10.395
[info]   CI (99.9%): [71374.010, 71454.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.439 ±(99.9%) 5.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.439, 3.589), stdev = 1.503
[info]   CI (99.9%): [≈ 0, 7.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   806.745 ±(99.9%) 1156.092 MB/sec [Average]
[info]   (min, avg, max) = (671.264, 806.745, 1343.814), stdev = 300.233
[info]   CI (99.9%): [≈ 0, 1962.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69731.619 ±(99.9%) 99364.859 B/op [Average]
[info]   (min, avg, max) = (57789.208, 69731.619, 115889.499), stdev = 25804.738
[info]   CI (99.9%): [≈ 0, 169096.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.37% complete, ETA 01:17:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12085.197 ops/s
[info] # Warmup Iteration   2: 20659.712 ops/s
[info] # Warmup Iteration   3: 20634.728 ops/s
[info] # Warmup Iteration   4: 20730.949 ops/s
[info] # Warmup Iteration   5: 20671.482 ops/s
[info] Iteration   1: 20168.620 ops/s
[info]                  ·gc.alloc.rate:                   854.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52654.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20261.181 ops/s
[info]                  ·gc.alloc.rate:                   858.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52415.864 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20252.185 ops/s
[info]                  ·gc.alloc.rate:                   858.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104971.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20258.780 ops/s
[info]                  ·gc.alloc.rate:                   858.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52524.534 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20571.269 ops/s
[info]                  ·gc.alloc.rate:                   871.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51725.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20302.407 ±(99.9%) 597.505 ops/s [Average]
[info]   (min, avg, max) = (20168.620, 20302.407, 20571.269), stdev = 155.170
[info]   CI (99.9%): [19704.902, 20899.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   860.167 ±(99.9%) 25.233 MB/sec [Average]
[info]   (min, avg, max) = (854.465, 860.167, 871.506), stdev = 6.553
[info]   CI (99.9%): [834.934, 885.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.021, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.012, 66696.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.268 ±(99.9%) 8.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.268, 4.873), stdev = 2.176
[info]   CI (99.9%): [≈ 0, 10.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.314 ±(99.9%) 1162.741 MB/sec [Average]
[info]   (min, avg, max) = (674.580, 810.314, 1350.475), stdev = 301.960
[info]   CI (99.9%): [≈ 0, 1973.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   62858.464 ±(99.9%) 90661.983 B/op [Average]
[info]   (min, avg, max) = (51725.537, 62858.464, 104971.474), stdev = 23544.629
[info]   CI (99.9%): [≈ 0, 153520.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.57% complete, ETA 01:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 421602.474 ops/s
[info] # Warmup Iteration   2: 456444.108 ops/s
[info] # Warmup Iteration   3: 450472.781 ops/s
[info] # Warmup Iteration   4: 459277.952 ops/s
[info] # Warmup Iteration   5: 452784.176 ops/s
[info] Iteration   1: 459351.240 ops/s
[info]                  ·gc.alloc.rate:                   1040.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2309.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 458939.658 ops/s
[info]                  ·gc.alloc.rate:                   1040.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4618.734 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 458000.161 ops/s
[info]                  ·gc.alloc.rate:                   1038.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2313.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 458653.768 ops/s
[info]                  ·gc.alloc.rate:                   1039.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4621.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 457884.616 ops/s
[info]                  ·gc.alloc.rate:                   1037.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2314.672 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   458565.888 ±(99.9%) 2395.756 ops/s [Average]
[info]   (min, avg, max) = (457884.616, 458565.888, 459351.240), stdev = 622.170
[info]   CI (99.9%): [456170.133, 460961.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1039.302 ±(99.9%) 5.274 MB/sec [Average]
[info]   (min, avg, max) = (1037.788, 1039.302, 1040.933), stdev = 1.370
[info]   CI (99.9%): [1034.028, 1044.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.114 ±(99.9%) 0.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.286), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   942.658 ±(99.9%) 1419.710 MB/sec [Average]
[info]   (min, avg, max) = (673.165, 942.658, 1346.570), stdev = 368.694
[info]   CI (99.9%): [≈ 0, 2362.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3235.694 ±(99.9%) 4866.613 B/op [Average]
[info]   (min, avg, max) = (2309.563, 3235.694, 4621.593), stdev = 1263.844
[info]   CI (99.9%): [≈ 0, 8102.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42.77% complete, ETA 01:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459719.644 ops/s
[info] # Warmup Iteration   2: 485535.655 ops/s
[info] # Warmup Iteration   3: 486999.263 ops/s
[info] # Warmup Iteration   4: 482970.339 ops/s
[info] # Warmup Iteration   5: 481845.485 ops/s
[info] Iteration   1: 484200.227 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 483893.149 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 484016.794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 483544.537 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 483500.090 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   483830.959 ±(99.9%) 1165.214 ops/s [Average]
[info]   (min, avg, max) = (483500.090, 483830.959, 484200.227), stdev = 302.602
[info]   CI (99.9%): [482665.746, 484996.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.97% complete, ETA 01:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13714.342 ops/s
[info] # Warmup Iteration   2: 18940.770 ops/s
[info] # Warmup Iteration   3: 19226.008 ops/s
[info] # Warmup Iteration   4: 19263.659 ops/s
[info] # Warmup Iteration   5: 19319.356 ops/s
[info] Iteration   1: 19248.542 ops/s
[info]                  ·gc.alloc.rate:                   887.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              72575.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109857.562 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18948.387 ops/s
[info]                  ·gc.alloc.rate:                   873.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55657.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 18920.496 ops/s
[info]                  ·gc.alloc.rate:                   872.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55681.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19319.169 ops/s
[info]                  ·gc.alloc.rate:                   890.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109068.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19319.414 ops/s
[info]                  ·gc.alloc.rate:                   890.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54528.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19151.202 ±(99.9%) 770.952 ops/s [Average]
[info]   (min, avg, max) = (18920.496, 19151.202, 19319.414), stdev = 200.214
[info]   CI (99.9%): [18380.249, 19922.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   882.784 ±(99.9%) 35.945 MB/sec [Average]
[info]   (min, avg, max) = (872.000, 882.784, 890.724), stdev = 9.335
[info]   CI (99.9%): [846.839, 918.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72563.180 ±(99.9%) 27.195 B/op [Average]
[info]   (min, avg, max) = (72560.021, 72563.180, 72575.814), stdev = 7.062
[info]   CI (99.9%): [72535.985, 72590.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.717 ±(99.9%) 15.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.717, 8.479), stdev = 3.907
[info]   CI (99.9%): [≈ 0, 17.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   938.060 ±(99.9%) 1416.439 MB/sec [Average]
[info]   (min, avg, max) = (669.154, 938.060, 1343.131), stdev = 367.845
[info]   CI (99.9%): [≈ 0, 2354.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76958.510 ±(99.9%) 114276.915 B/op [Average]
[info]   (min, avg, max) = (54528.556, 76958.510, 109857.562), stdev = 29677.352
[info]   CI (99.9%): [≈ 0, 191235.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43.17% complete, ETA 01:16:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6280.050 ops/s
[info] # Warmup Iteration   2: 7221.405 ops/s
[info] # Warmup Iteration   3: 7127.915 ops/s
[info] # Warmup Iteration   4: 7315.166 ops/s
[info] # Warmup Iteration   5: 7316.600 ops/s
[info] Iteration   1: 7249.484 ops/s
[info]                  ·gc.alloc.rate:                   1579.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              342944.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 438545.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7329.805 ops/s
[info]                  ·gc.alloc.rate:                   1597.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              342944.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289245.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7324.388 ops/s
[info]                  ·gc.alloc.rate:                   1595.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              342944.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434557.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7333.240 ops/s
[info]                  ·gc.alloc.rate:                   1598.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              342954.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289730.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7360.178 ops/s
[info]                  ·gc.alloc.rate:                   1603.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              342968.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288992.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   7319.419 ±(99.9%) 159.649 ops/s [Average]
[info]   (min, avg, max) = (7249.484, 7319.419, 7360.178), stdev = 41.460
[info]   CI (99.9%): [7159.770, 7479.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1594.649 ±(99.9%) 35.251 MB/sec [Average]
[info]   (min, avg, max) = (1579.149, 1594.649, 1603.427), stdev = 9.155
[info]   CI (99.9%): [1559.398, 1629.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   342950.870 ±(99.9%) 40.621 B/op [Average]
[info]   (min, avg, max) = (342944.056, 342950.870, 342968.055), stdev = 10.549
[info]   CI (99.9%): [342910.248, 342991.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10.765 ±(99.9%) 31.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.765, 22.592), stdev = 8.203
[info]   CI (99.9%): [≈ 0, 42.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1617.861 ±(99.9%) 1415.785 MB/sec [Average]
[info]   (min, avg, max) = (1346.960, 1617.861, 2021.885), stdev = 367.675
[info]   CI (99.9%): [202.076, 3033.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   348214.102 ±(99.9%) 310566.887 B/op [Average]
[info]   (min, avg, max) = (288992.217, 348214.102, 438545.368), stdev = 80653.234
[info]   CI (99.9%): [37647.215, 658780.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.37% complete, ETA 01:15:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8995.013 ops/s
[info] # Warmup Iteration   2: 12976.417 ops/s
[info] # Warmup Iteration   3: 13060.801 ops/s
[info] # Warmup Iteration   4: 13056.120 ops/s
[info] # Warmup Iteration   5: 13063.822 ops/s
[info] Iteration   1: 13000.627 ops/s
[info]                  ·gc.alloc.rate:                   1305.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162559.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13088.231 ops/s
[info]                  ·gc.alloc.rate:                   1314.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161479.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13042.602 ops/s
[info]                  ·gc.alloc.rate:                   1309.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162024.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13020.991 ops/s
[info]                  ·gc.alloc.rate:                   1307.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162471.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13092.484 ops/s
[info]                  ·gc.alloc.rate:                   1315.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161725.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13048.987 ±(99.9%) 156.358 ops/s [Average]
[info]   (min, avg, max) = (13000.627, 13048.987, 13092.484), stdev = 40.606
[info]   CI (99.9%): [12892.629, 13205.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1310.674 ±(99.9%) 16.297 MB/sec [Average]
[info]   (min, avg, max) = (1305.635, 1310.674, 1315.426), stdev = 4.232
[info]   CI (99.9%): [1294.377, 1326.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158112.042 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (158112.031, 158112.042, 158112.077), stdev = 0.020
[info]   CI (99.9%): [158111.966, 158112.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.515 ±(99.9%) 5.297 B/op [Average]
[info]   (min, avg, max) = (2.503, 3.515, 5.040), stdev = 1.376
[info]   CI (99.9%): [≈ 0, 8.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.327 ±(99.9%) 5.251 MB/sec [Average]
[info]   (min, avg, max) = (1342.364, 1343.327, 1345.491), stdev = 1.364
[info]   CI (99.9%): [1338.076, 1348.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   162052.166 ±(99.9%) 1794.390 B/op [Average]
[info]   (min, avg, max) = (161479.583, 162052.166, 162559.921), stdev = 465.997
[info]   CI (99.9%): [160257.777, 163846.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.57% complete, ETA 01:15:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7283.086 ops/s
[info] # Warmup Iteration   2: 13681.435 ops/s
[info] # Warmup Iteration   3: 13377.093 ops/s
[info] # Warmup Iteration   4: 13360.779 ops/s
[info] # Warmup Iteration   5: 13396.328 ops/s
[info] Iteration   1: 13671.451 ops/s
[info]                  ·gc.alloc.rate:                   1251.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155503.629 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13416.445 ops/s
[info]                  ·gc.alloc.rate:                   1228.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158626.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 13367.637 ops/s
[info]                  ·gc.alloc.rate:                   1223.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159352.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13386.040 ops/s
[info]                  ·gc.alloc.rate:                   1225.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              144089.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79641.657 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13379.834 ops/s
[info]                  ·gc.alloc.rate:                   1224.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159393.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13444.281 ±(99.9%) 493.877 ops/s [Average]
[info]   (min, avg, max) = (13367.637, 13444.281, 13671.451), stdev = 128.258
[info]   CI (99.9%): [12950.404, 13938.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1230.596 ±(99.9%) 45.008 MB/sec [Average]
[info]   (min, avg, max) = (1223.571, 1230.596, 1251.268), stdev = 11.688
[info]   CI (99.9%): [1185.589, 1275.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144088.241 ±(99.9%) 1.791 B/op [Average]
[info]   (min, avg, max) = (144088.030, 144088.241, 144089.073), stdev = 0.465
[info]   CI (99.9%): [144086.450, 144090.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.900 ±(99.9%) 19.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.900, 12.210), stdev = 5.068
[info]   CI (99.9%): [≈ 0, 23.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.541 ±(99.9%) 1163.017 MB/sec [Average]
[info]   (min, avg, max) = (677.258, 1217.541, 1354.639), stdev = 302.032
[info]   CI (99.9%): [54.525, 2380.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   142503.702 ±(99.9%) 135455.001 B/op [Average]
[info]   (min, avg, max) = (79641.657, 142503.702, 159393.894), stdev = 35177.234
[info]   CI (99.9%): [7048.701, 277958.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.78% complete, ETA 01:15:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233056.943 ops/s
[info] # Warmup Iteration   2: 250798.469 ops/s
[info] # Warmup Iteration   3: 253875.886 ops/s
[info] # Warmup Iteration   4: 252231.156 ops/s
[info] # Warmup Iteration   5: 252412.591 ops/s
[info] Iteration   1: 253575.931 ops/s
[info]                  ·gc.alloc.rate:                   1466.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8334.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 248674.499 ops/s
[info]                  ·gc.alloc.rate:                   1438.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8502.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 247959.899 ops/s
[info]                  ·gc.alloc.rate:                   1433.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8535.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 253434.893 ops/s
[info]                  ·gc.alloc.rate:                   1465.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8359.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 247064.441 ops/s
[info]                  ·gc.alloc.rate:                   1428.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12879.668 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   250141.932 ±(99.9%) 12026.949 ops/s [Average]
[info]   (min, avg, max) = (247064.441, 250141.932, 253575.931), stdev = 3123.360
[info]   CI (99.9%): [238114.984, 262168.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1446.554 ±(99.9%) 69.535 MB/sec [Average]
[info]   (min, avg, max) = (1428.669, 1446.554, 1466.271), stdev = 18.058
[info]   CI (99.9%): [1377.019, 1516.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.002), stdev = 0.001
[info]   CI (99.9%): [9104.001, 9104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.210 ±(99.9%) 0.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.210, 0.398), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1479.402 ±(99.9%) 1166.218 MB/sec [Average]
[info]   (min, avg, max) = (1342.321, 1479.402, 2021.175), stdev = 302.863
[info]   CI (99.9%): [313.184, 2645.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9322.452 ±(99.9%) 7664.572 B/op [Average]
[info]   (min, avg, max) = (8334.401, 9322.452, 12879.668), stdev = 1990.465
[info]   CI (99.9%): [1657.880, 16987.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.98% complete, ETA 01:15:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5171.313 ops/s
[info] # Warmup Iteration   2: 12042.259 ops/s
[info] # Warmup Iteration   3: 12412.291 ops/s
[info] # Warmup Iteration   4: 12401.888 ops/s
[info] # Warmup Iteration   5: 12340.875 ops/s
[info] Iteration   1: 12284.806 ops/s
[info]                  ·gc.alloc.rate:                   1537.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173141.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 12439.500 ops/s
[info]                  ·gc.alloc.rate:                   1556.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256834.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 12390.056 ops/s
[info]                  ·gc.alloc.rate:                   1550.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172041.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12442.573 ops/s
[info]                  ·gc.alloc.rate:                   1557.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171448.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12417.716 ops/s
[info]                  ·gc.alloc.rate:                   1554.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171906.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12394.930 ±(99.9%) 250.488 ops/s [Average]
[info]   (min, avg, max) = (12284.806, 12394.930, 12442.573), stdev = 65.051
[info]   CI (99.9%): [12144.442, 12645.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1551.261 ±(99.9%) 31.534 MB/sec [Average]
[info]   (min, avg, max) = (1537.391, 1551.261, 1557.287), stdev = 8.189
[info]   CI (99.9%): [1519.727, 1582.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197016.050 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (197016.033, 197016.050, 197016.106), stdev = 0.032
[info]   CI (99.9%): [197015.929, 197016.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.222 ±(99.9%) 15.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.222, 10.535), stdev = 3.990
[info]   CI (99.9%): [≈ 0, 19.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.193 ±(99.9%) 1163.169 MB/sec [Average]
[info]   (min, avg, max) = (1351.087, 1489.193, 2029.544), stdev = 302.071
[info]   CI (99.9%): [326.024, 2652.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   189074.532 ±(99.9%) 145878.153 B/op [Average]
[info]   (min, avg, max) = (171448.832, 189074.532, 256834.541), stdev = 37884.093
[info]   CI (99.9%): [43196.379, 334952.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44.18% complete, ETA 01:14:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9678.936 ops/s
[info] # Warmup Iteration   2: 12456.171 ops/s
[info] # Warmup Iteration   3: 12715.498 ops/s
[info] # Warmup Iteration   4: 12711.704 ops/s
[info] # Warmup Iteration   5: 12943.973 ops/s
[info] Iteration   1: 12958.584 ops/s
[info]                  ·gc.alloc.rate:                   1264.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              153654.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163086.655 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 12909.864 ops/s
[info]                  ·gc.alloc.rate:                   1260.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              153656.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163692.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 12906.943 ops/s
[info]                  ·gc.alloc.rate:                   1259.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              153656.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163718.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12883.992 ops/s
[info]                  ·gc.alloc.rate:                   1257.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              153651.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82092.891 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 12998.854 ops/s
[info]                  ·gc.alloc.rate:                   1268.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              153632.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162826.868 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   12931.647 ±(99.9%) 178.528 ops/s [Average]
[info]   (min, avg, max) = (12883.992, 12931.647, 12998.854), stdev = 46.363
[info]   CI (99.9%): [12753.119, 13110.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1262.202 ±(99.9%) 16.656 MB/sec [Average]
[info]   (min, avg, max) = (1257.871, 1262.202, 1268.507), stdev = 4.325
[info]   CI (99.9%): [1245.546, 1278.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   153649.914 ±(99.9%) 39.252 B/op [Average]
[info]   (min, avg, max) = (153632.031, 153649.914, 153656.032), stdev = 10.194
[info]   CI (99.9%): [153610.662, 153689.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4.051 ±(99.9%) 11.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.051, 7.612), stdev = 2.891
[info]   CI (99.9%): [≈ 0, 15.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.712 ±(99.9%) 1155.197 MB/sec [Average]
[info]   (min, avg, max) = (672.056, 1208.712, 1344.427), stdev = 300.001
[info]   CI (99.9%): [53.515, 2363.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   147083.486 ±(99.9%) 139905.034 B/op [Average]
[info]   (min, avg, max) = (82092.891, 147083.486, 163718.186), stdev = 36332.893
[info]   CI (99.9%): [7178.452, 286988.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.38% complete, ETA 01:14:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19316.207 ops/s
[info] # Warmup Iteration   2: 27037.235 ops/s
[info] # Warmup Iteration   3: 27817.863 ops/s
[info] # Warmup Iteration   4: 28099.220 ops/s
[info] # Warmup Iteration   5: 28049.912 ops/s
[info] Iteration   1: 28053.305 ops/s
[info]                  ·gc.alloc.rate:                   967.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37666.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 28307.053 ops/s
[info]                  ·gc.alloc.rate:                   976.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74604.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28199.334 ops/s
[info]                  ·gc.alloc.rate:                   972.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37434.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 28108.833 ops/s
[info]                  ·gc.alloc.rate:                   969.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75111.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28185.276 ops/s
[info]                  ·gc.alloc.rate:                   972.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37453.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   28170.760 ±(99.9%) 371.511 ops/s [Average]
[info]   (min, avg, max) = (28053.305, 28170.760, 28307.053), stdev = 96.480
[info]   CI (99.9%): [27799.249, 28542.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   971.978 ±(99.9%) 13.458 MB/sec [Average]
[info]   (min, avg, max) = (967.740, 971.978, 976.989), stdev = 3.495
[info]   CI (99.9%): [958.520, 985.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312.015 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (54312.014, 54312.015, 54312.016), stdev = 0.001
[info]   CI (99.9%): [54312.012, 54312.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.627 ±(99.9%) 8.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.627, 4.662), stdev = 2.267
[info]   CI (99.9%): [≈ 0, 10.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   939.110 ±(99.9%) 1414.870 MB/sec [Average]
[info]   (min, avg, max) = (670.582, 939.110, 1342.024), stdev = 367.437
[info]   CI (99.9%): [≈ 0, 2353.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   52454.095 ±(99.9%) 78756.918 B/op [Average]
[info]   (min, avg, max) = (37434.539, 52454.095, 75111.398), stdev = 20452.921
[info]   CI (99.9%): [≈ 0, 131211.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.58% complete, ETA 01:14:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51230.586 ops/s
[info] # Warmup Iteration   2: 79083.630 ops/s
[info] # Warmup Iteration   3: 76692.575 ops/s
[info] # Warmup Iteration   4: 79340.934 ops/s
[info] # Warmup Iteration   5: 79167.289 ops/s
[info] Iteration   1: 79484.042 ops/s
[info]                  ·gc.alloc.rate:                   1264.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26746.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 79904.002 ops/s
[info]                  ·gc.alloc.rate:                   1271.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26629.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 79765.906 ops/s
[info]                  ·gc.alloc.rate:                   1269.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26705.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 79827.982 ops/s
[info]                  ·gc.alloc.rate:                   1270.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26712.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 79675.045 ops/s
[info]                  ·gc.alloc.rate:                   1268.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26789.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   79731.395 ±(99.9%) 622.901 ops/s [Average]
[info]   (min, avg, max) = (79484.042, 79731.395, 79904.002), stdev = 161.765
[info]   CI (99.9%): [79108.494, 80354.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1269.097 ±(99.9%) 10.347 MB/sec [Average]
[info]   (min, avg, max) = (1264.971, 1269.097, 1271.960), stdev = 2.687
[info]   CI (99.9%): [1258.750, 1279.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.006), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.328 ±(99.9%) 1.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 0.821), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.213 ±(99.9%) 8.367 MB/sec [Average]
[info]   (min, avg, max) = (1350.337, 1353.213, 1355.865), stdev = 2.173
[info]   CI (99.9%): [1344.846, 1361.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26716.790 ±(99.9%) 227.225 B/op [Average]
[info]   (min, avg, max) = (26629.919, 26716.790, 26789.735), stdev = 59.010
[info]   CI (99.9%): [26489.566, 26944.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.78% complete, ETA 01:14:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 685297.457 ops/s
[info] # Warmup Iteration   2: 740460.670 ops/s
[info] # Warmup Iteration   3: 719299.875 ops/s
[info] # Warmup Iteration   4: 738448.958 ops/s
[info] # Warmup Iteration   5: 742393.442 ops/s
[info] Iteration   1: 739694.672 ops/s
[info]                  ·gc.alloc.rate:                   1014.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2859.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 741977.347 ops/s
[info]                  ·gc.alloc.rate:                   1018.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2848.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 735260.307 ops/s
[info]                  ·gc.alloc.rate:                   1008.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1437.281 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 740487.552 ops/s
[info]                  ·gc.alloc.rate:                   1016.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2855.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 740433.160 ops/s
[info]                  ·gc.alloc.rate:                   1015.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1427.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   739570.607 ±(99.9%) 9811.827 ops/s [Average]
[info]   (min, avg, max) = (735260.307, 739570.607, 741977.347), stdev = 2548.100
[info]   CI (99.9%): [729758.780, 749382.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1014.816 ±(99.9%) 13.558 MB/sec [Average]
[info]   (min, avg, max) = (1008.921, 1014.816, 1018.263), stdev = 3.521
[info]   CI (99.9%): [1001.258, 1028.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.097 ±(99.9%) 0.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.177), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074.530 ±(99.9%) 1416.692 MB/sec [Average]
[info]   (min, avg, max) = (671.344, 1074.530, 1343.700), stdev = 367.910
[info]   CI (99.9%): [≈ 0, 2491.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2285.789 ±(99.9%) 2999.089 B/op [Average]
[info]   (min, avg, max) = (1427.953, 2285.789, 2859.970), stdev = 778.854
[info]   CI (99.9%): [≈ 0, 5284.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44.98% complete, ETA 01:13:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 740421.100 ops/s
[info] # Warmup Iteration   2: 778980.815 ops/s
[info] # Warmup Iteration   3: 774827.506 ops/s
[info] # Warmup Iteration   4: 774381.051 ops/s
[info] # Warmup Iteration   5: 775396.564 ops/s
[info] Iteration   1: 776543.528 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 776962.367 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 776612.838 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 774805.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 773668.768 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   775718.633 ±(99.9%) 5466.825 ops/s [Average]
[info]   (min, avg, max) = (773668.768, 775718.633, 776962.367), stdev = 1419.717
[info]   CI (99.9%): [770251.808, 781185.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:13:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35456.999 ops/s
[info] # Warmup Iteration   2: 65309.419 ops/s
[info] # Warmup Iteration   3: 65852.470 ops/s
[info] # Warmup Iteration   4: 65686.411 ops/s
[info] # Warmup Iteration   5: 64605.068 ops/s
[info] Iteration   1: 64603.122 ops/s
[info]                  ·gc.alloc.rate:                   1392.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32918.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 64692.466 ops/s
[info]                  ·gc.alloc.rate:                   1394.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32897.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 64537.977 ops/s
[info]                  ·gc.alloc.rate:                   1391.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49521.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 64533.402 ops/s
[info]                  ·gc.alloc.rate:                   1391.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33044.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 65688.690 ops/s
[info]                  ·gc.alloc.rate:                   1416.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32494.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   64811.131 ±(99.9%) 1905.199 ops/s [Average]
[info]   (min, avg, max) = (64533.402, 64811.131, 65688.690), stdev = 494.774
[info]   CI (99.9%): [62905.932, 66716.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1397.569 ±(99.9%) 40.761 MB/sec [Average]
[info]   (min, avg, max) = (1391.677, 1397.569, 1416.374), stdev = 10.586
[info]   CI (99.9%): [1356.807, 1438.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33944.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33944.006, 33944.006, 33944.007), stdev = 0.001
[info]   CI (99.9%): [33944.005, 33944.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.213 ±(99.9%) 3.266 B/op [Average]
[info]   (min, avg, max) = (0.507, 1.213, 2.532), stdev = 0.848
[info]   CI (99.9%): [≈ 0, 4.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1488.809 ±(99.9%) 1165.745 MB/sec [Average]
[info]   (min, avg, max) = (1350.894, 1488.809, 2030.355), stdev = 302.740
[info]   CI (99.9%): [323.065, 2654.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36175.290 ±(99.9%) 28740.425 B/op [Average]
[info]   (min, avg, max) = (32494.189, 36175.290, 49521.820), stdev = 7463.797
[info]   CI (99.9%): [7434.865, 64915.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45.38% complete, ETA 01:13:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10819.528 ops/s
[info] # Warmup Iteration   2: 12306.868 ops/s
[info] # Warmup Iteration   3: 12233.851 ops/s
[info] # Warmup Iteration   4: 12415.812 ops/s
[info] # Warmup Iteration   5: 12298.450 ops/s
[info] Iteration   1: 12546.927 ops/s
[info]                  ·gc.alloc.rate:                   1536.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              192749.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168440.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 12558.954 ops/s
[info]                  ·gc.alloc.rate:                   1537.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              192752.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252523.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12535.831 ops/s
[info]                  ·gc.alloc.rate:                   1534.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              192752.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168839.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12370.500 ops/s
[info]                  ·gc.alloc.rate:                   1514.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              192750.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171260.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 12564.842 ops/s
[info]                  ·gc.alloc.rate:                   1538.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              192728.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168811.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   12515.411 ±(99.9%) 314.888 ops/s [Average]
[info]   (min, avg, max) = (12370.500, 12515.411, 12564.842), stdev = 81.775
[info]   CI (99.9%): [12200.523, 12830.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1532.308 ±(99.9%) 37.862 MB/sec [Average]
[info]   (min, avg, max) = (1514.883, 1532.308, 1538.261), stdev = 9.833
[info]   CI (99.9%): [1494.446, 1570.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   192746.509 ±(99.9%) 39.979 B/op [Average]
[info]   (min, avg, max) = (192728.032, 192746.509, 192752.033), stdev = 10.382
[info]   CI (99.9%): [192706.530, 192786.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5.766 ±(99.9%) 11.098 B/op [Average]
[info]   (min, avg, max) = (2.607, 5.766, 7.944), stdev = 2.882
[info]   CI (99.9%): [≈ 0, 16.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1478.879 ±(99.9%) 1152.564 MB/sec [Average]
[info]   (min, avg, max) = (1342.370, 1478.879, 2014.303), stdev = 299.317
[info]   CI (99.9%): [326.315, 2631.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   185974.917 ±(99.9%) 143314.946 B/op [Average]
[info]   (min, avg, max) = (168440.575, 185974.917, 252523.079), stdev = 37218.436
[info]   CI (99.9%): [42659.971, 329289.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.58% complete, ETA 01:13:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9156.357 ops/s
[info] # Warmup Iteration   2: 20278.986 ops/s
[info] # Warmup Iteration   3: 20105.057 ops/s
[info] # Warmup Iteration   4: 20023.639 ops/s
[info] # Warmup Iteration   5: 19956.013 ops/s
[info] Iteration   1: 19950.216 ops/s
[info]                  ·gc.alloc.rate:                   721.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53232.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20366.193 ops/s
[info]                  ·gc.alloc.rate:                   736.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52148.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 20544.043 ops/s
[info]                  ·gc.alloc.rate:                   742.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51535.852 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20579.196 ops/s
[info]                  ·gc.alloc.rate:                   744.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51448.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 20555.592 ops/s
[info]                  ·gc.alloc.rate:                   743.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51459.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   20399.048 ±(99.9%) 1019.716 ops/s [Average]
[info]   (min, avg, max) = (19950.216, 20399.048, 20579.196), stdev = 264.817
[info]   CI (99.9%): [19379.332, 21418.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   737.605 ±(99.9%) 37.037 MB/sec [Average]
[info]   (min, avg, max) = (721.296, 737.605, 744.048), stdev = 9.618
[info]   CI (99.9%): [700.569, 774.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56920.021 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (56920.020, 56920.021, 56920.027), stdev = 0.003
[info]   CI (99.9%): [56920.009, 56920.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.636 ±(99.9%) 5.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.636, 3.140), stdev = 1.400
[info]   CI (99.9%): [≈ 0, 6.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   50.203 ±(99.9%) 425.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.203, 247.825), stdev = 110.483
[info]   CI (99.9%): [≈ 0, 475.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   673.292 ±(99.9%) 4.795 MB/sec [Average]
[info]   (min, avg, max) = (672.007, 673.292, 674.685), stdev = 1.245
[info]   CI (99.9%): [668.496, 678.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   51964.983 ±(99.9%) 2949.818 B/op [Average]
[info]   (min, avg, max) = (51448.227, 51964.983, 53232.810), stdev = 766.058
[info]   CI (99.9%): [49015.164, 54914.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.78% complete, ETA 01:12:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5779.043 ops/s
[info] # Warmup Iteration   2: 15715.170 ops/s
[info] # Warmup Iteration   3: 15915.926 ops/s
[info] # Warmup Iteration   4: 16065.146 ops/s
[info] # Warmup Iteration   5: 16095.213 ops/s
[info] Iteration   1: 15937.685 ops/s
[info]                  ·gc.alloc.rate:                   446.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50517.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16077.793 ops/s
[info]                  ·gc.alloc.rate:                   450.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50081.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15782.904 ops/s
[info]                  ·gc.alloc.rate:                   442.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67188.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16060.117 ops/s
[info]                  ·gc.alloc.rate:      449.792 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 16045.001 ops/s
[info]                  ·gc.alloc.rate:                   449.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66087.272 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   15980.700 ±(99.9%) 474.904 ops/s [Average]
[info]   (min, avg, max) = (15782.904, 15980.700, 16077.793), stdev = 123.331
[info]   CI (99.9%): [15505.795, 16455.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   447.525 ±(99.9%) 13.335 MB/sec [Average]
[info]   (min, avg, max) = (442.007, 447.525, 450.285), stdev = 3.463
[info]   CI (99.9%): [434.191, 460.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.203 ±(99.9%) 1.517 B/op [Average]
[info]   (min, avg, max) = (44088.025, 44088.203, 44088.908), stdev = 0.394
[info]   CI (99.9%): [44086.686, 44089.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.491 ±(99.9%) 21.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.491, 12.455), stdev = 5.570
[info]   CI (99.9%): [≈ 0, 23.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   473.979 ±(99.9%) 1066.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.979, 673.587), stdev = 277.085
[info]   CI (99.9%): [≈ 0, 1540.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46774.951 ±(99.9%) 105498.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46774.951, 67188.308), stdev = 27397.575
[info]   CI (99.9%): [≈ 0, 152273.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.98% complete, ETA 01:12:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88285.328 ops/s
[info] # Warmup Iteration   2: 94176.664 ops/s
[info] # Warmup Iteration   3: 91810.348 ops/s
[info] # Warmup Iteration   4: 92708.378 ops/s
[info] # Warmup Iteration   5: 90344.979 ops/s
[info] Iteration   1: 92897.994 ops/s
[info]                  ·gc.alloc.rate:      233.217 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 92849.322 ops/s
[info]                  ·gc.alloc.rate:                   233.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8671.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 93248.585 ops/s
[info]                  ·gc.alloc.rate:      234.098 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 92618.784 ops/s
[info]                  ·gc.alloc.rate:                   232.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8693.421 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 93227.370 ops/s
[info]                  ·gc.alloc.rate:      234.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   92968.411 ±(99.9%) 1031.328 ops/s [Average]
[info]   (min, avg, max) = (92618.784, 92968.411, 93248.585), stdev = 267.833
[info]   CI (99.9%): [91937.083, 93999.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   233.398 ±(99.9%) 2.592 MB/sec [Average]
[info]   (min, avg, max) = (232.515, 233.398, 234.098), stdev = 0.673
[info]   CI (99.9%): [230.805, 235.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.005), stdev = 0.001
[info]   CI (99.9%): [3952.004, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.010 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.177 ±(99.9%) 1.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.177, 0.885), stdev = 0.396
[info]   CI (99.9%): [≈ 0, 1.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.594 ±(99.9%) 1078.766 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.594, 511.495), stdev = 280.152
[info]   CI (99.9%): [≈ 0, 1283.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3473.025 ±(99.9%) 18312.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3473.025, 8693.421), stdev = 4755.641
[info]   CI (99.9%): [≈ 0, 21785.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.18% complete, ETA 01:12:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3966.543 ops/s
[info] # Warmup Iteration   2: 13688.854 ops/s
[info] # Warmup Iteration   3: 14791.861 ops/s
[info] # Warmup Iteration   4: 14767.650 ops/s
[info] # Warmup Iteration   5: 14720.840 ops/s
[info] Iteration   1: 14784.208 ops/s
[info]                  ·gc.alloc.rate:                   933.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71859.610 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 14866.234 ops/s
[info]                  ·gc.alloc.rate:                   938.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71458.565 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14774.580 ops/s
[info]                  ·gc.alloc.rate:                   932.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143958.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14760.167 ops/s
[info]                  ·gc.alloc.rate:                   931.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              99393.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72123.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 14717.951 ops/s
[info]                  ·gc.alloc.rate:                   929.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144674.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14780.628 ±(99.9%) 208.476 ops/s [Average]
[info]   (min, avg, max) = (14717.951, 14780.628, 14866.234), stdev = 54.141
[info]   CI (99.9%): [14572.152, 14989.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   933.226 ±(99.9%) 13.236 MB/sec [Average]
[info]   (min, avg, max) = (929.221, 933.226, 938.643), stdev = 3.437
[info]   CI (99.9%): [919.989, 946.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392.252 ±(99.9%) 1.904 B/op [Average]
[info]   (min, avg, max) = (99392.028, 99392.252, 99393.136), stdev = 0.495
[info]   CI (99.9%): [99390.347, 99394.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.102 ±(99.9%) 9.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.102, 6.658), stdev = 2.526
[info]   CI (99.9%): [≈ 0, 12.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   945.931 ±(99.9%) 1426.763 MB/sec [Average]
[info]   (min, avg, max) = (674.844, 945.931, 1352.566), stdev = 370.526
[info]   CI (99.9%): [≈ 0, 2372.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   100814.805 ±(99.9%) 152919.555 B/op [Average]
[info]   (min, avg, max) = (71458.565, 100814.805, 144674.147), stdev = 39712.723
[info]   CI (99.9%): [≈ 0, 253734.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46.39% complete, ETA 01:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8716.405 ops/s
[info] # Warmup Iteration   2: 16439.218 ops/s
[info] # Warmup Iteration   3: 16991.362 ops/s
[info] # Warmup Iteration   4: 17639.339 ops/s
[info] # Warmup Iteration   5: 17558.671 ops/s
[info] Iteration   1: 17638.055 ops/s
[info]                  ·gc.alloc.rate:                   567.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              50680.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45647.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17678.518 ops/s
[info]                  ·gc.alloc.rate:      569.088 MB/sec
[info]                  ·gc.alloc.rate.norm: 50675.797 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17600.648 ops/s
[info]                  ·gc.alloc.rate:                   566.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60454.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17633.755 ops/s
[info]                  ·gc.alloc.rate:                   567.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60341.572 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17650.337 ops/s
[info]                  ·gc.alloc.rate:                   567.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60105.291 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   17640.263 ±(99.9%) 108.597 ops/s [Average]
[info]   (min, avg, max) = (17600.648, 17640.263, 17678.518), stdev = 28.202
[info]   CI (99.9%): [17531.666, 17748.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   567.729 ±(99.9%) 3.756 MB/sec [Average]
[info]   (min, avg, max) = (566.381, 567.729, 569.088), stdev = 0.975
[info]   CI (99.9%): [563.973, 571.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   50664.779 ±(99.9%) 46.519 B/op [Average]
[info]   (min, avg, max) = (50656.023, 50664.779, 50680.025), stdev = 12.081
[info]   CI (99.9%): [50618.259, 50711.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.568 ±(99.9%) 4.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.568, 2.713), stdev = 1.200
[info]   CI (99.9%): [≈ 0, 5.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   50.764 ±(99.9%) 413.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.764, 242.663), stdev = 107.311
[info]   CI (99.9%): [≈ 0, 463.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   507.437 ±(99.9%) 1125.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507.437, 675.948), stdev = 292.411
[info]   CI (99.9%): [≈ 0, 1633.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   45309.731 ±(99.9%) 100547.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45309.731, 60454.680), stdev = 26111.874
[info]   CI (99.9%): [≈ 0, 145857.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:11:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42986.067 ops/s
[info] # Warmup Iteration   2: 59492.780 ops/s
[info] # Warmup Iteration   3: 59490.781 ops/s
[info] # Warmup Iteration   4: 58778.472 ops/s
[info] # Warmup Iteration   5: 59977.159 ops/s
[info] Iteration   1: 59469.166 ops/s
[info]                  ·gc.alloc.rate:                   1060.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17803.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 59756.170 ops/s
[info]                  ·gc.alloc.rate:                   1065.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35401.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59993.446 ops/s
[info]                  ·gc.alloc.rate:                   1069.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17613.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 59822.960 ops/s
[info]                  ·gc.alloc.rate:                   1066.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35336.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 59729.883 ops/s
[info]                  ·gc.alloc.rate:                   1065.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17700.633 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   59754.325 ±(99.9%) 730.116 ops/s [Average]
[info]   (min, avg, max) = (59469.166, 59754.325, 59993.446), stdev = 189.609
[info]   CI (99.9%): [59024.209, 60484.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1065.552 ±(99.9%) 13.336 MB/sec [Average]
[info]   (min, avg, max) = (1060.339, 1065.552, 1069.926), stdev = 3.463
[info]   CI (99.9%): [1052.216, 1078.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28072.007, 28072.007, 28072.007), stdev = 0.001
[info]   CI (99.9%): [28072.006, 28072.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.548 ±(99.9%) 2.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 1.645), stdev = 0.775
[info]   CI (99.9%): [≈ 0, 3.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   940.415 ±(99.9%) 1416.338 MB/sec [Average]
[info]   (min, avg, max) = (671.312, 940.415, 1343.830), stdev = 367.818
[info]   CI (99.9%): [≈ 0, 2356.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24771.227 ±(99.9%) 37254.588 B/op [Average]
[info]   (min, avg, max) = (17613.435, 24771.227, 35401.632), stdev = 9674.898
[info]   CI (99.9%): [≈ 0, 62025.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.79% complete, ETA 01:11:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53214.416 ops/s
[info] # Warmup Iteration   2: 80317.122 ops/s
[info] # Warmup Iteration   3: 80274.829 ops/s
[info] # Warmup Iteration   4: 78733.653 ops/s
[info] # Warmup Iteration   5: 80719.513 ops/s
[info] Iteration   1: 79480.049 ops/s
[info]                  ·gc.alloc.rate:                   1136.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13381.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 78339.714 ops/s
[info]                  ·gc.alloc.rate:                   1120.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27160.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80631.965 ops/s
[info]                  ·gc.alloc.rate:                   1152.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26406.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 80869.224 ops/s
[info]                  ·gc.alloc.rate:                   1156.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13170.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 80468.034 ops/s
[info]                  ·gc.alloc.rate:                   1150.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26499.721 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   79957.797 ±(99.9%) 4034.907 ops/s [Average]
[info]   (min, avg, max) = (78339.714, 79957.797, 80869.224), stdev = 1047.853
[info]   CI (99.9%): [75922.890, 83992.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1143.338 ±(99.9%) 57.676 MB/sec [Average]
[info]   (min, avg, max) = (1120.234, 1143.338, 1156.438), stdev = 14.978
[info]   CI (99.9%): [1085.661, 1201.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22512.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22512.005, 22512.005, 22512.005), stdev = 0.001
[info]   CI (99.9%): [22512.005, 22512.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.740 ±(99.9%) 2.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.740, 1.255), stdev = 0.537
[info]   CI (99.9%): [≈ 0, 2.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082.099 ±(99.9%) 1427.308 MB/sec [Average]
[info]   (min, avg, max) = (675.524, 1082.099, 1354.449), stdev = 370.667
[info]   CI (99.9%): [≈ 0, 2509.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21323.849 ±(99.9%) 28312.745 B/op [Average]
[info]   (min, avg, max) = (13170.883, 21323.849, 27160.917), stdev = 7352.730
[info]   CI (99.9%): [≈ 0, 49636.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.99% complete, ETA 01:11:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234634.082 ops/s
[info] # Warmup Iteration   2: 246454.644 ops/s
[info] # Warmup Iteration   3: 236760.405 ops/s
[info] # Warmup Iteration   4: 236524.591 ops/s
[info] # Warmup Iteration   5: 236297.029 ops/s
[info] Iteration   1: 235898.907 ops/s
[info]                  ·gc.alloc.rate:                   451.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3412.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 239732.163 ops/s
[info]                  ·gc.alloc.rate:                   459.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3358.662 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 241830.889 ops/s
[info]                  ·gc.alloc.rate:                   463.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4399.989 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 239060.376 ops/s
[info]                  ·gc.alloc.rate:      457.982 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 242629.575 ops/s
[info]                  ·gc.alloc.rate:                   464.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4385.612 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   239830.382 ±(99.9%) 10169.011 ops/s [Average]
[info]   (min, avg, max) = (235898.907, 239830.382, 242629.575), stdev = 2640.860
[info]   CI (99.9%): [229661.371, 249999.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   459.499 ±(99.9%) 19.543 MB/sec [Average]
[info]   (min, avg, max) = (451.905, 459.499, 464.810), stdev = 5.075
[info]   CI (99.9%): [439.956, 479.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.001, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.545 ±(99.9%) 4.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.682), stdev = 1.195
[info]   CI (99.9%): [≈ 0, 5.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.546 ±(99.9%) 29.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.546, 17.458), stdev = 7.778
[info]   CI (99.9%): [≈ 0, 33.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.978 ±(99.9%) 1070.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.978, 675.977), stdev = 277.956
[info]   CI (99.9%): [≈ 0, 1545.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3111.440 ±(99.9%) 6973.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3111.440, 4399.989), stdev = 1810.867
[info]   CI (99.9%): [≈ 0, 10084.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.19% complete, ETA 01:10:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292227.206 ops/s
[info] # Warmup Iteration   2: 306615.513 ops/s
[info] # Warmup Iteration   3: 315153.991 ops/s
[info] # Warmup Iteration   4: 314881.937 ops/s
[info] # Warmup Iteration   5: 316393.924 ops/s
[info] Iteration   1: 316531.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 316351.355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 315523.389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 315568.792 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 316089.361 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   316012.822 ±(99.9%) 1749.714 ops/s [Average]
[info]   (min, avg, max) = (315523.389, 316012.822, 316531.214), stdev = 454.395
[info]   CI (99.9%): [314263.108, 317762.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.39% complete, ETA 01:10:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50439.757 ops/s
[info] # Warmup Iteration   2: 66884.555 ops/s
[info] # Warmup Iteration   3: 68431.943 ops/s
[info] # Warmup Iteration   4: 69067.455 ops/s
[info] # Warmup Iteration   5: 69183.201 ops/s
[info] Iteration   1: 69143.238 ops/s
[info]                  ·gc.alloc.rate:                   1240.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30475.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 69272.651 ops/s
[info]                  ·gc.alloc.rate:                   1242.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15210.353 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 69201.224 ops/s
[info]                  ·gc.alloc.rate:                   1242.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30451.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 68910.575 ops/s
[info]                  ·gc.alloc.rate:                   1236.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30593.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 68727.219 ops/s
[info]                  ·gc.alloc.rate:                   1233.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30712.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   69050.981 ±(99.9%) 871.211 ops/s [Average]
[info]   (min, avg, max) = (68727.219, 69050.981, 69272.651), stdev = 226.251
[info]   CI (99.9%): [68179.771, 69922.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1239.066 ±(99.9%) 15.647 MB/sec [Average]
[info]   (min, avg, max) = (1233.246, 1239.066, 1242.853), stdev = 4.063
[info]   CI (99.9%): [1223.419, 1254.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28248.006, 28248.006, 28248.006), stdev = 0.001
[info]   CI (99.9%): [28248.005, 28248.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.570 ±(99.9%) 2.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 0.953), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1205.331 ±(99.9%) 1154.017 MB/sec [Average]
[info]   (min, avg, max) = (669.224, 1205.331, 1340.826), stdev = 299.695
[info]   CI (99.9%): [51.314, 2359.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27488.543 ±(99.9%) 26432.753 B/op [Average]
[info]   (min, avg, max) = (15210.353, 27488.543, 30712.165), stdev = 6864.502
[info]   CI (99.9%): [1055.790, 53921.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47.59% complete, ETA 01:10:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9005.889 ops/s
[info] # Warmup Iteration   2: 10048.261 ops/s
[info] # Warmup Iteration   3: 10011.302 ops/s
[info] # Warmup Iteration   4: 10167.808 ops/s
[info] # Warmup Iteration   5: 10150.911 ops/s
[info] Iteration   1: 10182.418 ops/s
[info]                  ·gc.alloc.rate:                   1595.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              246672.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208170.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 10237.536 ops/s
[info]                  ·gc.alloc.rate:                   1604.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              246691.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207124.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10223.863 ops/s
[info]                  ·gc.alloc.rate:                   1602.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              246696.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311332.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10241.554 ops/s
[info]                  ·gc.alloc.rate:                   1604.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              246696.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207463.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 10235.216 ops/s
[info]                  ·gc.alloc.rate:                   1604.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              246696.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207789.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   10224.118 ±(99.9%) 93.258 ops/s [Average]
[info]   (min, avg, max) = (10182.418, 10224.118, 10241.554), stdev = 24.219
[info]   CI (99.9%): [10130.860, 10317.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1602.184 ±(99.9%) 15.128 MB/sec [Average]
[info]   (min, avg, max) = (1595.405, 1602.184, 1604.894), stdev = 3.929
[info]   CI (99.9%): [1587.056, 1617.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   246690.384 ±(99.9%) 40.126 B/op [Average]
[info]   (min, avg, max) = (246672.040, 246690.384, 246696.040), stdev = 10.421
[info]   CI (99.9%): [246650.258, 246730.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6.414 ±(99.9%) 26.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.414, 16.020), stdev = 6.802
[info]   CI (99.9%): [≈ 0, 32.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1483.231 ±(99.9%) 1159.665 MB/sec [Average]
[info]   (min, avg, max) = (1346.390, 1483.231, 2021.954), stdev = 301.161
[info]   CI (99.9%): [323.566, 2642.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   228376.274 ±(99.9%) 178576.520 B/op [Average]
[info]   (min, avg, max) = (207124.227, 228376.274, 311332.847), stdev = 46375.755
[info]   CI (99.9%): [49799.754, 406952.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.79% complete, ETA 01:10:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102012.005 ops/s
[info] # Warmup Iteration   2: 123819.684 ops/s
[info] # Warmup Iteration   3: 126135.050 ops/s
[info] # Warmup Iteration   4: 126405.219 ops/s
[info] # Warmup Iteration   5: 125560.434 ops/s
[info] Iteration   1: 125555.220 ops/s
[info]                  ·gc.alloc.rate:                   1818.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25257.134 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 126167.231 ops/s
[info]                  ·gc.alloc.rate:                   1827.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25168.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 126257.124 ops/s
[info]                  ·gc.alloc.rate:                   1828.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16789.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 125368.517 ops/s
[info]                  ·gc.alloc.rate:                   1815.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25409.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 126026.965 ops/s
[info]                  ·gc.alloc.rate:                   1825.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25308.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   125875.011 ±(99.9%) 1507.781 ops/s [Average]
[info]   (min, avg, max) = (125368.517, 125875.011, 126257.124), stdev = 391.566
[info]   CI (99.9%): [124367.230, 127382.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1823.247 ±(99.9%) 21.944 MB/sec [Average]
[info]   (min, avg, max) = (1815.702, 1823.247, 1828.627), stdev = 5.699
[info]   CI (99.9%): [1801.303, 1845.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22800.003, 22800.003, 22800.003), stdev = 0.001
[info]   CI (99.9%): [22800.003, 22800.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.624 ±(99.9%) 0.543 B/op [Average]
[info]   (min, avg, max) = (0.520, 0.624, 0.779), stdev = 0.141
[info]   CI (99.9%): [0.082, 1.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1885.715 ±(99.9%) 1160.762 MB/sec [Average]
[info]   (min, avg, max) = (1346.530, 1885.715, 2025.978), stdev = 301.446
[info]   CI (99.9%): [724.953, 3046.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23586.338 ±(99.9%) 14635.540 B/op [Average]
[info]   (min, avg, max) = (16789.040, 23586.338, 25409.102), stdev = 3800.803
[info]   CI (99.9%): [8950.799, 38221.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47.99% complete, ETA 01:09:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18146.427 ops/s
[info] # Warmup Iteration   2: 685871.339 ops/s
[info] # Warmup Iteration   3: 677539.327 ops/s
[info] # Warmup Iteration   4: 678242.816 ops/s
[info] # Warmup Iteration   5: 667160.484 ops/s
[info] Iteration   1: 670080.264 ops/s
[info]                  ·gc.alloc.rate:      371.152 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 688002.002 ops/s
[info]                  ·gc.alloc.rate:                   381.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1170.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 674242.697 ops/s
[info]                  ·gc.alloc.rate:                   373.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1194.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 664427.035 ops/s
[info]                  ·gc.alloc.rate:      368.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 665856.054 ops/s
[info]                  ·gc.alloc.rate:                   368.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1591.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   672521.610 ±(99.9%) 36455.077 ops/s [Average]
[info]   (min, avg, max) = (664427.035, 672521.610, 688002.002), stdev = 9467.268
[info]   CI (99.9%): [636066.534, 708976.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   372.532 ±(99.9%) 20.226 MB/sec [Average]
[info]   (min, avg, max) = (368.039, 372.532, 381.104), stdev = 5.253
[info]   CI (99.9%): [352.305, 392.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.506 ±(99.9%) 4.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.472), stdev = 1.099
[info]   CI (99.9%): [≈ 0, 4.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.195 ±(99.9%) 10.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.195, 5.845), stdev = 2.599
[info]   CI (99.9%): [≈ 0, 11.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339.242 ±(99.9%) 1219.297 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.242, 673.246), stdev = 316.648
[info]   CI (99.9%): [≈ 0, 1558.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   791.217 ±(99.9%) 2854.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 791.217, 1591.752), stdev = 741.430
[info]   CI (99.9%): [≈ 0, 3646.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.19% complete, ETA 01:09:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246179.783 ops/s
[info] # Warmup Iteration   2: 376760.042 ops/s
[info] # Warmup Iteration   3: 377381.603 ops/s
[info] # Warmup Iteration   4: 380287.570 ops/s
[info] # Warmup Iteration   5: 374814.922 ops/s
[info] Iteration   1: 380446.678 ops/s
[info]                  ·gc.alloc.rate:                   388.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2116.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 380391.123 ops/s
[info]                  ·gc.alloc.rate:                   388.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2116.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 379690.894 ops/s
[info]                  ·gc.alloc.rate:      387.763 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 378884.310 ops/s
[info]                  ·gc.alloc.rate:                   386.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2798.804 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 380381.563 ops/s
[info]                  ·gc.alloc.rate:      388.529 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   379958.913 ±(99.9%) 2604.499 ops/s [Average]
[info]   (min, avg, max) = (378884.310, 379958.913, 380446.678), stdev = 676.380
[info]   CI (99.9%): [377354.415, 382563.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   388.083 ±(99.9%) 2.713 MB/sec [Average]
[info]   (min, avg, max) = (386.984, 388.083, 388.575), stdev = 0.705
[info]   CI (99.9%): [385.371, 390.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.104 ±(99.9%) 0.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.519), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 0.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.302 ±(99.9%) 1219.610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.302, 673.564), stdev = 316.729
[info]   CI (99.9%): [≈ 0, 1558.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1406.402 ±(99.9%) 5058.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1406.402, 2798.804), stdev = 1313.725
[info]   CI (99.9%): [≈ 0, 6465.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.39% complete, ETA 01:09:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739605.399 ops/s
[info] # Warmup Iteration   2: 743607.774 ops/s
[info] # Warmup Iteration   3: 779405.307 ops/s
[info] # Warmup Iteration   4: 776848.448 ops/s
[info] # Warmup Iteration   5: 782097.615 ops/s
[info] Iteration   1: 775190.826 ops/s
[info]                  ·gc.alloc.rate:                   267.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1038.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 780128.842 ops/s
[info]                  ·gc.alloc.rate:      269.598 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 775752.810 ops/s
[info]                  ·gc.alloc.rate:                   268.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1037.848 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 781726.454 ops/s
[info]                  ·gc.alloc.rate:      270.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 778797.863 ops/s
[info]                  ·gc.alloc.rate:                   269.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1033.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   778319.359 ±(99.9%) 10803.507 ops/s [Average]
[info]   (min, avg, max) = (775190.826, 778319.359, 781726.454), stdev = 2805.636
[info]   CI (99.9%): [767515.852, 789122.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   268.962 ±(99.9%) 3.794 MB/sec [Average]
[info]   (min, avg, max) = (267.866, 268.962, 270.158), stdev = 0.985
[info]   CI (99.9%): [265.168, 272.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.010 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.847 ±(99.9%) 1078.611 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.847, 511.432), stdev = 280.112
[info]   CI (99.9%): [≈ 0, 1385.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   622.042 ±(99.9%) 2186.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 622.042, 1038.593), stdev = 567.847
[info]   CI (99.9%): [≈ 0, 2808.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.59% complete, ETA 01:08:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45635.412 ops/s
[info] # Warmup Iteration   2: 79879.580 ops/s
[info] # Warmup Iteration   3: 79734.543 ops/s
[info] # Warmup Iteration   4: 80650.635 ops/s
[info] # Warmup Iteration   5: 80823.282 ops/s
[info] Iteration   1: 80837.577 ops/s
[info]                  ·gc.alloc.rate:                   3464.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66165.788 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 80910.949 ops/s
[info]                  ·gc.alloc.rate:                   3468.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66142.403 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 80851.695 ops/s
[info]                  ·gc.alloc.rate:                   3465.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66255.606 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 80558.846 ops/s
[info]                  ·gc.alloc.rate:                   3452.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66496.523 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 79678.304 ops/s
[info]                  ·gc.alloc.rate:                   3415.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67271.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   80567.474 ±(99.9%) 1984.493 ops/s [Average]
[info]   (min, avg, max) = (79678.304, 80567.474, 80910.949), stdev = 515.367
[info]   CI (99.9%): [78582.981, 82551.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3453.393 ±(99.9%) 83.790 MB/sec [Average]
[info]   (min, avg, max) = (3415.931, 3453.393, 3468.297), stdev = 21.760
[info]   CI (99.9%): [3369.603, 3537.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67472.005, 67472.005, 67472.005), stdev = 0.001
[info]   CI (99.9%): [67472.005, 67472.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.868 ±(99.9%) 2.600 B/op [Average]
[info]   (min, avg, max) = (0.822, 1.868, 2.440), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 4.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3401.796 ±(99.9%) 12.380 MB/sec [Average]
[info]   (min, avg, max) = (3397.372, 3401.796, 3405.758), stdev = 3.215
[info]   CI (99.9%): [3389.417, 3414.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66466.276 ±(99.9%) 1814.471 B/op [Average]
[info]   (min, avg, max) = (66142.403, 66466.276, 67271.062), stdev = 471.212
[info]   CI (99.9%): [64651.805, 68280.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48.80% complete, ETA 01:08:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191585.353 ops/s
[info] # Warmup Iteration   2: 218496.249 ops/s
[info] # Warmup Iteration   3: 217492.777 ops/s
[info] # Warmup Iteration   4: 224143.525 ops/s
[info] # Warmup Iteration   5: 223390.061 ops/s
[info] Iteration   1: 220055.610 ops/s
[info]                  ·gc.alloc.rate:                   1389.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9603.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 224508.706 ops/s
[info]                  ·gc.alloc.rate:                   1418.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9415.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 216468.931 ops/s
[info]                  ·gc.alloc.rate:                   1367.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9770.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 223934.734 ops/s
[info]                  ·gc.alloc.rate:                   1414.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14179.941 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 223951.742 ops/s
[info]                  ·gc.alloc.rate:                   1414.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9469.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   221783.944 ±(99.9%) 13337.087 ops/s [Average]
[info]   (min, avg, max) = (216468.931, 221783.944, 224508.706), stdev = 3463.599
[info]   CI (99.9%): [208446.858, 235121.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1400.909 ±(99.9%) 84.458 MB/sec [Average]
[info]   (min, avg, max) = (1367.304, 1400.909, 1418.183), stdev = 21.934
[info]   CI (99.9%): [1316.451, 1485.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9944.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9944.002, 9944.002, 9944.002), stdev = 0.001
[info]   CI (99.9%): [9944.002, 9944.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.264 ±(99.9%) 1.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.264, 0.731), stdev = 0.281
[info]   CI (99.9%): [≈ 0, 1.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1478.581 ±(99.9%) 1159.245 MB/sec [Average]
[info]   (min, avg, max) = (1342.340, 1478.581, 2017.108), stdev = 301.052
[info]   CI (99.9%): [319.336, 2637.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10487.953 ±(99.9%) 7964.774 B/op [Average]
[info]   (min, avg, max) = (9415.523, 10487.953, 14179.941), stdev = 2068.426
[info]   CI (99.9%): [2523.179, 18452.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.00% complete, ETA 01:08:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219372.505 ops/s
[info] # Warmup Iteration   2: 290808.299 ops/s
[info] # Warmup Iteration   3: 288068.263 ops/s
[info] # Warmup Iteration   4: 293416.502 ops/s
[info] # Warmup Iteration   5: 292574.798 ops/s
[info] Iteration   1: 289458.627 ops/s
[info]                  ·gc.alloc.rate:                   1507.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7294.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 293993.702 ops/s
[info]                  ·gc.alloc.rate:                   1531.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7185.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 292846.198 ops/s
[info]                  ·gc.alloc.rate:                   1525.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10834.327 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 293242.553 ops/s
[info]                  ·gc.alloc.rate:                   1527.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7221.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 288908.791 ops/s
[info]                  ·gc.alloc.rate:                   1504.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7337.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   291689.974 ±(99.9%) 8982.903 ops/s [Average]
[info]   (min, avg, max) = (288908.791, 291689.974, 293993.702), stdev = 2332.831
[info]   CI (99.9%): [282707.071, 300672.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1519.373 ±(99.9%) 47.024 MB/sec [Average]
[info]   (min, avg, max) = (1504.871, 1519.373, 1531.506), stdev = 12.212
[info]   CI (99.9%): [1472.349, 1566.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8200.001, 8200.001, 8200.002), stdev = 0.001
[info]   CI (99.9%): [8200.001, 8200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.382 ±(99.9%) 0.383 B/op [Average]
[info]   (min, avg, max) = (0.227, 0.382, 0.453), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.050 ±(99.9%) 1156.817 MB/sec [Average]
[info]   (min, avg, max) = (1341.096, 1478.050, 2015.446), stdev = 300.422
[info]   CI (99.9%): [321.233, 2634.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7974.507 ±(99.9%) 6160.230 B/op [Average]
[info]   (min, avg, max) = (7185.618, 7974.507, 10834.327), stdev = 1599.792
[info]   CI (99.9%): [1814.277, 14134.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.20% complete, ETA 01:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154210.347 ops/s
[info] # Warmup Iteration   2: 1476619.457 ops/s
[info] # Warmup Iteration   3: 1502180.587 ops/s
[info] # Warmup Iteration   4: 1504087.592 ops/s
[info] # Warmup Iteration   5: 1503158.884 ops/s
[info] Iteration   1: 1503673.030 ops/s
[info]                  ·gc.alloc.rate:                   511.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 535.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1510505.114 ops/s
[info]                  ·gc.alloc.rate:      514.310 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1496842.411 ops/s
[info]                  ·gc.alloc.rate:                   509.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 708.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1503715.680 ops/s
[info]                  ·gc.alloc.rate:                   512.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 704.842 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1501882.232 ops/s
[info]                  ·gc.alloc.rate:                   511.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 704.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1503323.693 ±(99.9%) 18857.673 ops/s [Average]
[info]   (min, avg, max) = (1496842.411, 1503323.693, 1510505.114), stdev = 4897.278
[info]   CI (99.9%): [1484466.020, 1522181.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   511.861 ±(99.9%) 6.425 MB/sec [Average]
[info]   (min, avg, max) = (509.657, 511.861, 514.310), stdev = 1.669
[info]   CI (99.9%): [505.436, 518.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.506 ±(99.9%) 4.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.510), stdev = 1.121
[info]   CI (99.9%): [≈ 0, 4.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.532 ±(99.9%) 4.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.532, 2.640), stdev = 1.179
[info]   CI (99.9%): [≈ 0, 5.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   505.992 ±(99.9%) 1121.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.992, 673.315), stdev = 291.371
[info]   CI (99.9%): [≈ 0, 1627.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   530.537 ±(99.9%) 1176.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 530.537, 708.078), stdev = 305.617
[info]   CI (99.9%): [≈ 0, 1707.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.40% complete, ETA 01:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 869623.549 ops/s
[info] # Warmup Iteration   2: 1276836.565 ops/s
[info] # Warmup Iteration   3: 1298212.046 ops/s
[info] # Warmup Iteration   4: 1303214.469 ops/s
[info] # Warmup Iteration   5: 1306300.280 ops/s
[info] Iteration   1: 1267926.412 ops/s
[info]                  ·gc.alloc.rate:                   740.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 836.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1308435.270 ops/s
[info]                  ·gc.alloc.rate:                   764.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 812.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1306995.853 ops/s
[info]                  ·gc.alloc.rate:                   763.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 812.922 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1304519.860 ops/s
[info]                  ·gc.alloc.rate:                   762.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1630.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1304048.264 ops/s
[info]                  ·gc.alloc.rate:                   762.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 816.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1298385.132 ±(99.9%) 65928.978 ops/s [Average]
[info]   (min, avg, max) = (1267926.412, 1298385.132, 1308435.270), stdev = 17121.546
[info]   CI (99.9%): [1232456.154, 1364314.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   758.747 ±(99.9%) 38.776 MB/sec [Average]
[info]   (min, avg, max) = (740.830, 758.747, 764.649), stdev = 10.070
[info]   CI (99.9%): [719.971, 797.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.126), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.096 ±(99.9%) 1165.115 MB/sec [Average]
[info]   (min, avg, max) = (673.431, 810.096, 1351.359), stdev = 302.577
[info]   CI (99.9%): [≈ 0, 1975.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   981.578 ±(99.9%) 1397.700 B/op [Average]
[info]   (min, avg, max) = (812.012, 981.578, 1630.651), stdev = 362.978
[info]   CI (99.9%): [≈ 0, 2379.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.60% complete, ETA 01:07:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1285411.104 ops/s
[info] # Warmup Iteration   2: 1315892.183 ops/s
[info] # Warmup Iteration   3: 1330663.112 ops/s
[info] # Warmup Iteration   4: 1291822.347 ops/s
[info] # Warmup Iteration   5: 1298723.191 ops/s
[info] Iteration   1: 1302409.299 ops/s
[info]                  ·gc.alloc.rate:                   443.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 618.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1297320.037 ops/s
[info]                  ·gc.alloc.rate:                   441.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 620.583 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1303835.944 ops/s
[info]                  ·gc.alloc.rate:      443.921 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1299733.055 ops/s
[info]                  ·gc.alloc.rate:                   442.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 817.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1299695.226 ops/s
[info]                  ·gc.alloc.rate:                   442.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 817.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1300598.712 ±(99.9%) 9831.074 ops/s [Average]
[info]   (min, avg, max) = (1297320.037, 1300598.712, 1303835.944), stdev = 2553.099
[info]   CI (99.9%): [1290767.639, 1310429.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   442.822 ±(99.9%) 3.336 MB/sec [Average]
[info]   (min, avg, max) = (441.693, 442.822, 443.921), stdev = 0.866
[info]   CI (99.9%): [439.486, 446.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.653 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.294), stdev = 1.468
[info]   CI (99.9%): [≈ 0, 6.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.809 ±(99.9%) 6.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.809, 3.989), stdev = 1.778
[info]   CI (99.9%): [≈ 0, 7.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.391 ±(99.9%) 1068.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.391, 674.599), stdev = 277.461
[info]   CI (99.9%): [≈ 0, 1542.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   574.570 ±(99.9%) 1294.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 574.570, 817.068), stdev = 336.059
[info]   CI (99.9%): [≈ 0, 1868.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.80% complete, ETA 01:07:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1330892.356 ops/s
[info] # Warmup Iteration   2: 1382214.293 ops/s
[info] # Warmup Iteration   3: 1399076.421 ops/s
[info] # Warmup Iteration   4: 1394456.991 ops/s
[info] # Warmup Iteration   5: 1397741.352 ops/s
[info] Iteration   1: 1398391.758 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1399078.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1397505.374 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1395115.768 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1393653.541 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1396749.069 ±(99.9%) 8812.113 ops/s [Average]
[info]   (min, avg, max) = (1393653.541, 1396749.069, 1399078.905), stdev = 2288.478
[info]   CI (99.9%): [1387936.957, 1405561.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.00% complete, ETA 01:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26959.074 ops/s
[info] # Warmup Iteration   2: 38624.132 ops/s
[info] # Warmup Iteration   3: 39420.767 ops/s
[info] # Warmup Iteration   4: 39415.855 ops/s
[info] # Warmup Iteration   5: 39065.766 ops/s
[info] Iteration   1: 38358.205 ops/s
[info]                  ·gc.alloc.rate:                   1852.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82466.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 39708.153 ops/s
[info]                  ·gc.alloc.rate:                   1916.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79773.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 38583.895 ops/s
[info]                  ·gc.alloc.rate:                   1862.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82243.919 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39170.687 ops/s
[info]                  ·gc.alloc.rate:                   1891.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81172.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 38943.689 ops/s
[info]                  ·gc.alloc.rate:                   1880.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54539.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   38952.926 ±(99.9%) 2026.395 ops/s [Average]
[info]   (min, avg, max) = (38358.205, 38952.926, 39708.153), stdev = 526.248
[info]   CI (99.9%): [36926.531, 40979.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1880.727 ±(99.9%) 97.448 MB/sec [Average]
[info]   (min, avg, max) = (1852.414, 1880.727, 1916.971), stdev = 25.307
[info]   CI (99.9%): [1783.280, 1978.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76000.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (76000.010, 76000.011, 76000.011), stdev = 0.001
[info]   CI (99.9%): [76000.009, 76000.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.686 ±(99.9%) 2.351 B/op [Average]
[info]   (min, avg, max) = (0.836, 1.686, 2.562), stdev = 0.611
[info]   CI (99.9%): [≈ 0, 4.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1881.459 ±(99.9%) 1145.878 MB/sec [Average]
[info]   (min, avg, max) = (1349.176, 1881.459, 2020.314), stdev = 297.581
[info]   CI (99.9%): [735.582, 3027.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76039.064 ±(99.9%) 46461.610 B/op [Average]
[info]   (min, avg, max) = (54539.304, 76039.064, 82466.589), stdev = 12065.933
[info]   CI (99.9%): [29577.453, 122500.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50.20% complete, ETA 01:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75529.232 ops/s
[info] # Warmup Iteration   2: 85840.923 ops/s
[info] # Warmup Iteration   3: 88099.503 ops/s
[info] # Warmup Iteration   4: 88424.356 ops/s
[info] # Warmup Iteration   5: 87880.249 ops/s
[info] Iteration   1: 87313.961 ops/s
[info]                  ·gc.alloc.rate:                   2025.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              36520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36356.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 88417.882 ops/s
[info]                  ·gc.alloc.rate:                   2051.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              36520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35951.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 88469.795 ops/s
[info]                  ·gc.alloc.rate:                   2052.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              36520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36005.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 88159.890 ops/s
[info]                  ·gc.alloc.rate:                   2045.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              36520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36178.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 88253.688 ops/s
[info]                  ·gc.alloc.rate:                   2047.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              36520.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36199.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   88123.043 ±(99.9%) 1806.325 ops/s [Average]
[info]   (min, avg, max) = (87313.961, 88123.043, 88469.795), stdev = 469.097
[info]   CI (99.9%): [86316.718, 89929.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2044.273 ±(99.9%) 42.402 MB/sec [Average]
[info]   (min, avg, max) = (2025.286, 2044.273, 2052.380), stdev = 11.012
[info]   CI (99.9%): [2001.871, 2086.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   36520.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36520.005, 36520.005, 36520.005), stdev = 0.001
[info]   CI (99.9%): [36520.004, 36520.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1.191 ±(99.9%) 1.599 B/op [Average]
[info]   (min, avg, max) = (0.741, 1.191, 1.876), stdev = 0.415
[info]   CI (99.9%): [≈ 0, 2.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2022.869 ±(99.9%) 20.035 MB/sec [Average]
[info]   (min, avg, max) = (2016.220, 2022.869, 2029.299), stdev = 5.203
[info]   CI (99.9%): [2002.834, 2042.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   36138.258 ±(99.9%) 625.546 B/op [Average]
[info]   (min, avg, max) = (35951.313, 36138.258, 36356.526), stdev = 162.452
[info]   CI (99.9%): [35512.712, 36763.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.40% complete, ETA 01:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30833.513 ops/s
[info] # Warmup Iteration   2: 36343.212 ops/s
[info] # Warmup Iteration   3: 36102.790 ops/s
[info] # Warmup Iteration   4: 36229.756 ops/s
[info] # Warmup Iteration   5: 35807.203 ops/s
[info] Iteration   1: 35444.985 ops/s
[info]                  ·gc.alloc.rate:                   707.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29960.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36535.403 ops/s
[info]                  ·gc.alloc.rate:                   729.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29068.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 36415.424 ops/s
[info]                  ·gc.alloc.rate:                   726.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58094.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 36354.602 ops/s
[info]                  ·gc.alloc.rate:                   725.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29065.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 36424.771 ops/s
[info]                  ·gc.alloc.rate:                   727.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29009.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   36235.037 ±(99.9%) 1719.084 ops/s [Average]
[info]   (min, avg, max) = (35444.985, 36235.037, 36535.403), stdev = 446.441
[info]   CI (99.9%): [34515.953, 37954.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   723.383 ±(99.9%) 34.243 MB/sec [Average]
[info]   (min, avg, max) = (707.630, 723.383, 729.331), stdev = 8.893
[info]   CI (99.9%): [689.139, 757.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31424.011, 31424.012, 31424.012), stdev = 0.001
[info]   CI (99.9%): [31424.010, 31424.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.680 ±(99.9%) 5.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.680, 3.339), stdev = 1.487
[info]   CI (99.9%): [≈ 0, 6.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30.198 ±(99.9%) 254.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.198, 148.298), stdev = 66.024
[info]   CI (99.9%): [≈ 0, 284.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   807.171 ±(99.9%) 1155.234 MB/sec [Average]
[info]   (min, avg, max) = (671.242, 807.171, 1343.838), stdev = 300.011
[info]   CI (99.9%): [≈ 0, 1962.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35039.521 ±(99.9%) 49650.521 B/op [Average]
[info]   (min, avg, max) = (29009.595, 35039.521, 58094.289), stdev = 12894.083
[info]   CI (99.9%): [≈ 0, 84690.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.60% complete, ETA 01:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55249.570 ops/s
[info] # Warmup Iteration   2: 86106.643 ops/s
[info] # Warmup Iteration   3: 86545.484 ops/s
[info] # Warmup Iteration   4: 86769.505 ops/s
[info] # Warmup Iteration   5: 86195.055 ops/s
[info] Iteration   1: 86832.997 ops/s
[info]                  ·gc.alloc.rate:                   913.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12229.383 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 87077.344 ops/s
[info]                  ·gc.alloc.rate:                   915.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24404.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 87160.440 ops/s
[info]                  ·gc.alloc.rate:                   917.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12195.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 86970.854 ops/s
[info]                  ·gc.alloc.rate:                   915.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24469.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 84281.293 ops/s
[info]                  ·gc.alloc.rate:                   886.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12638.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   86464.586 ±(99.9%) 4723.317 ops/s [Average]
[info]   (min, avg, max) = (84281.293, 86464.586, 87160.440), stdev = 1226.630
[info]   CI (99.9%): [81741.268, 91187.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   909.599 ±(99.9%) 50.169 MB/sec [Average]
[info]   (min, avg, max) = (886.422, 909.599, 917.106), stdev = 13.029
[info]   CI (99.9%): [859.429, 959.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.005), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.680 ±(99.9%) 3.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.680, 1.881), stdev = 0.815
[info]   CI (99.9%): [≈ 0, 3.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   945.707 ±(99.9%) 1424.923 MB/sec [Average]
[info]   (min, avg, max) = (674.492, 945.707, 1352.244), stdev = 370.048
[info]   CI (99.9%): [≈ 0, 2370.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17187.510 ±(99.9%) 25492.645 B/op [Average]
[info]   (min, avg, max) = (12195.681, 17187.510, 24469.586), stdev = 6620.359
[info]   CI (99.9%): [≈ 0, 42680.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.80% complete, ETA 01:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242401.235 ops/s
[info] # Warmup Iteration   2: 258453.403 ops/s
[info] # Warmup Iteration   3: 258980.635 ops/s
[info] # Warmup Iteration   4: 265427.703 ops/s
[info] # Warmup Iteration   5: 258285.806 ops/s
[info] Iteration   1: 255391.920 ops/s
[info]                  ·gc.alloc.rate:                   830.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8299.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 266703.053 ops/s
[info]                  ·gc.alloc.rate:                   867.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3966.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 265636.701 ops/s
[info]                  ·gc.alloc.rate:                   863.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3978.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 265846.101 ops/s
[info]                  ·gc.alloc.rate:                   864.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3974.747 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 264844.073 ops/s
[info]                  ·gc.alloc.rate:                   861.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7979.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   263684.370 ±(99.9%) 18031.003 ops/s [Average]
[info]   (min, avg, max) = (255391.920, 263684.370, 266703.053), stdev = 4682.594
[info]   CI (99.9%): [245653.367, 281715.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   857.557 ±(99.9%) 58.693 MB/sec [Average]
[info]   (min, avg, max) = (830.572, 857.557, 867.481), stdev = 15.242
[info]   CI (99.9%): [798.864, 916.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.125 ±(99.9%) 0.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.371), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.646 ±(99.9%) 1419.438 MB/sec [Average]
[info]   (min, avg, max) = (671.127, 940.646, 1346.409), stdev = 368.624
[info]   CI (99.9%): [≈ 0, 2360.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5639.757 ±(99.9%) 8798.947 B/op [Average]
[info]   (min, avg, max) = (3966.355, 5639.757, 8299.846), stdev = 2285.059
[info]   CI (99.9%): [≈ 0, 14438.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.00% complete, ETA 01:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14293.936 ops/s
[info] # Warmup Iteration   2: 24516.794 ops/s
[info] # Warmup Iteration   3: 24351.432 ops/s
[info] # Warmup Iteration   4: 24902.752 ops/s
[info] # Warmup Iteration   5: 24562.731 ops/s
[info] Iteration   1: 25136.123 ops/s
[info]                  ·gc.alloc.rate:                   1180.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84201.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 25253.119 ops/s
[info]                  ·gc.alloc.rate:                   1186.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41971.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 24401.721 ops/s
[info]                  ·gc.alloc.rate:                   1146.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86926.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 24354.921 ops/s
[info]                  ·gc.alloc.rate:                   1144.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87209.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24432.573 ops/s
[info]                  ·gc.alloc.rate:                   1147.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43485.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24715.691 ±(99.9%) 1694.371 ops/s [Average]
[info]   (min, avg, max) = (24354.921, 24715.691, 25253.119), stdev = 440.023
[info]   CI (99.9%): [23021.320, 26410.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1161.135 ±(99.9%) 79.359 MB/sec [Average]
[info]   (min, avg, max) = (1144.222, 1161.135, 1186.263), stdev = 20.609
[info]   CI (99.9%): [1081.775, 1240.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (73960.016, 73960.017, 73960.018), stdev = 0.001
[info]   CI (99.9%): [73960.014, 73960.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.788 ±(99.9%) 4.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.788, 2.595), stdev = 1.166
[info]   CI (99.9%): [≈ 0, 5.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1077.822 ±(99.9%) 1419.362 MB/sec [Average]
[info]   (min, avg, max) = (673.188, 1077.822, 1349.196), stdev = 368.604
[info]   CI (99.9%): [≈ 0, 2497.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68758.711 ±(99.9%) 91635.889 B/op [Average]
[info]   (min, avg, max) = (41971.270, 68758.711, 87209.153), stdev = 23797.549
[info]   CI (99.9%): [≈ 0, 160394.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51.20% complete, ETA 01:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27969.192 ops/s
[info] # Warmup Iteration   2: 30734.392 ops/s
[info] # Warmup Iteration   3: 31195.117 ops/s
[info] # Warmup Iteration   4: 30946.102 ops/s
[info] # Warmup Iteration   5: 31269.468 ops/s
[info] Iteration   1: 31220.541 ops/s
[info]                  ·gc.alloc.rate:                   520.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25788.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 31544.073 ops/s
[info]                  ·gc.alloc.rate:      526.306 MB/sec
[info]                  ·gc.alloc.rate.norm: 26264.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 31421.458 ops/s
[info]                  ·gc.alloc.rate:                   524.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33799.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 31442.973 ops/s
[info]                  ·gc.alloc.rate:                   524.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33775.557 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 31540.327 ops/s
[info]                  ·gc.alloc.rate:                   526.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33537.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   31433.874 ±(99.9%) 506.561 ops/s [Average]
[info]   (min, avg, max) = (31220.541, 31433.874, 31544.073), stdev = 131.552
[info]   CI (99.9%): [30927.313, 31940.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   524.438 ±(99.9%) 8.589 MB/sec [Average]
[info]   (min, avg, max) = (520.816, 524.438, 526.306), stdev = 2.231
[info]   CI (99.9%): [515.849, 533.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   26264.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26264.013, 26264.013, 26264.014), stdev = 0.001
[info]   CI (99.9%): [26264.011, 26264.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.681 ±(99.9%) 5.732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 3.344), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   34.128 ±(99.9%) 287.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.128, 167.522), stdev = 74.582
[info]   CI (99.9%): [≈ 0, 321.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   506.528 ±(99.9%) 1123.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.528, 674.650), stdev = 291.757
[info]   CI (99.9%): [≈ 0, 1629.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   25380.244 ±(99.9%) 56205.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25380.244, 33799.201), stdev = 14596.468
[info]   CI (99.9%): [≈ 0, 81586.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.41% complete, ETA 01:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46296.538 ops/s
[info] # Warmup Iteration   2: 59278.052 ops/s
[info] # Warmup Iteration   3: 59692.506 ops/s
[info] # Warmup Iteration   4: 59759.227 ops/s
[info] # Warmup Iteration   5: 59862.805 ops/s
[info] Iteration   1: 59819.860 ops/s
[info]                  ·gc.alloc.rate:                   887.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35411.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 59796.121 ops/s
[info]                  ·gc.alloc.rate:                   887.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17689.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 59618.685 ops/s
[info]                  ·gc.alloc.rate:                   884.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17706.908 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 59855.206 ops/s
[info]                  ·gc.alloc.rate:                   887.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35275.984 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 59775.545 ops/s
[info]                  ·gc.alloc.rate:                   886.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17660.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   59773.083 ±(99.9%) 351.380 ops/s [Average]
[info]   (min, avg, max) = (59618.685, 59773.083, 59855.206), stdev = 91.252
[info]   CI (99.9%): [59421.703, 60124.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   886.772 ±(99.9%) 5.062 MB/sec [Average]
[info]   (min, avg, max) = (884.589, 886.772, 887.906), stdev = 1.314
[info]   CI (99.9%): [881.710, 891.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.007), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.766 ±(99.9%) 4.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.190), stdev = 1.067
[info]   CI (99.9%): [≈ 0, 4.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   940.117 ±(99.9%) 1418.495 MB/sec [Average]
[info]   (min, avg, max) = (670.542, 940.117, 1346.015), stdev = 368.379
[info]   CI (99.9%): [≈ 0, 2358.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24748.837 ±(99.9%) 37242.239 B/op [Average]
[info]   (min, avg, max) = (17660.412, 24748.837, 35411.013), stdev = 9671.691
[info]   CI (99.9%): [≈ 0, 61991.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.61% complete, ETA 01:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57182.547 ops/s
[info] # Warmup Iteration   2: 94863.768 ops/s
[info] # Warmup Iteration   3: 94469.393 ops/s
[info] # Warmup Iteration   4: 95623.857 ops/s
[info] # Warmup Iteration   5: 95470.520 ops/s
[info] Iteration   1: 95062.414 ops/s
[info]                  ·gc.alloc.rate:                   1301.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22374.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 95418.854 ops/s
[info]                  ·gc.alloc.rate:                   1306.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22311.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 95446.989 ops/s
[info]                  ·gc.alloc.rate:                   1307.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22329.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 95535.347 ops/s
[info]                  ·gc.alloc.rate:                   1308.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11160.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 92811.298 ops/s
[info]                  ·gc.alloc.rate:                   1271.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22986.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   94854.980 ±(99.9%) 4453.696 ops/s [Average]
[info]   (min, avg, max) = (92811.298, 94854.980, 95535.347), stdev = 1156.611
[info]   CI (99.9%): [90401.284, 99308.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1299.140 ±(99.9%) 61.144 MB/sec [Average]
[info]   (min, avg, max) = (1271.088, 1299.140, 1308.473), stdev = 15.879
[info]   CI (99.9%): [1237.996, 1360.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.004 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (21559.984, 21560.004, 21560.025), stdev = 0.015
[info]   CI (99.9%): [21559.948, 21560.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.689 ±(99.9%) 2.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.689, 1.373), stdev = 0.542
[info]   CI (99.9%): [≈ 0, 2.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.008 ±(99.9%) 1163.906 MB/sec [Average]
[info]   (min, avg, max) = (677.311, 1218.008, 1355.169), stdev = 302.263
[info]   CI (99.9%): [54.102, 2381.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20232.462 ±(99.9%) 19558.753 B/op [Average]
[info]   (min, avg, max) = (11160.200, 20232.462, 22986.170), stdev = 5079.346
[info]   CI (99.9%): [673.709, 39791.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.81% complete, ETA 01:04:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263146.473 ops/s
[info] # Warmup Iteration   2: 284602.738 ops/s
[info] # Warmup Iteration   3: 275226.817 ops/s
[info] # Warmup Iteration   4: 279294.285 ops/s
[info] # Warmup Iteration   5: 279310.794 ops/s
[info] Iteration   1: 280335.596 ops/s
[info]                  ·gc.alloc.rate:                   892.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3773.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 280168.891 ops/s
[info]                  ·gc.alloc.rate:                   892.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3775.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 279945.574 ops/s
[info]                  ·gc.alloc.rate:                   891.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7549.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 280424.290 ops/s
[info]                  ·gc.alloc.rate:                   893.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3768.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 279469.231 ops/s
[info]                  ·gc.alloc.rate:                   890.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3781.288 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   280068.716 ±(99.9%) 1469.110 ops/s [Average]
[info]   (min, avg, max) = (279469.231, 280068.716, 280424.290), stdev = 381.523
[info]   CI (99.9%): [278599.606, 281537.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   892.302 ±(99.9%) 4.702 MB/sec [Average]
[info]   (min, avg, max) = (890.384, 892.302, 893.482), stdev = 1.221
[info]   CI (99.9%): [887.599, 897.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.351), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   805.731 ±(99.9%) 1155.168 MB/sec [Average]
[info]   (min, avg, max) = (671.212, 805.731, 1342.375), stdev = 299.994
[info]   CI (99.9%): [≈ 0, 1960.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4529.722 ±(99.9%) 6500.798 B/op [Average]
[info]   (min, avg, max) = (3768.413, 4529.722, 7549.720), stdev = 1688.236
[info]   CI (99.9%): [≈ 0, 11030.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.01% complete, ETA 01:04:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308444.691 ops/s
[info] # Warmup Iteration   2: 322713.065 ops/s
[info] # Warmup Iteration   3: 327723.286 ops/s
[info] # Warmup Iteration   4: 327821.155 ops/s
[info] # Warmup Iteration   5: 328343.043 ops/s
[info] Iteration   1: 318198.711 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 328978.235 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 328649.952 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 327463.724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 325730.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   325804.230 ±(99.9%) 17088.327 ops/s [Average]
[info]   (min, avg, max) = (318198.711, 325804.230, 328978.235), stdev = 4437.784
[info]   CI (99.9%): [308715.903, 342892.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.21% complete, ETA 01:04:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54802.575 ops/s
[info] # Warmup Iteration   2: 70865.939 ops/s
[info] # Warmup Iteration   3: 71054.130 ops/s
[info] # Warmup Iteration   4: 72147.539 ops/s
[info] # Warmup Iteration   5: 71498.299 ops/s
[info] Iteration   1: 71618.585 ops/s
[info]                  ·gc.alloc.rate:                   1061.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14725.176 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 72806.983 ops/s
[info]                  ·gc.alloc.rate:                   1079.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28943.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 72605.071 ops/s
[info]                  ·gc.alloc.rate:                   1076.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14510.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 72635.946 ops/s
[info]                  ·gc.alloc.rate:                   1077.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29008.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 72469.127 ops/s
[info]                  ·gc.alloc.rate:                   1074.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29089.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   72427.142 ±(99.9%) 1801.040 ops/s [Average]
[info]   (min, avg, max) = (71618.585, 72427.142, 72806.983), stdev = 467.724
[info]   CI (99.9%): [70626.102, 74228.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1074.083 ±(99.9%) 26.949 MB/sec [Average]
[info]   (min, avg, max) = (1061.893, 1074.083, 1079.389), stdev = 6.999
[info]   CI (99.9%): [1047.134, 1101.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.000 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.000, 23344.033), stdev = 0.023
[info]   CI (99.9%): [23343.912, 23344.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.631 ±(99.9%) 3.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 1.804), stdev = 0.879
[info]   CI (99.9%): [≈ 0, 4.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.159 ±(99.9%) 1411.624 MB/sec [Average]
[info]   (min, avg, max) = (669.319, 1071.159, 1339.488), stdev = 366.594
[info]   CI (99.9%): [≈ 0, 2482.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23255.339 ±(99.9%) 30363.888 B/op [Average]
[info]   (min, avg, max) = (14510.615, 23255.339, 29089.341), stdev = 7885.405
[info]   CI (99.9%): [≈ 0, 53619.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52.41% complete, ETA 01:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5501.753 ops/s
[info] # Warmup Iteration   2: 6346.584 ops/s
[info] # Warmup Iteration   3: 6477.178 ops/s
[info] # Warmup Iteration   4: 6524.628 ops/s
[info] # Warmup Iteration   5: 6500.859 ops/s
[info] Iteration   1: 6502.322 ops/s
[info]                  ·gc.alloc.rate:                   1603.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              388352.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325019.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6510.273 ops/s
[info]                  ·gc.alloc.rate:                   1606.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              388352.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324781.602 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6484.408 ops/s
[info]                  ·gc.alloc.rate:                   1599.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              388352.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 489691.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6427.056 ops/s
[info]                  ·gc.alloc.rate:                   1585.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              388352.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 329738.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6481.296 ops/s
[info]                  ·gc.alloc.rate:                   1598.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              388360.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327477.853 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   6481.071 ±(99.9%) 125.268 ops/s [Average]
[info]   (min, avg, max) = (6427.056, 6481.071, 6510.273), stdev = 32.532
[info]   CI (99.9%): [6355.803, 6606.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1598.901 ±(99.9%) 30.819 MB/sec [Average]
[info]   (min, avg, max) = (1585.682, 1598.901, 1606.364), stdev = 8.003
[info]   CI (99.9%): [1568.082, 1629.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   388353.791 ±(99.9%) 14.869 B/op [Average]
[info]   (min, avg, max) = (388352.063, 388353.791, 388360.698), stdev = 3.861
[info]   CI (99.9%): [388338.922, 388368.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8.090 ±(99.9%) 32.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.090, 20.153), stdev = 8.439
[info]   CI (99.9%): [≈ 0, 40.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1479.481 ±(99.9%) 1157.083 MB/sec [Average]
[info]   (min, avg, max) = (1342.364, 1479.481, 2016.999), stdev = 300.491
[info]   CI (99.9%): [322.399, 2636.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   359341.857 ±(99.9%) 280694.502 B/op [Average]
[info]   (min, avg, max) = (324781.602, 359341.857, 489691.135), stdev = 72895.471
[info]   CI (99.9%): [78647.356, 640036.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.61% complete, ETA 01:03:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18311.021 ops/s
[info] # Warmup Iteration   2: 25455.385 ops/s
[info] # Warmup Iteration   3: 25049.134 ops/s
[info] # Warmup Iteration   4: 25306.022 ops/s
[info] # Warmup Iteration   5: 23755.879 ops/s
[info] Iteration   1: 21044.526 ops/s
[info]                  ·gc.alloc.rate:                   1095.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100424.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 21348.088 ops/s
[info]                  ·gc.alloc.rate:                   1111.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99008.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21347.895 ops/s
[info]                  ·gc.alloc.rate:                   1111.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49497.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21322.440 ops/s
[info]                  ·gc.alloc.rate:                   1110.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99164.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21357.226 ops/s
[info]                  ·gc.alloc.rate:                   1112.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49525.497 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   21284.035 ±(99.9%) 517.969 ops/s [Average]
[info]   (min, avg, max) = (21044.526, 21284.035, 21357.226), stdev = 134.515
[info]   CI (99.9%): [20766.066, 21802.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1108.427 ±(99.9%) 27.125 MB/sec [Average]
[info]   (min, avg, max) = (1095.884, 1108.427, 1112.294), stdev = 7.044
[info]   CI (99.9%): [1081.302, 1135.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984.019 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (81984.019, 81984.019, 81984.021), stdev = 0.001
[info]   CI (99.9%): [81984.017, 81984.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.856 ±(99.9%) 7.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.856, 4.670), stdev = 2.024
[info]   CI (99.9%): [≈ 0, 9.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1074.250 ±(99.9%) 1415.437 MB/sec [Average]
[info]   (min, avg, max) = (671.241, 1074.250, 1343.171), stdev = 367.584
[info]   CI (99.9%): [≈ 0, 2489.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   79523.954 ±(99.9%) 105519.601 B/op [Average]
[info]   (min, avg, max) = (49497.266, 79523.954, 100424.191), stdev = 27403.105
[info]   CI (99.9%): [≈ 0, 185043.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.81% complete, ETA 01:03:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17586.316 ops/s
[info] # Warmup Iteration   2: 29374.513 ops/s
[info] # Warmup Iteration   3: 29905.177 ops/s
[info] # Warmup Iteration   4: 29790.114 ops/s
[info] # Warmup Iteration   5: 29313.114 ops/s
[info] Iteration   1: 29338.455 ops/s
[info]                  ·gc.alloc.rate:                   1148.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36231.720 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 29333.621 ops/s
[info]                  ·gc.alloc.rate:                   1147.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72513.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29340.734 ops/s
[info]                  ·gc.alloc.rate:                   1148.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72563.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29373.548 ops/s
[info]                  ·gc.alloc.rate:                   1149.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72555.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 29380.784 ops/s
[info]                  ·gc.alloc.rate:                   1149.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36285.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   29353.428 ±(99.9%) 84.601 ops/s [Average]
[info]   (min, avg, max) = (29333.621, 29353.428, 29380.784), stdev = 21.971
[info]   CI (99.9%): [29268.827, 29438.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1148.809 ±(99.9%) 3.660 MB/sec [Average]
[info]   (min, avg, max) = (1147.795, 1148.809, 1149.930), stdev = 0.951
[info]   CI (99.9%): [1145.149, 1152.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61616.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (61616.014, 61616.014, 61616.015), stdev = 0.001
[info]   CI (99.9%): [61616.012, 61616.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.116 ±(99.9%) 5.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.116, 3.351), stdev = 1.368
[info]   CI (99.9%): [≈ 0, 6.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.888 ±(99.9%) 1426.103 MB/sec [Average]
[info]   (min, avg, max) = (675.180, 1081.888, 1353.833), stdev = 370.354
[info]   CI (99.9%): [≈ 0, 2507.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58030.049 ±(99.9%) 76529.312 B/op [Average]
[info]   (min, avg, max) = (36231.720, 58030.049, 72563.217), stdev = 19874.419
[info]   CI (99.9%): [≈ 0, 134559.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.01% complete, ETA 01:03:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463828.337 ops/s
[info] # Warmup Iteration   2: 490982.733 ops/s
[info] # Warmup Iteration   3: 504443.600 ops/s
[info] # Warmup Iteration   4: 504456.457 ops/s
[info] # Warmup Iteration   5: 499524.741 ops/s
[info] Iteration   1: 502791.674 ops/s
[info]                  ·gc.alloc.rate:                   1308.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4203.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 501498.385 ops/s
[info]                  ·gc.alloc.rate:                   1304.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4214.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 505583.502 ops/s
[info]                  ·gc.alloc.rate:                   1315.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2091.151 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 505500.607 ops/s
[info]                  ·gc.alloc.rate:                   1315.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4185.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 500412.642 ops/s
[info]                  ·gc.alloc.rate:                   1302.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4231.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   503157.362 ±(99.9%) 8988.671 ops/s [Average]
[info]   (min, avg, max) = (500412.642, 503157.362, 505583.502), stdev = 2334.329
[info]   CI (99.9%): [494168.691, 512146.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1309.135 ±(99.9%) 23.276 MB/sec [Average]
[info]   (min, avg, max) = (1302.064, 1309.135, 1315.355), stdev = 6.045
[info]   CI (99.9%): [1285.860, 1332.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.169 ±(99.9%) 0.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.169, 0.324), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1209.162 ±(99.9%) 1157.291 MB/sec [Average]
[info]   (min, avg, max) = (671.535, 1209.162, 1345.280), stdev = 300.545
[info]   CI (99.9%): [51.870, 2366.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3785.266 ±(99.9%) 3647.294 B/op [Average]
[info]   (min, avg, max) = (2091.151, 3785.266, 4231.947), stdev = 947.191
[info]   CI (99.9%): [137.972, 7432.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.21% complete, ETA 01:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9236.707 ops/s
[info] # Warmup Iteration   2: 22136.035 ops/s
[info] # Warmup Iteration   3: 22193.266 ops/s
[info] # Warmup Iteration   4: 21880.767 ops/s
[info] # Warmup Iteration   5: 22144.151 ops/s
[info] Iteration   1: 21739.504 ops/s
[info]                  ·gc.alloc.rate:                   1653.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              119696.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97909.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22247.414 ops/s
[info]                  ·gc.alloc.rate:                   1691.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              119696.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143647.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22249.245 ops/s
[info]                  ·gc.alloc.rate:                   1691.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              119696.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95834.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22313.909 ops/s
[info]                  ·gc.alloc.rate:                   1696.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              119696.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143498.001 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22299.070 ops/s
[info]                  ·gc.alloc.rate:                   1695.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              119696.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95784.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   22169.828 ±(99.9%) 933.271 ops/s [Average]
[info]   (min, avg, max) = (21739.504, 22169.828, 22313.909), stdev = 242.367
[info]   CI (99.9%): [21236.558, 23103.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1685.803 ±(99.9%) 70.164 MB/sec [Average]
[info]   (min, avg, max) = (1653.465, 1685.803, 1696.538), stdev = 18.221
[info]   CI (99.9%): [1615.639, 1755.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119696.020 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (119696.018, 119696.020, 119696.025), stdev = 0.003
[info]   CI (99.9%): [119696.009, 119696.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.250 ±(99.9%) 7.379 B/op [Average]
[info]   (min, avg, max) = (1.469, 3.250, 5.890), stdev = 1.916
[info]   CI (99.9%): [≈ 0, 10.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.584 ±(99.9%) 1428.615 MB/sec [Average]
[info]   (min, avg, max) = (1352.505, 1625.584, 2033.901), stdev = 371.007
[info]   CI (99.9%): [196.969, 3054.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   115334.770 ±(99.9%) 99315.263 B/op [Average]
[info]   (min, avg, max) = (95784.515, 115334.770, 143647.326), stdev = 25791.858
[info]   CI (99.9%): [16019.507, 214650.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 01:02:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22085.360 ops/s
[info] # Warmup Iteration   2: 28578.437 ops/s
[info] # Warmup Iteration   3: 27964.231 ops/s
[info] # Warmup Iteration   4: 28785.385 ops/s
[info] # Warmup Iteration   5: 29072.130 ops/s
[info] Iteration   1: 29083.593 ops/s
[info]                  ·gc.alloc.rate:                   1312.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72666.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28686.357 ops/s
[info]                  ·gc.alloc.rate:                   1294.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73663.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 29115.987 ops/s
[info]                  ·gc.alloc.rate:                   1313.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72586.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28882.530 ops/s
[info]                  ·gc.alloc.rate:                   1303.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73244.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28467.282 ops/s
[info]                  ·gc.alloc.rate:                   1284.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74387.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   28847.150 ±(99.9%) 1053.811 ops/s [Average]
[info]   (min, avg, max) = (28467.282, 28847.150, 29115.987), stdev = 273.671
[info]   CI (99.9%): [27793.339, 29900.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1301.634 ±(99.9%) 47.514 MB/sec [Average]
[info]   (min, avg, max) = (1284.475, 1301.634, 1313.798), stdev = 12.339
[info]   CI (99.9%): [1254.119, 1349.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   71032.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (71032.014, 71032.014, 71032.015), stdev = 0.001
[info]   CI (99.9%): [71032.012, 71032.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2.947 ±(99.9%) 7.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.947, 4.506), stdev = 1.882
[info]   CI (99.9%): [≈ 0, 10.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1343.267 ±(99.9%) 4.640 MB/sec [Average]
[info]   (min, avg, max) = (1342.411, 1343.267, 1345.161), stdev = 1.205
[info]   CI (99.9%): [1338.628, 1347.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   73309.668 ±(99.9%) 2875.101 B/op [Average]
[info]   (min, avg, max) = (72586.245, 73309.668, 74387.986), stdev = 746.655
[info]   CI (99.9%): [70434.567, 76184.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.61% complete, ETA 01:02:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50113.630 ops/s
[info] # Warmup Iteration   2: 70468.896 ops/s
[info] # Warmup Iteration   3: 69491.507 ops/s
[info] # Warmup Iteration   4: 70606.213 ops/s
[info] # Warmup Iteration   5: 69847.697 ops/s
[info] Iteration   1: 69938.109 ops/s
[info]                  ·gc.alloc.rate:                   1479.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30190.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 71683.413 ops/s
[info]                  ·gc.alloc.rate:                   1517.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29469.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 71637.100 ops/s
[info]                  ·gc.alloc.rate:                   1515.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29501.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 71412.201 ops/s
[info]                  ·gc.alloc.rate:                   1511.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29638.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 71190.677 ops/s
[info]                  ·gc.alloc.rate:                   1506.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44652.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   71172.300 ±(99.9%) 2762.278 ops/s [Average]
[info]   (min, avg, max) = (69938.109, 71172.300, 71683.413), stdev = 717.355
[info]   CI (99.9%): [68410.022, 73934.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1506.189 ±(99.9%) 58.797 MB/sec [Average]
[info]   (min, avg, max) = (1479.966, 1506.189, 1517.402), stdev = 15.269
[info]   CI (99.9%): [1447.393, 1564.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33312.006, 33312.006, 33312.006), stdev = 0.001
[info]   CI (99.9%): [33312.005, 33312.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.383 ±(99.9%) 2.522 B/op [Average]
[info]   (min, avg, max) = (0.457, 1.383, 1.874), stdev = 0.655
[info]   CI (99.9%): [≈ 0, 3.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.016 ±(99.9%) 1165.314 MB/sec [Average]
[info]   (min, avg, max) = (1341.270, 1478.016, 2019.370), stdev = 302.628
[info]   CI (99.9%): [312.702, 2643.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32690.639 ±(99.9%) 25773.385 B/op [Average]
[info]   (min, avg, max) = (29469.993, 32690.639, 44652.681), stdev = 6693.266
[info]   CI (99.9%): [6917.253, 58464.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.82% complete, ETA 01:01:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109974.209 ops/s
[info] # Warmup Iteration   2: 163052.364 ops/s
[info] # Warmup Iteration   3: 163226.971 ops/s
[info] # Warmup Iteration   4: 164175.727 ops/s
[info] # Warmup Iteration   5: 164588.880 ops/s
[info] Iteration   1: 158999.006 ops/s
[info]                  ·gc.alloc.rate:                   1205.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13377.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 164919.545 ops/s
[info]                  ·gc.alloc.rate:                   1249.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12903.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 162368.769 ops/s
[info]                  ·gc.alloc.rate:                   1230.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13119.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 163865.425 ops/s
[info]                  ·gc.alloc.rate:                   1241.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13012.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 162695.353 ops/s
[info]                  ·gc.alloc.rate:                   1232.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13118.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   162569.619 ±(99.9%) 8611.741 ops/s [Average]
[info]   (min, avg, max) = (158999.006, 162569.619, 164919.545), stdev = 2236.442
[info]   CI (99.9%): [153957.878, 171181.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1231.880 ±(99.9%) 65.000 MB/sec [Average]
[info]   (min, avg, max) = (1205.013, 1231.880, 1249.779), stdev = 16.880
[info]   CI (99.9%): [1166.880, 1296.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11928.002, 11928.003, 11928.003), stdev = 0.001
[info]   CI (99.9%): [11928.002, 11928.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.405 ±(99.9%) 1.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.405, 0.824), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.398 ±(99.9%) 6.721 MB/sec [Average]
[info]   (min, avg, max) = (1351.483, 1353.398, 1355.728), stdev = 1.745
[info]   CI (99.9%): [1346.677, 1360.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13106.550 ±(99.9%) 677.617 B/op [Average]
[info]   (min, avg, max) = (12903.869, 13106.550, 13377.856), stdev = 175.975
[info]   CI (99.9%): [12428.933, 13784.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.02% complete, ETA 01:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1172959.215 ops/s
[info] # Warmup Iteration   2: 1286949.382 ops/s
[info] # Warmup Iteration   3: 1290374.971 ops/s
[info] # Warmup Iteration   4: 1314569.019 ops/s
[info] # Warmup Iteration   5: 1281827.432 ops/s
[info] Iteration   1: 1327376.827 ops/s
[info]                  ·gc.alloc.rate:                   1099.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1592.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1331790.204 ops/s
[info]                  ·gc.alloc.rate:                   1103.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 793.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1297692.002 ops/s
[info]                  ·gc.alloc.rate:                   1074.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1628.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1329799.388 ops/s
[info]                  ·gc.alloc.rate:                   1101.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 795.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1324394.544 ops/s
[info]                  ·gc.alloc.rate:                   1097.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1596.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1322210.593 ±(99.9%) 53839.511 ops/s [Average]
[info]   (min, avg, max) = (1297692.002, 1322210.593, 1331790.204), stdev = 13981.950
[info]   CI (99.9%): [1268371.082, 1376050.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1095.223 ±(99.9%) 44.642 MB/sec [Average]
[info]   (min, avg, max) = (1074.908, 1095.223, 1103.260), stdev = 11.593
[info]   CI (99.9%): [1050.582, 1139.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.055 ±(99.9%) 0.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.148), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074.382 ±(99.9%) 1416.273 MB/sec [Average]
[info]   (min, avg, max) = (671.361, 1074.382, 1343.507), stdev = 367.801
[info]   CI (99.9%): [≈ 0, 2490.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1281.410 ±(99.9%) 1713.186 B/op [Average]
[info]   (min, avg, max) = (793.517, 1281.410, 1628.589), stdev = 444.909
[info]   CI (99.9%): [≈ 0, 2994.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.22% complete, ETA 01:01:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1407089.725 ops/s
[info] # Warmup Iteration   2: 1465445.070 ops/s
[info] # Warmup Iteration   3: 1481503.071 ops/s
[info] # Warmup Iteration   4: 1479492.836 ops/s
[info] # Warmup Iteration   5: 1486672.574 ops/s
[info] Iteration   1: 1484431.374 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1489185.970 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1484547.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1480721.354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1480014.414 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1483780.053 ±(99.9%) 14118.305 ops/s [Average]
[info]   (min, avg, max) = (1480014.414, 1483780.053, 1489185.970), stdev = 3666.479
[info]   CI (99.9%): [1469661.748, 1497898.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.42% complete, ETA 01:01:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86578.145 ops/s
[info] # Warmup Iteration   2: 144623.685 ops/s
[info] # Warmup Iteration   3: 147552.977 ops/s
[info] # Warmup Iteration   4: 147008.848 ops/s
[info] # Warmup Iteration   5: 147297.507 ops/s
[info] Iteration   1: 147090.928 ops/s
[info]                  ·gc.alloc.rate:                   1370.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14458.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 147533.408 ops/s
[info]                  ·gc.alloc.rate:                   1374.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14425.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 147593.339 ops/s
[info]                  ·gc.alloc.rate:                   1375.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14433.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 146738.216 ops/s
[info]                  ·gc.alloc.rate:                   1367.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14527.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 146886.036 ops/s
[info]                  ·gc.alloc.rate:                   1368.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14524.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   147168.385 ±(99.9%) 1472.078 ops/s [Average]
[info]   (min, avg, max) = (146738.216, 147168.385, 147593.339), stdev = 382.294
[info]   CI (99.9%): [145696.308, 148640.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1371.544 ±(99.9%) 13.575 MB/sec [Average]
[info]   (min, avg, max) = (1367.655, 1371.544, 1375.488), stdev = 3.525
[info]   CI (99.9%): [1357.969, 1385.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   14672.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14672.003, 14672.003, 14672.003), stdev = 0.001
[info]   CI (99.9%): [14672.002, 14672.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.534 ±(99.9%) 1.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.534, 0.891), stdev = 0.404
[info]   CI (99.9%): [≈ 0, 2.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353.018 ±(99.9%) 6.584 MB/sec [Average]
[info]   (min, avg, max) = (1350.848, 1353.018, 1355.067), stdev = 1.710
[info]   CI (99.9%): [1346.434, 1359.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14473.912 ±(99.9%) 188.680 B/op [Average]
[info]   (min, avg, max) = (14425.968, 14473.912, 14527.636), stdev = 49.000
[info]   CI (99.9%): [14285.232, 14662.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54.62% complete, ETA 01:00:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20446.635 ops/s
[info] # Warmup Iteration   2: 22844.401 ops/s
[info] # Warmup Iteration   3: 23013.387 ops/s
[info] # Warmup Iteration   4: 23531.208 ops/s
[info] # Warmup Iteration   5: 23418.444 ops/s
[info] Iteration   1: 23519.050 ops/s
[info]                  ·gc.alloc.rate:                   1743.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              116736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89858.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23480.859 ops/s
[info]                  ·gc.alloc.rate:                   1741.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              116736.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135184.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23398.679 ops/s
[info]                  ·gc.alloc.rate:                   1735.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              116736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90543.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23555.092 ops/s
[info]                  ·gc.alloc.rate:                   1746.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              116736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135116.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23434.982 ops/s
[info]                  ·gc.alloc.rate:                   1737.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              116736.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136059.894 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   23477.732 ±(99.9%) 241.844 ops/s [Average]
[info]   (min, avg, max) = (23398.679, 23477.732, 23555.092), stdev = 62.806
[info]   CI (99.9%): [23235.888, 23719.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1740.911 ±(99.9%) 17.848 MB/sec [Average]
[info]   (min, avg, max) = (1735.151, 1740.911, 1746.679), stdev = 4.635
[info]   CI (99.9%): [1723.063, 1758.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   116736.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (116736.017, 116736.018, 116736.019), stdev = 0.001
[info]   CI (99.9%): [116736.015, 116736.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3.907 ±(99.9%) 4.489 B/op [Average]
[info]   (min, avg, max) = (2.786, 3.907, 5.581), stdev = 1.166
[info]   CI (99.9%): [≈ 0, 8.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1750.315 ±(99.9%) 1428.017 MB/sec [Average]
[info]   (min, avg, max) = (1342.339, 1750.315, 2025.263), stdev = 370.852
[info]   CI (99.9%): [322.298, 3178.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   117352.716 ±(99.9%) 95456.699 B/op [Average]
[info]   (min, avg, max) = (89858.840, 117352.716, 136059.894), stdev = 24789.802
[info]   CI (99.9%): [21896.017, 212809.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 01:00:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22932.086 ops/s
[info] # Warmup Iteration   2: 37807.268 ops/s
[info] # Warmup Iteration   3: 38498.918 ops/s
[info] # Warmup Iteration   4: 38491.409 ops/s
[info] # Warmup Iteration   5: 37604.302 ops/s
[info] Iteration   1: 38530.775 ops/s
[info]                  ·gc.alloc.rate:                   1382.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55220.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38563.477 ops/s
[info]                  ·gc.alloc.rate:                   1383.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55215.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38533.520 ops/s
[info]                  ·gc.alloc.rate:                   1382.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55308.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37443.616 ops/s
[info]                  ·gc.alloc.rate:                   1344.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56961.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 37629.192 ops/s
[info]                  ·gc.alloc.rate:                   1350.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56718.936 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   38140.116 ±(99.9%) 2137.690 ops/s [Average]
[info]   (min, avg, max) = (37443.616, 38140.116, 38563.477), stdev = 555.151
[info]   CI (99.9%): [36002.426, 40277.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1368.880 ±(99.9%) 75.715 MB/sec [Average]
[info]   (min, avg, max) = (1344.214, 1368.880, 1383.796), stdev = 19.663
[info]   CI (99.9%): [1293.165, 1444.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56496.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (56496.011, 56496.011, 56496.012), stdev = 0.001
[info]   CI (99.9%): [56496.009, 56496.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.855 ±(99.9%) 4.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.855, 2.551), stdev = 1.041
[info]   CI (99.9%): [≈ 0, 4.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.831 ±(99.9%) 7.395 MB/sec [Average]
[info]   (min, avg, max) = (1351.492, 1353.831, 1356.107), stdev = 1.920
[info]   CI (99.9%): [1346.436, 1361.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   55884.981 ±(99.9%) 3377.291 B/op [Average]
[info]   (min, avg, max) = (55215.397, 55884.981, 56961.654), stdev = 877.072
[info]   CI (99.9%): [52507.690, 59262.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.02% complete, ETA 01:00:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638238.884 ops/s
[info] # Warmup Iteration   2: 738588.811 ops/s
[info] # Warmup Iteration   3: 740924.679 ops/s
[info] # Warmup Iteration   4: 739378.952 ops/s
[info] # Warmup Iteration   5: 747032.257 ops/s
[info] Iteration   1: 747816.841 ops/s
[info]                  ·gc.alloc.rate:                   1459.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2826.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 747820.047 ops/s
[info]                  ·gc.alloc.rate:                   1459.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2827.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 728334.816 ops/s
[info]                  ·gc.alloc.rate:                   1421.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2904.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 730101.116 ops/s
[info]                  ·gc.alloc.rate:                   1424.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2900.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 729220.624 ops/s
[info]                  ·gc.alloc.rate:                   1423.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2908.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   736658.689 ±(99.9%) 39301.745 ops/s [Average]
[info]   (min, avg, max) = (728334.816, 736658.689, 747820.047), stdev = 10206.538
[info]   CI (99.9%): [697356.944, 775960.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1437.754 ±(99.9%) 77.229 MB/sec [Average]
[info]   (min, avg, max) = (1421.676, 1437.754, 1459.794), stdev = 20.056
[info]   CI (99.9%): [1360.526, 1514.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3072.001, 3072.001), stdev = 0.001
[info]   CI (99.9%): [3072.000, 3072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.178 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (0.131, 0.178, 0.225), stdev = 0.045
[info]   CI (99.9%): [0.007, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344.638 ±(99.9%) 6.264 MB/sec [Average]
[info]   (min, avg, max) = (1342.876, 1344.638, 1347.153), stdev = 1.627
[info]   CI (99.9%): [1338.374, 1350.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2873.515 ±(99.9%) 163.456 B/op [Average]
[info]   (min, avg, max) = (2826.347, 2873.515, 2908.239), stdev = 42.449
[info]   CI (99.9%): [2710.059, 3036.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.22% complete, ETA 01:00:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11434.262 ops/s
[info] # Warmup Iteration   2: 26971.883 ops/s
[info] # Warmup Iteration   3: 26536.139 ops/s
[info] # Warmup Iteration   4: 27336.510 ops/s
[info] # Warmup Iteration   5: 27123.666 ops/s
[info] Iteration   1: 26933.546 ops/s
[info]                  ·gc.alloc.rate:                   1960.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118612.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27428.973 ops/s
[info]                  ·gc.alloc.rate:                   1996.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116648.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27456.250 ops/s
[info]                  ·gc.alloc.rate:                   1998.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116648.448 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27468.329 ops/s
[info]                  ·gc.alloc.rate:                   1999.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77776.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27397.674 ops/s
[info]                  ·gc.alloc.rate:                   1994.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117082.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   27336.954 ±(99.9%) 874.663 ops/s [Average]
[info]   (min, avg, max) = (26933.546, 27336.954, 27468.329), stdev = 227.147
[info]   CI (99.9%): [26462.292, 28211.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1989.741 ±(99.9%) 64.182 MB/sec [Average]
[info]   (min, avg, max) = (1960.137, 1989.741, 1999.315), stdev = 16.668
[info]   CI (99.9%): [1925.559, 2053.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114576.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (114576.015, 114576.015, 114576.016), stdev = 0.001
[info]   CI (99.9%): [114576.013, 114576.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.635 ±(99.9%) 5.985 B/op [Average]
[info]   (min, avg, max) = (1.193, 2.635, 4.773), stdev = 1.554
[info]   CI (99.9%): [≈ 0, 8.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.303 ±(99.9%) 1164.864 MB/sec [Average]
[info]   (min, avg, max) = (1357.182, 1898.303, 2037.703), stdev = 302.511
[info]   CI (99.9%): [733.439, 3063.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   109353.731 ±(99.9%) 68042.594 B/op [Average]
[info]   (min, avg, max) = (77776.892, 109353.731, 118612.351), stdev = 17670.446
[info]   CI (99.9%): [41311.137, 177396.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55.42% complete, ETA 00:59:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24005.401 ops/s
[info] # Warmup Iteration   2: 30686.862 ops/s
[info] # Warmup Iteration   3: 30201.590 ops/s
[info] # Warmup Iteration   4: 30025.845 ops/s
[info] # Warmup Iteration   5: 30384.386 ops/s
[info] Iteration   1: 30814.423 ops/s
[info]                  ·gc.alloc.rate:                   1286.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68585.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 30860.641 ops/s
[info]                  ·gc.alloc.rate:                   1288.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68487.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30419.763 ops/s
[info]                  ·gc.alloc.rate:                   1269.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69477.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30687.102 ops/s
[info]                  ·gc.alloc.rate:                   1281.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68939.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30449.147 ops/s
[info]                  ·gc.alloc.rate:                   1271.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69544.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   30646.215 ±(99.9%) 784.577 ops/s [Average]
[info]   (min, avg, max) = (30419.763, 30646.215, 30860.641), stdev = 203.752
[info]   CI (99.9%): [29861.638, 31430.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1279.483 ±(99.9%) 33.116 MB/sec [Average]
[info]   (min, avg, max) = (1269.974, 1279.483, 1288.701), stdev = 8.600
[info]   CI (99.9%): [1246.367, 1312.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65720.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (65720.013, 65720.014, 65720.014), stdev = 0.001
[info]   CI (99.9%): [65720.012, 65720.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1.710 ±(99.9%) 6.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.710, 4.270), stdev = 1.621
[info]   CI (99.9%): [≈ 0, 7.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1343.423 ±(99.9%) 4.226 MB/sec [Average]
[info]   (min, avg, max) = (1342.573, 1343.423, 1345.164), stdev = 1.098
[info]   CI (99.9%): [1339.196, 1347.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   69006.848 ±(99.9%) 1889.752 B/op [Average]
[info]   (min, avg, max) = (68487.307, 69006.848, 69544.719), stdev = 490.762
[info]   CI (99.9%): [67117.096, 70896.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.62% complete, ETA 00:59:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245922.187 ops/s
[info] # Warmup Iteration   2: 354024.782 ops/s
[info] # Warmup Iteration   3: 359571.562 ops/s
[info] # Warmup Iteration   4: 358996.251 ops/s
[info] # Warmup Iteration   5: 359300.020 ops/s
[info] Iteration   1: 358768.303 ops/s
[info]                  ·gc.alloc.rate:                   997.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2961.378 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 358931.762 ops/s
[info]                  ·gc.alloc.rate:                   997.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5926.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 360344.810 ops/s
[info]                  ·gc.alloc.rate:                   1001.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2952.875 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 358814.254 ops/s
[info]                  ·gc.alloc.rate:                   997.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5933.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 359899.470 ops/s
[info]                  ·gc.alloc.rate:                   1000.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2959.438 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   359351.720 ±(99.9%) 2784.649 ops/s [Average]
[info]   (min, avg, max) = (358768.303, 359351.720, 360344.810), stdev = 723.164
[info]   CI (99.9%): [356567.071, 362136.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   999.000 ±(99.9%) 7.764 MB/sec [Average]
[info]   (min, avg, max) = (997.252, 999.000, 1001.917), stdev = 2.016
[info]   CI (99.9%): [991.235, 1006.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4376.001, 4376.001), stdev = 0.001
[info]   CI (99.9%): [4376.001, 4376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.091 ±(99.9%) 0.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.365), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.324 ±(99.9%) 1426.332 MB/sec [Average]
[info]   (min, avg, max) = (674.872, 946.324, 1352.859), stdev = 370.414
[info]   CI (99.9%): [≈ 0, 2372.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4146.725 ±(99.9%) 6268.371 B/op [Average]
[info]   (min, avg, max) = (2952.875, 4146.725, 5933.930), stdev = 1627.876
[info]   CI (99.9%): [≈ 0, 10415.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.82% complete, ETA 00:59:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1572189.550 ops/s
[info] # Warmup Iteration   2: 1624063.135 ops/s
[info] # Warmup Iteration   3: 1613932.414 ops/s
[info] # Warmup Iteration   4: 1629744.480 ops/s
[info] # Warmup Iteration   5: 1644763.221 ops/s
[info] Iteration   1: 1641328.883 ops/s
[info]                  ·gc.alloc.rate:                   959.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1288.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1659005.837 ops/s
[info]                  ·gc.alloc.rate:                   969.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 636.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1692625.753 ops/s
[info]                  ·gc.alloc.rate:                   989.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.334 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1688162.782 ops/s
[info]                  ·gc.alloc.rate:                   986.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1251.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1686918.385 ops/s
[info]                  ·gc.alloc.rate:                   985.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 626.744 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1673608.328 ±(99.9%) 86228.797 ops/s [Average]
[info]   (min, avg, max) = (1641328.883, 1673608.328, 1692625.753), stdev = 22393.345
[info]   CI (99.9%): [1587379.531, 1759837.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   978.091 ±(99.9%) 50.334 MB/sec [Average]
[info]   (min, avg, max) = (959.201, 978.091, 989.277), stdev = 13.072
[info]   CI (99.9%): [927.758, 1028.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.078), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.113 ±(99.9%) 1416.782 MB/sec [Average]
[info]   (min, avg, max) = (671.335, 940.113, 1343.828), stdev = 367.934
[info]   CI (99.9%): [≈ 0, 2356.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   885.779 ±(99.9%) 1353.166 B/op [Average]
[info]   (min, avg, max) = (624.334, 885.779, 1288.908), stdev = 351.413
[info]   CI (99.9%): [≈ 0, 2238.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.02% complete, ETA 00:59:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1810329.447 ops/s
[info] # Warmup Iteration   2: 1917026.462 ops/s
[info] # Warmup Iteration   3: 1916935.833 ops/s
[info] # Warmup Iteration   4: 1913361.185 ops/s
[info] # Warmup Iteration   5: 1918810.482 ops/s
[info] Iteration   1: 1906494.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1922113.622 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1918284.694 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1913313.397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1913892.755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1914819.739 ±(99.9%) 22588.640 ops/s [Average]
[info]   (min, avg, max) = (1906494.229, 1914819.739, 1922113.622), stdev = 5866.198
[info]   CI (99.9%): [1892231.099, 1937408.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.22% complete, ETA 00:58:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134350.989 ops/s
[info] # Warmup Iteration   2: 224770.717 ops/s
[info] # Warmup Iteration   3: 225928.213 ops/s
[info] # Warmup Iteration   4: 224392.104 ops/s
[info] # Warmup Iteration   5: 218718.451 ops/s
[info] Iteration   1: 218842.725 ops/s
[info]                  ·gc.alloc.rate:                   1416.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9720.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 218859.409 ops/s
[info]                  ·gc.alloc.rate:                   1416.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9729.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 224377.606 ops/s
[info]                  ·gc.alloc.rate:                   1452.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9498.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 224936.421 ops/s
[info]                  ·gc.alloc.rate:                   1456.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9479.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 221356.860 ops/s
[info]                  ·gc.alloc.rate:                   1433.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9642.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   221674.604 ±(99.9%) 11225.054 ops/s [Average]
[info]   (min, avg, max) = (218842.725, 221674.604, 224936.421), stdev = 2915.111
[info]   CI (99.9%): [210449.550, 232899.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1435.237 ±(99.9%) 72.964 MB/sec [Average]
[info]   (min, avg, max) = (1416.883, 1435.237, 1456.318), stdev = 18.948
[info]   CI (99.9%): [1362.273, 1508.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10192.002, 10192.002, 10192.002), stdev = 0.001
[info]   CI (99.9%): [10192.002, 10192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.234 ±(99.9%) 1.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.234, 0.730), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353.687 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (1351.302, 1353.687, 1355.875), stdev = 1.787
[info]   CI (99.9%): [1346.806, 1360.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9614.149 ±(99.9%) 458.035 B/op [Average]
[info]   (min, avg, max) = (9479.928, 9614.149, 9729.085), stdev = 118.950
[info]   CI (99.9%): [9156.114, 10072.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56.43% complete, ETA 00:58:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29606.208 ops/s
[info] # Warmup Iteration   2: 33502.833 ops/s
[info] # Warmup Iteration   3: 33886.414 ops/s
[info] # Warmup Iteration   4: 34265.876 ops/s
[info] # Warmup Iteration   5: 33361.463 ops/s
[info] Iteration   1: 34322.071 ops/s
[info]                  ·gc.alloc.rate:                   1769.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              81152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61573.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34308.704 ops/s
[info]                  ·gc.alloc.rate:                   1768.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              81152.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92527.703 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34134.463 ops/s
[info]                  ·gc.alloc.rate:                   1760.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              81152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93116.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 33742.980 ops/s
[info]                  ·gc.alloc.rate:                   1739.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              81152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62910.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 34160.791 ops/s
[info]                  ·gc.alloc.rate:                   1760.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              81152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93334.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   34133.802 ±(99.9%) 902.042 ops/s [Average]
[info]   (min, avg, max) = (33742.980, 34133.802, 34322.071), stdev = 234.258
[info]   CI (99.9%): [33231.759, 35035.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1759.697 ±(99.9%) 46.330 MB/sec [Average]
[info]   (min, avg, max) = (1739.545, 1759.697, 1769.130), stdev = 12.032
[info]   CI (99.9%): [1713.367, 1806.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   81152.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81152.012, 81152.012, 81152.013), stdev = 0.001
[info]   CI (99.9%): [81152.011, 81152.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2.495 ±(99.9%) 4.936 B/op [Average]
[info]   (min, avg, max) = (0.954, 2.495, 3.839), stdev = 1.282
[info]   CI (99.9%): [≈ 0, 7.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1750.489 ±(99.9%) 1423.949 MB/sec [Average]
[info]   (min, avg, max) = (1342.307, 1750.489, 2025.239), stdev = 369.795
[info]   CI (99.9%): [326.540, 3174.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   80692.593 ±(99.9%) 64891.994 B/op [Average]
[info]   (min, avg, max) = (61573.145, 80692.593, 93334.618), stdev = 16852.245
[info]   CI (99.9%): [15800.600, 145584.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.63% complete, ETA 00:58:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51079.606 ops/s
[info] # Warmup Iteration   2: 71560.562 ops/s
[info] # Warmup Iteration   3: 71629.099 ops/s
[info] # Warmup Iteration   4: 72099.828 ops/s
[info] # Warmup Iteration   5: 72543.091 ops/s
[info] Iteration   1: 72614.563 ops/s
[info]                  ·gc.alloc.rate:                   1458.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29010.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 72829.610 ops/s
[info]                  ·gc.alloc.rate:                   1463.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43393.770 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 72650.839 ops/s
[info]                  ·gc.alloc.rate:                   1459.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29018.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 72489.334 ops/s
[info]                  ·gc.alloc.rate:                   1456.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29127.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 72643.148 ops/s
[info]                  ·gc.alloc.rate:                   1459.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29107.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   72645.499 ±(99.9%) 468.749 ops/s [Average]
[info]   (min, avg, max) = (72489.334, 72645.499, 72829.610), stdev = 121.733
[info]   CI (99.9%): [72176.749, 73114.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1459.450 ±(99.9%) 9.873 MB/sec [Average]
[info]   (min, avg, max) = (1456.248, 1459.450, 1463.345), stdev = 2.564
[info]   CI (99.9%): [1449.578, 1469.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31624.006, 31624.006, 31624.006), stdev = 0.001
[info]   CI (99.9%): [31624.005, 31624.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.541 ±(99.9%) 1.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.541, 0.904), stdev = 0.494
[info]   CI (99.9%): [≈ 0, 2.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1473.987 ±(99.9%) 1149.461 MB/sec [Average]
[info]   (min, avg, max) = (1338.041, 1473.987, 2007.969), stdev = 298.511
[info]   CI (99.9%): [324.526, 2623.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31931.370 ±(99.9%) 24674.493 B/op [Average]
[info]   (min, avg, max) = (29010.415, 31931.370, 43393.770), stdev = 6407.887
[info]   CI (99.9%): [7256.877, 56605.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.83% complete, ETA 00:57:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45131.358 ops/s
[info] # Warmup Iteration   2: 82154.975 ops/s
[info] # Warmup Iteration   3: 82529.332 ops/s
[info] # Warmup Iteration   4: 81340.942 ops/s
[info] # Warmup Iteration   5: 81996.371 ops/s
[info] Iteration   1: 83614.130 ops/s
[info]                  ·gc.alloc.rate:                   946.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25343.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 83804.646 ops/s
[info]                  ·gc.alloc.rate:                   948.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12672.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 83543.119 ops/s
[info]                  ·gc.alloc.rate:                   945.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12711.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 83529.748 ops/s
[info]                  ·gc.alloc.rate:                   944.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25451.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 83317.615 ops/s
[info]                  ·gc.alloc.rate:                   942.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12771.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   83561.852 ±(99.9%) 674.455 ops/s [Average]
[info]   (min, avg, max) = (83317.615, 83561.852, 83804.646), stdev = 175.154
[info]   CI (99.9%): [82887.397, 84236.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   945.305 ±(99.9%) 7.935 MB/sec [Average]
[info]   (min, avg, max) = (942.451, 945.305, 948.119), stdev = 2.061
[info]   CI (99.9%): [937.369, 953.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17808.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17808.005, 17808.005, 17808.005), stdev = 0.001
[info]   CI (99.9%): [17808.004, 17808.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.549 ±(99.9%) 3.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 1.961), stdev = 0.813
[info]   CI (99.9%): [≈ 0, 3.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.396 ±(99.9%) 1420.208 MB/sec [Average]
[info]   (min, avg, max) = (674.536, 944.396, 1350.418), stdev = 368.824
[info]   CI (99.9%): [≈ 0, 2364.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17790.053 ±(99.9%) 26742.144 B/op [Average]
[info]   (min, avg, max) = (12672.936, 17790.053, 25451.970), stdev = 6944.850
[info]   CI (99.9%): [≈ 0, 44532.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.03% complete, ETA 00:57:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92033.056 ops/s
[info] # Warmup Iteration   2: 109330.266 ops/s
[info] # Warmup Iteration   3: 109670.708 ops/s
[info] # Warmup Iteration   4: 109398.950 ops/s
[info] # Warmup Iteration   5: 109330.740 ops/s
[info] Iteration   1: 108921.556 ops/s
[info]                  ·gc.alloc.rate:                   1146.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19364.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 108942.072 ops/s
[info]                  ·gc.alloc.rate:                   1147.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19343.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 109222.162 ops/s
[info]                  ·gc.alloc.rate:                   1149.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19297.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 109341.372 ops/s
[info]                  ·gc.alloc.rate:                   1151.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9640.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 108847.701 ops/s
[info]                  ·gc.alloc.rate:                   1146.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19387.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   109054.973 ±(99.9%) 824.713 ops/s [Average]
[info]   (min, avg, max) = (108847.701, 109054.973, 109341.372), stdev = 214.175
[info]   CI (99.9%): [108230.259, 109879.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1148.279 ±(99.9%) 8.682 MB/sec [Average]
[info]   (min, avg, max) = (1146.129, 1148.279, 1151.348), stdev = 2.255
[info]   CI (99.9%): [1139.597, 1156.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.003, 16576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.841 ±(99.9%) 2.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 1.500), stdev = 0.651
[info]   CI (99.9%): [≈ 0, 3.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1205.446 ±(99.9%) 1153.482 MB/sec [Average]
[info]   (min, avg, max) = (669.586, 1205.446, 1340.495), stdev = 299.556
[info]   CI (99.9%): [51.964, 2358.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17406.463 ±(99.9%) 16718.245 B/op [Average]
[info]   (min, avg, max) = (9640.062, 17406.463, 19387.041), stdev = 4341.675
[info]   CI (99.9%): [688.218, 34124.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.23% complete, ETA 00:57:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21450.818 ops/s
[info] # Warmup Iteration   2: 39293.207 ops/s
[info] # Warmup Iteration   3: 38937.269 ops/s
[info] # Warmup Iteration   4: 39104.174 ops/s
[info] # Warmup Iteration   5: 39401.822 ops/s
[info] Iteration   1: 39466.320 ops/s
[info]                  ·gc.alloc.rate:                   1961.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              78248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80933.482 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 39543.449 ops/s
[info]                  ·gc.alloc.rate:                   1965.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              78248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80908.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 39059.176 ops/s
[info]                  ·gc.alloc.rate:                   1941.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              78248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81993.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39686.759 ops/s
[info]                  ·gc.alloc.rate:                   1972.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              78248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80775.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 39752.542 ops/s
[info]                  ·gc.alloc.rate:                   1975.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              78248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53796.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   39501.649 ±(99.9%) 1047.471 ops/s [Average]
[info]   (min, avg, max) = (39059.176, 39501.649, 39752.542), stdev = 272.025
[info]   CI (99.9%): [38454.178, 40549.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1963.609 ±(99.9%) 51.487 MB/sec [Average]
[info]   (min, avg, max) = (1941.849, 1963.609, 1975.889), stdev = 13.371
[info]   CI (99.9%): [1912.121, 2015.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78248.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (78248.010, 78248.010, 78248.010), stdev = 0.001
[info]   CI (99.9%): [78248.010, 78248.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.994 ±(99.9%) 3.691 B/op [Average]
[info]   (min, avg, max) = (0.828, 1.994, 3.355), stdev = 0.958
[info]   CI (99.9%): [≈ 0, 5.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.286 ±(99.9%) 1162.109 MB/sec [Average]
[info]   (min, avg, max) = (1358.439, 1898.286, 2036.381), stdev = 301.796
[info]   CI (99.9%): [736.177, 3060.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75681.395 ±(99.9%) 47147.335 B/op [Average]
[info]   (min, avg, max) = (53796.118, 75681.395, 81993.388), stdev = 12244.013
[info]   CI (99.9%): [28534.060, 122828.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57.43% complete, ETA 00:57:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62993.229 ops/s
[info] # Warmup Iteration   2: 76520.646 ops/s
[info] # Warmup Iteration   3: 77965.818 ops/s
[info] # Warmup Iteration   4: 78461.041 ops/s
[info] # Warmup Iteration   5: 77245.988 ops/s
[info] Iteration   1: 76545.530 ops/s
[info]                  ·gc.alloc.rate:                   1328.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27526.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 76988.154 ops/s
[info]                  ·gc.alloc.rate:                   1336.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27367.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 76592.332 ops/s
[info]                  ·gc.alloc.rate:                   1329.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27524.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 76927.172 ops/s
[info]                  ·gc.alloc.rate:                   1335.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27439.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 78053.875 ops/s
[info]                  ·gc.alloc.rate:                   1354.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27076.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   77021.413 ±(99.9%) 2347.425 ops/s [Average]
[info]   (min, avg, max) = (76545.530, 77021.413, 78053.875), stdev = 609.619
[info]   CI (99.9%): [74673.988, 79368.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1336.697 ±(99.9%) 40.931 MB/sec [Average]
[info]   (min, avg, max) = (1328.289, 1336.697, 1354.593), stdev = 10.630
[info]   CI (99.9%): [1295.767, 1377.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   27320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27320.005, 27320.005, 27320.006), stdev = 0.001
[info]   CI (99.9%): [27320.005, 27320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.678 ±(99.9%) 2.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.678, 1.679), stdev = 0.636
[info]   CI (99.9%): [≈ 0, 3.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1339.919 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (1338.339, 1339.919, 1342.528), stdev = 1.738
[info]   CI (99.9%): [1333.228, 1346.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   27387.031 ±(99.9%) 714.951 B/op [Average]
[info]   (min, avg, max) = (27076.663, 27387.031, 27526.712), stdev = 185.670
[info]   CI (99.9%): [26672.081, 28101.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.63% complete, ETA 00:56:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94878.224 ops/s
[info] # Warmup Iteration   2: 122382.250 ops/s
[info] # Warmup Iteration   3: 126480.006 ops/s
[info] # Warmup Iteration   4: 125809.782 ops/s
[info] # Warmup Iteration   5: 126356.823 ops/s
[info] Iteration   1: 125170.978 ops/s
[info]                  ·gc.alloc.rate:                   553.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6432.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 124246.944 ops/s
[info]                  ·gc.alloc.rate:                   549.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8521.716 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 124539.795 ops/s
[info]                  ·gc.alloc.rate:      550.643 MB/sec
[info]                  ·gc.alloc.rate.norm: 6960.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 123715.169 ops/s
[info]                  ·gc.alloc.rate:                   546.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8558.490 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 123491.376 ops/s
[info]                  ·gc.alloc.rate:                   546.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8539.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   124232.853 ±(99.9%) 2577.543 ops/s [Average]
[info]   (min, avg, max) = (123491.376, 124232.853, 125170.978), stdev = 669.380
[info]   CI (99.9%): [121655.310, 126810.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   549.332 ±(99.9%) 11.379 MB/sec [Average]
[info]   (min, avg, max) = (546.069, 549.332, 553.465), stdev = 2.955
[info]   CI (99.9%): [537.953, 560.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6960.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6960.003, 6960.003, 6960.004), stdev = 0.001
[info]   CI (99.9%): [6960.003, 6960.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.858 ±(99.9%) 7.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 4.269), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 8.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.872 ±(99.9%) 92.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.872, 54.069), stdev = 24.148
[info]   CI (99.9%): [≈ 0, 103.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   505.384 ±(99.9%) 1120.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.384, 672.785), stdev = 290.925
[info]   CI (99.9%): [≈ 0, 1625.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6410.446 ±(99.9%) 14239.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6410.446, 8558.490), stdev = 3697.989
[info]   CI (99.9%): [≈ 0, 20650.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.83% complete, ETA 00:56:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118145.754 ops/s
[info] # Warmup Iteration   2: 166700.786 ops/s
[info] # Warmup Iteration   3: 160650.454 ops/s
[info] # Warmup Iteration   4: 165571.681 ops/s
[info] # Warmup Iteration   5: 166061.058 ops/s
[info] Iteration   1: 165153.238 ops/s
[info]                  ·gc.alloc.rate:      245.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 166032.618 ops/s
[info]                  ·gc.alloc.rate:                   246.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4849.169 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 166358.189 ops/s
[info]                  ·gc.alloc.rate:      246.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 165529.196 ops/s
[info]                  ·gc.alloc.rate:                   245.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4863.666 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 166764.146 ops/s
[info]                  ·gc.alloc.rate:      247.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   165967.478 ±(99.9%) 2470.614 ops/s [Average]
[info]   (min, avg, max) = (165153.238, 165967.478, 166764.146), stdev = 641.611
[info]   CI (99.9%): [163496.864, 168438.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   246.269 ±(99.9%) 3.647 MB/sec [Average]
[info]   (min, avg, max) = (245.052, 246.269, 247.442), stdev = 0.947
[info]   CI (99.9%): [242.622, 249.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204.569 ±(99.9%) 1078.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.569, 511.439), stdev = 280.118
[info]   CI (99.9%): [≈ 0, 1283.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1942.567 ±(99.9%) 10242.614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1942.567, 4863.666), stdev = 2659.974
[info]   CI (99.9%): [≈ 0, 12185.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.03% complete, ETA 00:56:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 651189.389 ops/s
[info] # Warmup Iteration   2: 714746.861 ops/s
[info] # Warmup Iteration   3: 730742.741 ops/s
[info] # Warmup Iteration   4: 733645.078 ops/s
[info] # Warmup Iteration   5: 744544.643 ops/s
[info] Iteration   1: 745789.433 ops/s
[info]                  ·gc.alloc.rate:                   924.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1415.498 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 749965.468 ops/s
[info]                  ·gc.alloc.rate:                   929.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1407.629 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 747503.873 ops/s
[info]                  ·gc.alloc.rate:                   927.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2818.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 753419.399 ops/s
[info]                  ·gc.alloc.rate:                   934.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1398.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 749780.726 ops/s
[info]                  ·gc.alloc.rate:                   929.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2810.984 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   749291.780 ±(99.9%) 11092.463 ops/s [Average]
[info]   (min, avg, max) = (745789.433, 749291.780, 753419.399), stdev = 2880.677
[info]   CI (99.9%): [738199.317, 760384.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   929.176 ±(99.9%) 13.461 MB/sec [Average]
[info]   (min, avg, max) = (924.953, 929.176, 934.216), stdev = 3.496
[info]   CI (99.9%): [915.715, 942.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.263), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   937.634 ±(99.9%) 1410.142 MB/sec [Average]
[info]   (min, avg, max) = (669.247, 937.634, 1338.909), stdev = 366.209
[info]   CI (99.9%): [≈ 0, 2347.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1970.268 ±(99.9%) 2969.206 B/op [Average]
[info]   (min, avg, max) = (1398.359, 1970.268, 2818.870), stdev = 771.093
[info]   CI (99.9%): [≈ 0, 4939.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.23% complete, ETA 00:56:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674536.446 ops/s
[info] # Warmup Iteration   2: 716697.108 ops/s
[info] # Warmup Iteration   3: 727952.224 ops/s
[info] # Warmup Iteration   4: 728784.331 ops/s
[info] # Warmup Iteration   5: 724885.878 ops/s
[info] Iteration   1: 728235.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 722870.150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 724705.034 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 726307.258 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 728847.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   726193.122 ±(99.9%) 9527.387 ops/s [Average]
[info]   (min, avg, max) = (722870.150, 726193.122, 728847.504), stdev = 2474.232
[info]   CI (99.9%): [716665.735, 735720.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.43% complete, ETA 00:55:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156308.633 ops/s
[info] # Warmup Iteration   2: 204072.539 ops/s
[info] # Warmup Iteration   3: 205258.299 ops/s
[info] # Warmup Iteration   4: 206474.310 ops/s
[info] # Warmup Iteration   5: 202082.206 ops/s
[info] Iteration   1: 204082.994 ops/s
[info]                  ·gc.alloc.rate:                   666.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5180.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 204443.599 ops/s
[info]                  ·gc.alloc.rate:                   667.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5171.247 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 205439.469 ops/s
[info]                  ·gc.alloc.rate:                   671.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5123.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 205225.845 ops/s
[info]                  ·gc.alloc.rate:                   670.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5128.585 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 195311.534 ops/s
[info]                  ·gc.alloc.rate:                   638.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5378.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   202900.688 ±(99.9%) 16475.339 ops/s [Average]
[info]   (min, avg, max) = (195311.534, 202900.688, 205439.469), stdev = 4278.593
[info]   CI (99.9%): [186425.349, 219376.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   663.032 ±(99.9%) 53.852 MB/sec [Average]
[info]   (min, avg, max) = (638.241, 663.032, 671.290), stdev = 13.985
[info]   CI (99.9%): [609.180, 716.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.967 ±(99.9%) 8.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.967, 4.753), stdev = 2.116
[info]   CI (99.9%): [≈ 0, 9.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.464 ±(99.9%) 62.860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.464, 36.664), stdev = 16.324
[info]   CI (99.9%): [≈ 0, 70.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   669.555 ±(99.9%) 7.302 MB/sec [Average]
[info]   (min, avg, max) = (667.316, 669.555, 671.543), stdev = 1.896
[info]   CI (99.9%): [662.252, 676.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5196.365 ±(99.9%) 403.586 B/op [Average]
[info]   (min, avg, max) = (5123.219, 5196.365, 5378.331), stdev = 104.810
[info]   CI (99.9%): [4792.779, 5599.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58.63% complete, ETA 00:55:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14978.395 ops/s
[info] # Warmup Iteration   2: 16702.463 ops/s
[info] # Warmup Iteration   3: 17130.400 ops/s
[info] # Warmup Iteration   4: 16990.194 ops/s
[info] # Warmup Iteration   5: 17170.184 ops/s
[info] Iteration   1: 17143.040 ops/s
[info]                  ·gc.alloc.rate:                   1650.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              151544.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122923.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17061.164 ops/s
[info]                  ·gc.alloc.rate:                   1642.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              151533.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185393.448 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17254.823 ops/s
[info]                  ·gc.alloc.rate:                   1661.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              151520.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122421.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17214.909 ops/s
[info]                  ·gc.alloc.rate:                   1656.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              151520.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184322.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17187.155 ops/s
[info]                  ·gc.alloc.rate:                   1654.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              151520.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123295.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   17172.218 ±(99.9%) 285.918 ops/s [Average]
[info]   (min, avg, max) = (17061.164, 17172.218, 17254.823), stdev = 74.252
[info]   CI (99.9%): [16886.300, 17458.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1652.945 ±(99.9%) 27.557 MB/sec [Average]
[info]   (min, avg, max) = (1642.381, 1652.945, 1661.153), stdev = 7.156
[info]   CI (99.9%): [1625.388, 1680.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   151527.479 ±(99.9%) 41.927 B/op [Average]
[info]   (min, avg, max) = (151520.024, 151527.479, 151544.024), stdev = 10.888
[info]   CI (99.9%): [151485.552, 151569.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4.965 ±(99.9%) 6.658 B/op [Average]
[info]   (min, avg, max) = (3.797, 4.965, 7.681), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 11.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1610.329 ±(99.9%) 1413.774 MB/sec [Average]
[info]   (min, avg, max) = (1338.414, 1610.329, 2015.641), stdev = 367.153
[info]   CI (99.9%): [196.556, 3024.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   147671.355 ±(99.9%) 130730.403 B/op [Average]
[info]   (min, avg, max) = (122421.962, 147671.355, 185393.448), stdev = 33950.271
[info]   CI (99.9%): [16940.951, 278401.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.84% complete, ETA 00:55:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91770.768 ops/s
[info] # Warmup Iteration   2: 131111.180 ops/s
[info] # Warmup Iteration   3: 131392.105 ops/s
[info] # Warmup Iteration   4: 132268.617 ops/s
[info] # Warmup Iteration   5: 132433.039 ops/s
[info] Iteration   1: 132169.061 ops/s
[info]                  ·gc.alloc.rate:                   1627.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23965.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 131294.309 ops/s
[info]                  ·gc.alloc.rate:                   1617.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16097.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 132009.810 ops/s
[info]                  ·gc.alloc.rate:                   1625.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24043.897 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 132365.371 ops/s
[info]                  ·gc.alloc.rate:                   1629.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16006.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 132199.919 ops/s
[info]                  ·gc.alloc.rate:                   1627.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24074.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   132007.694 ±(99.9%) 1610.661 ops/s [Average]
[info]   (min, avg, max) = (131294.309, 132007.694, 132365.371), stdev = 418.284
[info]   CI (99.9%): [130397.033, 133618.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1625.601 ±(99.9%) 18.703 MB/sec [Average]
[info]   (min, avg, max) = (1617.348, 1625.601, 1629.918), stdev = 4.857
[info]   CI (99.9%): [1606.898, 1644.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.003), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.496 ±(99.9%) 1.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.496, 1.239), stdev = 0.464
[info]   CI (99.9%): [≈ 0, 2.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1747.818 ±(99.9%) 1417.739 MB/sec [Average]
[info]   (min, avg, max) = (1343.114, 1747.818, 2021.631), stdev = 368.182
[info]   CI (99.9%): [330.079, 3165.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20837.554 ±(99.9%) 16823.513 B/op [Average]
[info]   (min, avg, max) = (16006.436, 20837.554, 24074.388), stdev = 4369.013
[info]   CI (99.9%): [4014.041, 37661.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.04% complete, ETA 00:54:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108462.468 ops/s
[info] # Warmup Iteration   2: 175046.131 ops/s
[info] # Warmup Iteration   3: 171638.556 ops/s
[info] # Warmup Iteration   4: 175645.510 ops/s
[info] # Warmup Iteration   5: 175801.870 ops/s
[info] Iteration   1: 175625.785 ops/s
[info]                  ·gc.alloc.rate:                   933.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12093.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 175928.470 ops/s
[info]                  ·gc.alloc.rate:                   935.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6042.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 175568.177 ops/s
[info]                  ·gc.alloc.rate:                   933.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6054.644 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 175446.561 ops/s
[info]                  ·gc.alloc.rate:                   932.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12129.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 175763.672 ops/s
[info]                  ·gc.alloc.rate:                   934.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6059.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   175666.533 ±(99.9%) 714.627 ops/s [Average]
[info]   (min, avg, max) = (175446.561, 175666.533, 175928.470), stdev = 185.586
[info]   CI (99.9%): [174951.906, 176381.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   933.728 ±(99.9%) 3.812 MB/sec [Average]
[info]   (min, avg, max) = (932.612, 933.728, 935.172), stdev = 0.990
[info]   CI (99.9%): [929.916, 937.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.003), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.299 ±(99.9%) 1.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.299, 1.120), stdev = 0.487
[info]   CI (99.9%): [≈ 0, 2.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   945.564 ±(99.9%) 1423.101 MB/sec [Average]
[info]   (min, avg, max) = (675.221, 945.564, 1351.817), stdev = 369.575
[info]   CI (99.9%): [≈ 0, 2368.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8475.912 ±(99.9%) 12779.493 B/op [Average]
[info]   (min, avg, max) = (6042.189, 8475.912, 12129.381), stdev = 3318.794
[info]   CI (99.9%): [≈ 0, 21255.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.24% complete, ETA 00:54:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447434.561 ops/s
[info] # Warmup Iteration   2: 478957.948 ops/s
[info] # Warmup Iteration   3: 478779.924 ops/s
[info] # Warmup Iteration   4: 476953.438 ops/s
[info] # Warmup Iteration   5: 483432.015 ops/s
[info] Iteration   1: 483005.470 ops/s
[info]                  ·gc.alloc.rate:                   937.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2189.955 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 483397.080 ops/s
[info]                  ·gc.alloc.rate:                   938.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4373.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 479176.073 ops/s
[info]                  ·gc.alloc.rate:                   930.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2205.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 479505.524 ops/s
[info]                  ·gc.alloc.rate:                   930.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2203.842 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 477690.883 ops/s
[info]                  ·gc.alloc.rate:                   927.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4425.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   480555.006 ±(99.9%) 9681.944 ops/s [Average]
[info]   (min, avg, max) = (477690.883, 480555.006, 483397.080), stdev = 2514.370
[info]   CI (99.9%): [470873.062, 490236.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   932.895 ±(99.9%) 18.758 MB/sec [Average]
[info]   (min, avg, max) = (927.403, 932.895, 938.457), stdev = 4.871
[info]   CI (99.9%): [914.137, 951.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.109 ±(99.9%) 0.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.274), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.092 ±(99.9%) 1416.386 MB/sec [Average]
[info]   (min, avg, max) = (671.223, 940.092, 1343.172), stdev = 367.831
[info]   CI (99.9%): [≈ 0, 2356.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3079.619 ±(99.9%) 4640.211 B/op [Average]
[info]   (min, avg, max) = (2189.955, 3079.619, 4425.117), stdev = 1205.048
[info]   CI (99.9%): [≈ 0, 7719.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.44% complete, ETA 00:54:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31994.080 ops/s
[info] # Warmup Iteration   2: 66889.611 ops/s
[info] # Warmup Iteration   3: 68652.978 ops/s
[info] # Warmup Iteration   4: 66615.297 ops/s
[info] # Warmup Iteration   5: 67303.937 ops/s
[info] Iteration   1: 67157.677 ops/s
[info]                  ·gc.alloc.rate:                   2834.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63597.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 67358.256 ops/s
[info]                  ·gc.alloc.rate:                   2843.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63487.331 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 67685.223 ops/s
[info]                  ·gc.alloc.rate:                   2856.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63241.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 68681.825 ops/s
[info]                  ·gc.alloc.rate:                   2899.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77952.132 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 68453.529 ops/s
[info]                  ·gc.alloc.rate:                   2889.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62606.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   67867.302 ±(99.9%) 2585.213 ops/s [Average]
[info]   (min, avg, max) = (67157.677, 67867.302, 68681.825), stdev = 671.372
[info]   CI (99.9%): [65282.089, 70452.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2864.624 ±(99.9%) 109.336 MB/sec [Average]
[info]   (min, avg, max) = (2834.688, 2864.624, 2899.204), stdev = 28.394
[info]   CI (99.9%): [2755.288, 2973.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.006), stdev = 0.001
[info]   CI (99.9%): [66448.005, 66448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.547 ±(99.9%) 2.438 B/op [Average]
[info]   (min, avg, max) = (0.479, 1.547, 1.951), stdev = 0.633
[info]   CI (99.9%): [≈ 0, 3.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2854.374 ±(99.9%) 1177.031 MB/sec [Average]
[info]   (min, avg, max) = (2713.079, 2854.374, 3401.142), stdev = 305.671
[info]   CI (99.9%): [1677.342, 4031.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66176.928 ±(99.9%) 25390.156 B/op [Average]
[info]   (min, avg, max) = (62606.124, 66176.928, 77952.132), stdev = 6593.743
[info]   CI (99.9%): [40786.772, 91567.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59.64% complete, ETA 00:54:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105786.625 ops/s
[info] # Warmup Iteration   2: 125028.652 ops/s
[info] # Warmup Iteration   3: 131032.304 ops/s
[info] # Warmup Iteration   4: 133863.708 ops/s
[info] # Warmup Iteration   5: 133876.772 ops/s
[info] Iteration   1: 133670.858 ops/s
[info]                  ·gc.alloc.rate:                   1504.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15812.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 133115.145 ops/s
[info]                  ·gc.alloc.rate:                   1498.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15877.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 133417.762 ops/s
[info]                  ·gc.alloc.rate:                   1502.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15857.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 133246.509 ops/s
[info]                  ·gc.alloc.rate:                   1499.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23847.903 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 132364.502 ops/s
[info]                  ·gc.alloc.rate:                   1490.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16026.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   133162.955 ±(99.9%) 1895.916 ops/s [Average]
[info]   (min, avg, max) = (132364.502, 133162.955, 133670.858), stdev = 492.363
[info]   CI (99.9%): [131267.039, 135058.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1499.053 ±(99.9%) 20.854 MB/sec [Average]
[info]   (min, avg, max) = (1490.315, 1499.053, 1504.599), stdev = 5.416
[info]   CI (99.9%): [1478.198, 1519.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17720.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17720.003, 17720.003, 17720.003), stdev = 0.001
[info]   CI (99.9%): [17720.003, 17720.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.492 ±(99.9%) 1.162 B/op [Average]
[info]   (min, avg, max) = (0.245, 0.492, 0.984), stdev = 0.302
[info]   CI (99.9%): [≈ 0, 1.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1479.168 ±(99.9%) 1160.849 MB/sec [Average]
[info]   (min, avg, max) = (1342.616, 1479.168, 2018.438), stdev = 301.469
[info]   CI (99.9%): [318.320, 2640.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   17484.408 ±(99.9%) 13701.413 B/op [Average]
[info]   (min, avg, max) = (15812.290, 17484.408, 23847.903), stdev = 3558.213
[info]   CI (99.9%): [3782.995, 31185.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.84% complete, ETA 00:53:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136924.779 ops/s
[info] # Warmup Iteration   2: 175921.772 ops/s
[info] # Warmup Iteration   3: 175566.515 ops/s
[info] # Warmup Iteration   4: 173471.702 ops/s
[info] # Warmup Iteration   5: 172137.979 ops/s
[info] Iteration   1: 172981.611 ops/s
[info]                  ·gc.alloc.rate:                   592.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4654.278 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 172638.278 ops/s
[info]                  ·gc.alloc.rate:                   591.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6145.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 172161.946 ops/s
[info]                  ·gc.alloc.rate:                   589.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6162.685 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 171881.849 ops/s
[info]                  ·gc.alloc.rate:                   588.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6154.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 171980.216 ops/s
[info]                  ·gc.alloc.rate:                   589.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6150.739 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   172328.780 ±(99.9%) 1796.910 ops/s [Average]
[info]   (min, avg, max) = (171881.849, 172328.780, 172981.611), stdev = 466.652
[info]   CI (99.9%): [170531.870, 174125.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   590.242 ±(99.9%) 6.094 MB/sec [Average]
[info]   (min, avg, max) = (588.689, 590.242, 592.436), stdev = 1.583
[info]   CI (99.9%): [584.148, 596.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.002, 5392.002, 5392.002), stdev = 0.001
[info]   CI (99.9%): [5392.002, 5392.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.725 ±(99.9%) 6.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.523), stdev = 1.564
[info]   CI (99.9%): [≈ 0, 6.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.616 ±(99.9%) 54.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.616, 32.124), stdev = 14.262
[info]   CI (99.9%): [≈ 0, 61.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.638 ±(99.9%) 278.266 MB/sec [Average]
[info]   (min, avg, max) = (511.380, 640.638, 674.002), stdev = 72.265
[info]   CI (99.9%): [362.371, 918.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5853.500 ±(99.9%) 2581.525 B/op [Average]
[info]   (min, avg, max) = (4654.278, 5853.500, 6162.685), stdev = 670.414
[info]   CI (99.9%): [3271.974, 8435.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.04% complete, ETA 00:53:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194001.896 ops/s
[info] # Warmup Iteration   2: 293393.387 ops/s
[info] # Warmup Iteration   3: 294474.018 ops/s
[info] # Warmup Iteration   4: 293058.483 ops/s
[info] # Warmup Iteration   5: 294994.147 ops/s
[info] Iteration   1: 293318.445 ops/s
[info]                  ·gc.alloc.rate:                   289.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2744.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 295768.783 ops/s
[info]                  ·gc.alloc.rate:      291.518 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 292937.828 ops/s
[info]                  ·gc.alloc.rate:                   288.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2748.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 294222.245 ops/s
[info]                  ·gc.alloc.rate:                   290.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2736.373 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 294611.920 ops/s
[info]                  ·gc.alloc.rate:      290.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   294171.844 ±(99.9%) 4304.078 ops/s [Average]
[info]   (min, avg, max) = (292937.828, 294171.844, 295768.783), stdev = 1117.755
[info]   CI (99.9%): [289867.766, 298475.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   289.992 ±(99.9%) 4.169 MB/sec [Average]
[info]   (min, avg, max) = (288.794, 289.992, 291.518), stdev = 1.083
[info]   CI (99.9%): [285.823, 294.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.112), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.843 ±(99.9%) 1078.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.843, 511.430), stdev = 280.108
[info]   CI (99.9%): [≈ 0, 1385.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1645.918 ±(99.9%) 5785.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1645.918, 2748.392), stdev = 1502.517
[info]   CI (99.9%): [≈ 0, 7431.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:53:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1054939.098 ops/s
[info] # Warmup Iteration   2: 1119122.203 ops/s
[info] # Warmup Iteration   3: 1115621.312 ops/s
[info] # Warmup Iteration   4: 1119809.845 ops/s
[info] # Warmup Iteration   5: 1128554.761 ops/s
[info] Iteration   1: 1128406.469 ops/s
[info]                  ·gc.alloc.rate:                   837.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 941.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1120880.265 ops/s
[info]                  ·gc.alloc.rate:                   831.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1887.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1093229.965 ops/s
[info]                  ·gc.alloc.rate:                   811.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 966.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1113571.790 ops/s
[info]                  ·gc.alloc.rate:                   826.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 948.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1125031.418 ops/s
[info]                  ·gc.alloc.rate:                   834.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 939.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1116223.981 ±(99.9%) 53889.203 ops/s [Average]
[info]   (min, avg, max) = (1093229.965, 1116223.981, 1128406.469), stdev = 13994.855
[info]   CI (99.9%): [1062334.778, 1170113.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   828.135 ±(99.9%) 39.899 MB/sec [Average]
[info]   (min, avg, max) = (811.072, 828.135, 837.043), stdev = 10.362
[info]   CI (99.9%): [788.236, 868.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.058), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.426 ±(99.9%) 1157.084 MB/sec [Average]
[info]   (min, avg, max) = (671.236, 806.426, 1343.955), stdev = 300.491
[info]   CI (99.9%): [≈ 0, 1963.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1136.694 ±(99.9%) 1616.785 B/op [Average]
[info]   (min, avg, max) = (939.270, 1136.694, 1887.538), stdev = 419.874
[info]   CI (99.9%): [≈ 0, 2753.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.44% complete, ETA 00:53:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1125266.443 ops/s
[info] # Warmup Iteration   2: 1190217.049 ops/s
[info] # Warmup Iteration   3: 1186484.832 ops/s
[info] # Warmup Iteration   4: 1186422.001 ops/s
[info] # Warmup Iteration   5: 1189249.702 ops/s
[info] Iteration   1: 1188955.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1186413.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1189977.726 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1185557.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1186632.492 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1187507.375 ±(99.9%) 7194.134 ops/s [Average]
[info]   (min, avg, max) = (1185557.436, 1187507.375, 1189977.726), stdev = 1868.294
[info]   CI (99.9%): [1180313.241, 1194701.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.64% complete, ETA 00:52:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177531.348 ops/s
[info] # Warmup Iteration   2: 303579.670 ops/s
[info] # Warmup Iteration   3: 307086.417 ops/s
[info] # Warmup Iteration   4: 297789.330 ops/s
[info] # Warmup Iteration   5: 307106.813 ops/s
[info] Iteration   1: 306895.751 ops/s
[info]                  ·gc.alloc.rate:                   837.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6915.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 307543.680 ops/s
[info]                  ·gc.alloc.rate:                   839.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3453.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 306089.432 ops/s
[info]                  ·gc.alloc.rate:                   835.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3472.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 300607.576 ops/s
[info]                  ·gc.alloc.rate:                   820.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3536.136 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 307233.619 ops/s
[info]                  ·gc.alloc.rate:                   838.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6926.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   305674.012 ±(99.9%) 11103.956 ops/s [Average]
[info]   (min, avg, max) = (300607.576, 305674.012, 307543.680), stdev = 2883.662
[info]   CI (99.9%): [294570.055, 316777.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   834.111 ±(99.9%) 30.103 MB/sec [Average]
[info]   (min, avg, max) = (820.364, 834.111, 839.078), stdev = 7.818
[info]   CI (99.9%): [804.007, 864.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.192 ±(99.9%) 1.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.534), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   944.959 ±(99.9%) 1423.532 MB/sec [Average]
[info]   (min, avg, max) = (674.483, 944.959, 1351.720), stdev = 369.687
[info]   CI (99.9%): [≈ 0, 2368.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4860.838 ±(99.9%) 7242.758 B/op [Average]
[info]   (min, avg, max) = (3453.289, 4860.838, 6926.541), stdev = 1880.921
[info]   CI (99.9%): [≈ 0, 12103.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60.84% complete, ETA 00:52:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24609.879 ops/s
[info] # Warmup Iteration   2: 27331.106 ops/s
[info] # Warmup Iteration   3: 28355.196 ops/s
[info] # Warmup Iteration   4: 28796.293 ops/s
[info] # Warmup Iteration   5: 28723.367 ops/s
[info] Iteration   1: 28605.241 ops/s
[info]                  ·gc.alloc.rate:                   1700.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              93576.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110820.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 28869.541 ops/s
[info]                  ·gc.alloc.rate:                   1716.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              93576.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73282.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28714.978 ops/s
[info]                  ·gc.alloc.rate:                   1707.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              93576.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110651.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28736.879 ops/s
[info]                  ·gc.alloc.rate:                   1708.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              93576.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73816.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28623.102 ops/s
[info]                  ·gc.alloc.rate:                   1701.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              93576.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111318.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   28709.948 ±(99.9%) 407.178 ops/s [Average]
[info]   (min, avg, max) = (28605.241, 28709.948, 28869.541), stdev = 105.743
[info]   CI (99.9%): [28302.770, 29117.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1706.730 ±(99.9%) 24.940 MB/sec [Average]
[info]   (min, avg, max) = (1700.222, 1706.730, 1716.368), stdev = 6.477
[info]   CI (99.9%): [1681.790, 1731.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   93576.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (93576.014, 93576.014, 93576.015), stdev = 0.001
[info]   CI (99.9%): [93576.013, 93576.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2.971 ±(99.9%) 7.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.971, 4.581), stdev = 1.912
[info]   CI (99.9%): [≈ 0, 10.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1749.621 ±(99.9%) 1419.188 MB/sec [Average]
[info]   (min, avg, max) = (1344.141, 1749.621, 2023.882), stdev = 368.559
[info]   CI (99.9%): [330.433, 3168.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   95977.695 ±(99.9%) 78846.895 B/op [Average]
[info]   (min, avg, max) = (73282.298, 95977.695, 111318.038), stdev = 20476.288
[info]   CI (99.9%): [17130.800, 174824.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.04% complete, ETA 00:52:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2917.859 ops/s
[info] # Warmup Iteration   2: 5082.711 ops/s
[info] # Warmup Iteration   3: 5155.693 ops/s
[info] # Warmup Iteration   4: 5101.379 ops/s
[info] # Warmup Iteration   5: 5206.375 ops/s
[info] Iteration   1: 5213.887 ops/s
[info]                  ·gc.alloc.rate:                   1026.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 402138.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5227.534 ops/s
[info]                  ·gc.alloc.rate:                   1029.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200129.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5219.994 ops/s
[info]                  ·gc.alloc.rate:                   1028.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400872.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5232.857 ops/s
[info]                  ·gc.alloc.rate:                   1030.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199938.641 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5213.859 ops/s
[info]                  ·gc.alloc.rate:                   1026.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 401334.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5221.626 ±(99.9%) 32.441 ops/s [Average]
[info]   (min, avg, max) = (5213.859, 5221.626, 5232.857), stdev = 8.425
[info]   CI (99.9%): [5189.185, 5254.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1028.327 ±(99.9%) 6.363 MB/sec [Average]
[info]   (min, avg, max) = (1026.740, 1028.327, 1030.582), stdev = 1.652
[info]   CI (99.9%): [1021.964, 1034.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310024.081 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (310024.078, 310024.081, 310024.084), stdev = 0.003
[info]   CI (99.9%): [310024.068, 310024.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.761 ±(99.9%) 21.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.761, 12.521), stdev = 5.602
[info]   CI (99.9%): [≈ 0, 25.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1063.912 ±(99.9%) 1403.753 MB/sec [Average]
[info]   (min, avg, max) = (664.503, 1063.912, 1331.805), stdev = 364.550
[info]   CI (99.9%): [≈ 0, 2467.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   320882.807 ±(99.9%) 424803.427 B/op [Average]
[info]   (min, avg, max) = (199938.641, 320882.807, 402138.447), stdev = 110320.101
[info]   CI (99.9%): [≈ 0, 745686.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.24% complete, ETA 00:52:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2409.308 ops/s
[info] # Warmup Iteration   2: 4997.465 ops/s
[info] # Warmup Iteration   3: 5241.034 ops/s
[info] # Warmup Iteration   4: 5298.343 ops/s
[info] # Warmup Iteration   5: 5312.617 ops/s
[info] Iteration   1: 5300.183 ops/s
[info]                  ·gc.alloc.rate:                   984.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398506.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5317.976 ops/s
[info]                  ·gc.alloc.rate:                   987.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198973.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5289.722 ops/s
[info]                  ·gc.alloc.rate:                   982.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400349.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5298.616 ops/s
[info]                  ·gc.alloc.rate:                   984.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200020.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5264.846 ops/s
[info]                  ·gc.alloc.rate:                   978.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403145.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   5294.268 ±(99.9%) 74.625 ops/s [Average]
[info]   (min, avg, max) = (5264.846, 5294.268, 5317.976), stdev = 19.380
[info]   CI (99.9%): [5219.644, 5368.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   983.524 ±(99.9%) 13.722 MB/sec [Average]
[info]   (min, avg, max) = (978.034, 983.524, 987.814), stdev = 3.564
[info]   CI (99.9%): [969.802, 997.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292456.079 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (292456.077, 292456.079, 292456.083), stdev = 0.003
[info]   CI (99.9%): [292456.067, 292456.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.442 ±(99.9%) 31.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.442, 18.664), stdev = 8.105
[info]   CI (99.9%): [≈ 0, 38.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1076.106 ±(99.9%) 1418.231 MB/sec [Average]
[info]   (min, avg, max) = (672.062, 1076.106, 1348.201), stdev = 368.310
[info]   CI (99.9%): [≈ 0, 2494.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   320198.972 ±(99.9%) 424334.452 B/op [Average]
[info]   (min, avg, max) = (198973.209, 320198.972, 403145.320), stdev = 110198.310
[info]   CI (99.9%): [≈ 0, 744533.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.45% complete, ETA 00:51:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31103.161 ops/s
[info] # Warmup Iteration   2: 38739.508 ops/s
[info] # Warmup Iteration   3: 38486.062 ops/s
[info] # Warmup Iteration   4: 38748.771 ops/s
[info] # Warmup Iteration   5: 39016.183 ops/s
[info] Iteration   1: 39435.852 ops/s
[info]                  ·gc.alloc.rate:                   647.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26742.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39512.315 ops/s
[info]                  ·gc.alloc.rate:                   648.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26691.990 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 39102.553 ops/s
[info]                  ·gc.alloc.rate:                   641.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26809.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39035.130 ops/s
[info]                  ·gc.alloc.rate:      640.648 MB/sec
[info]                  ·gc.alloc.rate.norm: 25840.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38872.347 ops/s
[info]                  ·gc.alloc.rate:                   638.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26967.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   39191.639 ±(99.9%) 1048.995 ops/s [Average]
[info]   (min, avg, max) = (38872.347, 39191.639, 39512.315), stdev = 272.421
[info]   CI (99.9%): [38142.644, 40240.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   643.270 ±(99.9%) 17.166 MB/sec [Average]
[info]   (min, avg, max) = (638.083, 643.270, 648.521), stdev = 4.458
[info]   CI (99.9%): [626.104, 660.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25840.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25840.010, 25840.011, 25840.011), stdev = 0.001
[info]   CI (99.9%): [25840.009, 25840.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1.117 ±(99.9%) 9.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.117, 5.545), stdev = 2.475
[info]   CI (99.9%): [≈ 0, 10.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.605 ±(99.9%) 380.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.605, 221.365), stdev = 98.815
[info]   CI (99.9%): [≈ 0, 425.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   534.320 ±(99.9%) 1150.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.320, 669.904), stdev = 298.701
[info]   CI (99.9%): [≈ 0, 1684.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21442.219 ±(99.9%) 46157.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21442.219, 26967.467), stdev = 11987.014
[info]   CI (99.9%): [≈ 0, 67599.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:51:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2025.912 ops/s
[info] # Warmup Iteration   2: 4469.268 ops/s
[info] # Warmup Iteration   3: 4507.589 ops/s
[info] # Warmup Iteration   4: 4488.083 ops/s
[info] # Warmup Iteration   5: 4583.331 ops/s
[info] Iteration   1: 4470.843 ops/s
[info]                  ·gc.alloc.rate:                   1138.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 472937.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4564.198 ops/s
[info]                  ·gc.alloc.rate:                   1163.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 464005.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4526.105 ops/s
[info]                  ·gc.alloc.rate:                   1152.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 468697.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4580.161 ops/s
[info]                  ·gc.alloc.rate:                   1166.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231707.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4569.952 ops/s
[info]                  ·gc.alloc.rate:                   1164.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 464887.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4542.252 ±(99.9%) 172.701 ops/s [Average]
[info]   (min, avg, max) = (4470.843, 4542.252, 4580.161), stdev = 44.850
[info]   CI (99.9%): [4369.551, 4714.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1157.189 ±(99.9%) 44.520 MB/sec [Average]
[info]   (min, avg, max) = (1138.780, 1157.189, 1166.912), stdev = 11.562
[info]   CI (99.9%): [1112.668, 1201.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401024.093 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (401024.089, 401024.093, 401024.098), stdev = 0.005
[info]   CI (99.9%): [401024.074, 401024.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.435 ±(99.9%) 12.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.435, 7.177), stdev = 3.209
[info]   CI (99.9%): [≈ 0, 13.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1212.020 ±(99.9%) 1157.674 MB/sec [Average]
[info]   (min, avg, max) = (674.229, 1212.020, 1349.601), stdev = 300.644
[info]   CI (99.9%): [54.346, 2369.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   420446.982 ±(99.9%) 406504.153 B/op [Average]
[info]   (min, avg, max) = (231707.377, 420446.982, 472937.789), stdev = 105567.838
[info]   CI (99.9%): [13942.829, 826951.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61.85% complete, ETA 00:51:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3326.150 ops/s
[info] # Warmup Iteration   2: 4844.408 ops/s
[info] # Warmup Iteration   3: 4942.232 ops/s
[info] # Warmup Iteration   4: 4989.690 ops/s
[info] # Warmup Iteration   5: 5001.690 ops/s
[info] Iteration   1: 4979.782 ops/s
[info]                  ·gc.alloc.rate:                   955.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210515.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5011.354 ops/s
[info]                  ·gc.alloc.rate:                   962.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417924.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4994.398 ops/s
[info]                  ·gc.alloc.rate:                   958.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209463.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4994.498 ops/s
[info]                  ·gc.alloc.rate:                   958.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209421.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5002.478 ops/s
[info]                  ·gc.alloc.rate:                   960.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418256.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   4996.502 ±(99.9%) 44.918 ops/s [Average]
[info]   (min, avg, max) = (4979.782, 4996.502, 5011.354), stdev = 11.665
[info]   CI (99.9%): [4951.584, 5041.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   959.141 ±(99.9%) 9.294 MB/sec [Average]
[info]   (min, avg, max) = (955.744, 959.141, 962.315), stdev = 2.414
[info]   CI (99.9%): [949.847, 968.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   302160.085 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (302160.082, 302160.085, 302160.088), stdev = 0.003
[info]   CI (99.9%): [302160.073, 302160.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6.548 ±(99.9%) 30.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.548, 19.645), stdev = 8.020
[info]   CI (99.9%): [≈ 0, 37.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   931.025 ±(99.9%) 1402.855 MB/sec [Average]
[info]   (min, avg, max) = (664.481, 931.025, 1330.999), stdev = 364.317
[info]   CI (99.9%): [≈ 0, 2333.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   293116.244 ±(99.9%) 439306.120 B/op [Average]
[info]   (min, avg, max) = (209421.422, 293116.244, 418256.934), stdev = 114086.404
[info]   CI (99.9%): [≈ 0, 732422.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62.05% complete, ETA 00:50:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9475.992 ops/s
[info] # Warmup Iteration   2: 14040.877 ops/s
[info] # Warmup Iteration   3: 13877.878 ops/s
[info] # Warmup Iteration   4: 14436.649 ops/s
[info] # Warmup Iteration   5: 14399.775 ops/s
[info] Iteration   1: 14455.748 ops/s
[info]                  ·gc.alloc.rate:                   810.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72453.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 14442.490 ops/s
[info]                  ·gc.alloc.rate:                   809.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72518.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14415.873 ops/s
[info]                  ·gc.alloc.rate:                   807.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72503.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 14370.575 ops/s
[info]                  ·gc.alloc.rate:                   805.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              88181.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72730.644 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14362.689 ops/s
[info]                  ·gc.alloc.rate:                   804.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145542.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14409.475 ±(99.9%) 160.787 ops/s [Average]
[info]   (min, avg, max) = (14362.689, 14409.475, 14455.748), stdev = 41.756
[info]   CI (99.9%): [14248.688, 14570.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   807.394 ±(99.9%) 9.659 MB/sec [Average]
[info]   (min, avg, max) = (804.573, 807.394, 810.084), stdev = 2.508
[info]   CI (99.9%): [797.735, 817.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88197.861 ±(99.9%) 53.764 B/op [Average]
[info]   (min, avg, max) = (88181.183, 88197.861, 88208.036), stdev = 13.962
[info]   CI (99.9%): [88144.097, 88251.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.279 ±(99.9%) 15.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.279, 9.124), stdev = 3.951
[info]   CI (99.9%): [≈ 0, 17.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   797.350 ±(99.9%) 1142.047 MB/sec [Average]
[info]   (min, avg, max) = (663.981, 797.350, 1327.898), stdev = 296.586
[info]   CI (99.9%): [≈ 0, 1939.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87149.614 ±(99.9%) 125695.305 B/op [Average]
[info]   (min, avg, max) = (72453.135, 87149.614, 145542.290), stdev = 32642.671
[info]   CI (99.9%): [≈ 0, 212844.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.25% complete, ETA 00:50:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10393.840 ops/s
[info] # Warmup Iteration   2: 16380.268 ops/s
[info] # Warmup Iteration   3: 16075.416 ops/s
[info] # Warmup Iteration   4: 16154.954 ops/s
[info] # Warmup Iteration   5: 16613.819 ops/s
[info] Iteration   1: 16635.320 ops/s
[info]                  ·gc.alloc.rate:                   865.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              81943.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63554.835 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16622.820 ops/s
[info]                  ·gc.alloc.rate:                   865.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63604.529 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 16503.690 ops/s
[info]                  ·gc.alloc.rate:                   859.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128245.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16625.388 ops/s
[info]                  ·gc.alloc.rate:                   865.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              81943.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63746.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16330.571 ops/s
[info]                  ·gc.alloc.rate:                   850.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64890.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16543.558 ±(99.9%) 503.359 ops/s [Average]
[info]   (min, avg, max) = (16330.571, 16543.558, 16635.320), stdev = 130.721
[info]   CI (99.9%): [16040.198, 17046.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   861.148 ±(99.9%) 26.058 MB/sec [Average]
[info]   (min, avg, max) = (850.149, 861.148, 865.912), stdev = 6.767
[info]   CI (99.9%): [835.091, 887.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81944.027 ±(99.9%) 0.457 B/op [Average]
[info]   (min, avg, max) = (81943.907, 81944.027, 81944.146), stdev = 0.119
[info]   CI (99.9%): [81943.570, 81944.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.380 ±(99.9%) 9.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.380, 5.955), stdev = 2.583
[info]   CI (99.9%): [≈ 0, 12.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   806.808 ±(99.9%) 1157.210 MB/sec [Average]
[info]   (min, avg, max) = (671.592, 806.808, 1344.400), stdev = 300.524
[info]   CI (99.9%): [≈ 0, 1964.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   76808.353 ±(99.9%) 110742.202 B/op [Average]
[info]   (min, avg, max) = (63554.835, 76808.353, 128245.393), stdev = 28759.398
[info]   CI (99.9%): [≈ 0, 187550.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.45% complete, ETA 00:50:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240530.918 ops/s
[info] # Warmup Iteration   2: 260299.605 ops/s
[info] # Warmup Iteration   3: 253932.526 ops/s
[info] # Warmup Iteration   4: 256808.623 ops/s
[info] # Warmup Iteration   5: 253313.254 ops/s
[info] Iteration   1: 253695.976 ops/s
[info]                  ·gc.alloc.rate:                   919.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4132.384 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 253527.323 ops/s
[info]                  ·gc.alloc.rate:                   918.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8264.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 252662.145 ops/s
[info]                  ·gc.alloc.rate:                   915.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4144.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 246767.210 ops/s
[info]                  ·gc.alloc.rate:                   894.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4239.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 252834.564 ops/s
[info]                  ·gc.alloc.rate:                   916.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8280.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   251897.444 ±(99.9%) 11172.425 ops/s [Average]
[info]   (min, avg, max) = (246767.210, 251897.444, 253695.976), stdev = 2901.443
[info]   CI (99.9%): [240725.019, 263069.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   912.658 ±(99.9%) 40.354 MB/sec [Average]
[info]   (min, avg, max) = (894.112, 912.658, 919.081), stdev = 10.480
[info]   CI (99.9%): [872.304, 953.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5704.002, 5704.002, 5704.002), stdev = 0.001
[info]   CI (99.9%): [5704.001, 5704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.208 ±(99.9%) 0.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.208, 0.389), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   931.280 ±(99.9%) 1402.804 MB/sec [Average]
[info]   (min, avg, max) = (664.595, 931.280, 1330.865), stdev = 364.304
[info]   CI (99.9%): [≈ 0, 2334.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5812.378 ±(99.9%) 8648.796 B/op [Average]
[info]   (min, avg, max) = (4132.384, 5812.378, 8280.043), stdev = 2246.065
[info]   CI (99.9%): [≈ 0, 14461.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.65% complete, ETA 00:50:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284361.924 ops/s
[info] # Warmup Iteration   2: 295969.711 ops/s
[info] # Warmup Iteration   3: 301639.454 ops/s
[info] # Warmup Iteration   4: 300970.386 ops/s
[info] # Warmup Iteration   5: 301533.623 ops/s
[info] Iteration   1: 301746.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 301955.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 301546.653 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 300555.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 301140.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   301388.946 ±(99.9%) 2135.725 ops/s [Average]
[info]   (min, avg, max) = (300555.465, 301388.946, 301955.905), stdev = 554.641
[info]   CI (99.9%): [299253.221, 303524.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.85% complete, ETA 00:49:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10593.306 ops/s
[info] # Warmup Iteration   2: 14968.904 ops/s
[info] # Warmup Iteration   3: 15296.215 ops/s
[info] # Warmup Iteration   4: 15117.079 ops/s
[info] # Warmup Iteration   5: 15146.151 ops/s
[info] Iteration   1: 15528.554 ops/s
[info]                  ·gc.alloc.rate:                   886.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              89848.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67236.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15524.588 ops/s
[info]                  ·gc.alloc.rate:                   885.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              89848.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134515.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15471.559 ops/s
[info]                  ·gc.alloc.rate:                   882.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              89839.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67479.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15572.296 ops/s
[info]                  ·gc.alloc.rate:                   888.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67151.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15541.862 ops/s
[info]                  ·gc.alloc.rate:                   886.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134638.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15527.772 ±(99.9%) 140.845 ops/s [Average]
[info]   (min, avg, max) = (15471.559, 15527.772, 15572.296), stdev = 36.577
[info]   CI (99.9%): [15386.927, 15668.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   886.135 ±(99.9%) 7.918 MB/sec [Average]
[info]   (min, avg, max) = (882.994, 886.135, 888.649), stdev = 2.056
[info]   CI (99.9%): [878.217, 894.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89839.974 ±(99.9%) 30.959 B/op [Average]
[info]   (min, avg, max) = (89832.009, 89839.974, 89848.152), stdev = 8.040
[info]   CI (99.9%): [89809.014, 89870.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.792 ±(99.9%) 14.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.792, 8.415), stdev = 3.766
[info]   CI (99.9%): [≈ 0, 18.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   929.256 ±(99.9%) 1400.843 MB/sec [Average]
[info]   (min, avg, max) = (663.223, 929.256, 1329.306), stdev = 363.794
[info]   CI (99.9%): [≈ 0, 2330.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   94204.433 ±(99.9%) 141917.126 B/op [Average]
[info]   (min, avg, max) = (67151.680, 94204.433, 134638.642), stdev = 36855.427
[info]   CI (99.9%): [≈ 0, 236121.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63.05% complete, ETA 00:49:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4251.313 ops/s
[info] # Warmup Iteration   2: 4860.144 ops/s
[info] # Warmup Iteration   3: 4874.488 ops/s
[info] # Warmup Iteration   4: 4936.559 ops/s
[info] # Warmup Iteration   5: 4933.065 ops/s
[info] Iteration   1: 4940.532 ops/s
[info]                  ·gc.alloc.rate:                   1595.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              508432.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 423610.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4950.113 ops/s
[info]                  ·gc.alloc.rate:                   1599.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              508432.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 423072.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4929.812 ops/s
[info]                  ·gc.alloc.rate:                   1592.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              508432.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1999.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 638351.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4941.846 ops/s
[info]                  ·gc.alloc.rate:                   1596.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              508432.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425751.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4941.360 ops/s
[info]                  ·gc.alloc.rate:                   1595.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              508432.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 640325.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   4940.733 ±(99.9%) 27.829 ops/s [Average]
[info]   (min, avg, max) = (4929.812, 4940.733, 4950.113), stdev = 7.227
[info]   CI (99.9%): [4912.904, 4968.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1595.795 ±(99.9%) 9.221 MB/sec [Average]
[info]   (min, avg, max) = (1592.329, 1595.795, 1599.060), stdev = 2.395
[info]   CI (99.9%): [1586.574, 1605.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   508432.084 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (508432.082, 508432.084, 508432.089), stdev = 0.003
[info]   CI (99.9%): [508432.072, 508432.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   15.920 ±(99.9%) 46.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.920, 26.522), stdev = 12.047
[info]   CI (99.9%): [≈ 0, 62.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1601.137 ±(99.9%) 1418.369 MB/sec [Average]
[info]   (min, avg, max) = (1329.295, 1601.137, 2009.998), stdev = 368.346
[info]   CI (99.9%): [182.768, 3019.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   510222.245 ±(99.9%) 453885.322 B/op [Average]
[info]   (min, avg, max) = (423072.465, 510222.245, 640325.037), stdev = 117872.577
[info]   CI (99.9%): [56336.923, 964107.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.25% complete, ETA 00:49:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 851219.991 ops/s
[info] # Warmup Iteration   2: 931290.913 ops/s
[info] # Warmup Iteration   3: 937042.647 ops/s
[info] # Warmup Iteration   4: 936713.137 ops/s
[info] # Warmup Iteration   5: 940859.512 ops/s
[info] Iteration   1: 940719.178 ops/s
[info]                  ·gc.alloc.rate:      38.249 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 939559.301 ops/s
[info]                  ·gc.alloc.rate:      38.193 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 942175.814 ops/s
[info]                  ·gc.alloc.rate:      38.309 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 939697.535 ops/s
[info]                  ·gc.alloc.rate:      38.209 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 939531.622 ops/s
[info]                  ·gc.alloc.rate:      38.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   940336.690 ±(99.9%) 4386.042 ops/s [Average]
[info]   (min, avg, max) = (939531.622, 940336.690, 942175.814), stdev = 1139.041
[info]   CI (99.9%): [935950.648, 944722.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   38.233 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (38.193, 38.233, 38.309), stdev = 0.048
[info]   CI (99.9%): [38.048, 38.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.45% complete, ETA 00:49:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31969.379 ops/s
[info] # Warmup Iteration   2: 72994.533 ops/s
[info] # Warmup Iteration   3: 71825.349 ops/s
[info] # Warmup Iteration   4: 72794.934 ops/s
[info] # Warmup Iteration   5: 73049.478 ops/s
[info] Iteration   1: 73936.327 ops/s
[info]                  ·gc.alloc.rate:                   3335.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72256.187 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 73872.352 ops/s
[info]                  ·gc.alloc.rate:                   3332.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72415.901 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73756.804 ops/s
[info]                  ·gc.alloc.rate:                   3326.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72587.600 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 72465.366 ops/s
[info]                  ·gc.alloc.rate:                   3268.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73922.843 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73648.024 ops/s
[info]                  ·gc.alloc.rate:                   3322.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72750.956 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   73535.775 ±(99.9%) 2343.011 ops/s [Average]
[info]   (min, avg, max) = (72465.366, 73535.775, 73936.327), stdev = 608.473
[info]   CI (99.9%): [71192.763, 75878.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3317.186 ±(99.9%) 105.917 MB/sec [Average]
[info]   (min, avg, max) = (3268.802, 3317.186, 3335.412), stdev = 27.506
[info]   CI (99.9%): [3211.269, 3423.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71008.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71008.006, 71008.006, 71008.006), stdev = 0.001
[info]   CI (99.9%): [71008.005, 71008.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.047 ±(99.9%) 3.091 B/op [Average]
[info]   (min, avg, max) = (1.333, 2.047, 3.114), stdev = 0.803
[info]   CI (99.9%): [≈ 0, 5.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3400.075 ±(99.9%) 15.316 MB/sec [Average]
[info]   (min, avg, max) = (3394.042, 3400.075, 3403.979), stdev = 3.978
[info]   CI (99.9%): [3384.759, 3415.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72786.697 ±(99.9%) 2547.453 B/op [Average]
[info]   (min, avg, max) = (72256.187, 72786.697, 73922.843), stdev = 661.565
[info]   CI (99.9%): [70239.244, 75334.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.65% complete, ETA 00:48:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 747306.174 ops/s
[info] # Warmup Iteration   2: 1122992.730 ops/s
[info] # Warmup Iteration   3: 1123025.204 ops/s
[info] # Warmup Iteration   4: 1123301.726 ops/s
[info] # Warmup Iteration   5: 1124384.983 ops/s
[info] Iteration   1: 1122806.128 ops/s
[info]                  ·gc.alloc.rate:                   644.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 944.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1127266.245 ops/s
[info]                  ·gc.alloc.rate:                   647.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 940.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1121981.476 ops/s
[info]                  ·gc.alloc.rate:                   644.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 946.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1122854.360 ops/s
[info]                  ·gc.alloc.rate:                   644.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 945.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1122097.554 ops/s
[info]                  ·gc.alloc.rate:                   644.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 947.329 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1123401.153 ±(99.9%) 8459.776 ops/s [Average]
[info]   (min, avg, max) = (1121981.476, 1123401.153, 1127266.245), stdev = 2196.977
[info]   CI (99.9%): [1114941.376, 1131860.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   645.135 ±(99.9%) 5.063 MB/sec [Average]
[info]   (min, avg, max) = (644.276, 645.135, 647.442), stdev = 1.315
[info]   CI (99.9%): [640.072, 650.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.208), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.087 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.292), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.349 ±(99.9%) 2.530 MB/sec [Average]
[info]   (min, avg, max) = (673.637, 674.349, 675.212), stdev = 0.657
[info]   CI (99.9%): [671.820, 676.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   944.941 ±(99.9%) 9.985 B/op [Average]
[info]   (min, avg, max) = (940.721, 944.941, 947.329), stdev = 2.593
[info]   CI (99.9%): [934.956, 954.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.86% complete, ETA 00:48:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1315854.591 ops/s
[info] # Warmup Iteration   2: 1349102.073 ops/s
[info] # Warmup Iteration   3: 1387959.342 ops/s
[info] # Warmup Iteration   4: 1379477.835 ops/s
[info] # Warmup Iteration   5: 1389643.598 ops/s
[info] Iteration   1: 1387808.858 ops/s
[info]                  ·gc.alloc.rate:                   387.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 580.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1385787.715 ops/s
[info]                  ·gc.alloc.rate:                   387.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1384964.703 ops/s
[info]                  ·gc.alloc.rate:                   387.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1348863.832 ops/s
[info]                  ·gc.alloc.rate:      377.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1415071.734 ops/s
[info]                  ·gc.alloc.rate:                   395.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750.440 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1384499.368 ±(99.9%) 90661.818 ops/s [Average]
[info]   (min, avg, max) = (1348863.832, 1384499.368, 1415071.734), stdev = 23544.586
[info]   CI (99.9%): [1293837.551, 1475161.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   386.992 ±(99.9%) 25.356 MB/sec [Average]
[info]   (min, avg, max) = (377.002, 386.992, 395.518), stdev = 6.585
[info]   CI (99.9%): [361.637, 412.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.663 ±(99.9%) 5.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.663, 3.301), stdev = 1.475
[info]   CI (99.9%): [≈ 0, 6.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.737 ±(99.9%) 6.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.672), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 7.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.824 ±(99.9%) 989.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.824, 674.572), stdev = 256.881
[info]   CI (99.9%): [≈ 0, 1430.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   498.597 ±(99.9%) 1109.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 498.597, 750.440), stdev = 288.236
[info]   CI (99.9%): [≈ 0, 1608.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.06% complete, ETA 00:48:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1355356.856 ops/s
[info] # Warmup Iteration   2: 1434277.328 ops/s
[info] # Warmup Iteration   3: 1466830.323 ops/s
[info] # Warmup Iteration   4: 1464438.209 ops/s
[info] # Warmup Iteration   5: 1468461.255 ops/s
[info] Iteration   1: 1470471.394 ops/s
[info]                  ·gc.alloc.rate:      14.945 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1467414.284 ops/s
[info]                  ·gc.alloc.rate:      14.913 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1469050.207 ops/s
[info]                  ·gc.alloc.rate:      14.932 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1466846.353 ops/s
[info]                  ·gc.alloc.rate:      14.908 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1466802.161 ops/s
[info]                  ·gc.alloc.rate:      14.909 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1468116.880 ±(99.9%) 6164.400 ops/s [Average]
[info]   (min, avg, max) = (1466802.161, 1468116.880, 1470471.394), stdev = 1600.875
[info]   CI (99.9%): [1461952.479, 1474281.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   14.921 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (14.908, 14.921, 14.945), stdev = 0.016
[info]   CI (99.9%): [14.858, 14.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.26% complete, ETA 00:47:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21966.678 ops/s
[info] # Warmup Iteration   2: 45590.652 ops/s
[info] # Warmup Iteration   3: 44231.350 ops/s
[info] # Warmup Iteration   4: 45321.392 ops/s
[info] # Warmup Iteration   5: 45443.126 ops/s
[info] Iteration   1: 45528.471 ops/s
[info]                  ·gc.alloc.rate:                   1918.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46786.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 45514.840 ops/s
[info]                  ·gc.alloc.rate:                   1917.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70251.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 45464.360 ops/s
[info]                  ·gc.alloc.rate:                   1916.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70428.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45435.840 ops/s
[info]                  ·gc.alloc.rate:                   1914.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70522.654 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 44783.050 ops/s
[info]                  ·gc.alloc.rate:                   1886.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71631.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   45345.313 ±(99.9%) 1218.888 ops/s [Average]
[info]   (min, avg, max) = (44783.050, 45345.313, 45528.471), stdev = 316.541
[info]   CI (99.9%): [44126.425, 46564.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1910.647 ±(99.9%) 51.622 MB/sec [Average]
[info]   (min, avg, max) = (1886.818, 1910.647, 1918.332), stdev = 13.406
[info]   CI (99.9%): [1859.025, 1962.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66328.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66328.009, 66328.009, 66328.010), stdev = 0.001
[info]   CI (99.9%): [66328.008, 66328.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.309 ±(99.9%) 4.538 B/op [Average]
[info]   (min, avg, max) = (0.721, 2.309, 3.598), stdev = 1.179
[info]   CI (99.9%): [≈ 0, 6.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.372 ±(99.9%) 1173.656 MB/sec [Average]
[info]   (min, avg, max) = (1353.156, 1898.372, 2037.673), stdev = 304.795
[info]   CI (99.9%): [724.716, 3072.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65924.006 ±(99.9%) 41247.558 B/op [Average]
[info]   (min, avg, max) = (46786.553, 65924.006, 71631.079), stdev = 10711.860
[info]   CI (99.9%): [24676.448, 107171.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.46% complete, ETA 00:47:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 391571.319 ops/s
[info] # Warmup Iteration   2: 731682.529 ops/s
[info] # Warmup Iteration   3: 738000.611 ops/s
[info] # Warmup Iteration   4: 715142.159 ops/s
[info] # Warmup Iteration   5: 744724.649 ops/s
[info] Iteration   1: 745846.648 ops/s
[info]                  ·gc.alloc.rate:                   2368.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4257.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 747862.764 ops/s
[info]                  ·gc.alloc.rate:                   2375.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2695.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5673.487 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 750995.615 ops/s
[info]                  ·gc.alloc.rate:                   2385.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4245.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 747657.874 ops/s
[info]                  ·gc.alloc.rate:                   2374.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5695.803 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 742122.536 ops/s
[info]                  ·gc.alloc.rate:                   2356.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4310.677 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   746897.087 ±(99.9%) 12508.522 ops/s [Average]
[info]   (min, avg, max) = (742122.536, 746897.087, 750995.615), stdev = 3248.423
[info]   CI (99.9%): [734388.565, 759405.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2372.200 ±(99.9%) 40.555 MB/sec [Average]
[info]   (min, avg, max) = (2356.948, 2372.200, 2385.660), stdev = 10.532
[info]   CI (99.9%): [2331.645, 2412.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5000.001, 5000.001, 5000.001), stdev = 0.001
[info]   CI (99.9%): [5000.000, 5000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.061 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.061, 0.088), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2295.016 ±(99.9%) 1424.376 MB/sec [Average]
[info]   (min, avg, max) = (2016.904, 2295.016, 2704.872), stdev = 369.906
[info]   CI (99.9%): [870.640, 3719.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4836.733 ±(99.9%) 2982.166 B/op [Average]
[info]   (min, avg, max) = (4245.849, 4836.733, 5695.803), stdev = 774.459
[info]   CI (99.9%): [1854.567, 7818.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.66% complete, ETA 00:47:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.936 ops/s
[info] # Warmup Iteration   2: 5315059.731 ops/s
[info] # Warmup Iteration   3: 5298430.522 ops/s
[info] # Warmup Iteration   4: 5521590.235 ops/s
[info] # Warmup Iteration   5: 5554369.703 ops/s
[info] Iteration   1: 5501991.332 ops/s
[info]                  ·gc.alloc.rate:                   335.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5548171.519 ops/s
[info]                  ·gc.alloc.rate:                   338.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5563367.893 ops/s
[info]                  ·gc.alloc.rate:      339.368 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5519329.717 ops/s
[info]                  ·gc.alloc.rate:                   336.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.872 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5547109.668 ops/s
[info]                  ·gc.alloc.rate:      338.272 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5535994.026 ±(99.9%) 95396.932 ops/s [Average]
[info]   (min, avg, max) = (5501991.332, 5535994.026, 5563367.893), stdev = 24774.280
[info]   CI (99.9%): [5440597.094, 5631390.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   337.616 ±(99.9%) 5.951 MB/sec [Average]
[info]   (min, avg, max) = (335.501, 337.616, 339.368), stdev = 1.545
[info]   CI (99.9%): [331.665, 343.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.005 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   306.860 ±(99.9%) 1078.655 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.860, 511.452), stdev = 280.123
[info]   CI (99.9%): [≈ 0, 1385.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   87.464 ±(99.9%) 307.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.464, 146.331), stdev = 79.844
[info]   CI (99.9%): [≈ 0, 394.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.86% complete, ETA 00:47:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288885.520 ops/s
[info] # Warmup Iteration   2: 941174.126 ops/s
[info] # Warmup Iteration   3: 935251.691 ops/s
[info] # Warmup Iteration   4: 934898.518 ops/s
[info] # Warmup Iteration   5: 935699.562 ops/s
[info] Iteration   1: 947485.420 ops/s
[info]                  ·gc.alloc.rate:                   1174.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2242.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 965054.072 ops/s
[info]                  ·gc.alloc.rate:                   1196.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2204.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 962398.755 ops/s
[info]                  ·gc.alloc.rate:                   1193.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2211.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 966067.542 ops/s
[info]                  ·gc.alloc.rate:                   1197.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1102.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 947784.247 ops/s
[info]                  ·gc.alloc.rate:                   1175.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2248.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   957758.007 ±(99.9%) 35958.676 ops/s [Average]
[info]   (min, avg, max) = (947485.420, 957758.007, 966067.542), stdev = 9338.354
[info]   CI (99.9%): [921799.331, 993716.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1187.643 ±(99.9%) 44.320 MB/sec [Average]
[info]   (min, avg, max) = (1174.705, 1187.643, 1197.851), stdev = 11.510
[info]   CI (99.9%): [1143.323, 1231.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.136), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.771 ±(99.9%) 1163.529 MB/sec [Average]
[info]   (min, avg, max) = (676.252, 1216.771, 1354.460), stdev = 302.165
[info]   CI (99.9%): [53.243, 2380.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2001.937 ±(99.9%) 1938.573 B/op [Average]
[info]   (min, avg, max) = (1102.010, 2001.937, 2248.914), stdev = 503.441
[info]   CI (99.9%): [63.364, 3940.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.06% complete, ETA 00:46:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7395164.923 ops/s
[info] # Warmup Iteration   2: 7550881.597 ops/s
[info] # Warmup Iteration   3: 8055230.103 ops/s
[info] # Warmup Iteration   4: 8070999.719 ops/s
[info] # Warmup Iteration   5: 7674062.039 ops/s
[info] Iteration   1: 8049750.977 ops/s
[info]                  ·gc.alloc.rate:                   368.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8072036.206 ops/s
[info]                  ·gc.alloc.rate:                   369.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8061303.046 ops/s
[info]                  ·gc.alloc.rate:      368.734 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8048276.327 ops/s
[info]                  ·gc.alloc.rate:                   368.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8064874.082 ops/s
[info]                  ·gc.alloc.rate:      368.869 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8059248.128 ±(99.9%) 38984.098 ops/s [Average]
[info]   (min, avg, max) = (8048276.327, 8059248.128, 8072036.206), stdev = 10124.046
[info]   CI (99.9%): [8020264.030, 8098232.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   368.620 ±(99.9%) 1.884 MB/sec [Average]
[info]   (min, avg, max) = (368.106, 368.620, 369.246), stdev = 0.489
[info]   CI (99.9%): [366.736, 370.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.874 ±(99.9%) 1078.706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.874, 511.539), stdev = 280.136
[info]   CI (99.9%): [≈ 0, 1385.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59.959 ±(99.9%) 210.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.959, 100.034), stdev = 54.735
[info]   CI (99.9%): [≈ 0, 270.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.26% complete, ETA 00:46:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35099.196 ops/s
[info] # Warmup Iteration   2: 328239.592 ops/s
[info] # Warmup Iteration   3: 322939.984 ops/s
[info] # Warmup Iteration   4: 332901.779 ops/s
[info] # Warmup Iteration   5: 334106.751 ops/s
[info] Iteration   1: 334590.673 ops/s
[info]                  ·gc.alloc.rate:                   1875.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9542.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 335232.452 ops/s
[info]                  ·gc.alloc.rate:                   1879.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9538.593 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 332691.054 ops/s
[info]                  ·gc.alloc.rate:                   1864.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6412.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 330668.559 ops/s
[info]                  ·gc.alloc.rate:                   1853.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9685.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 331596.483 ops/s
[info]                  ·gc.alloc.rate:                   1858.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9668.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   332955.844 ±(99.9%) 7458.047 ops/s [Average]
[info]   (min, avg, max) = (330668.559, 332955.844, 335232.452), stdev = 1936.831
[info]   CI (99.9%): [325497.797, 340413.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1866.489 ±(99.9%) 42.612 MB/sec [Average]
[info]   (min, avg, max) = (1853.509, 1866.489, 1879.696), stdev = 11.066
[info]   CI (99.9%): [1823.877, 1909.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8824.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8824.001, 8824.001, 8824.001), stdev = 0.001
[info]   CI (99.9%): [8824.001, 8824.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.275 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (0.197, 0.275, 0.392), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1897.289 ±(99.9%) 1166.708 MB/sec [Average]
[info]   (min, avg, max) = (1355.311, 1897.289, 2036.473), stdev = 302.990
[info]   CI (99.9%): [730.581, 3063.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8969.411 ±(99.9%) 5510.033 B/op [Average]
[info]   (min, avg, max) = (6412.605, 8969.411, 9685.465), stdev = 1430.938
[info]   CI (99.9%): [3459.379, 14479.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65.46% complete, ETA 00:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 482042.692 ops/s
[info] # Warmup Iteration   2: 705306.659 ops/s
[info] # Warmup Iteration   3: 716462.471 ops/s
[info] # Warmup Iteration   4: 721594.269 ops/s
[info] # Warmup Iteration   5: 728038.692 ops/s
[info] Iteration   1: 722506.871 ops/s
[info]                  ·gc.alloc.rate:                   1211.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2926.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 723268.033 ops/s
[info]                  ·gc.alloc.rate:                   1213.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2922.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 720477.821 ops/s
[info]                  ·gc.alloc.rate:                   1208.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2933.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 721370.556 ops/s
[info]                  ·gc.alloc.rate:                   1209.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2931.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 723249.989 ops/s
[info]                  ·gc.alloc.rate:                   1212.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1462.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   722174.654 ±(99.9%) 4711.341 ops/s [Average]
[info]   (min, avg, max) = (720477.821, 722174.654, 723268.033), stdev = 1223.520
[info]   CI (99.9%): [717463.313, 726885.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1211.031 ±(99.9%) 7.995 MB/sec [Average]
[info]   (min, avg, max) = (1208.205, 1211.031, 1213.000), stdev = 2.076
[info]   CI (99.9%): [1203.036, 1219.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2640.001, 2640.001, 2640.001), stdev = 0.001
[info]   CI (99.9%): [2640.000, 2640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.109 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.182), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.620 ±(99.9%) 1155.389 MB/sec [Average]
[info]   (min, avg, max) = (671.873, 1208.620, 1343.143), stdev = 300.051
[info]   CI (99.9%): [53.231, 2364.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2635.195 ±(99.9%) 2524.509 B/op [Average]
[info]   (min, avg, max) = (1462.435, 2635.195, 2933.348), stdev = 655.607
[info]   CI (99.9%): [110.686, 5159.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.66% complete, ETA 00:46:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2367.161 ops/s
[info] # Warmup Iteration   2: 3769.447 ops/s
[info] # Warmup Iteration   3: 3743.535 ops/s
[info] # Warmup Iteration   4: 3742.521 ops/s
[info] # Warmup Iteration   5: 3763.189 ops/s
[info] Iteration   1: 3766.283 ops/s
[info]                  ·gc.alloc.rate:                   1778.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 849185.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3856.942 ops/s
[info]                  ·gc.alloc.rate:                   1821.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553233.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3862.959 ops/s
[info]                  ·gc.alloc.rate:                   1824.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 829308.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3852.477 ops/s
[info]                  ·gc.alloc.rate:                   1819.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 832004.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3861.625 ops/s
[info]                  ·gc.alloc.rate:                   1823.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553739.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   3840.057 ±(99.9%) 159.600 ops/s [Average]
[info]   (min, avg, max) = (3766.283, 3840.057, 3862.959), stdev = 41.448
[info]   CI (99.9%): [3680.457, 3999.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1813.325 ±(99.9%) 74.720 MB/sec [Average]
[info]   (min, avg, max) = (1778.782, 1813.325, 1824.002), stdev = 19.405
[info]   CI (99.9%): [1738.605, 1888.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743312.110 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (743312.106, 743312.110, 743312.114), stdev = 0.004
[info]   CI (99.9%): [743312.093, 743312.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35.860 ±(99.9%) 43.195 B/op [Average]
[info]   (min, avg, max) = (25.448, 35.860, 50.882), stdev = 11.218
[info]   CI (99.9%): [≈ 0, 79.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1763.465 ±(99.9%) 1429.028 MB/sec [Average]
[info]   (min, avg, max) = (1355.449, 1763.465, 2036.285), stdev = 371.114
[info]   CI (99.9%): [334.437, 3192.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   723494.295 ±(99.9%) 598321.989 B/op [Average]
[info]   (min, avg, max) = (553233.916, 723494.295, 849185.155), stdev = 155382.321
[info]   CI (99.9%): [125172.306, 1321816.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.86% complete, ETA 00:45:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2143.032 ops/s
[info] # Warmup Iteration   2: 5050.557 ops/s
[info] # Warmup Iteration   3: 5161.993 ops/s
[info] # Warmup Iteration   4: 5202.516 ops/s
[info] # Warmup Iteration   5: 5199.359 ops/s
[info] Iteration   1: 5196.495 ops/s
[info]                  ·gc.alloc.rate:                   2147.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              650536.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 614661.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5203.117 ops/s
[info]                  ·gc.alloc.rate:                   2150.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              650536.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 614439.347 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5196.190 ops/s
[info]                  ·gc.alloc.rate:                   2147.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              650536.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 616174.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5115.326 ops/s
[info]                  ·gc.alloc.rate:                   2114.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              650536.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 626338.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5200.193 ops/s
[info]                  ·gc.alloc.rate:                   2149.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              650536.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 822210.977 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5182.264 ±(99.9%) 144.507 ops/s [Average]
[info]   (min, avg, max) = (5115.326, 5182.264, 5203.117), stdev = 37.528
[info]   CI (99.9%): [5037.757, 5326.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2141.653 ±(99.9%) 59.285 MB/sec [Average]
[info]   (min, avg, max) = (2114.190, 2141.653, 2150.178), stdev = 15.396
[info]   CI (99.9%): [2082.367, 2200.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650536.081 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (650536.078, 650536.081, 650536.086), stdev = 0.004
[info]   CI (99.9%): [650536.067, 650536.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.043, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24.024 ±(99.9%) 11.027 B/op [Average]
[info]   (min, avg, max) = (18.912, 24.024, 25.615), stdev = 2.864
[info]   CI (99.9%): [12.997, 35.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2169.118 ±(99.9%) 1177.611 MB/sec [Average]
[info]   (min, avg, max) = (2029.021, 2169.118, 2716.170), stdev = 305.822
[info]   CI (99.9%): [991.507, 3346.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   658764.940 ±(99.9%) 352338.667 B/op [Average]
[info]   (min, avg, max) = (614439.347, 658764.940, 822210.977), stdev = 91501.233
[info]   CI (99.9%): [306426.273, 1011103.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.06% complete, ETA 00:45:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38368.917 ops/s
[info] # Warmup Iteration   2: 42186.415 ops/s
[info] # Warmup Iteration   3: 42183.193 ops/s
[info] # Warmup Iteration   4: 41943.115 ops/s
[info] # Warmup Iteration   5: 42452.788 ops/s
[info] Iteration   1: 42494.176 ops/s
[info]                  ·gc.alloc.rate:                   706.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25041.873 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 43533.609 ops/s
[info]                  ·gc.alloc.rate:                   724.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24444.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 43435.342 ops/s
[info]                  ·gc.alloc.rate:                   722.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24424.778 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 43486.649 ops/s
[info]                  ·gc.alloc.rate:                   723.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24395.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43370.460 ops/s
[info]                  ·gc.alloc.rate:                   721.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48873.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   43264.047 ±(99.9%) 1673.571 ops/s [Average]
[info]   (min, avg, max) = (42494.176, 43264.047, 43533.609), stdev = 434.621
[info]   CI (99.9%): [41590.477, 44937.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   719.605 ±(99.9%) 27.947 MB/sec [Average]
[info]   (min, avg, max) = (706.742, 719.605, 724.109), stdev = 7.258
[info]   CI (99.9%): [691.659, 747.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26184.009, 26184.010, 26184.010), stdev = 0.001
[info]   CI (99.9%): [26184.008, 26184.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.568 ±(99.9%) 4.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.568, 2.734), stdev = 1.211
[info]   CI (99.9%): [≈ 0, 5.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21.012 ±(99.9%) 172.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.012, 101.289), stdev = 44.887
[info]   CI (99.9%): [≈ 0, 193.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   809.259 ±(99.9%) 1156.703 MB/sec [Average]
[info]   (min, avg, max) = (673.850, 809.259, 1346.613), stdev = 300.392
[info]   CI (99.9%): [≈ 0, 1965.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29435.849 ±(99.9%) 41853.382 B/op [Average]
[info]   (min, avg, max) = (24395.019, 29435.849, 48873.281), stdev = 10869.190
[info]   CI (99.9%): [≈ 0, 71289.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.27% complete, ETA 00:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2701.671 ops/s
[info] # Warmup Iteration   2: 4064.653 ops/s
[info] # Warmup Iteration   3: 4110.648 ops/s
[info] # Warmup Iteration   4: 4175.648 ops/s
[info] # Warmup Iteration   5: 4170.509 ops/s
[info] Iteration   1: 4148.369 ops/s
[info]                  ·gc.alloc.rate:                   762.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              289432.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255069.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4172.994 ops/s
[info]                  ·gc.alloc.rate:                   767.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              289432.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253853.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4163.042 ops/s
[info]                  ·gc.alloc.rate:                   765.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              289432.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509178.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4147.782 ops/s
[info]                  ·gc.alloc.rate:                   762.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              289432.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255636.207 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4145.080 ops/s
[info]                  ·gc.alloc.rate:                   762.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              289432.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256012.346 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4155.453 ±(99.9%) 46.444 ops/s [Average]
[info]   (min, avg, max) = (4145.080, 4155.453, 4172.994), stdev = 12.061
[info]   CI (99.9%): [4109.009, 4201.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   764.002 ±(99.9%) 8.431 MB/sec [Average]
[info]   (min, avg, max) = (762.107, 764.002, 767.168), stdev = 2.189
[info]   CI (99.9%): [755.572, 772.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289432.101 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (289432.098, 289432.101, 289432.106), stdev = 0.004
[info]   CI (99.9%): [289432.084, 289432.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.885 ±(99.9%) 42.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.885, 23.688), stdev = 11.157
[info]   CI (99.9%): [≈ 0, 50.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   807.847 ±(99.9%) 1159.565 MB/sec [Average]
[info]   (min, avg, max) = (672.171, 807.847, 1346.533), stdev = 301.135
[info]   CI (99.9%): [≈ 0, 1967.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   305950.106 ±(99.9%) 437476.460 B/op [Average]
[info]   (min, avg, max) = (253853.869, 305950.106, 509178.836), stdev = 113611.247
[info]   CI (99.9%): [≈ 0, 743426.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.47% complete, ETA 00:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e1277c77/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2383.761 ops/s
[info] # Warmup Iteration   2: 4781.995 ops/s
[info] # Warmup Iteration   3: 4855.313 ops/s
[info] # Warmup Iteration   4: 4815.226 ops/s
[info] # Warmup Iteration   5: 4820.898 ops/s
[info] Iteration   1: 4828.628 ops/s
[info]                  ·gc.alloc.rate:                   484.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166695.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4839.737 ops/s
[info]                  ·gc.alloc.rate:                   485.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218913.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4845.395 ops/s
[info]                  ·gc.alloc.rate:      485.995 MB/sec
[info]                  ·gc.alloc.rate.norm: 157877.320 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4837.620 ops/s
[info]                  ·gc.alloc.rate:                   485.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219184.671 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4837.139 ops/s
[info]                  ·gc.alloc.rate:                   485.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219293.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4837.704 ±(99.9%) 23.262 ops/s [Average]
[info]   (min, avg, max) = (4828.628, 4837.704, 4845.395), stdev = 6.041
[info]   CI (99.9%): [4814.442, 4860.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   485.188 ±(99.9%) 2.479 MB/sec [Average]
[info]   (min, avg, max) = (484.239, 485.188, 485.995), stdev = 0.644
[info]   CI (99.9%): [482.709, 487.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   157877.421 ±(99.9%) 0.878 B/op [Average]
[info]   (min, avg, max) = (157877.127, 157877.421, 157877.751), stdev = 0.228
[info]   CI (99.9%): [157876.543, 157878.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.183 ±(99.9%) 1.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.875), stdev = 0.387
[info]   CI (99.9%): [≈ 0, 1.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   59.629 ±(99.9%) 484.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.629, 284.600), stdev = 125.808
[info]   CI (99.9%): [≈ 0, 544.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.354 ±(99.9%) 1123.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.354, 673.759), stdev = 291.645
[info]   CI (99.9%): [≈ 0, 1629.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   164817.302 ±(99.9%) 365395.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 164817.302, 219293.018), stdev = 94892.117
[info]   CI (99.9%): [≈ 0, 530213.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.67% complete, ETA 00:44:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6069.797 ops/s
[info] # Warmup Iteration   2: 6386.587 ops/s
[info] # Warmup Iteration   3: 6323.425 ops/s
[info] # Warmup Iteration   4: 6470.397 ops/s
[info] # Warmup Iteration   5: 6470.338 ops/s
[info] Iteration   1: 6438.385 ops/s
[info]                  ·gc.alloc.rate:                   171.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125047.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6480.294 ops/s
[info]                  ·gc.alloc.rate:      173.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6468.316 ops/s
[info]                  ·gc.alloc.rate:      172.791 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6272.495 ops/s
[info]                  ·gc.alloc.rate:                   167.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128356.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6452.710 ops/s
[info]                  ·gc.alloc.rate:      172.388 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6422.440 ±(99.9%) 328.469 ops/s [Average]
[info]   (min, avg, max) = (6272.495, 6422.440, 6480.294), stdev = 85.302
[info]   CI (99.9%): [6093.971, 6750.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   171.582 ±(99.9%) 8.723 MB/sec [Average]
[info]   (min, avg, max) = (167.604, 171.582, 173.140), stdev = 2.265
[info]   CI (99.9%): [162.859, 180.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056.065 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (42056.063, 42056.065, 42056.068), stdev = 0.002
[info]   CI (99.9%): [42056.056, 42056.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.583 ±(99.9%) 1078.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.583, 511.532), stdev = 280.136
[info]   CI (99.9%): [≈ 0, 1283.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   50680.741 ±(99.9%) 267262.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50680.741, 128356.131), stdev = 69407.320
[info]   CI (99.9%): [≈ 0, 317943.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.87% complete, ETA 00:44:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6175.335 ops/s
[info] # Warmup Iteration   2: 6587.727 ops/s
[info] # Warmup Iteration   3: 6563.077 ops/s
[info] # Warmup Iteration   4: 6479.606 ops/s
[info] # Warmup Iteration   5: 6579.671 ops/s
[info] Iteration   1: 6572.381 ops/s
[info]                  ·gc.alloc.rate:      127.568 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6553.208 ops/s
[info]                  ·gc.alloc.rate:      127.189 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.067 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6532.941 ops/s
[info]                  ·gc.alloc.rate:                   126.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              30552.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123229.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6544.281 ops/s
[info]                  ·gc.alloc.rate:      127.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6561.088 ops/s
[info]                  ·gc.alloc.rate:      127.340 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6552.780 ±(99.9%) 58.373 ops/s [Average]
[info]   (min, avg, max) = (6532.941, 6552.780, 6572.381), stdev = 15.159
[info]   CI (99.9%): [6494.407, 6611.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   127.182 ±(99.9%) 1.130 MB/sec [Average]
[info]   (min, avg, max) = (126.811, 127.182, 127.568), stdev = 0.293
[info]   CI (99.9%): [126.052, 128.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552.063 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (30552.062, 30552.063, 30552.067), stdev = 0.002
[info]   CI (99.9%): [30552.055, 30552.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   102.297 ±(99.9%) 880.808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.297, 511.485), stdev = 228.743
[info]   CI (99.9%): [≈ 0, 983.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   24645.949 ±(99.9%) 212209.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24645.949, 123229.743), stdev = 55110.016
[info]   CI (99.9%): [≈ 0, 236854.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.07% complete, ETA 00:44:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5740.855 ops/s
[info] # Warmup Iteration   2: 7616.369 ops/s
[info] # Warmup Iteration   3: 7828.924 ops/s
[info] # Warmup Iteration   4: 7826.986 ops/s
[info] # Warmup Iteration   5: 7802.984 ops/s
[info] Iteration   1: 7795.509 ops/s
[info]                  ·gc.alloc.rate:                   1814.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406360.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7838.911 ops/s
[info]                  ·gc.alloc.rate:                   1825.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269733.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7813.784 ops/s
[info]                  ·gc.alloc.rate:                   1819.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406497.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7792.905 ops/s
[info]                  ·gc.alloc.rate:                   1814.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              366564.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408332.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7824.089 ops/s
[info]                  ·gc.alloc.rate:                   1822.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271488.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7813.040 ±(99.9%) 74.684 ops/s [Average]
[info]   (min, avg, max) = (7792.905, 7813.040, 7838.911), stdev = 19.395
[info]   CI (99.9%): [7738.355, 7887.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1819.341 ±(99.9%) 18.598 MB/sec [Average]
[info]   (min, avg, max) = (1814.562, 1819.341, 1825.899), stdev = 4.830
[info]   CI (99.9%): [1800.742, 1837.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366552.951 ±(99.9%) 47.162 B/op [Average]
[info]   (min, avg, max) = (366544.052, 366552.951, 366568.056), stdev = 12.248
[info]   CI (99.9%): [366505.788, 366600.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.018 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.693 ±(99.9%) 14.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.693, 9.235), stdev = 3.874
[info]   CI (99.9%): [≈ 0, 18.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1748.813 ±(99.9%) 1414.120 MB/sec [Average]
[info]   (min, avg, max) = (1343.647, 1748.813, 2021.322), stdev = 367.242
[info]   CI (99.9%): [334.693, 3162.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   352482.375 ±(99.9%) 287815.813 B/op [Average]
[info]   (min, avg, max) = (269733.171, 352482.375, 408332.578), stdev = 74744.853
[info]   CI (99.9%): [64666.562, 640298.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.27% complete, ETA 00:43:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 917.555 ops/s
[info] # Warmup Iteration   2: 11226.944 ops/s
[info] # Warmup Iteration   3: 11122.686 ops/s
[info] # Warmup Iteration   4: 11110.145 ops/s
[info] # Warmup Iteration   5: 11125.218 ops/s
[info] Iteration   1: 11206.158 ops/s
[info]                  ·gc.alloc.rate:      258.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 11170.468 ops/s
[info]                  ·gc.alloc.rate:                   257.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72076.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11180.823 ops/s
[info]                  ·gc.alloc.rate:      257.706 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11167.256 ops/s
[info]                  ·gc.alloc.rate:                   257.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72095.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11190.443 ops/s
[info]                  ·gc.alloc.rate:      257.897 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.049 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11183.030 ±(99.9%) 60.924 ops/s [Average]
[info]   (min, avg, max) = (11167.256, 11183.030, 11206.158), stdev = 15.822
[info]   CI (99.9%): [11122.105, 11243.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   257.750 ±(99.9%) 1.353 MB/sec [Average]
[info]   (min, avg, max) = (257.366, 257.750, 258.267), stdev = 0.351
[info]   CI (99.9%): [256.397, 259.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.039 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.039, 36280.049), stdev = 0.005
[info]   CI (99.9%): [36280.019, 36280.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.173 ±(99.9%) 10.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.173, 5.867), stdev = 2.624
[info]   CI (99.9%): [≈ 0, 11.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   204.606 ±(99.9%) 1078.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.606, 511.594), stdev = 280.168
[info]   CI (99.9%): [≈ 0, 1283.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   28834.315 ±(99.9%) 152035.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28834.315, 72095.467), stdev = 39483.013
[info]   CI (99.9%): [≈ 0, 180869.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.47% complete, ETA 00:43:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7275.418 ops/s
[info] # Warmup Iteration   2: 14324.888 ops/s
[info] # Warmup Iteration   3: 14523.488 ops/s
[info] # Warmup Iteration   4: 14522.052 ops/s
[info] # Warmup Iteration   5: 14562.132 ops/s
[info] Iteration   1: 14611.458 ops/s
[info]                  ·gc.alloc.rate:                   371.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55101.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 14618.212 ops/s
[info]                  ·gc.alloc.rate:      371.461 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15022.694 ops/s
[info]                  ·gc.alloc.rate:                   381.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53594.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14967.093 ops/s
[info]                  ·gc.alloc.rate:                   380.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70845.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15126.543 ops/s
[info]                  ·gc.alloc.rate:      384.318 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14869.200 ±(99.9%) 920.930 ops/s [Average]
[info]   (min, avg, max) = (14611.458, 14869.200, 15126.543), stdev = 239.162
[info]   CI (99.9%): [13948.270, 15790.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   377.772 ±(99.9%) 23.325 MB/sec [Average]
[info]   (min, avg, max) = (371.210, 377.772, 384.318), stdev = 6.057
[info]   CI (99.9%): [354.447, 401.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39992.029 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (39992.027, 39992.029, 39992.034), stdev = 0.003
[info]   CI (99.9%): [39992.018, 39992.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.541), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.382 ±(99.9%) 97.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.382, 56.908), stdev = 25.450
[info]   CI (99.9%): [≈ 0, 109.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.295 ±(99.9%) 1219.594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.295, 673.567), stdev = 316.725
[info]   CI (99.9%): [≈ 0, 1558.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35908.300 ±(99.9%) 128876.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35908.300, 70845.944), stdev = 33468.699
[info]   CI (99.9%): [≈ 0, 164784.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67.67% complete, ETA 00:43:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19907.068 ops/s
[info] # Warmup Iteration   2: 22722.144 ops/s
[info] # Warmup Iteration   3: 23080.925 ops/s
[info] # Warmup Iteration   4: 22423.165 ops/s
[info] # Warmup Iteration   5: 22640.779 ops/s
[info] Iteration   1: 23070.825 ops/s
[info]                  ·gc.alloc.rate:                   432.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34896.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23109.972 ops/s
[info]                  ·gc.alloc.rate:      433.022 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22999.906 ops/s
[info]                  ·gc.alloc.rate:                   430.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35005.710 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22937.360 ops/s
[info]                  ·gc.alloc.rate:                   429.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46297.672 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23048.614 ops/s
[info]                  ·gc.alloc.rate:      431.834 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23033.335 ±(99.9%) 257.165 ops/s [Average]
[info]   (min, avg, max) = (22937.360, 23033.335, 23109.972), stdev = 66.785
[info]   CI (99.9%): [22776.171, 23290.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   431.573 ±(99.9%) 4.868 MB/sec [Average]
[info]   (min, avg, max) = (429.762, 431.573, 433.022), stdev = 1.264
[info]   CI (99.9%): [426.706, 436.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (29496.018, 29496.018, 29496.019), stdev = 0.001
[info]   CI (99.9%): [29496.016, 29496.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.684 ±(99.9%) 5.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.684, 3.401), stdev = 1.519
[info]   CI (99.9%): [≈ 0, 6.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46.968 ±(99.9%) 401.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.968, 233.421), stdev = 104.232
[info]   CI (99.9%): [≈ 0, 448.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.493 ±(99.9%) 1220.603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.493, 674.566), stdev = 316.987
[info]   CI (99.9%): [≈ 0, 1560.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23239.975 ±(99.9%) 83616.562 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23239.975, 46297.672), stdev = 21714.956
[info]   CI (99.9%): [≈ 0, 106856.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67.87% complete, ETA 00:43:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 982.194 ops/s
[info] # Warmup Iteration   2: 2382.911 ops/s
[info] # Warmup Iteration   3: 2413.852 ops/s
[info] # Warmup Iteration   4: 2404.196 ops/s
[info] # Warmup Iteration   5: 2454.320 ops/s
[info] Iteration   1: 2444.801 ops/s
[info]                  ·gc.alloc.rate:                   1552.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 869383.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2444.655 ops/s
[info]                  ·gc.alloc.rate:                   1552.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1305790.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2455.844 ops/s
[info]                  ·gc.alloc.rate:                   1560.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867411.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2456.389 ops/s
[info]                  ·gc.alloc.rate:                   1560.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867838.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2458.647 ops/s
[info]                  ·gc.alloc.rate:                   1561.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867419.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2452.067 ±(99.9%) 26.115 ops/s [Average]
[info]   (min, avg, max) = (2444.655, 2452.067, 2458.647), stdev = 6.782
[info]   CI (99.9%): [2425.952, 2478.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1557.553 ±(99.9%) 16.987 MB/sec [Average]
[info]   (min, avg, max) = (1552.768, 1557.553, 1561.798), stdev = 4.411
[info]   CI (99.9%): [1540.566, 1574.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999800.172 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (999800.166, 999800.172, 999800.180), stdev = 0.007
[info]   CI (99.9%): [999800.144, 999800.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   21.347 ±(99.9%) 128.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.347, 80.020), stdev = 33.472
[info]   CI (99.9%): [≈ 0, 150.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1488.225 ±(99.9%) 1161.914 MB/sec [Average]
[info]   (min, avg, max) = (1350.230, 1488.225, 2027.994), stdev = 301.745
[info]   CI (99.9%): [326.311, 2650.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   955568.698 ±(99.9%) 753884.343 B/op [Average]
[info]   (min, avg, max) = (867411.770, 955568.698, 1305790.064), stdev = 195781.370
[info]   CI (99.9%): [201684.355, 1709453.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68.07% complete, ETA 00:42:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6501.790 ops/s
[info] # Warmup Iteration   2: 8006.563 ops/s
[info] # Warmup Iteration   3: 8094.146 ops/s
[info] # Warmup Iteration   4: 8136.698 ops/s
[info] # Warmup Iteration   5: 8161.053 ops/s
[info] Iteration   1: 8154.322 ops/s
[info]                  ·gc.alloc.rate:                   1000.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              193248.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259412.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8138.215 ops/s
[info]                  ·gc.alloc.rate:                   999.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              193248.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129848.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8092.016 ops/s
[info]                  ·gc.alloc.rate:                   993.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              193256.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261010.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8159.878 ops/s
[info]                  ·gc.alloc.rate:                   1001.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129353.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7993.998 ops/s
[info]                  ·gc.alloc.rate:                   981.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264340.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   8107.686 ±(99.9%) 265.397 ops/s [Average]
[info]   (min, avg, max) = (7993.998, 8107.686, 8159.878), stdev = 68.923
[info]   CI (99.9%): [7842.289, 8373.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   995.368 ±(99.9%) 32.336 MB/sec [Average]
[info]   (min, avg, max) = (981.468, 995.368, 1001.846), stdev = 8.398
[info]   CI (99.9%): [963.032, 1027.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   193259.335 ±(99.9%) 46.615 B/op [Average]
[info]   (min, avg, max) = (193248.050, 193259.335, 193272.051), stdev = 12.106
[info]   CI (99.9%): [193212.719, 193305.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5.662 ±(99.9%) 17.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.662, 12.051), stdev = 4.599
[info]   CI (99.9%): [≈ 0, 23.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1073.929 ±(99.9%) 1416.637 MB/sec [Average]
[info]   (min, avg, max) = (670.519, 1073.929, 1343.499), stdev = 367.896
[info]   CI (99.9%): [≈ 0, 2490.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   208793.068 ±(99.9%) 278455.985 B/op [Average]
[info]   (min, avg, max) = (129353.918, 208793.068, 264340.280), stdev = 72314.135
[info]   CI (99.9%): [≈ 0, 487249.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.27% complete, ETA 00:42:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5687.697 ops/s
[info] # Warmup Iteration   2: 7695.492 ops/s
[info] # Warmup Iteration   3: 7970.328 ops/s
[info] # Warmup Iteration   4: 7799.093 ops/s
[info] # Warmup Iteration   5: 7828.643 ops/s
[info] Iteration   1: 7791.954 ops/s
[info]                  ·gc.alloc.rate:                   1500.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              303112.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406165.120 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7858.065 ops/s
[info]                  ·gc.alloc.rate:                   1513.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              303112.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268747.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7834.148 ops/s
[info]                  ·gc.alloc.rate:                   1508.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              303112.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269737.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7827.984 ops/s
[info]                  ·gc.alloc.rate:                   1507.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              303133.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270312.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7973.392 ops/s
[info]                  ·gc.alloc.rate:                   1535.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398687.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7857.108 ±(99.9%) 266.386 ops/s [Average]
[info]   (min, avg, max) = (7791.954, 7857.108, 7973.392), stdev = 69.180
[info]   CI (99.9%): [7590.722, 8123.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1512.986 ±(99.9%) 51.605 MB/sec [Average]
[info]   (min, avg, max) = (1500.241, 1512.986, 1535.467), stdev = 13.402
[info]   CI (99.9%): [1461.381, 1564.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   303121.061 ±(99.9%) 47.662 B/op [Average]
[info]   (min, avg, max) = (303112.052, 303121.061, 303136.051), stdev = 12.378
[info]   CI (99.9%): [303073.398, 303168.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.855 ±(99.9%) 35.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.855, 25.110), stdev = 9.184
[info]   CI (99.9%): [≈ 0, 46.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1611.623 ±(99.9%) 1417.566 MB/sec [Average]
[info]   (min, avg, max) = (1341.677, 1611.623, 2019.462), stdev = 368.137
[info]   CI (99.9%): [194.056, 3029.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   322730.075 ±(99.9%) 280336.863 B/op [Average]
[info]   (min, avg, max) = (268747.627, 322730.075, 406165.120), stdev = 72802.593
[info]   CI (99.9%): [42393.212, 603066.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.47% complete, ETA 00:42:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5347.954 ops/s
[info] # Warmup Iteration   2: 52055.455 ops/s
[info] # Warmup Iteration   3: 52420.500 ops/s
[info] # Warmup Iteration   4: 51053.431 ops/s
[info] # Warmup Iteration   5: 53083.367 ops/s
[info] Iteration   1: 52609.381 ops/s
[info]                  ·gc.alloc.rate:                   491.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15303.606 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 53423.467 ops/s
[info]                  ·gc.alloc.rate:      499.332 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52103.229 ops/s
[info]                  ·gc.alloc.rate:                   486.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20361.480 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 52412.092 ops/s
[info]                  ·gc.alloc.rate:                   489.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20241.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 52427.578 ops/s
[info]                  ·gc.alloc.rate:      489.967 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   52595.149 ±(99.9%) 1915.563 ops/s [Average]
[info]   (min, avg, max) = (52103.229, 52595.149, 53423.467), stdev = 497.466
[info]   CI (99.9%): [50679.586, 54510.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   491.549 ±(99.9%) 17.990 MB/sec [Average]
[info]   (min, avg, max) = (486.906, 491.549, 499.332), stdev = 4.672
[info]   CI (99.9%): [473.559, 509.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.008, 14712.008, 14712.008), stdev = 0.001
[info]   CI (99.9%): [14712.007, 14712.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.580 ±(99.9%) 4.981 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.580, 2.894), stdev = 1.294
[info]   CI (99.9%): [≈ 0, 5.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   17.527 ±(99.9%) 150.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.527, 87.445), stdev = 39.085
[info]   CI (99.9%): [≈ 0, 168.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   371.865 ±(99.9%) 1331.904 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.865, 674.045), stdev = 345.891
[info]   CI (99.9%): [≈ 0, 1703.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   11181.311 ±(99.9%) 40081.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11181.311, 20361.480), stdev = 10409.115
[info]   CI (99.9%): [≈ 0, 51263.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.67% complete, ETA 00:42:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e1277c77/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21665.134 ops/s
[info] # Warmup Iteration   2: 37890.595 ops/s
[info] # Warmup Iteration   3: 39191.537 ops/s
[info] # Warmup Iteration   4: 38701.616 ops/s
[info] # Warmup Iteration   5: 39416.065 ops/s
[info] Iteration   1: 39364.276 ops/s
[info]                  ·gc.alloc.rate:                   585.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26936.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 39578.589 ops/s
[info]                  ·gc.alloc.rate:      589.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 23431.751 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 39529.434 ops/s
[info]                  ·gc.alloc.rate:                   588.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26825.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39556.708 ops/s
[info]                  ·gc.alloc.rate:                   588.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26820.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38495.018 ops/s
[info]                  ·gc.alloc.rate:                   573.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27556.843 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   39304.805 ±(99.9%) 1773.140 ops/s [Average]
[info]   (min, avg, max) = (38495.018, 39304.805, 39578.589), stdev = 460.479
[info]   CI (99.9%): [37531.665, 41077.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   585.034 ±(99.9%) 26.259 MB/sec [Average]
[info]   (min, avg, max) = (573.047, 585.034, 589.068), stdev = 6.819
[info]   CI (99.9%): [558.776, 611.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.834 ±(99.9%) 0.454 B/op [Average]
[info]   (min, avg, max) = (23431.666, 23431.834, 23431.921), stdev = 0.118
[info]   CI (99.9%): [23431.380, 23432.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 1.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.688), stdev = 0.301
[info]   CI (99.9%): [≈ 0, 1.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.007 ±(99.9%) 46.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.007, 27.530), stdev = 12.037
[info]   CI (99.9%): [≈ 0, 52.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   538.995 ±(99.9%) 1160.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.995, 673.935), stdev = 301.308
[info]   CI (99.9%): [≈ 0, 1699.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21627.853 ±(99.9%) 46570.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21627.853, 27556.843), stdev = 12094.183
[info]   CI (99.9%): [≈ 0, 68198.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68.88% complete, ETA 00:41:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65381.122 ops/s
[info] # Warmup Iteration   2: 73592.891 ops/s
[info] # Warmup Iteration   3: 72549.736 ops/s
[info] # Warmup Iteration   4: 73459.231 ops/s
[info] # Warmup Iteration   5: 72806.978 ops/s
[info] Iteration   1: 72864.926 ops/s
[info]                  ·gc.alloc.rate:                   547.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11049.455 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 73091.673 ops/s
[info]                  ·gc.alloc.rate:                   549.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14530.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 72212.803 ops/s
[info]                  ·gc.alloc.rate:                   542.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14706.923 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 74012.711 ops/s
[info]                  ·gc.alloc.rate:      556.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 73918.343 ops/s
[info]                  ·gc.alloc.rate:                   555.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14310.819 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   73220.091 ±(99.9%) 2902.748 ops/s [Average]
[info]   (min, avg, max) = (72212.803, 73220.091, 74012.711), stdev = 753.834
[info]   CI (99.9%): [70317.343, 76122.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   550.341 ±(99.9%) 21.832 MB/sec [Average]
[info]   (min, avg, max) = (542.728, 550.341, 556.267), stdev = 5.670
[info]   CI (99.9%): [528.510, 572.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.006, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.698 ±(99.9%) 5.886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.698, 3.432), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15.017 ±(99.9%) 126.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.017, 73.883), stdev = 32.909
[info]   CI (99.9%): [≈ 0, 141.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.563 ±(99.9%) 1123.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.563, 674.891), stdev = 291.785
[info]   CI (99.9%): [≈ 0, 1630.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10919.497 ±(99.9%) 24211.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10919.497, 14706.923), stdev = 6287.602
[info]   CI (99.9%): [≈ 0, 35130.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.08% complete, ETA 00:41:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85838.427 ops/s
[info] # Warmup Iteration   2: 99001.390 ops/s
[info] # Warmup Iteration   3: 99057.816 ops/s
[info] # Warmup Iteration   4: 98773.150 ops/s
[info] # Warmup Iteration   5: 98914.449 ops/s
[info] Iteration   1: 98691.375 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 98924.416 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 98514.656 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 98860.415 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 98797.622 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   98757.697 ±(99.9%) 619.128 ops/s [Average]
[info]   (min, avg, max) = (98514.656, 98757.697, 98924.416), stdev = 160.786
[info]   CI (99.9%): [98138.569, 99376.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.28% complete, ETA 00:41:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2757.415 ops/s
[info] # Warmup Iteration   2: 5942.774 ops/s
[info] # Warmup Iteration   3: 6182.354 ops/s
[info] # Warmup Iteration   4: 6118.949 ops/s
[info] # Warmup Iteration   5: 6184.932 ops/s
[info] Iteration   1: 6180.071 ops/s
[info]                  ·gc.alloc.rate:                   1820.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              463632.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 344154.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6220.906 ops/s
[info]                  ·gc.alloc.rate:                   1832.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              463632.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 513419.745 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6196.347 ops/s
[info]                  ·gc.alloc.rate:                   1824.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              463631.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 515914.954 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6180.631 ops/s
[info]                  ·gc.alloc.rate:                   1820.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              463631.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 518013.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6215.500 ops/s
[info]                  ·gc.alloc.rate:                   1830.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              463631.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343650.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6198.691 ±(99.9%) 73.426 ops/s [Average]
[info]   (min, avg, max) = (6180.071, 6198.691, 6220.906), stdev = 19.068
[info]   CI (99.9%): [6125.265, 6272.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1825.708 ±(99.9%) 21.786 MB/sec [Average]
[info]   (min, avg, max) = (1820.067, 1825.708, 1832.340), stdev = 5.658
[info]   CI (99.9%): [1803.922, 1847.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   463631.846 ±(99.9%) 2.013 B/op [Average]
[info]   (min, avg, max) = (463631.063, 463631.846, 463632.477), stdev = 0.523
[info]   CI (99.9%): [463629.833, 463633.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.340 ±(99.9%) 26.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.340, 15.899), stdev = 6.901
[info]   CI (99.9%): [≈ 0, 32.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1760.373 ±(99.9%) 1428.594 MB/sec [Average]
[info]   (min, avg, max) = (1351.036, 1760.373, 2034.027), stdev = 371.001
[info]   CI (99.9%): [331.778, 3188.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   447030.444 ±(99.9%) 362565.100 B/op [Average]
[info]   (min, avg, max) = (343650.249, 447030.444, 518013.164), stdev = 94157.005
[info]   CI (99.9%): [84465.345, 809595.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69.48% complete, ETA 00:40:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2295.462 ops/s
[info] # Warmup Iteration   2: 2671.012 ops/s
[info] # Warmup Iteration   3: 2636.883 ops/s
[info] # Warmup Iteration   4: 2658.451 ops/s
[info] # Warmup Iteration   5: 2720.808 ops/s
[info] Iteration   1: 2716.359 ops/s
[info]                  ·gc.alloc.rate:                   1456.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              843968.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1165470.234 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2708.987 ops/s
[info]                  ·gc.alloc.rate:                   1452.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              843968.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 779660.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2710.953 ops/s
[info]                  ·gc.alloc.rate:                   1453.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              843968.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 779859.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2673.204 ops/s
[info]                  ·gc.alloc.rate:                   1433.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              843968.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 791725.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2632.941 ops/s
[info]                  ·gc.alloc.rate:                   1412.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              843968.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 804545.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   2688.489 ±(99.9%) 136.423 ops/s [Average]
[info]   (min, avg, max) = (2632.941, 2688.489, 2716.359), stdev = 35.429
[info]   CI (99.9%): [2552.066, 2824.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1441.590 ±(99.9%) 72.017 MB/sec [Average]
[info]   (min, avg, max) = (1412.202, 1441.590, 1456.348), stdev = 18.703
[info]   CI (99.9%): [1369.573, 1513.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   843968.156 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (843968.150, 843968.156, 843968.162), stdev = 0.006
[info]   CI (99.9%): [843968.135, 843968.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.022, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   34.137 ±(99.9%) 21.500 B/op [Average]
[info]   (min, avg, max) = (24.183, 34.137, 37.321), stdev = 5.583
[info]   CI (99.9%): [12.637, 55.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1477.391 ±(99.9%) 1148.934 MB/sec [Average]
[info]   (min, avg, max) = (1341.717, 1477.391, 2011.131), stdev = 298.375
[info]   CI (99.9%): [328.457, 2626.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   864252.225 ±(99.9%) 649593.508 B/op [Average]
[info]   (min, avg, max) = (779660.753, 864252.225, 1165470.234), stdev = 168697.371
[info]   CI (99.9%): [214658.718, 1513845.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.68% complete, ETA 00:40:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3490081.914 ops/s
[info] # Warmup Iteration   2: 5215934.910 ops/s
[info] # Warmup Iteration   3: 5283183.288 ops/s
[info] # Warmup Iteration   4: 5281513.231 ops/s
[info] # Warmup Iteration   5: 5298490.952 ops/s
[info] Iteration   1: 5274191.412 ops/s
[info]                  ·gc.alloc.rate:                   3269.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3376.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1008.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5326727.938 ops/s
[info]                  ·gc.alloc.rate:                   3302.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 800.249 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5308567.534 ops/s
[info]                  ·gc.alloc.rate:                   3292.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1005.646 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5229719.565 ops/s
[info]                  ·gc.alloc.rate:                   3242.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1022.227 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5255670.174 ops/s
[info]                  ·gc.alloc.rate:                   3258.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1018.159 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   5278975.325 ±(99.9%) 150964.847 ops/s [Average]
[info]   (min, avg, max) = (5229719.565, 5278975.325, 5326727.938), stdev = 39205.091
[info]   CI (99.9%): [5128010.478, 5429940.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3272.943 ±(99.9%) 94.292 MB/sec [Average]
[info]   (min, avg, max) = (3242.319, 3272.943, 3302.480), stdev = 24.487
[info]   CI (99.9%): [3178.651, 3367.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.017, 0.025), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3254.331 ±(99.9%) 1176.922 MB/sec [Average]
[info]   (min, avg, max) = (2707.792, 3254.331, 3399.086), stdev = 305.643
[info]   CI (99.9%): [2077.409, 4431.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   970.863 ±(99.9%) 368.216 B/op [Average]
[info]   (min, avg, max) = (800.249, 970.863, 1022.227), stdev = 95.624
[info]   CI (99.9%): [602.648, 1339.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69.88% complete, ETA 00:40:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.956 ops/s
[info] # Warmup Iteration   2: 40214119.066 ops/s
[info] # Warmup Iteration   3: 36441550.066 ops/s
[info] # Warmup Iteration   4: 42751861.340 ops/s
[info] # Warmup Iteration   5: 42340827.724 ops/s
[info] Iteration   1: 41938985.966 ops/s
[info]                  ·gc.alloc.rate:                   426.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41767514.730 ops/s
[info]                  ·gc.alloc.rate:                   424.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.277 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42062167.423 ops/s
[info]                  ·gc.alloc.rate:      427.621 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 41601299.605 ops/s
[info]                  ·gc.alloc.rate:                   422.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38146625.174 ops/s
[info]                  ·gc.alloc.rate:      387.690 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   41103318.580 ±(99.9%) 6399750.692 ops/s [Average]
[info]   (min, avg, max) = (38146625.174, 41103318.580, 42062167.423), stdev = 1661994.931
[info]   CI (99.9%): [34703567.888, 47503069.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   417.813 ±(99.9%) 65.196 MB/sec [Average]
[info]   (min, avg, max) = (387.690, 417.813, 427.621), stdev = 16.931
[info]   CI (99.9%): [352.617, 483.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.510 ±(99.9%) 4.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.510, 2.552), stdev = 1.141
[info]   CI (99.9%): [≈ 0, 4.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339.279 ±(99.9%) 1219.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.279, 673.458), stdev = 316.699
[info]   CI (99.9%): [≈ 0, 1558.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   12.790 ±(99.9%) 46.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.790, 25.477), stdev = 11.950
[info]   CI (99.9%): [≈ 0, 58.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.08% complete, ETA 00:40:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3385208.920 ops/s
[info] # Warmup Iteration   2: 8809045.151 ops/s
[info] # Warmup Iteration   3: 9058696.935 ops/s
[info] # Warmup Iteration   4: 9039782.115 ops/s
[info] # Warmup Iteration   5: 9022085.065 ops/s
[info] Iteration   1: 9021034.281 ops/s
[info]                  ·gc.alloc.rate:                   3391.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3389.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 591.488 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9034436.603 ops/s
[info]                  ·gc.alloc.rate:                   3397.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 591.601 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9036304.173 ops/s
[info]                  ·gc.alloc.rate:                   3398.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 592.128 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8997793.053 ops/s
[info]                  ·gc.alloc.rate:                   3383.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.237 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9003160.483 ops/s
[info]                  ·gc.alloc.rate:                   3385.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   9018545.719 ±(99.9%) 67837.332 ops/s [Average]
[info]   (min, avg, max) = (8997793.053, 9018545.719, 9036304.173), stdev = 17617.140
[info]   CI (99.9%): [8950708.386, 9086383.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3391.398 ±(99.9%) 25.600 MB/sec [Average]
[info]   (min, avg, max) = (3383.783, 3391.398, 3398.176), stdev = 6.648
[info]   CI (99.9%): [3365.798, 3416.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.013, 0.018), stdev = 0.003
[info]   CI (99.9%): [0.001, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3397.676 ±(99.9%) 21.945 MB/sec [Average]
[info]   (min, avg, max) = (3389.063, 3397.676, 3402.879), stdev = 5.699
[info]   CI (99.9%): [3375.732, 3419.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   593.099 ±(99.9%) 7.234 B/op [Average]
[info]   (min, avg, max) = (591.488, 593.099, 595.237), stdev = 1.879
[info]   CI (99.9%): [585.865, 600.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.28% complete, ETA 00:39:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50408625.737 ops/s
[info] # Warmup Iteration   2: 51366390.709 ops/s
[info] # Warmup Iteration   3: 52574303.839 ops/s
[info] # Warmup Iteration   4: 52631280.700 ops/s
[info] # Warmup Iteration   5: 52659723.542 ops/s
[info] Iteration   1: 52535490.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52616713.204 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52534414.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 52559723.101 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52517350.048 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   52552738.375 ±(99.9%) 149471.629 ops/s [Average]
[info]   (min, avg, max) = (52517350.048, 52552738.375, 52616713.204), stdev = 38817.308
[info]   CI (99.9%): [52403266.746, 52702210.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.48% complete, ETA 00:39:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26923999.787 ops/s
[info] # Warmup Iteration   2: 33354350.146 ops/s
[info] # Warmup Iteration   3: 34479265.617 ops/s
[info] # Warmup Iteration   4: 36075440.428 ops/s
[info] # Warmup Iteration   5: 35652624.164 ops/s
[info] Iteration   1: 35595507.833 ops/s
[info]                  ·gc.alloc.rate:                   1266.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 35580952.337 ops/s
[info]                  ·gc.alloc.rate:                   1265.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 35375426.188 ops/s
[info]                  ·gc.alloc.rate:                   1258.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 36092383.339 ops/s
[info]                  ·gc.alloc.rate:                   1283.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 35992375.728 ops/s
[info]                  ·gc.alloc.rate:                   1280.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   35727329.085 ±(99.9%) 1165023.402 ops/s [Average]
[info]   (min, avg, max) = (35375426.188, 35727329.085, 36092383.339), stdev = 302552.878
[info]   CI (99.9%): [34562305.683, 36892352.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1270.932 ±(99.9%) 41.591 MB/sec [Average]
[info]   (min, avg, max) = (1258.353, 1270.932, 1283.794), stdev = 10.801
[info]   CI (99.9%): [1229.341, 1312.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   1209.178 ±(99.9%) 1155.836 MB/sec [Average]
[info]   (min, avg, max) = (672.227, 1209.178, 1345.435), stdev = 300.167
[info]   CI (99.9%): [53.342, 2365.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.341 ±(99.9%) 51.718 B/op [Average]
[info]   (min, avg, max) = (29.323, 53.341, 59.773), stdev = 13.431
[info]   CI (99.9%): [1.624, 105.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70.68% complete, ETA 00:39:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4082888.611 ops/s
[info] # Warmup Iteration   2: 7160594.500 ops/s
[info] # Warmup Iteration   3: 7406513.077 ops/s
[info] # Warmup Iteration   4: 7328573.233 ops/s
[info] # Warmup Iteration   5: 7376006.312 ops/s
[info] Iteration   1: 7465591.614 ops/s
[info]                  ·gc.alloc.rate:                   3604.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3372.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 711.217 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7442911.720 ops/s
[info]                  ·gc.alloc.rate:                   3592.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4060.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 858.850 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7437206.705 ops/s
[info]                  ·gc.alloc.rate:                   3591.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 717.972 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7398693.979 ops/s
[info]                  ·gc.alloc.rate:                   3573.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 722.754 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7433939.131 ops/s
[info]                  ·gc.alloc.rate:                   3589.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4080.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 864.142 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7435668.630 ±(99.9%) 92742.360 ops/s [Average]
[info]   (min, avg, max) = (7398693.979, 7435668.630, 7465591.614), stdev = 24084.896
[info]   CI (99.9%): [7342926.270, 7528410.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3590.191 ±(99.9%) 42.277 MB/sec [Average]
[info]   (min, avg, max) = (3573.487, 3590.191, 3604.104), stdev = 10.979
[info]   CI (99.9%): [3547.914, 3632.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.019, 0.022), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3661.000 ±(99.9%) 1440.297 MB/sec [Average]
[info]   (min, avg, max) = (3372.764, 3661.000, 4080.935), stdev = 374.041
[info]   CI (99.9%): [2220.703, 5101.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   774.987 ±(99.9%) 304.586 B/op [Average]
[info]   (min, avg, max) = (711.217, 774.987, 864.142), stdev = 79.100
[info]   CI (99.9%): [470.401, 1079.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70.88% complete, ETA 00:39:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7555931.698 ops/s
[info] # Warmup Iteration   2: 10069123.726 ops/s
[info] # Warmup Iteration   3: 10202986.943 ops/s
[info] # Warmup Iteration   4: 10196814.061 ops/s
[info] # Warmup Iteration   5: 10154324.479 ops/s
[info] Iteration   1: 10230797.616 ops/s
[info]                  ·gc.alloc.rate:                   4315.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4746.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.291 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10221087.230 ops/s
[info]                  ·gc.alloc.rate:                   4311.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4076.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 627.900 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10211342.019 ops/s
[info]                  ·gc.alloc.rate:                   4306.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4081.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 629.246 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10223163.353 ops/s
[info]                  ·gc.alloc.rate:                   4311.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4764.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 733.676 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10217394.208 ops/s
[info]                  ·gc.alloc.rate:                   4309.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 629.747 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   10220756.885 ±(99.9%) 27678.054 ops/s [Average]
[info]   (min, avg, max) = (10211342.019, 10220756.885, 10230797.616), stdev = 7187.903
[info]   CI (99.9%): [10193078.831, 10248434.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4310.941 ±(99.9%) 12.545 MB/sec [Average]
[info]   (min, avg, max) = (4306.704, 4310.941, 4315.600), stdev = 3.258
[info]   CI (99.9%): [4298.396, 4323.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.012 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.012, 0.016), stdev = 0.003
[info]   CI (99.9%): [0.002, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   4351.180 ±(99.9%) 1421.024 MB/sec [Average]
[info]   (min, avg, max) = (4076.688, 4351.180, 4764.263), stdev = 369.035
[info]   CI (99.9%): [2930.157, 5772.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   670.172 ±(99.9%) 217.341 B/op [Average]
[info]   (min, avg, max) = (627.900, 670.172, 733.676), stdev = 56.443
[info]   CI (99.9%): [452.831, 887.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.08% complete, ETA 00:38:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15075196.393 ops/s
[info] # Warmup Iteration   2: 22115098.949 ops/s
[info] # Warmup Iteration   3: 20433020.175 ops/s
[info] # Warmup Iteration   4: 20063176.086 ops/s
[info] # Warmup Iteration   5: 20940261.583 ops/s
[info] Iteration   1: 21205505.221 ops/s
[info]                  ·gc.alloc.rate:                   1939.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21261455.457 ops/s
[info]                  ·gc.alloc.rate:                   1944.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21268506.449 ops/s
[info]                  ·gc.alloc.rate:                   1946.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20798171.784 ops/s
[info]                  ·gc.alloc.rate:                   1903.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20649698.257 ops/s
[info]                  ·gc.alloc.rate:                   1888.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   21036667.434 ±(99.9%) 1121672.321 ops/s [Average]
[info]   (min, avg, max) = (20649698.257, 21036667.434, 21268506.449), stdev = 291294.740
[info]   CI (99.9%): [19914995.112, 22158339.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1924.475 ±(99.9%) 102.321 MB/sec [Average]
[info]   (min, avg, max) = (1888.891, 1924.475, 1946.015), stdev = 26.573
[info]   CI (99.9%): [1822.154, 2026.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
[info]   CI (99.9%): [144.000, 144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1884.900 ±(99.9%) 1153.726 MB/sec [Average]
[info]   (min, avg, max) = (1348.994, 1884.900, 2025.932), stdev = 299.619
[info]   CI (99.9%): [731.174, 3038.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   140.952 ±(99.9%) 84.115 B/op [Average]
[info]   (min, avg, max) = (102.071, 140.952, 154.447), stdev = 21.844
[info]   CI (99.9%): [56.837, 225.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.29% complete, ETA 00:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.948 ops/s
[info] # Warmup Iteration   2: 54919835.177 ops/s
[info] # Warmup Iteration   3: 55571204.915 ops/s
[info] # Warmup Iteration   4: 57920570.451 ops/s
[info] # Warmup Iteration   5: 58107812.403 ops/s
[info] Iteration   1: 57922298.387 ops/s
[info]                  ·gc.alloc.rate:                   1766.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 58181131.202 ops/s
[info]                  ·gc.alloc.rate:                   1774.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 58125968.966 ops/s
[info]                  ·gc.alloc.rate:                   1772.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 58017717.248 ops/s
[info]                  ·gc.alloc.rate:                   1769.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.908 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58165878.914 ops/s
[info]                  ·gc.alloc.rate:                   1774.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   58082598.944 ±(99.9%) 423706.550 ops/s [Average]
[info]   (min, avg, max) = (57922298.387, 58082598.944, 58181131.202), stdev = 110035.246
[info]   CI (99.9%): [57658892.394, 58506305.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1771.179 ±(99.9%) 13.456 MB/sec [Average]
[info]   (min, avg, max) = (1766.172, 1771.179, 1774.181), stdev = 3.495
[info]   CI (99.9%): [1757.723, 1784.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1751.364 ±(99.9%) 1417.031 MB/sec [Average]
[info]   (min, avg, max) = (1345.400, 1751.364, 2023.611), stdev = 367.998
[info]   CI (99.9%): [334.333, 3168.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   47.475 ±(99.9%) 38.661 B/op [Average]
[info]   (min, avg, max) = (36.400, 47.475, 54.908), stdev = 10.040
[info]   CI (99.9%): [8.814, 86.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.49% complete, ETA 00:38:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4450697.001 ops/s
[info] # Warmup Iteration   2: 13352830.733 ops/s
[info] # Warmup Iteration   3: 13648971.847 ops/s
[info] # Warmup Iteration   4: 13616352.293 ops/s
[info] # Warmup Iteration   5: 13652692.779 ops/s
[info] Iteration   1: 13634277.110 ops/s
[info]                  ·gc.alloc.rate:                   2702.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 313.148 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13690464.574 ops/s
[info]                  ·gc.alloc.rate:                   2713.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 312.236 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13386889.228 ops/s
[info]                  ·gc.alloc.rate:                   2652.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319.658 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13222430.887 ops/s
[info]                  ·gc.alloc.rate:                   2620.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 323.823 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13393935.756 ops/s
[info]                  ·gc.alloc.rate:                   2654.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319.939 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13465599.511 ±(99.9%) 744376.410 ops/s [Average]
[info]   (min, avg, max) = (13222430.887, 13465599.511, 13690464.574), stdev = 193312.190
[info]   CI (99.9%): [12721223.101, 14209975.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2668.780 ±(99.9%) 147.740 MB/sec [Average]
[info]   (min, avg, max) = (2620.690, 2668.780, 2713.610), stdev = 38.368
[info]   CI (99.9%): [2521.040, 2816.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.008 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.008, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2717.574 ±(99.9%) 15.142 MB/sec [Average]
[info]   (min, avg, max) = (2712.061, 2717.574, 2722.242), stdev = 3.932
[info]   CI (99.9%): [2702.432, 2732.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   317.761 ±(99.9%) 18.953 B/op [Average]
[info]   (min, avg, max) = (312.236, 317.761, 323.823), stdev = 4.922
[info]   CI (99.9%): [298.808, 336.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71.69% complete, ETA 00:37:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35400484.416 ops/s
[info] # Warmup Iteration   2: 45057667.705 ops/s
[info] # Warmup Iteration   3: 42291441.134 ops/s
[info] # Warmup Iteration   4: 46776433.536 ops/s
[info] # Warmup Iteration   5: 46843973.028 ops/s
[info] Iteration   1: 46868023.916 ops/s
[info]                  ·gc.alloc.rate:                   952.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 46925733.897 ops/s
[info]                  ·gc.alloc.rate:                   954.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 46325412.610 ops/s
[info]                  ·gc.alloc.rate:                   941.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46746173.883 ops/s
[info]                  ·gc.alloc.rate:                   950.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.605 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 46796027.446 ops/s
[info]                  ·gc.alloc.rate:                   951.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   46732274.350 ±(99.9%) 914575.904 ops/s [Average]
[info]   (min, avg, max) = (46325412.610, 46732274.350, 46925733.897), stdev = 237512.458
[info]   CI (99.9%): [45817698.447, 47646850.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   949.998 ±(99.9%) 18.926 MB/sec [Average]
[info]   (min, avg, max) = (941.640, 949.998, 954.200), stdev = 4.915
[info]   CI (99.9%): [931.073, 968.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.148 ±(99.9%) 1414.968 MB/sec [Average]
[info]   (min, avg, max) = (671.212, 940.148, 1342.877), stdev = 367.463
[info]   CI (99.9%): [≈ 0, 2355.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.703 ±(99.9%) 48.147 B/op [Average]
[info]   (min, avg, max) = (22.544, 31.703, 45.622), stdev = 12.504
[info]   CI (99.9%): [≈ 0, 79.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71.89% complete, ETA 00:37:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35898539.475 ops/s
[info] # Warmup Iteration   2: 46965985.238 ops/s
[info] # Warmup Iteration   3: 51858229.817 ops/s
[info] # Warmup Iteration   4: 51420820.139 ops/s
[info] # Warmup Iteration   5: 52006841.189 ops/s
[info] Iteration   1: 52094382.269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52213526.336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52026337.174 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 52073964.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52152317.647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   52112105.541 ±(99.9%) 279193.420 ops/s [Average]
[info]   (min, avg, max) = (52026337.174, 52112105.541, 52213526.336), stdev = 72505.645
[info]   CI (99.9%): [51832912.121, 52391298.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.09% complete, ETA 00:37:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37146095.949 ops/s
[info] # Warmup Iteration   2: 40025320.006 ops/s
[info] # Warmup Iteration   3: 40069492.019 ops/s
[info] # Warmup Iteration   4: 39519915.490 ops/s
[info] # Warmup Iteration   5: 40620935.305 ops/s
[info] Iteration   1: 40922651.492 ops/s
[info]                  ·gc.alloc.rate:                   2079.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 40895172.017 ops/s
[info]                  ·gc.alloc.rate:                   2078.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40945330.911 ops/s
[info]                  ·gc.alloc.rate:                   2080.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.841 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 40852751.258 ops/s
[info]                  ·gc.alloc.rate:                   2075.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40763509.607 ops/s
[info]                  ·gc.alloc.rate:                   2071.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   40875883.057 ±(99.9%) 275968.072 ops/s [Average]
[info]   (min, avg, max) = (40763509.607, 40875883.057, 40945330.911), stdev = 71668.032
[info]   CI (99.9%): [40599914.985, 41151851.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2077.158 ±(99.9%) 13.631 MB/sec [Average]
[info]   (min, avg, max) = (2071.615, 2077.158, 2080.521), stdev = 3.540
[info]   CI (99.9%): [2063.527, 2090.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   2024.273 ±(99.9%) 18.462 MB/sec [Average]
[info]   (min, avg, max) = (2018.132, 2024.273, 2030.561), stdev = 4.794
[info]   CI (99.9%): [2005.811, 2042.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   77.964 ±(99.9%) 1.166 B/op [Average]
[info]   (min, avg, max) = (77.646, 77.964, 78.415), stdev = 0.303
[info]   CI (99.9%): [76.798, 79.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.29% complete, ETA 00:37:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1663246.451 ops/s
[info] # Warmup Iteration   2: 2418696.483 ops/s
[info] # Warmup Iteration   3: 2522467.903 ops/s
[info] # Warmup Iteration   4: 2463917.281 ops/s
[info] # Warmup Iteration   5: 2480253.491 ops/s
[info] Iteration   1: 2533771.867 ops/s
[info]                  ·gc.alloc.rate:                   2072.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1249.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2542985.542 ops/s
[info]                  ·gc.alloc.rate:                   2080.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1247.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2539726.754 ops/s
[info]                  ·gc.alloc.rate:                   2077.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1251.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2526448.572 ops/s
[info]                  ·gc.alloc.rate:                   2067.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1680.890 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2491279.765 ops/s
[info]                  ·gc.alloc.rate:                   2038.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1281.219 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2526842.500 ±(99.9%) 80299.573 ops/s [Average]
[info]   (min, avg, max) = (2491279.765, 2526842.500, 2542985.542), stdev = 20853.544
[info]   CI (99.9%): [2446542.927, 2607142.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2067.345 ±(99.9%) 65.378 MB/sec [Average]
[info]   (min, avg, max) = (2038.426, 2067.345, 2080.841), stdev = 16.979
[info]   CI (99.9%): [2001.967, 2132.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1288.000, 1288.000, 1288.000), stdev = 0.001
[info]   CI (99.9%): [1288.000, 1288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.052), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2153.746 ±(99.9%) 1171.042 MB/sec [Average]
[info]   (min, avg, max) = (2010.215, 2153.746, 2697.646), stdev = 304.116
[info]   CI (99.9%): [982.704, 3324.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1341.930 ±(99.9%) 731.605 B/op [Average]
[info]   (min, avg, max) = (1247.372, 1341.930, 1680.890), stdev = 189.996
[info]   CI (99.9%): [610.325, 2073.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72.49% complete, ETA 00:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1220194.271 ops/s
[info] # Warmup Iteration   2: 1804890.296 ops/s
[info] # Warmup Iteration   3: 1833115.432 ops/s
[info] # Warmup Iteration   4: 1822465.199 ops/s
[info] # Warmup Iteration   5: 1819760.568 ops/s
[info] Iteration   1: 1814520.688 ops/s
[info]                  ·gc.alloc.rate:                   10058.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              8728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9535.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8274.159 B/op
[info]                  ·gc.count:                        15.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1830534.785 ops/s
[info]                  ·gc.alloc.rate:                   10148.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              8728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      9536.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8201.798 B/op
[info]                  ·gc.count:                        14.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1824596.142 ops/s
[info]                  ·gc.alloc.rate:                   10119.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              8728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10221.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8815.994 B/op
[info]                  ·gc.count:                        15.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 1821364.837 ops/s
[info]                  ·gc.alloc.rate:                   10098.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              8728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10218.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8831.910 B/op
[info]                  ·gc.count:                        15.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 1811743.488 ops/s
[info]                  ·gc.alloc.rate:                   10045.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              8728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      10218.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8878.755 B/op
[info]                  ·gc.count:                        15.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   1820551.988 ±(99.9%) 29239.447 ops/s [Average]
[info]   (min, avg, max) = (1811743.488, 1820551.988, 1830534.785), stdev = 7593.392
[info]   CI (99.9%): [1791312.541, 1849791.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   10094.007 ±(99.9%) 163.585 MB/sec [Average]
[info]   (min, avg, max) = (10045.332, 10094.007, 10148.570), stdev = 42.482
[info]   CI (99.9%): [9930.422, 10257.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8728.000, 8728.000, 8728.000), stdev = 0.001
[info]   CI (99.9%): [8728.000, 8728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.090 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.090, 0.108), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   9946.177 ±(99.9%) 1440.732 MB/sec [Average]
[info]   (min, avg, max) = (9535.905, 9946.177, 10221.064), stdev = 374.153
[info]   CI (99.9%): [8505.446, 11386.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8600.523 ±(99.9%) 1281.281 B/op [Average]
[info]   (min, avg, max) = (8201.798, 8600.523, 8878.755), stdev = 332.745
[info]   CI (99.9%): [7319.242, 9881.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   74.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (14.000, 14.800, 15.000), stdev = 0.447
[info]   CI (99.9%): [74.000, 74.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.600, 14.000), stdev = 1.517
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.69% complete, ETA 00:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135413.174 ops/s
[info] # Warmup Iteration   2: 156441.843 ops/s
[info] # Warmup Iteration   3: 157298.859 ops/s
[info] # Warmup Iteration   4: 158382.646 ops/s
[info] # Warmup Iteration   5: 159463.649 ops/s
[info] Iteration   1: 159175.908 ops/s
[info]                  ·gc.alloc.rate:                   2918.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26685.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 159757.491 ops/s
[info]                  ·gc.alloc.rate:                   2929.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3382.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33330.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 158193.259 ops/s
[info]                  ·gc.alloc.rate:                   2901.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26974.497 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 158329.421 ops/s
[info]                  ·gc.alloc.rate:                   2903.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26990.207 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 159492.240 ops/s
[info]                  ·gc.alloc.rate:                   2925.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33533.715 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   158989.664 ±(99.9%) 2686.503 ops/s [Average]
[info]   (min, avg, max) = (158193.259, 158989.664, 159757.491), stdev = 697.676
[info]   CI (99.9%): [156303.161, 161676.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2915.784 ±(99.9%) 48.721 MB/sec [Average]
[info]   (min, avg, max) = (2901.589, 2915.784, 2929.659), stdev = 12.653
[info]   CI (99.9%): [2867.063, 2964.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.002, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.743 ±(99.9%) 0.915 B/op [Average]
[info]   (min, avg, max) = (0.410, 0.743, 1.035), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2980.533 ±(99.9%) 1438.743 MB/sec [Average]
[info]   (min, avg, max) = (2697.977, 2980.533, 3397.401), stdev = 373.637
[info]   CI (99.9%): [1541.790, 4419.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29502.978 ±(99.9%) 13822.126 B/op [Average]
[info]   (min, avg, max) = (26685.948, 29502.978, 33533.715), stdev = 3589.562
[info]   CI (99.9%): [15680.852, 43325.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72.89% complete, ETA 00:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9108.013 ops/s
[info] # Warmup Iteration   2: 24260.466 ops/s
[info] # Warmup Iteration   3: 24143.216 ops/s
[info] # Warmup Iteration   4: 24200.802 ops/s
[info] # Warmup Iteration   5: 23962.959 ops/s
[info] Iteration   1: 24349.850 ops/s
[info]                  ·gc.alloc.rate:                   1893.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131195.770 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24439.457 ops/s
[info]                  ·gc.alloc.rate:                   1900.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130846.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24371.072 ops/s
[info]                  ·gc.alloc.rate:                   1895.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87578.485 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 24183.884 ops/s
[info]                  ·gc.alloc.rate:                   1880.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132469.957 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24371.169 ops/s
[info]                  ·gc.alloc.rate:                   1894.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131582.803 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   24343.086 ±(99.9%) 366.572 ops/s [Average]
[info]   (min, avg, max) = (24183.884, 24343.086, 24439.457), stdev = 95.198
[info]   CI (99.9%): [23976.514, 24709.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1892.912 ±(99.9%) 28.579 MB/sec [Average]
[info]   (min, avg, max) = (1880.447, 1892.912, 1900.289), stdev = 7.422
[info]   CI (99.9%): [1864.333, 1921.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122400.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (122400.017, 122400.017, 122400.018), stdev = 0.001
[info]   CI (99.9%): [122400.015, 122400.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.961 ±(99.9%) 8.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.961, 5.362), stdev = 2.209
[info]   CI (99.9%): [≈ 0, 11.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1897.883 ±(99.9%) 1166.132 MB/sec [Average]
[info]   (min, avg, max) = (1356.171, 1897.883, 2037.087), stdev = 302.841
[info]   CI (99.9%): [731.751, 3064.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   122734.765 ±(99.9%) 75712.404 B/op [Average]
[info]   (min, avg, max) = (87578.485, 122734.765, 132469.957), stdev = 19662.271
[info]   CI (99.9%): [47022.361, 198447.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.09% complete, ETA 00:36:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67811.128 ops/s
[info] # Warmup Iteration   2: 122728.696 ops/s
[info] # Warmup Iteration   3: 124202.918 ops/s
[info] # Warmup Iteration   4: 121972.909 ops/s
[info] # Warmup Iteration   5: 123996.891 ops/s
[info] Iteration   1: 123465.512 ops/s
[info]                  ·gc.alloc.rate:                   1371.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17223.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 123044.643 ops/s
[info]                  ·gc.alloc.rate:                   1366.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17295.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 120187.985 ops/s
[info]                  ·gc.alloc.rate:                   1335.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17723.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 123224.005 ops/s
[info]                  ·gc.alloc.rate:                   1368.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17299.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 123961.113 ops/s
[info]                  ·gc.alloc.rate:                   1376.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17209.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   122776.652 ±(99.9%) 5727.830 ops/s [Average]
[info]   (min, avg, max) = (120187.985, 122776.652, 123961.113), stdev = 1487.499
[info]   CI (99.9%): [117048.822, 128504.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1363.960 ±(99.9%) 63.504 MB/sec [Average]
[info]   (min, avg, max) = (1335.252, 1363.960, 1376.956), stdev = 16.492
[info]   CI (99.9%): [1300.456, 1427.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.003, 17488.003, 17488.004), stdev = 0.001
[info]   CI (99.9%): [17488.003, 17488.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.908 ±(99.9%) 0.596 B/op [Average]
[info]   (min, avg, max) = (0.793, 0.908, 1.090), stdev = 0.155
[info]   CI (99.9%): [0.312, 1.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.060 ±(99.9%) 6.282 MB/sec [Average]
[info]   (min, avg, max) = (1351.093, 1353.060, 1355.035), stdev = 1.631
[info]   CI (99.9%): [1346.778, 1359.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17350.295 ±(99.9%) 818.336 B/op [Average]
[info]   (min, avg, max) = (17209.595, 17350.295, 17723.394), stdev = 212.519
[info]   CI (99.9%): [16531.959, 18168.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.29% complete, ETA 00:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456320.414 ops/s
[info] # Warmup Iteration   2: 476895.736 ops/s
[info] # Warmup Iteration   3: 481264.071 ops/s
[info] # Warmup Iteration   4: 482948.590 ops/s
[info] # Warmup Iteration   5: 503637.835 ops/s
[info] Iteration   1: 493621.185 ops/s
[info]                  ·gc.alloc.rate:                   1020.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4285.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 494714.458 ops/s
[info]                  ·gc.alloc.rate:                   1023.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4272.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 489624.277 ops/s
[info]                  ·gc.alloc.rate:                   1012.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2158.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 491694.828 ops/s
[info]                  ·gc.alloc.rate:                   1016.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4299.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 493022.322 ops/s
[info]                  ·gc.alloc.rate:                   1019.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2144.321 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   492535.414 ±(99.9%) 7542.131 ops/s [Average]
[info]   (min, avg, max) = (489624.277, 492535.414, 494714.458), stdev = 1958.667
[info]   CI (99.9%): [484993.283, 500077.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1018.697 ±(99.9%) 15.690 MB/sec [Average]
[info]   (min, avg, max) = (1012.663, 1018.697, 1023.379), stdev = 4.075
[info]   CI (99.9%): [1003.006, 1034.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.106 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.200), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074.390 ±(99.9%) 1416.577 MB/sec [Average]
[info]   (min, avg, max) = (671.236, 1074.390, 1343.520), stdev = 367.881
[info]   CI (99.9%): [≈ 0, 2490.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3431.933 ±(99.9%) 4501.907 B/op [Average]
[info]   (min, avg, max) = (2144.321, 3431.933, 4299.199), stdev = 1169.131
[info]   CI (99.9%): [≈ 0, 7933.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.49% complete, ETA 00:35:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 483706.711 ops/s
[info] # Warmup Iteration   2: 523268.755 ops/s
[info] # Warmup Iteration   3: 523273.406 ops/s
[info] # Warmup Iteration   4: 528974.859 ops/s
[info] # Warmup Iteration   5: 530319.989 ops/s
[info] Iteration   1: 524680.672 ops/s
[info]                  ·gc.alloc.rate:                   511.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1534.607 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 531488.260 ops/s
[info]                  ·gc.alloc.rate:      518.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 1536.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 528036.532 ops/s
[info]                  ·gc.alloc.rate:                   515.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2011.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 530328.409 ops/s
[info]                  ·gc.alloc.rate:                   517.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2002.601 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 530009.041 ops/s
[info]                  ·gc.alloc.rate:                   517.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1995.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   528908.583 ±(99.9%) 10281.534 ops/s [Average]
[info]   (min, avg, max) = (524680.672, 528908.583, 531488.260), stdev = 2670.082
[info]   CI (99.9%): [518627.049, 539190.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   516.069 ±(99.9%) 10.134 MB/sec [Average]
[info]   (min, avg, max) = (511.896, 516.069, 518.581), stdev = 2.632
[info]   CI (99.9%): [505.935, 526.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.676 ±(99.9%) 5.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.317), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2.015 ±(99.9%) 16.950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.015, 9.888), stdev = 4.402
[info]   CI (99.9%): [≈ 0, 18.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   506.557 ±(99.9%) 1123.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.557, 674.675), stdev = 291.772
[info]   CI (99.9%): [≈ 0, 1630.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1508.886 ±(99.9%) 3340.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1508.886, 2011.341), stdev = 867.580
[info]   CI (99.9%): [≈ 0, 4849.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.69% complete, ETA 00:35:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11864.788 ops/s
[info] # Warmup Iteration   2: 20624.098 ops/s
[info] # Warmup Iteration   3: 20661.152 ops/s
[info] # Warmup Iteration   4: 20294.048 ops/s
[info] # Warmup Iteration   5: 20765.155 ops/s
[info] Iteration   1: 20655.439 ops/s
[info]                  ·gc.alloc.rate:                   451.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38977.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20774.355 ops/s
[info]                  ·gc.alloc.rate:      454.280 MB/sec
[info]                  ·gc.alloc.rate.norm: 34424.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20020.423 ops/s
[info]                  ·gc.alloc.rate:                   437.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52962.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20692.234 ops/s
[info]                  ·gc.alloc.rate:                   452.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51245.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20722.203 ops/s
[info]                  ·gc.alloc.rate:      453.128 MB/sec
[info]                  ·gc.alloc.rate.norm: 34424.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   20572.931 ±(99.9%) 1201.067 ops/s [Average]
[info]   (min, avg, max) = (20020.423, 20572.931, 20774.355), stdev = 311.913
[info]   CI (99.9%): [19371.864, 21773.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   449.901 ±(99.9%) 26.033 MB/sec [Average]
[info]   (min, avg, max) = (437.928, 449.901, 454.280), stdev = 6.761
[info]   CI (99.9%): [423.869, 475.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34424.180 ±(99.9%) 1.371 B/op [Average]
[info]   (min, avg, max) = (34424.020, 34424.180, 34424.817), stdev = 0.356
[info]   CI (99.9%): [34422.808, 34425.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.574 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.333), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.236 ±(99.9%) 45.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.236, 26.180), stdev = 11.708
[info]   CI (99.9%): [≈ 0, 50.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   371.758 ±(99.9%) 1331.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.758, 673.772), stdev = 345.776
[info]   CI (99.9%): [≈ 0, 1703.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28637.164 ±(99.9%) 102783.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28637.164, 52962.879), stdev = 26692.605
[info]   CI (99.9%): [≈ 0, 131420.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.90% complete, ETA 00:35:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 325430.278 ops/s
[info] # Warmup Iteration   2: 388404.487 ops/s
[info] # Warmup Iteration   3: 391868.050 ops/s
[info] # Warmup Iteration   4: 387003.251 ops/s
[info] # Warmup Iteration   5: 392397.869 ops/s
[info] Iteration   1: 391425.157 ops/s
[info]                  ·gc.alloc.rate:                   2656.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10841.344 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 391115.006 ops/s
[info]                  ·gc.alloc.rate:                   2654.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10871.683 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 392485.833 ops/s
[info]                  ·gc.alloc.rate:                   2662.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10855.195 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 389553.034 ops/s
[info]                  ·gc.alloc.rate:                   2642.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10958.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 389855.028 ops/s
[info]                  ·gc.alloc.rate:                   2645.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10965.972 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   390886.812 ±(99.9%) 4613.667 ops/s [Average]
[info]   (min, avg, max) = (389553.034, 390886.812, 392485.833), stdev = 1198.155
[info]   CI (99.9%): [386273.145, 395500.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2652.310 ±(99.9%) 31.502 MB/sec [Average]
[info]   (min, avg, max) = (2642.594, 2652.310, 2662.918), stdev = 8.181
[info]   CI (99.9%): [2620.809, 2683.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.201 ±(99.9%) 0.368 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.201, 0.335), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2706.539 ±(99.9%) 30.683 MB/sec [Average]
[info]   (min, avg, max) = (2696.232, 2706.539, 2716.604), stdev = 7.968
[info]   CI (99.9%): [2675.855, 2737.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10898.492 ±(99.9%) 227.693 B/op [Average]
[info]   (min, avg, max) = (10841.344, 10898.492, 10965.972), stdev = 59.131
[info]   CI (99.9%): [10670.800, 11126.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.10% complete, ETA 00:34:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208776.240 ops/s
[info] # Warmup Iteration   2: 442656.330 ops/s
[info] # Warmup Iteration   3: 446196.221 ops/s
[info] # Warmup Iteration   4: 447010.996 ops/s
[info] # Warmup Iteration   5: 445107.509 ops/s
[info] Iteration   1: 444346.826 ops/s
[info]                  ·gc.alloc.rate:                   1172.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2392.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 444306.823 ops/s
[info]                  ·gc.alloc.rate:                   1171.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4786.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 444254.781 ops/s
[info]                  ·gc.alloc.rate:                   1171.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4790.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 443092.166 ops/s
[info]                  ·gc.alloc.rate:                   1168.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4807.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 444502.486 ops/s
[info]                  ·gc.alloc.rate:                   1172.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2397.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   444100.616 ±(99.9%) 2199.741 ops/s [Average]
[info]   (min, avg, max) = (443092.166, 444100.616, 444502.486), stdev = 571.266
[info]   CI (99.9%): [441900.876, 446300.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1171.355 ±(99.9%) 5.896 MB/sec [Average]
[info]   (min, avg, max) = (1168.661, 1171.355, 1172.379), stdev = 1.531
[info]   CI (99.9%): [1165.458, 1177.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4152.001, 4152.001, 4152.001), stdev = 0.001
[info]   CI (99.9%): [4152.001, 4152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.103 ±(99.9%) 0.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.370), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.638 ±(99.9%) 1425.314 MB/sec [Average]
[info]   (min, avg, max) = (675.400, 1081.638, 1353.261), stdev = 370.150
[info]   CI (99.9%): [≈ 0, 2506.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3834.773 ±(99.9%) 5061.826 B/op [Average]
[info]   (min, avg, max) = (2392.259, 3834.773, 4807.844), stdev = 1314.540
[info]   CI (99.9%): [≈ 0, 8896.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.30% complete, ETA 00:34:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 410591.827 ops/s
[info] # Warmup Iteration   2: 427837.423 ops/s
[info] # Warmup Iteration   3: 428273.206 ops/s
[info] # Warmup Iteration   4: 431204.871 ops/s
[info] # Warmup Iteration   5: 430799.972 ops/s
[info] Iteration   1: 430798.943 ops/s
[info]                  ·gc.alloc.rate:                   849.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4920.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 432059.375 ops/s
[info]                  ·gc.alloc.rate:                   851.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2448.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 429839.302 ops/s
[info]                  ·gc.alloc.rate:                   847.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2458.389 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 430733.311 ops/s
[info]                  ·gc.alloc.rate:                   849.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2453.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 428926.032 ops/s
[info]                  ·gc.alloc.rate:                   845.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4927.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   430471.392 ±(99.9%) 4509.224 ops/s [Average]
[info]   (min, avg, max) = (428926.032, 430471.392, 432059.375), stdev = 1171.031
[info]   CI (99.9%): [425962.168, 434980.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   848.797 ±(99.9%) 9.010 MB/sec [Average]
[info]   (min, avg, max) = (845.707, 848.797, 851.981), stdev = 2.340
[info]   CI (99.9%): [839.787, 857.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.122 ±(99.9%) 0.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.304), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.715 ±(99.9%) 1419.338 MB/sec [Average]
[info]   (min, avg, max) = (671.266, 940.715, 1346.531), stdev = 368.598
[info]   CI (99.9%): [≈ 0, 2360.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3441.609 ±(99.9%) 5210.891 B/op [Average]
[info]   (min, avg, max) = (2448.436, 3441.609, 4927.195), stdev = 1353.252
[info]   CI (99.9%): [≈ 0, 8652.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.50% complete, ETA 00:34:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66835.498 ops/s
[info] # Warmup Iteration   2: 109104.767 ops/s
[info] # Warmup Iteration   3: 111600.920 ops/s
[info] # Warmup Iteration   4: 111577.401 ops/s
[info] # Warmup Iteration   5: 111625.845 ops/s
[info] Iteration   1: 110870.570 ops/s
[info]                  ·gc.alloc.rate:                   4013.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4074.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57856.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 111218.859 ops/s
[info]                  ·gc.alloc.rate:                   4025.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4079.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57746.284 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 110723.991 ops/s
[info]                  ·gc.alloc.rate:                   4007.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58059.596 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 109872.673 ops/s
[info]                  ·gc.alloc.rate:                   3977.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4085.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58524.551 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 109176.483 ops/s
[info]                  ·gc.alloc.rate:                   3951.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4086.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58939.189 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   110372.515 ±(99.9%) 3203.349 ops/s [Average]
[info]   (min, avg, max) = (109176.483, 110372.515, 111218.859), stdev = 831.900
[info]   CI (99.9%): [107169.166, 113575.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3995.062 ±(99.9%) 115.866 MB/sec [Average]
[info]   (min, avg, max) = (3951.372, 3995.062, 4025.345), stdev = 30.090
[info]   CI (99.9%): [3879.196, 4110.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.004), stdev = 0.001
[info]   CI (99.9%): [56984.003, 56984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.126 ±(99.9%) 1.229 B/op [Average]
[info]   (min, avg, max) = (0.600, 1.126, 1.473), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 2.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   4081.866 ±(99.9%) 19.351 MB/sec [Average]
[info]   (min, avg, max) = (4074.483, 4081.866, 4086.948), stdev = 5.025
[info]   CI (99.9%): [4062.515, 4101.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   58225.129 ±(99.9%) 1918.058 B/op [Average]
[info]   (min, avg, max) = (57746.284, 58225.129, 58939.189), stdev = 498.114
[info]   CI (99.9%): [56307.071, 60143.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74.70% complete, ETA 00:33:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 503667.391 ops/s
[info] # Warmup Iteration   2: 568763.426 ops/s
[info] # Warmup Iteration   3: 568550.089 ops/s
[info] # Warmup Iteration   4: 565248.920 ops/s
[info] # Warmup Iteration   5: 566683.519 ops/s
[info] Iteration   1: 575372.075 ops/s
[info]                  ·gc.alloc.rate:                   2511.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2694.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7370.699 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 569357.880 ops/s
[info]                  ·gc.alloc.rate:                   2485.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7465.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 560340.114 ops/s
[info]                  ·gc.alloc.rate:                   2445.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5697.725 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 574012.809 ops/s
[info]                  ·gc.alloc.rate:                   2505.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7429.378 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 576241.177 ops/s
[info]                  ·gc.alloc.rate:                   2515.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7413.407 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   571064.811 ±(99.9%) 25248.211 ops/s [Average]
[info]   (min, avg, max) = (560340.114, 571064.811, 576241.177), stdev = 6556.880
[info]   CI (99.9%): [545816.600, 596313.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2492.883 ±(99.9%) 110.272 MB/sec [Average]
[info]   (min, avg, max) = (2445.997, 2492.883, 2515.499), stdev = 28.637
[info]   CI (99.9%): [2382.611, 2603.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   6872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6872.001, 6872.001, 6872.001), stdev = 0.001
[info]   CI (99.9%): [6872.001, 6872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.183 ±(99.9%) 0.237 B/op [Average]
[info]   (min, avg, max) = (0.117, 0.183, 0.285), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2568.926 ±(99.9%) 1164.687 MB/sec [Average]
[info]   (min, avg, max) = (2028.029, 2568.926, 2713.681), stdev = 302.466
[info]   CI (99.9%): [1404.239, 3733.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7075.249 ±(99.9%) 2968.091 B/op [Average]
[info]   (min, avg, max) = (5697.725, 7075.249, 7465.035), stdev = 770.804
[info]   CI (99.9%): [4107.158, 10043.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.90% complete, ETA 00:33:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257546.430 ops/s
[info] # Warmup Iteration   2: 319928.205 ops/s
[info] # Warmup Iteration   3: 325910.100 ops/s
[info] # Warmup Iteration   4: 325270.846 ops/s
[info] # Warmup Iteration   5: 325915.390 ops/s
[info] Iteration   1: 325759.118 ops/s
[info]                  ·gc.alloc.rate:                   496.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2471.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 327416.598 ops/s
[info]                  ·gc.alloc.rate:                   499.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2459.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 326519.290 ops/s
[info]                  ·gc.alloc.rate:                   497.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3249.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 326531.066 ops/s
[info]                  ·gc.alloc.rate:                   497.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3249.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 326406.241 ops/s
[info]                  ·gc.alloc.rate:      497.632 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   326526.463 ±(99.9%) 2274.558 ops/s [Average]
[info]   (min, avg, max) = (325759.118, 326526.463, 327416.598), stdev = 590.696
[info]   CI (99.9%): [324251.904, 328801.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   497.811 ±(99.9%) 3.321 MB/sec [Average]
[info]   (min, avg, max) = (496.703, 497.811, 499.120), stdev = 0.862
[info]   CI (99.9%): [494.490, 501.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2400.001, 2400.001, 2400.001), stdev = 0.001
[info]   CI (99.9%): [2400.001, 2400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.715 ±(99.9%) 6.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.715, 3.515), stdev = 1.565
[info]   CI (99.9%): [≈ 0, 6.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.449 ±(99.9%) 29.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.449, 16.946), stdev = 7.546
[info]   CI (99.9%): [≈ 0, 32.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.150 ±(99.9%) 1067.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.150, 673.923), stdev = 277.224
[info]   CI (99.9%): [≈ 0, 1541.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2285.764 ±(99.9%) 5146.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2285.764, 3249.119), stdev = 1336.528
[info]   CI (99.9%): [≈ 0, 7432.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.10% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 414661.021 ops/s
[info] # Warmup Iteration   2: 697462.971 ops/s
[info] # Warmup Iteration   3: 695540.224 ops/s
[info] # Warmup Iteration   4: 697156.019 ops/s
[info] # Warmup Iteration   5: 698082.855 ops/s
[info] Iteration   1: 697472.713 ops/s
[info]                  ·gc.alloc.rate:                   510.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1154.324 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 697215.443 ops/s
[info]                  ·gc.alloc.rate:                   510.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1520.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 697133.430 ops/s
[info]                  ·gc.alloc.rate:                   510.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1521.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 699715.700 ops/s
[info]                  ·gc.alloc.rate:      512.069 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 716073.813 ops/s
[info]                  ·gc.alloc.rate:                   523.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1482.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   701522.220 ±(99.9%) 31590.578 ops/s [Average]
[info]   (min, avg, max) = (697133.430, 701522.220, 716073.813), stdev = 8203.973
[info]   CI (99.9%): [669931.641, 733112.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   513.388 ±(99.9%) 23.013 MB/sec [Average]
[info]   (min, avg, max) = (510.183, 513.388, 523.988), stdev = 5.976
[info]   CI (99.9%): [490.375, 536.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.001, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.271), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.141 ±(99.9%) 1.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.611), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.600 ±(99.9%) 1123.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.600, 674.216), stdev = 291.795
[info]   CI (99.9%): [≈ 0, 1630.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1135.728 ±(99.9%) 2515.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1135.728, 1521.040), stdev = 653.303
[info]   CI (99.9%): [≈ 0, 3651.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.30% complete, ETA 00:33:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1975350.941 ops/s
[info] # Warmup Iteration   2: 2173951.273 ops/s
[info] # Warmup Iteration   3: 1990985.704 ops/s
[info] # Warmup Iteration   4: 2002141.340 ops/s
[info] # Warmup Iteration   5: 2004935.871 ops/s
[info] Iteration   1: 2002427.459 ops/s
[info]                  ·gc.alloc.rate:                   925.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2009979.533 ops/s
[info]                  ·gc.alloc.rate:                   929.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1052.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2007965.956 ops/s
[info]                  ·gc.alloc.rate:                   928.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1995224.023 ops/s
[info]                  ·gc.alloc.rate:                   922.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1059.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2001609.103 ops/s
[info]                  ·gc.alloc.rate:                   925.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2003441.215 ±(99.9%) 22380.943 ops/s [Average]
[info]   (min, avg, max) = (1995224.023, 2003441.215, 2009979.533), stdev = 5812.260
[info]   CI (99.9%): [1981060.272, 2025822.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   926.486 ±(99.9%) 10.606 MB/sec [Average]
[info]   (min, avg, max) = (922.668, 926.486, 929.587), stdev = 2.754
[info]   CI (99.9%): [915.880, 937.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.098), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.117 ±(99.9%) 1415.970 MB/sec [Average]
[info]   (min, avg, max) = (671.351, 940.117, 1343.400), stdev = 367.723
[info]   CI (99.9%): [≈ 0, 2356.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   738.799 ±(99.9%) 1113.841 B/op [Average]
[info]   (min, avg, max) = (526.258, 738.799, 1059.234), stdev = 289.261
[info]   CI (99.9%): [≈ 0, 1852.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75.50% complete, ETA 00:32:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2228573.359 ops/s
[info] # Warmup Iteration   2: 2398034.102 ops/s
[info] # Warmup Iteration   3: 2367937.718 ops/s
[info] # Warmup Iteration   4: 2367120.273 ops/s
[info] # Warmup Iteration   5: 2338536.614 ops/s
[info] Iteration   1: 2342392.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2371384.476 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2370658.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2358850.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2362241.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2361105.383 ±(99.9%) 45294.796 ops/s [Average]
[info]   (min, avg, max) = (2342392.639, 2361105.383, 2371384.476), stdev = 11762.915
[info]   CI (99.9%): [2315810.587, 2406400.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.70% complete, ETA 00:32:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315060.647 ops/s
[info] # Warmup Iteration   2: 362458.996 ops/s
[info] # Warmup Iteration   3: 367611.993 ops/s
[info] # Warmup Iteration   4: 370842.189 ops/s
[info] # Warmup Iteration   5: 373355.662 ops/s
[info] Iteration   1: 375220.167 ops/s
[info]                  ·gc.alloc.rate:                   539.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2145.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 382523.599 ops/s
[info]                  ·gc.alloc.rate:                   550.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2770.755 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 383695.268 ops/s
[info]                  ·gc.alloc.rate:      551.765 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 384288.767 ops/s
[info]                  ·gc.alloc.rate:                   552.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2757.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 384888.936 ops/s
[info]                  ·gc.alloc.rate:                   553.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2742.881 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   382123.347 ±(99.9%) 15235.922 ops/s [Average]
[info]   (min, avg, max) = (375220.167, 382123.347, 384888.936), stdev = 3956.721
[info]   CI (99.9%): [366887.425, 397359.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   549.568 ±(99.9%) 21.994 MB/sec [Average]
[info]   (min, avg, max) = (539.618, 549.568, 553.543), stdev = 5.712
[info]   CI (99.9%): [527.574, 571.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.821 ±(99.9%) 6.982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.821, 4.065), stdev = 1.813
[info]   CI (99.9%): [≈ 0, 7.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.380 ±(99.9%) 28.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.380, 16.730), stdev = 7.463
[info]   CI (99.9%): [≈ 0, 32.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   505.744 ±(99.9%) 1121.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.744, 673.438), stdev = 291.190
[info]   CI (99.9%): [≈ 0, 1627.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2083.469 ±(99.9%) 4599.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2083.469, 2770.755), stdev = 1194.451
[info]   CI (99.9%): [≈ 0, 6682.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75.90% complete, ETA 00:32:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94539.041 ops/s
[info] # Warmup Iteration   2: 110984.207 ops/s
[info] # Warmup Iteration   3: 111045.174 ops/s
[info] # Warmup Iteration   4: 112237.274 ops/s
[info] # Warmup Iteration   5: 111517.900 ops/s
[info] Iteration   1: 112218.593 ops/s
[info]                  ·gc.alloc.rate:                   2071.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28286.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 112775.540 ops/s
[info]                  ·gc.alloc.rate:                   2081.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28185.128 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 112178.508 ops/s
[info]                  ·gc.alloc.rate:                   2070.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28394.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 112427.182 ops/s
[info]                  ·gc.alloc.rate:                   2075.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28369.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 112446.909 ops/s
[info]                  ·gc.alloc.rate:                   2075.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              29056.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28410.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   112409.346 ±(99.9%) 914.276 ops/s [Average]
[info]   (min, avg, max) = (112178.508, 112409.346, 112775.540), stdev = 237.435
[info]   CI (99.9%): [111495.070, 113323.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2074.668 ±(99.9%) 16.700 MB/sec [Average]
[info]   (min, avg, max) = (2070.579, 2074.668, 2081.372), stdev = 4.337
[info]   CI (99.9%): [2057.967, 2091.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   29056.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29056.004, 29056.004, 29056.004), stdev = 0.001
[info]   CI (99.9%): [29056.003, 29056.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.874 ±(99.9%) 1.588 B/op [Average]
[info]   (min, avg, max) = (0.291, 0.874, 1.168), stdev = 0.412
[info]   CI (99.9%): [≈ 0, 2.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2022.767 ±(99.9%) 20.167 MB/sec [Average]
[info]   (min, avg, max) = (2016.197, 2022.767, 2029.191), stdev = 5.237
[info]   CI (99.9%): [2002.600, 2042.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   28329.228 ±(99.9%) 360.867 B/op [Average]
[info]   (min, avg, max) = (28185.128, 28329.228, 28410.820), stdev = 93.716
[info]   CI (99.9%): [27968.360, 28690.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.10% complete, ETA 00:32:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40485.481 ops/s
[info] # Warmup Iteration   2: 52046.661 ops/s
[info] # Warmup Iteration   3: 50629.981 ops/s
[info] # Warmup Iteration   4: 52420.088 ops/s
[info] # Warmup Iteration   5: 52852.777 ops/s
[info] Iteration   1: 51526.347 ops/s
[info]                  ·gc.alloc.rate:                   1735.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41016.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 51120.424 ops/s
[info]                  ·gc.alloc.rate:                   1722.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62100.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 51372.773 ops/s
[info]                  ·gc.alloc.rate:                   1731.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41242.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 51889.852 ops/s
[info]                  ·gc.alloc.rate:                   1748.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61338.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 51143.497 ops/s
[info]                  ·gc.alloc.rate:                   1723.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41550.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   51410.579 ±(99.9%) 1217.767 ops/s [Average]
[info]   (min, avg, max) = (51120.424, 51410.579, 51889.852), stdev = 316.250
[info]   CI (99.9%): [50192.812, 52628.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1732.172 ±(99.9%) 40.729 MB/sec [Average]
[info]   (min, avg, max) = (1722.528, 1732.172, 1748.283), stdev = 10.577
[info]   CI (99.9%): [1691.443, 1772.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53040.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (53040.008, 53040.008, 53040.009), stdev = 0.001
[info]   CI (99.9%): [53040.007, 53040.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.021 ±(99.9%) 4.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.021, 2.551), stdev = 1.161
[info]   CI (99.9%): [≈ 0, 5.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1615.369 ±(99.9%) 1419.937 MB/sec [Average]
[info]   (min, avg, max) = (1342.270, 1615.369, 2021.820), stdev = 368.753
[info]   CI (99.9%): [195.432, 3035.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   49449.701 ±(99.9%) 43149.491 B/op [Average]
[info]   (min, avg, max) = (41016.109, 49449.701, 62100.769), stdev = 11205.786
[info]   CI (99.9%): [6300.210, 92599.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.31% complete, ETA 00:31:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34594.091 ops/s
[info] # Warmup Iteration   2: 69042.108 ops/s
[info] # Warmup Iteration   3: 70088.369 ops/s
[info] # Warmup Iteration   4: 70025.613 ops/s
[info] # Warmup Iteration   5: 70115.565 ops/s
[info] Iteration   1: 70216.028 ops/s
[info]                  ·gc.alloc.rate:                   1262.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30277.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 70511.451 ops/s
[info]                  ·gc.alloc.rate:                   1267.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30183.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 70185.886 ops/s
[info]                  ·gc.alloc.rate:                   1261.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30350.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 70264.648 ops/s
[info]                  ·gc.alloc.rate:                   1263.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30331.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 68003.325 ops/s
[info]                  ·gc.alloc.rate:                   1222.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15677.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   69836.268 ±(99.9%) 3976.390 ops/s [Average]
[info]   (min, avg, max) = (68003.325, 69836.268, 70511.451), stdev = 1032.656
[info]   CI (99.9%): [65859.878, 73812.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1255.547 ±(99.9%) 71.405 MB/sec [Average]
[info]   (min, avg, max) = (1222.623, 1255.547, 1267.600), stdev = 18.544
[info]   CI (99.9%): [1184.142, 1326.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28304.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28304.006, 28304.006, 28304.006), stdev = 0.001
[info]   CI (99.9%): [28304.005, 28304.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.745 ±(99.9%) 3.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 1.865), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.251 ±(99.9%) 1162.491 MB/sec [Average]
[info]   (min, avg, max) = (677.209, 1217.251, 1353.784), stdev = 301.895
[info]   CI (99.9%): [54.759, 2379.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27364.157 ±(99.9%) 25157.567 B/op [Average]
[info]   (min, avg, max) = (15677.538, 27364.157, 30350.646), stdev = 6533.340
[info]   CI (99.9%): [2206.590, 52521.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.51% complete, ETA 00:31:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89580.810 ops/s
[info] # Warmup Iteration   2: 98508.686 ops/s
[info] # Warmup Iteration   3: 97659.829 ops/s
[info] # Warmup Iteration   4: 99204.505 ops/s
[info] # Warmup Iteration   5: 99812.463 ops/s
[info] Iteration   1: 99822.852 ops/s
[info]                  ·gc.alloc.rate:                   1530.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21173.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 98965.214 ops/s
[info]                  ·gc.alloc.rate:                   1517.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32056.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 99513.107 ops/s
[info]                  ·gc.alloc.rate:                   1525.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21269.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 99571.572 ops/s
[info]                  ·gc.alloc.rate:                   1526.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21283.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 98164.827 ops/s
[info]                  ·gc.alloc.rate:                   1504.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21614.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   99207.514 ±(99.9%) 2547.305 ops/s [Average]
[info]   (min, avg, max) = (98164.827, 99207.514, 99822.852), stdev = 661.527
[info]   CI (99.9%): [96660.209, 101754.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1521.040 ±(99.9%) 39.101 MB/sec [Average]
[info]   (min, avg, max) = (1504.978, 1521.040, 1530.490), stdev = 10.154
[info]   CI (99.9%): [1481.939, 1560.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24136.004, 24136.004, 24136.004), stdev = 0.001
[info]   CI (99.9%): [24136.004, 24136.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.396 ±(99.9%) 1.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 0.987), stdev = 0.360
[info]   CI (99.9%): [≈ 0, 1.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1479.294 ±(99.9%) 1154.113 MB/sec [Average]
[info]   (min, avg, max) = (1342.627, 1479.294, 2015.437), stdev = 299.720
[info]   CI (99.9%): [325.180, 2633.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23479.477 ±(99.9%) 18474.012 B/op [Average]
[info]   (min, avg, max) = (21173.381, 23479.477, 32056.566), stdev = 4797.642
[info]   CI (99.9%): [5005.465, 41953.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:31:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7896.710 ops/s
[info] # Warmup Iteration   2: 18022.188 ops/s
[info] # Warmup Iteration   3: 18149.184 ops/s
[info] # Warmup Iteration   4: 18138.128 ops/s
[info] # Warmup Iteration   5: 18171.292 ops/s
[info] Iteration   1: 18137.016 ops/s
[info]                  ·gc.alloc.rate:                   1263.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117157.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 18112.582 ops/s
[info]                  ·gc.alloc.rate:                   1262.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117440.975 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18051.464 ops/s
[info]                  ·gc.alloc.rate:                   1258.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117953.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 18172.698 ops/s
[info]                  ·gc.alloc.rate:                   1266.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117213.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18204.070 ops/s
[info]                  ·gc.alloc.rate:                   1268.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117129.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   18135.566 ±(99.9%) 225.148 ops/s [Average]
[info]   (min, avg, max) = (18051.464, 18135.566, 18204.070), stdev = 58.470
[info]   CI (99.9%): [17910.418, 18360.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1263.950 ±(99.9%) 15.617 MB/sec [Average]
[info]   (min, avg, max) = (1258.042, 1263.950, 1268.653), stdev = 4.056
[info]   CI (99.9%): [1248.333, 1279.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109712.024 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (109712.022, 109712.024, 109712.030), stdev = 0.003
[info]   CI (99.9%): [109712.011, 109712.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.694 ±(99.9%) 7.911 B/op [Average]
[info]   (min, avg, max) = (1.815, 4.694, 7.210), stdev = 2.054
[info]   CI (99.9%): [≈ 0, 12.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1352.268 ±(99.9%) 6.925 MB/sec [Average]
[info]   (min, avg, max) = (1349.649, 1352.268, 1354.420), stdev = 1.798
[info]   CI (99.9%): [1345.343, 1359.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   117378.903 ±(99.9%) 1324.801 B/op [Average]
[info]   (min, avg, max) = (117129.089, 117378.903, 117953.911), stdev = 344.047
[info]   CI (99.9%): [116054.101, 118703.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.91% complete, ETA 00:30:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61789.134 ops/s
[info] # Warmup Iteration   2: 125467.128 ops/s
[info] # Warmup Iteration   3: 126266.584 ops/s
[info] # Warmup Iteration   4: 123516.607 ops/s
[info] # Warmup Iteration   5: 122586.490 ops/s
[info] Iteration   1: 122287.050 ops/s
[info]                  ·gc.alloc.rate:                   1125.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17378.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 122557.153 ops/s
[info]                  ·gc.alloc.rate:                   1128.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17352.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 122752.680 ops/s
[info]                  ·gc.alloc.rate:                   1130.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8664.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 122242.420 ops/s
[info]                  ·gc.alloc.rate:                   1125.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17418.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 122046.612 ops/s
[info]                  ·gc.alloc.rate:                   1123.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17454.220 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   122377.183 ±(99.9%) 1070.156 ops/s [Average]
[info]   (min, avg, max) = (122046.612, 122377.183, 122752.680), stdev = 277.916
[info]   CI (99.9%): [121307.027, 123447.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1126.820 ±(99.9%) 9.782 MB/sec [Average]
[info]   (min, avg, max) = (1123.936, 1126.820, 1130.267), stdev = 2.540
[info]   CI (99.9%): [1117.038, 1136.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.004), stdev = 0.001
[info]   CI (99.9%): [14496.003, 14496.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.643 ±(99.9%) 1.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.643, 1.074), stdev = 0.448
[info]   CI (99.9%): [≈ 0, 2.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.381 ±(99.9%) 1164.194 MB/sec [Average]
[info]   (min, avg, max) = (675.550, 1216.381, 1353.299), stdev = 302.337
[info]   CI (99.9%): [52.187, 2380.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15653.551 ±(99.9%) 15046.015 B/op [Average]
[info]   (min, avg, max) = (8664.118, 15653.551, 17454.220), stdev = 3907.402
[info]   CI (99.9%): [607.536, 30699.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.11% complete, ETA 00:30:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429627.002 ops/s
[info] # Warmup Iteration   2: 464885.974 ops/s
[info] # Warmup Iteration   3: 463512.941 ops/s
[info] # Warmup Iteration   4: 455043.512 ops/s
[info] # Warmup Iteration   5: 413681.453 ops/s
[info] Iteration   1: 467120.654 ops/s
[info]                  ·gc.alloc.rate:                   515.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1723.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 466904.916 ops/s
[info]                  ·gc.alloc.rate:                   514.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1724.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 435779.693 ops/s
[info]                  ·gc.alloc.rate:                   480.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2436.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 445107.925 ops/s
[info]                  ·gc.alloc.rate:                   490.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2385.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 446877.773 ops/s
[info]                  ·gc.alloc.rate:      492.801 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   452358.192 ±(99.9%) 54011.561 ops/s [Average]
[info]   (min, avg, max) = (435779.693, 452358.192, 467120.654), stdev = 14026.631
[info]   CI (99.9%): [398346.632, 506369.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   498.828 ±(99.9%) 59.484 MB/sec [Average]
[info]   (min, avg, max) = (480.569, 498.828, 515.023), stdev = 15.448
[info]   CI (99.9%): [439.344, 558.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.354), stdev = 1.500
[info]   CI (99.9%): [≈ 0, 6.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.423 ±(99.9%) 20.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.423, 12.116), stdev = 5.419
[info]   CI (99.9%): [≈ 0, 23.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.399 ±(99.9%) 1068.412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.399, 674.609), stdev = 277.463
[info]   CI (99.9%): [≈ 0, 1542.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1654.158 ±(99.9%) 3799.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1654.158, 2436.949), stdev = 986.669
[info]   CI (99.9%): [≈ 0, 5453.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.31% complete, ETA 00:30:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472663.116 ops/s
[info] # Warmup Iteration   2: 495316.605 ops/s
[info] # Warmup Iteration   3: 496006.360 ops/s
[info] # Warmup Iteration   4: 493598.790 ops/s
[info] # Warmup Iteration   5: 494683.947 ops/s
[info] Iteration   1: 493215.881 ops/s
[info]                  ·gc.alloc.rate:      5.013 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 493222.787 ops/s
[info]                  ·gc.alloc.rate:      5.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 494576.461 ops/s
[info]                  ·gc.alloc.rate:      5.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 492911.184 ops/s
[info]                  ·gc.alloc.rate:      5.010 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 493747.710 ops/s
[info]                  ·gc.alloc.rate:      5.020 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   493534.805 ±(99.9%) 2523.822 ops/s [Average]
[info]   (min, avg, max) = (492911.184, 493534.805, 494576.461), stdev = 655.428
[info]   CI (99.9%): [491010.983, 496058.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.016 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (5.010, 5.016, 5.026), stdev = 0.007
[info]   CI (99.9%): [4.990, 5.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.51% complete, ETA 00:30:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11924.954 ops/s
[info] # Warmup Iteration   2: 20342.732 ops/s
[info] # Warmup Iteration   3: 20895.562 ops/s
[info] # Warmup Iteration   4: 20988.604 ops/s
[info] # Warmup Iteration   5: 21014.031 ops/s
[info] Iteration   1: 21027.365 ops/s
[info]                  ·gc.alloc.rate:                   401.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38287.756 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 21049.161 ops/s
[info]                  ·gc.alloc.rate:                   401.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38247.750 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21059.753 ops/s
[info]                  ·gc.alloc.rate:      401.999 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21045.612 ops/s
[info]                  ·gc.alloc.rate:                   401.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50384.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21069.083 ops/s
[info]                  ·gc.alloc.rate:                   402.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50326.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   21050.195 ±(99.9%) 60.621 ops/s [Average]
[info]   (min, avg, max) = (21027.365, 21050.195, 21069.083), stdev = 15.743
[info]   CI (99.9%): [20989.574, 21110.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   401.803 ±(99.9%) 1.173 MB/sec [Average]
[info]   (min, avg, max) = (401.365, 401.803, 402.168), stdev = 0.305
[info]   CI (99.9%): [400.630, 402.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30048.177 ±(99.9%) 1.347 B/op [Average]
[info]   (min, avg, max) = (30048.019, 30048.177, 30048.803), stdev = 0.350
[info]   CI (99.9%): [30046.830, 30049.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.312), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.603 ±(99.9%) 38.521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.603, 23.349), stdev = 10.004
[info]   CI (99.9%): [≈ 0, 44.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   473.999 ±(99.9%) 1067.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.999, 673.612), stdev = 277.106
[info]   CI (99.9%): [≈ 0, 1541.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35449.245 ±(99.9%) 79777.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35449.245, 50384.049), stdev = 20717.891
[info]   CI (99.9%): [≈ 0, 115226.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77.71% complete, ETA 00:29:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1263395.311 ops/s
[info] # Warmup Iteration   2: 2202354.127 ops/s
[info] # Warmup Iteration   3: 2266684.761 ops/s
[info] # Warmup Iteration   4: 2223962.268 ops/s
[info] # Warmup Iteration   5: 2238286.925 ops/s
[info] Iteration   1: 2263114.878 ops/s
[info]                  ·gc.alloc.rate:                   3104.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3372.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2346.594 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2269940.153 ops/s
[info]                  ·gc.alloc.rate:                   3114.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1876.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2238733.534 ops/s
[info]                  ·gc.alloc.rate:                   3071.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2382.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2230779.800 ops/s
[info]                  ·gc.alloc.rate:                   3061.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1915.900 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2247800.830 ops/s
[info]                  ·gc.alloc.rate:                   3084.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2379.533 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2250073.839 ±(99.9%) 63001.529 ops/s [Average]
[info]   (min, avg, max) = (2230779.800, 2250073.839, 2269940.153), stdev = 16361.297
[info]   CI (99.9%): [2187072.310, 2313075.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3087.271 ±(99.9%) 86.001 MB/sec [Average]
[info]   (min, avg, max) = (3061.096, 3087.271, 3114.629), stdev = 22.334
[info]   CI (99.9%): [3001.270, 3173.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.044 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.044, 0.059), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3115.756 ±(99.9%) 1426.145 MB/sec [Average]
[info]   (min, avg, max) = (2705.186, 3115.756, 3397.782), stdev = 370.365
[info]   CI (99.9%): [1689.610, 4541.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2180.076 ±(99.9%) 1001.589 B/op [Average]
[info]   (min, avg, max) = (1876.051, 2180.076, 2382.304), stdev = 260.110
[info]   CI (99.9%): [1178.487, 3181.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77.91% complete, ETA 00:29:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.929 ops/s
[info] # Warmup Iteration   2: 828425.918 ops/s
[info] # Warmup Iteration   3: 843804.344 ops/s
[info] # Warmup Iteration   4: 844592.520 ops/s
[info] # Warmup Iteration   5: 846018.615 ops/s
[info] Iteration   1: 837049.826 ops/s
[info]                  ·gc.alloc.rate:                   531.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.872 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 836535.203 ops/s
[info]                  ·gc.alloc.rate:                   531.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1266.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 835888.654 ops/s
[info]                  ·gc.alloc.rate:      530.968 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 853855.988 ops/s
[info]                  ·gc.alloc.rate:                   542.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1241.284 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 854449.316 ops/s
[info]                  ·gc.alloc.rate:                   542.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1238.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   843555.797 ±(99.9%) 37291.859 ops/s [Average]
[info]   (min, avg, max) = (835888.654, 843555.797, 854449.316), stdev = 9684.577
[info]   CI (99.9%): [806263.938, 880847.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   535.881 ±(99.9%) 23.658 MB/sec [Average]
[info]   (min, avg, max) = (530.968, 535.881, 542.796), stdev = 6.144
[info]   CI (99.9%): [512.223, 559.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.514 ±(99.9%) 4.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.504), stdev = 1.112
[info]   CI (99.9%): [≈ 0, 4.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.967 ±(99.9%) 8.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.967, 4.711), stdev = 2.093
[info]   CI (99.9%): [≈ 0, 9.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.028 ±(99.9%) 1122.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.028, 673.392), stdev = 291.388
[info]   CI (99.9%): [≈ 0, 1628.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   941.635 ±(99.9%) 2083.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 941.635, 1266.968), stdev = 540.966
[info]   CI (99.9%): [≈ 0, 3024.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.11% complete, ETA 00:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48321.078 ops/s
[info] # Warmup Iteration   2: 322792.737 ops/s
[info] # Warmup Iteration   3: 313379.497 ops/s
[info] # Warmup Iteration   4: 327784.214 ops/s
[info] # Warmup Iteration   5: 324658.423 ops/s
[info] Iteration   1: 328560.291 ops/s
[info]                  ·gc.alloc.rate:                   624.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              2992.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3227.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 328431.073 ops/s
[info]                  ·gc.alloc.rate:      624.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 2992.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 324396.888 ops/s
[info]                  ·gc.alloc.rate:                   616.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              2992.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3268.671 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 327162.953 ops/s
[info]                  ·gc.alloc.rate:                   621.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              2992.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3245.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 327013.725 ops/s
[info]                  ·gc.alloc.rate:                   621.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              2992.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3247.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   327112.986 ±(99.9%) 6449.565 ops/s [Average]
[info]   (min, avg, max) = (324396.888, 327112.986, 328560.291), stdev = 1674.932
[info]   CI (99.9%): [320663.421, 333562.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   621.702 ±(99.9%) 11.913 MB/sec [Average]
[info]   (min, avg, max) = (616.692, 621.702, 624.392), stdev = 3.094
[info]   CI (99.9%): [609.789, 633.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2992.001, 2992.001, 2992.001), stdev = 0.001
[info]   CI (99.9%): [2992.001, 2992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.229), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.299 ±(99.9%) 1.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.299, 1.097), stdev = 0.462
[info]   CI (99.9%): [≈ 0, 2.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.265 ±(99.9%) 1160.810 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.265, 674.566), stdev = 301.459
[info]   CI (99.9%): [≈ 0, 1700.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2597.852 ±(99.9%) 5592.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2597.852, 3268.671), stdev = 1452.317
[info]   CI (99.9%): [≈ 0, 8190.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78.31% complete, ETA 00:29:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 713684.992 ops/s
[info] # Warmup Iteration   2: 770467.036 ops/s
[info] # Warmup Iteration   3: 770930.994 ops/s
[info] # Warmup Iteration   4: 776892.773 ops/s
[info] # Warmup Iteration   5: 777564.471 ops/s
[info] Iteration   1: 775756.191 ops/s
[info]                  ·gc.alloc.rate:                   583.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1037.848 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 780143.288 ops/s
[info]                  ·gc.alloc.rate:                   586.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1361.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 772241.187 ops/s
[info]                  ·gc.alloc.rate:                   580.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1375.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 800206.749 ops/s
[info]                  ·gc.alloc.rate:                   601.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1323.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 792178.699 ops/s
[info]                  ·gc.alloc.rate:                   595.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1336.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   784105.223 ±(99.9%) 45177.374 ops/s [Average]
[info]   (min, avg, max) = (772241.187, 784105.223, 800206.749), stdev = 11732.420
[info]   CI (99.9%): [738927.849, 829282.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   589.746 ±(99.9%) 34.168 MB/sec [Average]
[info]   (min, avg, max) = (580.766, 589.746, 601.819), stdev = 8.873
[info]   CI (99.9%): [555.578, 623.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.665 ±(99.9%) 5.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 3.205), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.342 ±(99.9%) 11.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.342, 6.468), stdev = 2.865
[info]   CI (99.9%): [≈ 0, 12.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   641.177 ±(99.9%) 279.511 MB/sec [Average]
[info]   (min, avg, max) = (511.340, 641.177, 674.680), stdev = 72.588
[info]   CI (99.9%): [361.667, 920.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1286.806 ±(99.9%) 541.603 B/op [Average]
[info]   (min, avg, max) = (1037.848, 1286.806, 1375.159), stdev = 140.653
[info]   CI (99.9%): [745.203, 1828.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.51% complete, ETA 00:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3916730.839 ops/s
[info] # Warmup Iteration   2: 4366969.227 ops/s
[info] # Warmup Iteration   3: 4381685.646 ops/s
[info] # Warmup Iteration   4: 4267169.652 ops/s
[info] # Warmup Iteration   5: 4381058.137 ops/s
[info] Iteration   1: 4385564.087 ops/s
[info]                  ·gc.alloc.rate:                   1403.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4273360.231 ops/s
[info]                  ·gc.alloc.rate:                   1368.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4378655.831 ops/s
[info]                  ·gc.alloc.rate:                   1401.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4387438.476 ops/s
[info]                  ·gc.alloc.rate:                   1404.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 724.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4376414.136 ops/s
[info]                  ·gc.alloc.rate:                   1401.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 484.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4360286.552 ±(99.9%) 187952.209 ops/s [Average]
[info]   (min, avg, max) = (4273360.231, 4360286.552, 4387438.476), stdev = 48810.592
[info]   CI (99.9%): [4172334.343, 4548238.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1396.009 ±(99.9%) 60.104 MB/sec [Average]
[info]   (min, avg, max) = (1368.226, 1396.009, 1404.974), stdev = 15.609
[info]   CI (99.9%): [1335.905, 1456.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.030), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1479.568 ±(99.9%) 1160.198 MB/sec [Average]
[info]   (min, avg, max) = (1343.840, 1479.568, 2018.543), stdev = 301.300
[info]   CI (99.9%): [319.369, 2639.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   533.905 ±(99.9%) 409.889 B/op [Average]
[info]   (min, avg, max) = (482.430, 533.905, 724.103), stdev = 106.447
[info]   CI (99.9%): [124.016, 943.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.71% complete, ETA 00:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7544812.275 ops/s
[info] # Warmup Iteration   2: 9241830.337 ops/s
[info] # Warmup Iteration   3: 9216978.925 ops/s
[info] # Warmup Iteration   4: 9292188.648 ops/s
[info] # Warmup Iteration   5: 9165111.118 ops/s
[info] Iteration   1: 8973513.922 ops/s
[info]                  ·gc.alloc.rate:                   729.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9128040.288 ops/s
[info]                  ·gc.alloc.rate:                   742.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 9202294.802 ops/s
[info]                  ·gc.alloc.rate:                   748.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 9023259.568 ops/s
[info]                  ·gc.alloc.rate:                   733.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 9217818.111 ops/s
[info]                  ·gc.alloc.rate:                   749.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   9108985.338 ±(99.9%) 415690.040 ops/s [Average]
[info]   (min, avg, max) = (8973513.922, 9108985.338, 9217818.111), stdev = 107953.383
[info]   CI (99.9%): [8693295.298, 9524675.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   740.615 ±(99.9%) 34.094 MB/sec [Average]
[info]   (min, avg, max) = (729.497, 740.615, 749.648), stdev = 8.854
[info]   CI (99.9%): [706.522, 774.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.278), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.117 ±(99.9%) 0.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.575), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   807.621 ±(99.9%) 1165.356 MB/sec [Average]
[info]   (min, avg, max) = (671.872, 807.621, 1348.998), stdev = 302.639
[info]   CI (99.9%): [≈ 0, 1972.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   139.950 ±(99.9%) 208.294 B/op [Average]
[info]   (min, avg, max) = (114.751, 139.950, 236.700), stdev = 54.093
[info]   CI (99.9%): [≈ 0, 348.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78.92% complete, ETA 00:28:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20295.235 ops/s
[info] # Warmup Iteration   2: 183508.428 ops/s
[info] # Warmup Iteration   3: 191883.732 ops/s
[info] # Warmup Iteration   4: 197334.566 ops/s
[info] # Warmup Iteration   5: 198113.282 ops/s
[info] Iteration   1: 197761.974 ops/s
[info]                  ·gc.alloc.rate:                   1334.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10750.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 196482.132 ops/s
[info]                  ·gc.alloc.rate:                   1326.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10825.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 192641.957 ops/s
[info]                  ·gc.alloc.rate:                   1300.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11052.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 192389.670 ops/s
[info]                  ·gc.alloc.rate:                   1298.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11077.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 193413.696 ops/s
[info]                  ·gc.alloc.rate:                   1305.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11024.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   194537.886 ±(99.9%) 9362.692 ops/s [Average]
[info]   (min, avg, max) = (192389.670, 194537.886, 197761.974), stdev = 2431.461
[info]   CI (99.9%): [185175.194, 203900.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1312.857 ±(99.9%) 63.112 MB/sec [Average]
[info]   (min, avg, max) = (1298.371, 1312.857, 1334.566), stdev = 16.390
[info]   CI (99.9%): [1249.745, 1375.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10624.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10624.002, 10624.002, 10624.002), stdev = 0.001
[info]   CI (99.9%): [10624.002, 10624.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.168 ±(99.9%) 0.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.168, 0.341), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1352.479 ±(99.9%) 6.567 MB/sec [Average]
[info]   (min, avg, max) = (1350.421, 1352.479, 1354.439), stdev = 1.705
[info]   CI (99.9%): [1345.912, 1359.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10946.117 ±(99.9%) 570.087 B/op [Average]
[info]   (min, avg, max) = (10750.222, 10946.117, 11077.850), stdev = 148.050
[info]   CI (99.9%): [10376.030, 11516.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79.12% complete, ETA 00:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212751.107 ops/s
[info] # Warmup Iteration   2: 309916.481 ops/s
[info] # Warmup Iteration   3: 323327.810 ops/s
[info] # Warmup Iteration   4: 322283.134 ops/s
[info] # Warmup Iteration   5: 320049.052 ops/s
[info] Iteration   1: 317231.862 ops/s
[info]                  ·gc.alloc.rate:                   627.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2537.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 316696.522 ops/s
[info]                  ·gc.alloc.rate:                   626.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3353.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 314931.373 ops/s
[info]                  ·gc.alloc.rate:                   622.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3372.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 314091.833 ops/s
[info]                  ·gc.alloc.rate:                   620.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3367.881 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 317020.620 ops/s
[info]                  ·gc.alloc.rate:                   626.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3336.813 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   315994.442 ±(99.9%) 5386.500 ops/s [Average]
[info]   (min, avg, max) = (314091.833, 315994.442, 317231.862), stdev = 1398.857
[info]   CI (99.9%): [310607.942, 321380.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   624.686 ±(99.9%) 10.564 MB/sec [Average]
[info]   (min, avg, max) = (620.963, 624.686, 627.068), stdev = 2.743
[info]   CI (99.9%): [614.122, 635.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3112.001, 3112.001, 3112.001), stdev = 0.001
[info]   CI (99.9%): [3112.001, 3112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.698 ±(99.9%) 5.777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.698, 3.382), stdev = 1.500
[info]   CI (99.9%): [≈ 0, 6.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3.472 ±(99.9%) 28.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.472, 16.811), stdev = 7.457
[info]   CI (99.9%): [≈ 0, 32.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   640.952 ±(99.9%) 278.924 MB/sec [Average]
[info]   (min, avg, max) = (511.397, 640.952, 674.680), stdev = 72.436
[info]   CI (99.9%): [362.028, 919.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3193.693 ±(99.9%) 1412.547 B/op [Average]
[info]   (min, avg, max) = (2537.949, 3193.693, 3372.248), stdev = 366.834
[info]   CI (99.9%): [1781.145, 4606.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.32% complete, ETA 00:27:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 874987.858 ops/s
[info] # Warmup Iteration   2: 939931.139 ops/s
[info] # Warmup Iteration   3: 943304.493 ops/s
[info] # Warmup Iteration   4: 939503.794 ops/s
[info] # Warmup Iteration   5: 944144.429 ops/s
[info] Iteration   1: 942390.003 ops/s
[info]                  ·gc.alloc.rate:      52.674 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 940052.488 ops/s
[info]                  ·gc.alloc.rate:      52.540 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 940237.004 ops/s
[info]                  ·gc.alloc.rate:      52.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 931700.756 ops/s
[info]                  ·gc.alloc.rate:                   52.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              88.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 864.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 943947.588 ops/s
[info]                  ·gc.alloc.rate:      52.773 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   939665.568 ±(99.9%) 18231.967 ops/s [Average]
[info]   (min, avg, max) = (931700.756, 939665.568, 943947.588), stdev = 4734.784
[info]   CI (99.9%): [921433.601, 957897.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   52.530 ±(99.9%) 0.998 MB/sec [Average]
[info]   (min, avg, max) = (52.096, 52.530, 52.773), stdev = 0.259
[info]   CI (99.9%): [51.531, 53.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.000), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.321 ±(99.9%) 881.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.321, 511.603), stdev = 228.796
[info]   CI (99.9%): [≈ 0, 983.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   172.838 ±(99.9%) 1488.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 172.838, 864.191), stdev = 386.478
[info]   CI (99.9%): [≈ 0, 1661.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79.52% complete, ETA 00:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30602.404 ops/s
[info] # Warmup Iteration   2: 63566.771 ops/s
[info] # Warmup Iteration   3: 62618.593 ops/s
[info] # Warmup Iteration   4: 64040.540 ops/s
[info] # Warmup Iteration   5: 64116.502 ops/s
[info] Iteration   1: 64036.663 ops/s
[info]                  ·gc.alloc.rate:                   2974.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83372.064 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 64155.511 ops/s
[info]                  ·gc.alloc.rate:                   2979.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66674.824 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 64115.037 ops/s
[info]                  ·gc.alloc.rate:                   2978.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83469.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 64247.803 ops/s
[info]                  ·gc.alloc.rate:                   2984.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66690.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 64072.641 ops/s
[info]                  ·gc.alloc.rate:                   2976.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66888.955 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   64125.531 ±(99.9%) 314.330 ops/s [Average]
[info]   (min, avg, max) = (64036.663, 64125.531, 64247.803), stdev = 81.630
[info]   CI (99.9%): [63811.201, 64439.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2978.471 ±(99.9%) 14.874 MB/sec [Average]
[info]   (min, avg, max) = (2974.199, 2978.471, 2984.254), stdev = 3.863
[info]   CI (99.9%): [2963.597, 2993.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73120.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73120.006, 73120.006, 73120.007), stdev = 0.001
[info]   CI (99.9%): [73120.006, 73120.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.044 ±(99.9%) 3.114 B/op [Average]
[info]   (min, avg, max) = (1.023, 2.044, 3.066), stdev = 0.809
[info]   CI (99.9%): [≈ 0, 5.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2990.442 ±(99.9%) 1423.577 MB/sec [Average]
[info]   (min, avg, max) = (2717.149, 2990.442, 3399.608), stdev = 369.699
[info]   CI (99.9%): [1566.865, 4414.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73419.158 ±(99.9%) 35158.815 B/op [Average]
[info]   (min, avg, max) = (66674.824, 73419.158, 83469.468), stdev = 9130.633
[info]   CI (99.9%): [38260.343, 108577.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.72% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 714371.165 ops/s
[info] # Warmup Iteration   2: 1029314.928 ops/s
[info] # Warmup Iteration   3: 1063008.289 ops/s
[info] # Warmup Iteration   4: 1050065.063 ops/s
[info] # Warmup Iteration   5: 1035130.062 ops/s
[info] Iteration   1: 1064942.222 ops/s
[info]                  ·gc.alloc.rate:                   611.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 995.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1049565.450 ops/s
[info]                  ·gc.alloc.rate:                   602.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1010.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1065916.352 ops/s
[info]                  ·gc.alloc.rate:                   612.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 995.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1064873.320 ops/s
[info]                  ·gc.alloc.rate:                   611.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 996.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1061521.029 ops/s
[info]                  ·gc.alloc.rate:                   609.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1001.403 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1061363.675 ±(99.9%) 26192.400 ops/s [Average]
[info]   (min, avg, max) = (1049565.450, 1061363.675, 1065916.352), stdev = 6802.083
[info]   CI (99.9%): [1035171.274, 1087556.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   609.506 ±(99.9%) 14.681 MB/sec [Average]
[info]   (min, avg, max) = (602.905, 609.506, 612.087), stdev = 3.813
[info]   CI (99.9%): [594.824, 624.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.229), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.092 ±(99.9%) 0.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.338), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.249 ±(99.9%) 2.372 MB/sec [Average]
[info]   (min, avg, max) = (673.586, 674.249, 675.222), stdev = 0.616
[info]   CI (99.9%): [671.877, 676.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1000.056 ±(99.9%) 24.047 B/op [Average]
[info]   (min, avg, max) = (995.796, 1000.056, 1010.435), stdev = 6.245
[info]   CI (99.9%): [976.009, 1024.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.92% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 641721.125 ops/s
[info] # Warmup Iteration   2: 670068.133 ops/s
[info] # Warmup Iteration   3: 661048.015 ops/s
[info] # Warmup Iteration   4: 672489.226 ops/s
[info] # Warmup Iteration   5: 670940.370 ops/s
[info] Iteration   1: 687894.431 ops/s
[info]                  ·gc.alloc.rate:                   192.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1170.405 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 693042.731 ops/s
[info]                  ·gc.alloc.rate:      193.743 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 687975.143 ops/s
[info]                  ·gc.alloc.rate:                   192.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1170.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 692432.757 ops/s
[info]                  ·gc.alloc.rate:      193.516 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 692241.552 ops/s
[info]                  ·gc.alloc.rate:      193.455 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   690717.323 ±(99.9%) 9847.750 ops/s [Average]
[info]   (min, avg, max) = (687894.431, 690717.323, 693042.731), stdev = 2557.429
[info]   CI (99.9%): [680869.573, 700565.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   193.054 ±(99.9%) 2.762 MB/sec [Average]
[info]   (min, avg, max) = (192.275, 193.054, 193.743), stdev = 0.717
[info]   CI (99.9%): [190.292, 195.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.001, 440.001, 440.001), stdev = 0.001
[info]   CI (99.9%): [440.001, 440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.576 ±(99.9%) 1078.668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.576, 511.452), stdev = 280.127
[info]   CI (99.9%): [≈ 0, 1283.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   468.145 ±(99.9%) 2468.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 468.145, 1170.405), stdev = 641.034
[info]   CI (99.9%): [≈ 0, 2936.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.12% complete, ETA 00:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 886013.892 ops/s
[info] # Warmup Iteration   2: 920974.826 ops/s
[info] # Warmup Iteration   3: 929594.113 ops/s
[info] # Warmup Iteration   4: 927560.586 ops/s
[info] # Warmup Iteration   5: 929830.529 ops/s
[info] Iteration   1: 929177.734 ops/s
[info]                  ·gc.alloc.rate:      9.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 928322.542 ops/s
[info]                  ·gc.alloc.rate:      9.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 929396.580 ops/s
[info]                  ·gc.alloc.rate:      9.446 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 927801.543 ops/s
[info]                  ·gc.alloc.rate:      9.431 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 928173.892 ops/s
[info]                  ·gc.alloc.rate:      9.436 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   928574.458 ±(99.9%) 2626.591 ops/s [Average]
[info]   (min, avg, max) = (927801.543, 928574.458, 929396.580), stdev = 682.117
[info]   CI (99.9%): [925947.867, 931201.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.438 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (9.431, 9.438, 9.446), stdev = 0.007
[info]   CI (99.9%): [9.412, 9.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.32% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24149.582 ops/s
[info] # Warmup Iteration   2: 45283.558 ops/s
[info] # Warmup Iteration   3: 45131.773 ops/s
[info] # Warmup Iteration   4: 46080.737 ops/s
[info] # Warmup Iteration   5: 45228.901 ops/s
[info] Iteration   1: 45711.437 ops/s
[info]                  ·gc.alloc.rate:                   1934.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69913.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 46191.391 ops/s
[info]                  ·gc.alloc.rate:                   1954.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69272.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 46291.753 ops/s
[info]                  ·gc.alloc.rate:                   1958.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46130.822 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46274.300 ops/s
[info]                  ·gc.alloc.rate:                   1958.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69257.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46173.372 ops/s
[info]                  ·gc.alloc.rate:                   1953.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69473.694 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   46128.450 ±(99.9%) 918.964 ops/s [Average]
[info]   (min, avg, max) = (45711.437, 46128.450, 46291.753), stdev = 238.652
[info]   CI (99.9%): [45209.486, 47047.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1951.973 ±(99.9%) 38.485 MB/sec [Average]
[info]   (min, avg, max) = (1934.533, 1951.973, 1958.874), stdev = 9.994
[info]   CI (99.9%): [1913.488, 1990.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66616.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66616.009, 66616.009, 66616.010), stdev = 0.001
[info]   CI (99.9%): [66616.008, 66616.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.845 ±(99.9%) 4.564 B/op [Average]
[info]   (min, avg, max) = (0.708, 1.845, 3.546), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 6.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.528 ±(99.9%) 1166.812 MB/sec [Average]
[info]   (min, avg, max) = (1356.498, 1898.528, 2037.622), stdev = 303.017
[info]   CI (99.9%): [731.716, 3065.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64809.537 ±(99.9%) 40220.276 B/op [Average]
[info]   (min, avg, max) = (46130.822, 64809.537, 69913.476), stdev = 10445.078
[info]   CI (99.9%): [24589.260, 105029.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.52% complete, ETA 00:26:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217559.308 ops/s
[info] # Warmup Iteration   2: 239679.212 ops/s
[info] # Warmup Iteration   3: 230076.456 ops/s
[info] # Warmup Iteration   4: 241073.853 ops/s
[info] # Warmup Iteration   5: 241724.992 ops/s
[info] Iteration   1: 242304.090 ops/s
[info]                  ·gc.alloc.rate:                   948.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4365.461 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 243060.955 ops/s
[info]                  ·gc.alloc.rate:                   951.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8700.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 241046.029 ops/s
[info]                  ·gc.alloc.rate:                   943.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4384.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 238391.176 ops/s
[info]                  ·gc.alloc.rate:                   932.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8865.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 236918.718 ops/s
[info]                  ·gc.alloc.rate:                   927.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4462.487 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   240344.194 ±(99.9%) 10052.820 ops/s [Average]
[info]   (min, avg, max) = (236918.718, 240344.194, 243060.955), stdev = 2610.686
[info]   CI (99.9%): [230291.373, 250397.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   940.465 ±(99.9%) 39.273 MB/sec [Average]
[info]   (min, avg, max) = (927.043, 940.465, 951.047), stdev = 10.199
[info]   CI (99.9%): [901.192, 979.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.001, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.136 ±(99.9%) 0.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.404), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 0.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.104 ±(99.9%) 1415.683 MB/sec [Average]
[info]   (min, avg, max) = (671.426, 940.104, 1343.221), stdev = 367.648
[info]   CI (99.9%): [≈ 0, 2355.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6155.461 ±(99.9%) 9238.642 B/op [Average]
[info]   (min, avg, max) = (4365.461, 6155.461, 8865.108), stdev = 2399.246
[info]   CI (99.9%): [≈ 0, 15394.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.72% complete, ETA 00:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8644.259 ops/s
[info] # Warmup Iteration   2: 19270.663 ops/s
[info] # Warmup Iteration   3: 19169.700 ops/s
[info] # Warmup Iteration   4: 19218.007 ops/s
[info] # Warmup Iteration   5: 19446.531 ops/s
[info] Iteration   1: 19311.672 ops/s
[info]                  ·gc.alloc.rate:                   1054.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54988.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 19008.805 ops/s
[info]                  ·gc.alloc.rate:                   1037.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111839.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19148.049 ops/s
[info]                  ·gc.alloc.rate:                   1045.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55568.561 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19153.612 ops/s
[info]                  ·gc.alloc.rate:                   1045.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111129.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18995.633 ops/s
[info]                  ·gc.alloc.rate:                   1036.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112136.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   19123.554 ±(99.9%) 496.207 ops/s [Average]
[info]   (min, avg, max) = (18995.633, 19123.554, 19311.672), stdev = 128.863
[info]   CI (99.9%): [18627.348, 19619.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1043.964 ±(99.9%) 26.863 MB/sec [Average]
[info]   (min, avg, max) = (1036.894, 1043.964, 1054.133), stdev = 6.976
[info]   CI (99.9%): [1017.101, 1070.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85936.024 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (85936.021, 85936.024, 85936.028), stdev = 0.003
[info]   CI (99.9%): [85936.014, 85936.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.437 ±(99.9%) 13.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.437, 6.898), stdev = 3.435
[info]   CI (99.9%): [≈ 0, 16.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1081.267 ±(99.9%) 1427.333 MB/sec [Average]
[info]   (min, avg, max) = (674.512, 1081.267, 1353.026), stdev = 370.674
[info]   CI (99.9%): [≈ 0, 2508.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   89132.458 ±(99.9%) 119012.772 B/op [Average]
[info]   (min, avg, max) = (54988.222, 89132.458, 112136.542), stdev = 30907.239
[info]   CI (99.9%): [≈ 0, 208145.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.92% complete, ETA 00:25:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78143.084 ops/s
[info] # Warmup Iteration   2: 136198.485 ops/s
[info] # Warmup Iteration   3: 137106.028 ops/s
[info] # Warmup Iteration   4: 136904.280 ops/s
[info] # Warmup Iteration   5: 135954.523 ops/s
[info] Iteration   1: 136564.657 ops/s
[info]                  ·gc.alloc.rate:                   1668.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23378.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 138162.129 ops/s
[info]                  ·gc.alloc.rate:                   1687.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15417.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 139887.225 ops/s
[info]                  ·gc.alloc.rate:                   1708.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22871.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 139953.621 ops/s
[info]                  ·gc.alloc.rate:                   1709.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15254.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 139968.852 ops/s
[info]                  ·gc.alloc.rate:                   1710.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22891.353 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   138907.297 ±(99.9%) 5847.779 ops/s [Average]
[info]   (min, avg, max) = (136564.657, 138907.297, 139968.852), stdev = 1518.650
[info]   CI (99.9%): [133059.518, 144755.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1697.000 ±(99.9%) 71.732 MB/sec [Average]
[info]   (min, avg, max) = (1668.353, 1697.000, 1710.362), stdev = 18.629
[info]   CI (99.9%): [1625.269, 1768.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19232.003, 19232.003, 19232.003), stdev = 0.001
[info]   CI (99.9%): [19232.002, 19232.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.471 ±(99.9%) 1.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 0.937), stdev = 0.331
[info]   CI (99.9%): [≈ 0, 1.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1761.047 ±(99.9%) 1428.937 MB/sec [Average]
[info]   (min, avg, max) = (1352.998, 1761.047, 2035.799), stdev = 371.090
[info]   CI (99.9%): [332.110, 3189.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19962.751 ±(99.9%) 16283.344 B/op [Average]
[info]   (min, avg, max) = (15254.452, 19962.751, 23378.196), stdev = 4228.733
[info]   CI (99.9%): [3679.407, 36246.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.12% complete, ETA 00:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316260.783 ops/s
[info] # Warmup Iteration   2: 345117.492 ops/s
[info] # Warmup Iteration   3: 348612.082 ops/s
[info] # Warmup Iteration   4: 352027.632 ops/s
[info] # Warmup Iteration   5: 355534.821 ops/s
[info] Iteration   1: 354528.574 ops/s
[info]                  ·gc.alloc.rate:                   1687.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8945.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 355521.427 ops/s
[info]                  ·gc.alloc.rate:                   1692.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5950.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 354505.900 ops/s
[info]                  ·gc.alloc.rate:                   1688.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8964.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 347152.825 ops/s
[info]                  ·gc.alloc.rate:                   1653.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6112.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 348579.421 ops/s
[info]                  ·gc.alloc.rate:                   1659.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9141.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   352057.629 ±(99.9%) 14944.832 ops/s [Average]
[info]   (min, avg, max) = (347152.825, 352057.629, 355521.427), stdev = 3881.125
[info]   CI (99.9%): [337112.797, 367002.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1676.493 ±(99.9%) 70.502 MB/sec [Average]
[info]   (min, avg, max) = (1653.564, 1676.493, 1692.953), stdev = 18.309
[info]   CI (99.9%): [1605.990, 1746.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.316 ±(99.9%) 0.533 B/op [Average]
[info]   (min, avg, max) = (0.188, 0.316, 0.553), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1749.952 ±(99.9%) 1419.469 MB/sec [Average]
[info]   (min, avg, max) = (1343.999, 1749.952, 2024.211), stdev = 368.632
[info]   CI (99.9%): [330.483, 3169.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7822.948 ±(99.9%) 6307.612 B/op [Average]
[info]   (min, avg, max) = (5950.915, 7822.948, 9141.498), stdev = 1638.067
[info]   CI (99.9%): [1515.336, 14130.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.33% complete, ETA 00:25:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381205.101 ops/s
[info] # Warmup Iteration   2: 423482.510 ops/s
[info] # Warmup Iteration   3: 429535.318 ops/s
[info] # Warmup Iteration   4: 430673.420 ops/s
[info] # Warmup Iteration   5: 431305.462 ops/s
[info] Iteration   1: 431622.066 ops/s
[info]                  ·gc.alloc.rate:                   1478.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4896.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 425074.716 ops/s
[info]                  ·gc.alloc.rate:                   1456.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4973.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 430877.200 ops/s
[info]                  ·gc.alloc.rate:                   1475.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4909.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 431181.970 ops/s
[info]                  ·gc.alloc.rate:                   1476.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7370.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 430771.300 ops/s
[info]                  ·gc.alloc.rate:                   1475.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4925.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   429905.450 ±(99.9%) 10475.991 ops/s [Average]
[info]   (min, avg, max) = (425074.716, 429905.450, 431622.066), stdev = 2720.582
[info]   CI (99.9%): [419429.459, 440381.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1472.677 ±(99.9%) 34.965 MB/sec [Average]
[info]   (min, avg, max) = (1456.521, 1472.677, 1478.187), stdev = 9.080
[info]   CI (99.9%): [1437.711, 1507.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.229 ±(99.9%) 0.292 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.229, 0.304), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1479.353 ±(99.9%) 1161.229 MB/sec [Average]
[info]   (min, avg, max) = (1342.356, 1479.353, 2018.799), stdev = 301.568
[info]   CI (99.9%): [318.124, 2640.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5415.179 ±(99.9%) 4210.361 B/op [Average]
[info]   (min, avg, max) = (4896.528, 5415.179, 7370.452), stdev = 1093.417
[info]   CI (99.9%): [1204.819, 9625.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.53% complete, ETA 00:24:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10317.563 ops/s
[info] # Warmup Iteration   2: 19891.696 ops/s
[info] # Warmup Iteration   3: 19850.816 ops/s
[info] # Warmup Iteration   4: 19860.408 ops/s
[info] # Warmup Iteration   5: 19874.518 ops/s
[info] Iteration   1: 19833.706 ops/s
[info]                  ·gc.alloc.rate:                   497.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40590.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 19938.220 ops/s
[info]                  ·gc.alloc.rate:                   500.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53183.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19874.890 ops/s
[info]                  ·gc.alloc.rate:      498.701 MB/sec
[info]                  ·gc.alloc.rate.norm: 39496.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19852.554 ops/s
[info]                  ·gc.alloc.rate:                   498.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53410.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 19848.867 ops/s
[info]                  ·gc.alloc.rate:                   497.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53500.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   19869.647 ±(99.9%) 158.129 ops/s [Average]
[info]   (min, avg, max) = (19833.706, 19869.647, 19938.220), stdev = 41.066
[info]   CI (99.9%): [19711.518, 20027.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   498.527 ±(99.9%) 4.026 MB/sec [Average]
[info]   (min, avg, max) = (497.560, 498.527, 500.248), stdev = 1.046
[info]   CI (99.9%): [494.501, 502.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39496.050 ±(99.9%) 0.250 B/op [Average]
[info]   (min, avg, max) = (39496.021, 39496.050, 39496.166), stdev = 0.065
[info]   CI (99.9%): [39495.800, 39496.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.354), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.917 ±(99.9%) 47.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.917, 27.932), stdev = 12.328
[info]   CI (99.9%): [≈ 0, 53.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   506.631 ±(99.9%) 1123.756 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.631, 674.559), stdev = 291.836
[info]   CI (99.9%): [≈ 0, 1630.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   40137.044 ±(99.9%) 88986.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40137.044, 53500.931), stdev = 23109.427
[info]   CI (99.9%): [≈ 0, 129123.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81.73% complete, ETA 00:24:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63596.993 ops/s
[info] # Warmup Iteration   2: 77991.966 ops/s
[info] # Warmup Iteration   3: 79244.793 ops/s
[info] # Warmup Iteration   4: 80221.222 ops/s
[info] # Warmup Iteration   5: 80287.804 ops/s
[info] Iteration   1: 80377.238 ops/s
[info]                  ·gc.alloc.rate:                   1661.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26296.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 79341.459 ops/s
[info]                  ·gc.alloc.rate:                   1640.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39986.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 79057.264 ops/s
[info]                  ·gc.alloc.rate:                   1634.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26786.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 78354.898 ops/s
[info]                  ·gc.alloc.rate:                   1620.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40600.527 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 77479.744 ops/s
[info]                  ·gc.alloc.rate:                   1602.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27412.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   78922.121 ±(99.9%) 4180.063 ops/s [Average]
[info]   (min, avg, max) = (77479.744, 78922.121, 80377.238), stdev = 1085.549
[info]   CI (99.9%): [74742.058, 83102.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1631.700 ±(99.9%) 85.985 MB/sec [Average]
[info]   (min, avg, max) = (1602.067, 1631.700, 1661.777), stdev = 22.330
[info]   CI (99.9%): [1545.716, 1717.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32544.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32544.005, 32544.005, 32544.006), stdev = 0.001
[info]   CI (99.9%): [32544.005, 32544.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.745 ±(99.9%) 1.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 1.254), stdev = 0.456
[info]   CI (99.9%): [≈ 0, 2.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.789 ±(99.9%) 1418.534 MB/sec [Average]
[info]   (min, avg, max) = (1342.751, 1614.789, 2021.293), stdev = 368.389
[info]   CI (99.9%): [196.255, 3033.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32216.430 ±(99.9%) 28444.801 B/op [Average]
[info]   (min, avg, max) = (26296.250, 32216.430, 40600.527), stdev = 7387.024
[info]   CI (99.9%): [3771.629, 60661.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.93% complete, ETA 00:24:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66909.774 ops/s
[info] # Warmup Iteration   2: 128194.507 ops/s
[info] # Warmup Iteration   3: 123610.921 ops/s
[info] # Warmup Iteration   4: 129827.859 ops/s
[info] # Warmup Iteration   5: 130105.110 ops/s
[info] Iteration   1: 129667.910 ops/s
[info]                  ·gc.alloc.rate:                   641.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8178.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 130146.116 ops/s
[info]                  ·gc.alloc.rate:                   643.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8148.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 129961.522 ops/s
[info]                  ·gc.alloc.rate:                   642.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8171.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 130101.603 ops/s
[info]                  ·gc.alloc.rate:                   643.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8162.978 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 129885.441 ops/s
[info]                  ·gc.alloc.rate:                   642.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8184.748 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   129952.518 ±(99.9%) 733.870 ops/s [Average]
[info]   (min, avg, max) = (129667.910, 129952.518, 130146.116), stdev = 190.584
[info]   CI (99.9%): [129218.649, 130686.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   642.615 ±(99.9%) 3.798 MB/sec [Average]
[info]   (min, avg, max) = (641.156, 642.615, 643.670), stdev = 0.986
[info]   CI (99.9%): [638.817, 646.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7784.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7784.003, 7784.003, 7784.003), stdev = 0.001
[info]   CI (99.9%): [7784.003, 7784.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.208), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.707 ±(99.9%) 4.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.707, 2.527), stdev = 1.048
[info]   CI (99.9%): [≈ 0, 4.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.412 ±(99.9%) 2.721 MB/sec [Average]
[info]   (min, avg, max) = (673.623, 674.412, 675.335), stdev = 0.707
[info]   CI (99.9%): [671.691, 677.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8169.172 ±(99.9%) 54.847 B/op [Average]
[info]   (min, avg, max) = (8148.135, 8169.172, 8184.748), stdev = 14.243
[info]   CI (99.9%): [8114.325, 8224.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.13% complete, ETA 00:23:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178083.267 ops/s
[info] # Warmup Iteration   2: 191887.626 ops/s
[info] # Warmup Iteration   3: 191425.274 ops/s
[info] # Warmup Iteration   4: 194900.461 ops/s
[info] # Warmup Iteration   5: 195737.273 ops/s
[info] Iteration   1: 195660.147 ops/s
[info]                  ·gc.alloc.rate:                   805.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5427.928 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 195838.337 ops/s
[info]                  ·gc.alloc.rate:                   806.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5401.802 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 196104.163 ops/s
[info]                  ·gc.alloc.rate:                   807.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10773.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 195456.177 ops/s
[info]                  ·gc.alloc.rate:                   804.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5406.303 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 194797.220 ops/s
[info]                  ·gc.alloc.rate:                   801.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5424.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   195571.209 ±(99.9%) 1901.687 ops/s [Average]
[info]   (min, avg, max) = (194797.220, 195571.209, 196104.163), stdev = 493.862
[info]   CI (99.9%): [193669.522, 197472.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   805.075 ±(99.9%) 8.197 MB/sec [Average]
[info]   (min, avg, max) = (801.796, 805.075, 807.478), stdev = 2.129
[info]   CI (99.9%): [796.878, 813.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.201 ±(99.9%) 0.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.501), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 0.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.320 ±(99.9%) 1154.108 MB/sec [Average]
[info]   (min, avg, max) = (671.237, 806.320, 1342.466), stdev = 299.718
[info]   CI (99.9%): [≈ 0, 1960.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6486.830 ±(99.9%) 9227.008 B/op [Average]
[info]   (min, avg, max) = (5401.802, 6486.830, 10773.279), stdev = 2396.225
[info]   CI (99.9%): [≈ 0, 15713.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.33% complete, ETA 00:23:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7022.060 ops/s
[info] # Warmup Iteration   2: 17671.606 ops/s
[info] # Warmup Iteration   3: 18343.255 ops/s
[info] # Warmup Iteration   4: 18038.677 ops/s
[info] # Warmup Iteration   5: 18485.836 ops/s
[info] Iteration   1: 18521.157 ops/s
[info]                  ·gc.alloc.rate:                   1060.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57329.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 18437.715 ops/s
[info]                  ·gc.alloc.rate:                   1055.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115314.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 18543.959 ops/s
[info]                  ·gc.alloc.rate:                   1061.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57349.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 18579.443 ops/s
[info]                  ·gc.alloc.rate:                   1063.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114546.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18537.890 ops/s
[info]                  ·gc.alloc.rate:                   1061.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114791.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   18524.033 ±(99.9%) 203.013 ops/s [Average]
[info]   (min, avg, max) = (18437.715, 18524.033, 18579.443), stdev = 52.722
[info]   CI (99.9%): [18321.020, 18727.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1060.335 ±(99.9%) 12.015 MB/sec [Average]
[info]   (min, avg, max) = (1055.268, 1060.335, 1063.679), stdev = 3.120
[info]   CI (99.9%): [1048.320, 1072.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90104.024 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (90104.022, 90104.024, 90104.028), stdev = 0.002
[info]   CI (99.9%): [90104.015, 90104.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.122 ±(99.9%) 8.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.122, 5.297), stdev = 2.303
[info]   CI (99.9%): [≈ 0, 10.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1080.964 ±(99.9%) 1426.945 MB/sec [Average]
[info]   (min, avg, max) = (674.477, 1080.964, 1352.217), stdev = 370.573
[info]   CI (99.9%): [≈ 0, 2507.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   91866.261 ±(99.9%) 121370.095 B/op [Average]
[info]   (min, avg, max) = (57329.851, 91866.261, 115314.361), stdev = 31519.428
[info]   CI (99.9%): [≈ 0, 213236.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.53% complete, ETA 00:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74002.581 ops/s
[info] # Warmup Iteration   2: 128750.917 ops/s
[info] # Warmup Iteration   3: 128241.954 ops/s
[info] # Warmup Iteration   4: 129770.773 ops/s
[info] # Warmup Iteration   5: 129841.560 ops/s
[info] Iteration   1: 129751.866 ops/s
[info]                  ·gc.alloc.rate:                   1305.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8188.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 130196.685 ops/s
[info]                  ·gc.alloc.rate:                   1309.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16335.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 127098.112 ops/s
[info]                  ·gc.alloc.rate:                   1278.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16743.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 130127.558 ops/s
[info]                  ·gc.alloc.rate:                   1309.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16370.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 129467.578 ops/s
[info]                  ·gc.alloc.rate:                   1302.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16468.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   129328.360 ±(99.9%) 4933.278 ops/s [Average]
[info]   (min, avg, max) = (127098.112, 129328.360, 130196.685), stdev = 1281.157
[info]   CI (99.9%): [124395.082, 134261.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1301.297 ±(99.9%) 49.754 MB/sec [Average]
[info]   (min, avg, max) = (1278.778, 1301.297, 1309.901), stdev = 12.921
[info]   CI (99.9%): [1251.543, 1351.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15840.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15840.003, 15840.003, 15840.003), stdev = 0.001
[info]   CI (99.9%): [15840.003, 15840.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.403 ±(99.9%) 2.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 1.511), stdev = 0.632
[info]   CI (99.9%): [≈ 0, 2.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.029 ±(99.9%) 1166.732 MB/sec [Average]
[info]   (min, avg, max) = (675.017, 1217.029, 1354.373), stdev = 302.997
[info]   CI (99.9%): [50.297, 2383.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14821.214 ±(99.9%) 14290.934 B/op [Average]
[info]   (min, avg, max) = (8188.402, 14821.214, 16743.564), stdev = 3711.310
[info]   CI (99.9%): [530.280, 29112.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.73% complete, ETA 00:23:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 476119.341 ops/s
[info] # Warmup Iteration   2: 520524.167 ops/s
[info] # Warmup Iteration   3: 527247.825 ops/s
[info] # Warmup Iteration   4: 516615.503 ops/s
[info] # Warmup Iteration   5: 528403.525 ops/s
[info] Iteration   1: 525529.117 ops/s
[info]                  ·gc.alloc.rate:                   584.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1532.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 518116.604 ops/s
[info]                  ·gc.alloc.rate:                   576.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2049.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 513659.995 ops/s
[info]                  ·gc.alloc.rate:                   571.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2067.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 513345.138 ops/s
[info]                  ·gc.alloc.rate:                   571.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2060.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 513563.100 ops/s
[info]                  ·gc.alloc.rate:                   571.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2059.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   516842.791 ±(99.9%) 20210.838 ops/s [Average]
[info]   (min, avg, max) = (513345.138, 516842.791, 525529.117), stdev = 5248.691
[info]   CI (99.9%): [496631.952, 537053.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   575.215 ±(99.9%) 22.328 MB/sec [Average]
[info]   (min, avg, max) = (571.297, 575.215, 584.787), stdev = 5.799
[info]   CI (99.9%): [552.887, 597.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.674 ±(99.9%) 5.712 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.327), stdev = 1.483
[info]   CI (99.9%): [≈ 0, 6.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.047 ±(99.9%) 17.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.047, 10.108), stdev = 4.506
[info]   CI (99.9%): [≈ 0, 19.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   640.907 ±(99.9%) 278.907 MB/sec [Average]
[info]   (min, avg, max) = (511.360, 640.907, 674.690), stdev = 72.431
[info]   CI (99.9%): [362.000, 919.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1953.858 ±(99.9%) 908.368 B/op [Average]
[info]   (min, avg, max) = (1532.017, 1953.858, 2067.408), stdev = 235.900
[info]   CI (99.9%): [1045.490, 2862.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.93% complete, ETA 00:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 530016.535 ops/s
[info] # Warmup Iteration   2: 569832.191 ops/s
[info] # Warmup Iteration   3: 567147.209 ops/s
[info] # Warmup Iteration   4: 569429.332 ops/s
[info] # Warmup Iteration   5: 569131.244 ops/s
[info] Iteration   1: 569640.826 ops/s
[info]                  ·gc.alloc.rate:      11.579 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 568215.272 ops/s
[info]                  ·gc.alloc.rate:      11.552 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 569097.869 ops/s
[info]                  ·gc.alloc.rate:      11.568 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 568298.713 ops/s
[info]                  ·gc.alloc.rate:      11.552 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 568110.791 ops/s
[info]                  ·gc.alloc.rate:      11.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   568672.694 ±(99.9%) 2570.780 ops/s [Average]
[info]   (min, avg, max) = (568110.791, 568672.694, 569640.826), stdev = 667.624
[info]   CI (99.9%): [566101.914, 571243.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.560 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (11.548, 11.560, 11.579), stdev = 0.013
[info]   CI (99.9%): [11.509, 11.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.13% complete, ETA 00:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11115.731 ops/s
[info] # Warmup Iteration   2: 20974.369 ops/s
[info] # Warmup Iteration   3: 21082.586 ops/s
[info] # Warmup Iteration   4: 20485.068 ops/s
[info] # Warmup Iteration   5: 20249.200 ops/s
[info] Iteration   1: 20416.847 ops/s
[info]                  ·gc.alloc.rate:                   418.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39435.207 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 21406.761 ops/s
[info]                  ·gc.alloc.rate:                   438.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37613.562 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21328.969 ops/s
[info]                  ·gc.alloc.rate:                   437.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49713.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21366.694 ops/s
[info]                  ·gc.alloc.rate:      437.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 32264.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21323.683 ops/s
[info]                  ·gc.alloc.rate:                   437.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49725.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   21168.591 ±(99.9%) 1623.290 ops/s [Average]
[info]   (min, avg, max) = (20416.847, 21168.591, 21406.761), stdev = 421.563
[info]   CI (99.9%): [19545.301, 22791.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   433.854 ±(99.9%) 33.274 MB/sec [Average]
[info]   (min, avg, max) = (418.443, 433.854, 438.706), stdev = 8.641
[info]   CI (99.9%): [400.581, 467.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32264.181 ±(99.9%) 1.393 B/op [Average]
[info]   (min, avg, max) = (32264.019, 32264.181, 32264.828), stdev = 0.362
[info]   CI (99.9%): [32262.789, 32265.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.271), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.993 ±(99.9%) 34.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.993, 19.966), stdev = 8.929
[info]   CI (99.9%): [≈ 0, 38.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   474.005 ±(99.9%) 1067.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.005, 673.573), stdev = 277.100
[info]   CI (99.9%): [≈ 0, 1541.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35297.430 ±(99.9%) 79017.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35297.430, 49725.018), stdev = 20520.530
[info]   CI (99.9%): [≈ 0, 114314.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.33% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59357.171 ops/s
[info] # Warmup Iteration   2: 74146.226 ops/s
[info] # Warmup Iteration   3: 72740.145 ops/s
[info] # Warmup Iteration   4: 75895.120 ops/s
[info] # Warmup Iteration   5: 75591.605 ops/s
[info] Iteration   1: 74752.774 ops/s
[info]                  ·gc.alloc.rate:                   1307.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28274.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 74894.317 ops/s
[info]                  ·gc.alloc.rate:                   1309.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28220.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 74480.975 ops/s
[info]                  ·gc.alloc.rate:                   1302.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28374.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 74730.587 ops/s
[info]                  ·gc.alloc.rate:                   1306.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28308.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 74899.868 ops/s
[info]                  ·gc.alloc.rate:                   1309.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28272.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   74751.704 ±(99.9%) 655.832 ops/s [Average]
[info]   (min, avg, max) = (74480.975, 74751.704, 74899.868), stdev = 170.318
[info]   CI (99.9%): [74095.872, 75407.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1307.194 ±(99.9%) 11.221 MB/sec [Average]
[info]   (min, avg, max) = (1302.621, 1307.194, 1309.783), stdev = 2.914
[info]   CI (99.9%): [1295.973, 1318.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27528.005, 27528.006, 27528.006), stdev = 0.001
[info]   CI (99.9%): [27528.005, 27528.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.878 ±(99.9%) 3.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.878, 1.759), stdev = 0.878
[info]   CI (99.9%): [≈ 0, 4.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.385 ±(99.9%) 4.212 MB/sec [Average]
[info]   (min, avg, max) = (1342.532, 1343.385, 1345.103), stdev = 1.094
[info]   CI (99.9%): [1339.173, 1347.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28290.256 ±(99.9%) 218.757 B/op [Average]
[info]   (min, avg, max) = (28220.717, 28290.256, 28374.889), stdev = 56.810
[info]   CI (99.9%): [28071.499, 28509.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:22:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73853.802 ops/s
[info] # Warmup Iteration   2: 142664.708 ops/s
[info] # Warmup Iteration   3: 136461.668 ops/s
[info] # Warmup Iteration   4: 141272.901 ops/s
[info] # Warmup Iteration   5: 142981.099 ops/s
[info] Iteration   1: 142786.214 ops/s
[info]                  ·gc.alloc.rate:                   610.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7426.841 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 143304.149 ops/s
[info]                  ·gc.alloc.rate:                   612.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7400.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 142915.658 ops/s
[info]                  ·gc.alloc.rate:                   610.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7430.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 143333.456 ops/s
[info]                  ·gc.alloc.rate:      612.621 MB/sec
[info]                  ·gc.alloc.rate.norm: 6728.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 142984.744 ops/s
[info]                  ·gc.alloc.rate:                   611.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7426.726 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   143064.844 ±(99.9%) 934.776 ops/s [Average]
[info]   (min, avg, max) = (142786.214, 143064.844, 143333.456), stdev = 242.758
[info]   CI (99.9%): [142130.068, 143999.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   611.451 ±(99.9%) 4.239 MB/sec [Average]
[info]   (min, avg, max) = (610.152, 611.451, 612.621), stdev = 1.101
[info]   CI (99.9%): [607.211, 615.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.003, 6728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.250), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.688 ±(99.9%) 4.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.688, 2.753), stdev = 1.170
[info]   CI (99.9%): [≈ 0, 5.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.286 ±(99.9%) 1160.854 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.286, 674.593), stdev = 301.470
[info]   CI (99.9%): [≈ 0, 1700.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5936.796 ±(99.9%) 12779.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5936.796, 7430.363), stdev = 3318.792
[info]   CI (99.9%): [≈ 0, 18716.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.73% complete, ETA 00:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194102.311 ops/s
[info] # Warmup Iteration   2: 212397.262 ops/s
[info] # Warmup Iteration   3: 211945.704 ops/s
[info] # Warmup Iteration   4: 212148.738 ops/s
[info] # Warmup Iteration   5: 210092.365 ops/s
[info] Iteration   1: 210036.174 ops/s
[info]                  ·gc.alloc.rate:                   748.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5055.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 211907.719 ops/s
[info]                  ·gc.alloc.rate:                   754.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4996.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 213175.944 ops/s
[info]                  ·gc.alloc.rate:                   759.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4966.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 212862.801 ops/s
[info]                  ·gc.alloc.rate:                   758.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4964.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 213219.723 ops/s
[info]                  ·gc.alloc.rate:                   759.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4955.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   212240.472 ±(99.9%) 5162.947 ops/s [Average]
[info]   (min, avg, max) = (210036.174, 212240.472, 213219.723), stdev = 1340.801
[info]   CI (99.9%): [207077.526, 217403.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   756.035 ±(99.9%) 18.621 MB/sec [Average]
[info]   (min, avg, max) = (748.037, 756.035, 759.532), stdev = 4.836
[info]   CI (99.9%): [737.414, 774.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.312), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.414 ±(99.9%) 5.076 MB/sec [Average]
[info]   (min, avg, max) = (671.191, 672.414, 674.406), stdev = 1.318
[info]   CI (99.9%): [667.338, 677.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4987.945 ±(99.9%) 158.239 B/op [Average]
[info]   (min, avg, max) = (4955.737, 4987.945, 5055.988), stdev = 41.094
[info]   CI (99.9%): [4829.706, 5146.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.94% complete, ETA 00:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27239.202 ops/s
[info] # Warmup Iteration   2: 41757.291 ops/s
[info] # Warmup Iteration   3: 40754.266 ops/s
[info] # Warmup Iteration   4: 41843.218 ops/s
[info] # Warmup Iteration   5: 42041.800 ops/s
[info] Iteration   1: 41943.773 ops/s
[info]                  ·gc.alloc.rate:                   1738.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50785.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 40854.329 ops/s
[info]                  ·gc.alloc.rate:                   1692.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78320.500 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41728.256 ops/s
[info]                  ·gc.alloc.rate:                   1729.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51162.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41698.183 ops/s
[info]                  ·gc.alloc.rate:                   1728.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76839.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42099.342 ops/s
[info]                  ·gc.alloc.rate:                   1744.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50797.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   41664.777 ±(99.9%) 1855.371 ops/s [Average]
[info]   (min, avg, max) = (40854.329, 41664.777, 42099.342), stdev = 481.834
[info]   CI (99.9%): [39809.405, 43520.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1726.812 ±(99.9%) 77.341 MB/sec [Average]
[info]   (min, avg, max) = (1692.976, 1726.812, 1744.853), stdev = 20.085
[info]   CI (99.9%): [1649.471, 1804.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65248.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (65248.010, 65248.010, 65248.011), stdev = 0.001
[info]   CI (99.9%): [65248.008, 65248.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.102 ±(99.9%) 4.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.102, 3.140), stdev = 1.190
[info]   CI (99.9%): [≈ 0, 5.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1627.037 ±(99.9%) 1429.756 MB/sec [Average]
[info]   (min, avg, max) = (1353.055, 1627.037, 2035.380), stdev = 371.303
[info]   CI (99.9%): [197.281, 3056.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   61581.170 ±(99.9%) 56277.175 B/op [Average]
[info]   (min, avg, max) = (50785.519, 61581.170, 78320.500), stdev = 14615.004
[info]   CI (99.9%): [5303.995, 117858.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84.14% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105800.945 ops/s
[info] # Warmup Iteration   2: 121187.970 ops/s
[info] # Warmup Iteration   3: 120160.113 ops/s
[info] # Warmup Iteration   4: 123005.067 ops/s
[info] # Warmup Iteration   5: 122281.300 ops/s
[info] Iteration   1: 122809.836 ops/s
[info]                  ·gc.alloc.rate:                   1137.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17217.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 122143.879 ops/s
[info]                  ·gc.alloc.rate:                   1131.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17304.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 123429.741 ops/s
[info]                  ·gc.alloc.rate:                   1143.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8561.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 123207.210 ops/s
[info]                  ·gc.alloc.rate:                   1141.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17162.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 123270.698 ops/s
[info]                  ·gc.alloc.rate:                   1142.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17162.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   122972.273 ±(99.9%) 1987.984 ops/s [Average]
[info]   (min, avg, max) = (122143.879, 122972.273, 123429.741), stdev = 516.273
[info]   CI (99.9%): [120984.288, 124960.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1139.266 ±(99.9%) 18.293 MB/sec [Average]
[info]   (min, avg, max) = (1131.702, 1139.266, 1143.456), stdev = 4.751
[info]   CI (99.9%): [1120.973, 1157.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   14584.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14584.003, 14584.003, 14584.004), stdev = 0.001
[info]   CI (99.9%): [14584.003, 14584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.373 ±(99.9%) 1.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 0.797), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.897 ±(99.9%) 1157.246 MB/sec [Average]
[info]   (min, avg, max) = (671.287, 1208.897, 1344.025), stdev = 300.533
[info]   CI (99.9%): [51.651, 2366.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   15481.891 ±(99.9%) 14897.656 B/op [Average]
[info]   (min, avg, max) = (8561.815, 15481.891, 17304.452), stdev = 3868.874
[info]   CI (99.9%): [584.235, 30379.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.34% complete, ETA 00:21:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199988.797 ops/s
[info] # Warmup Iteration   2: 256134.695 ops/s
[info] # Warmup Iteration   3: 258778.966 ops/s
[info] # Warmup Iteration   4: 262766.515 ops/s
[info] # Warmup Iteration   5: 263679.606 ops/s
[info] Iteration   1: 264533.247 ops/s
[info]                  ·gc.alloc.rate:                   1244.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7981.828 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 263589.032 ops/s
[info]                  ·gc.alloc.rate:                   1240.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8010.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 265210.182 ops/s
[info]                  ·gc.alloc.rate:                   1247.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3982.405 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 264404.769 ops/s
[info]                  ·gc.alloc.rate:                   1244.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7993.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 262388.213 ops/s
[info]                  ·gc.alloc.rate:                   1235.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8062.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   264025.089 ±(99.9%) 4163.478 ops/s [Average]
[info]   (min, avg, max) = (262388.213, 264025.089, 265210.182), stdev = 1081.242
[info]   CI (99.9%): [259861.611, 268188.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1242.499 ±(99.9%) 18.903 MB/sec [Average]
[info]   (min, avg, max) = (1235.136, 1242.499, 1247.970), stdev = 4.909
[info]   CI (99.9%): [1223.597, 1261.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7408.002, 7408.002, 7408.002), stdev = 0.001
[info]   CI (99.9%): [7408.001, 7408.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.150 ±(99.9%) 0.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.499), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1208.036 ±(99.9%) 1156.266 MB/sec [Average]
[info]   (min, avg, max) = (670.885, 1208.036, 1344.301), stdev = 300.279
[info]   CI (99.9%): [51.769, 2364.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7206.147 ±(99.9%) 6940.374 B/op [Average]
[info]   (min, avg, max) = (3982.405, 7206.147, 8062.742), stdev = 1802.393
[info]   CI (99.9%): [265.773, 14146.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.54% complete, ETA 00:20:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303508.275 ops/s
[info] # Warmup Iteration   2: 514114.034 ops/s
[info] # Warmup Iteration   3: 517121.412 ops/s
[info] # Warmup Iteration   4: 515509.025 ops/s
[info] # Warmup Iteration   5: 521594.735 ops/s
[info] Iteration   1: 520417.399 ops/s
[info]                  ·gc.alloc.rate:                   417.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1547.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 519679.244 ops/s
[info]                  ·gc.alloc.rate:                   417.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1549.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 517015.982 ops/s
[info]                  ·gc.alloc.rate:      415.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 529958.344 ops/s
[info]                  ·gc.alloc.rate:                   425.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2000.903 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 533564.395 ops/s
[info]                  ·gc.alloc.rate:                   428.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1987.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   524127.073 ±(99.9%) 27712.550 ops/s [Average]
[info]   (min, avg, max) = (517015.982, 524127.073, 533564.395), stdev = 7196.861
[info]   CI (99.9%): [496414.523, 551839.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   420.837 ±(99.9%) 22.354 MB/sec [Average]
[info]   (min, avg, max) = (415.112, 420.837, 428.391), stdev = 5.805
[info]   CI (99.9%): [398.483, 443.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.354), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.210 ±(99.9%) 1.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.210, 1.051), stdev = 0.470
[info]   CI (99.9%): [≈ 0, 2.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   474.017 ±(99.9%) 1067.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.017, 673.759), stdev = 277.126
[info]   CI (99.9%): [≈ 0, 1541.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1416.909 ±(99.9%) 3168.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1416.909, 2000.903), stdev = 822.883
[info]   CI (99.9%): [≈ 0, 4585.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.74% complete, ETA 00:20:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552900.074 ops/s
[info] # Warmup Iteration   2: 566124.257 ops/s
[info] # Warmup Iteration   3: 577531.420 ops/s
[info] # Warmup Iteration   4: 571038.988 ops/s
[info] # Warmup Iteration   5: 575019.159 ops/s
[info] Iteration   1: 579771.960 ops/s
[info]                  ·gc.alloc.rate:      306.382 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 578260.944 ops/s
[info]                  ·gc.alloc.rate:                   305.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1392.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 577876.085 ops/s
[info]                  ·gc.alloc.rate:      305.428 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 590775.738 ops/s
[info]                  ·gc.alloc.rate:                   312.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1362.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 591588.590 ops/s
[info]                  ·gc.alloc.rate:                   312.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1360.961 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   583654.663 ±(99.9%) 26623.553 ops/s [Average]
[info]   (min, avg, max) = (577876.085, 583654.663, 591588.590), stdev = 6914.052
[info]   CI (99.9%): [557031.111, 610278.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   308.463 ±(99.9%) 14.058 MB/sec [Average]
[info]   (min, avg, max) = (305.428, 308.463, 312.646), stdev = 3.651
[info]   CI (99.9%): [294.406, 322.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.001, 832.001, 832.001), stdev = 0.001
[info]   CI (99.9%): [832.001, 832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.866 ±(99.9%) 1078.677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.866, 511.485), stdev = 280.129
[info]   CI (99.9%): [≈ 0, 1385.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   823.231 ±(99.9%) 2894.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 823.231, 1392.408), stdev = 751.607
[info]   CI (99.9%): [≈ 0, 3717.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:20:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 626957.294 ops/s
[info] # Warmup Iteration   2: 675544.340 ops/s
[info] # Warmup Iteration   3: 701405.007 ops/s
[info] # Warmup Iteration   4: 696473.452 ops/s
[info] # Warmup Iteration   5: 698352.198 ops/s
[info] Iteration   1: 697504.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 702712.316 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 700100.719 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 694093.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 697254.050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   698333.075 ±(99.9%) 12496.163 ops/s [Average]
[info]   (min, avg, max) = (694093.649, 698333.075, 702712.316), stdev = 3245.214
[info]   CI (99.9%): [685836.912, 710829.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.14% complete, ETA 00:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22855.784 ops/s
[info] # Warmup Iteration   2: 33282.415 ops/s
[info] # Warmup Iteration   3: 33978.768 ops/s
[info] # Warmup Iteration   4: 34199.718 ops/s
[info] # Warmup Iteration   5: 34395.271 ops/s
[info] Iteration   1: 34131.355 ops/s
[info]                  ·gc.alloc.rate:                   1767.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92633.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34381.959 ops/s
[info]                  ·gc.alloc.rate:                   1781.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92072.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34371.839 ops/s
[info]                  ·gc.alloc.rate:                   1780.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61485.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34250.940 ops/s
[info]                  ·gc.alloc.rate:                   1773.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92724.860 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34117.654 ops/s
[info]                  ·gc.alloc.rate:                   1767.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93285.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   34250.749 ±(99.9%) 486.493 ops/s [Average]
[info]   (min, avg, max) = (34117.654, 34250.749, 34381.959), stdev = 126.341
[info]   CI (99.9%): [33764.257, 34737.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1773.976 ±(99.9%) 25.522 MB/sec [Average]
[info]   (min, avg, max) = (1767.030, 1773.976, 1781.027), stdev = 6.628
[info]   CI (99.9%): [1748.454, 1799.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81536.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81536.012, 81536.012, 81536.013), stdev = 0.001
[info]   CI (99.9%): [81536.010, 81536.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.441 ±(99.9%) 4.915 B/op [Average]
[info]   (min, avg, max) = (1.920, 3.441, 4.782), stdev = 1.276
[info]   CI (99.9%): [≈ 0, 8.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1880.185 ±(99.9%) 1157.793 MB/sec [Average]
[info]   (min, avg, max) = (1342.403, 1880.185, 2021.672), stdev = 300.675
[info]   CI (99.9%): [722.393, 3037.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86440.347 ±(99.9%) 53742.984 B/op [Average]
[info]   (min, avg, max) = (61485.391, 86440.347, 93285.962), stdev = 13956.882
[info]   CI (99.9%): [32697.364, 140183.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85.34% complete, ETA 00:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76928.342 ops/s
[info] # Warmup Iteration   2: 87048.174 ops/s
[info] # Warmup Iteration   3: 88183.296 ops/s
[info] # Warmup Iteration   4: 88025.839 ops/s
[info] # Warmup Iteration   5: 89173.468 ops/s
[info] Iteration   1: 89409.924 ops/s
[info]                  ·gc.alloc.rate:                   2033.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              35792.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35505.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 89592.691 ops/s
[info]                  ·gc.alloc.rate:                   2037.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              35792.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35479.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 89060.998 ops/s
[info]                  ·gc.alloc.rate:                   2025.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              35792.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35765.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 87646.426 ops/s
[info]                  ·gc.alloc.rate:                   1992.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              35792.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36391.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 89143.970 ops/s
[info]                  ·gc.alloc.rate:                   2026.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              35792.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35836.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   88970.802 ±(99.9%) 2965.039 ops/s [Average]
[info]   (min, avg, max) = (87646.426, 88970.802, 89592.691), stdev = 770.011
[info]   CI (99.9%): [86005.763, 91935.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2023.028 ±(99.9%) 67.592 MB/sec [Average]
[info]   (min, avg, max) = (1992.783, 2023.028, 2037.073), stdev = 17.553
[info]   CI (99.9%): [1955.437, 2090.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   35792.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35792.005, 35792.005, 35792.005), stdev = 0.001
[info]   CI (99.9%): [35792.004, 35792.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.957 ±(99.9%) 1.605 B/op [Average]
[info]   (min, avg, max) = (0.366, 0.957, 1.466), stdev = 0.417
[info]   CI (99.9%): [≈ 0, 2.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2023.082 ±(99.9%) 19.468 MB/sec [Average]
[info]   (min, avg, max) = (2016.778, 2023.082, 2029.226), stdev = 5.056
[info]   CI (99.9%): [2003.614, 2042.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   35795.455 ±(99.9%) 1417.003 B/op [Average]
[info]   (min, avg, max) = (35479.103, 35795.455, 36391.031), stdev = 367.991
[info]   CI (99.9%): [34378.452, 37212.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.54% complete, ETA 00:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46816.996 ops/s
[info] # Warmup Iteration   2: 61015.560 ops/s
[info] # Warmup Iteration   3: 59650.588 ops/s
[info] # Warmup Iteration   4: 61595.024 ops/s
[info] # Warmup Iteration   5: 62071.159 ops/s
[info] Iteration   1: 62009.164 ops/s
[info]                  ·gc.alloc.rate:                   2806.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              71264.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68467.356 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 61134.067 ops/s
[info]                  ·gc.alloc.rate:                   2767.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              71264.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69594.083 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 61418.987 ops/s
[info]                  ·gc.alloc.rate:                   2780.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              71264.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69398.714 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 61734.317 ops/s
[info]                  ·gc.alloc.rate:                   2794.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              71264.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69157.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 61667.112 ops/s
[info]                  ·gc.alloc.rate:                   2791.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              71264.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69327.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   61592.729 ±(99.9%) 1276.468 ops/s [Average]
[info]   (min, avg, max) = (61134.067, 61592.729, 62009.164), stdev = 331.495
[info]   CI (99.9%): [60316.262, 62869.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   2788.138 ±(99.9%) 57.006 MB/sec [Average]
[info]   (min, avg, max) = (2767.635, 2788.138, 2806.727), stdev = 14.804
[info]   CI (99.9%): [2731.132, 2845.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   71264.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71264.007, 71264.007, 71264.007), stdev = 0.001
[info]   CI (99.9%): [71264.006, 71264.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.343 ±(99.9%) 2.768 B/op [Average]
[info]   (min, avg, max) = (1.057, 2.343, 2.680), stdev = 0.719
[info]   CI (99.9%): [≈ 0, 5.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2706.886 ±(99.9%) 28.727 MB/sec [Average]
[info]   (min, avg, max) = (2696.581, 2706.886, 2715.441), stdev = 7.460
[info]   CI (99.9%): [2678.160, 2735.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69188.905 ±(99.9%) 1666.161 B/op [Average]
[info]   (min, avg, max) = (68467.356, 69188.905, 69594.083), stdev = 432.697
[info]   CI (99.9%): [67522.744, 70855.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.74% complete, ETA 00:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76083.628 ops/s
[info] # Warmup Iteration   2: 126230.505 ops/s
[info] # Warmup Iteration   3: 129016.860 ops/s
[info] # Warmup Iteration   4: 128027.923 ops/s
[info] # Warmup Iteration   5: 127002.829 ops/s
[info] Iteration   1: 126869.693 ops/s
[info]                  ·gc.alloc.rate:                   1635.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16777.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 127097.430 ops/s
[info]                  ·gc.alloc.rate:                   1638.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25146.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 127317.556 ops/s
[info]                  ·gc.alloc.rate:                   1641.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16747.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 126596.166 ops/s
[info]                  ·gc.alloc.rate:                   1632.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25292.980 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 124764.939 ops/s
[info]                  ·gc.alloc.rate:                   1608.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17119.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   126529.157 ±(99.9%) 3935.118 ops/s [Average]
[info]   (min, avg, max) = (124764.939, 126529.157, 127317.556), stdev = 1021.938
[info]   CI (99.9%): [122594.039, 130464.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1631.223 ±(99.9%) 50.732 MB/sec [Average]
[info]   (min, avg, max) = (1608.454, 1631.223, 1641.340), stdev = 13.175
[info]   CI (99.9%): [1580.491, 1681.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20296.003, 20296.003, 20296.003), stdev = 0.001
[info]   CI (99.9%): [20296.003, 20296.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.929 ±(99.9%) 2.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.929, 1.547), stdev = 0.565
[info]   CI (99.9%): [≈ 0, 3.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1625.452 ±(99.9%) 1428.932 MB/sec [Average]
[info]   (min, avg, max) = (1352.230, 1625.452, 2033.940), stdev = 371.089
[info]   CI (99.9%): [196.520, 3054.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20216.877 ±(99.9%) 17595.363 B/op [Average]
[info]   (min, avg, max) = (16747.706, 20216.877, 25292.980), stdev = 4569.460
[info]   CI (99.9%): [2621.514, 37812.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.94% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484476.030 ops/s
[info] # Warmup Iteration   2: 515924.035 ops/s
[info] # Warmup Iteration   3: 518671.224 ops/s
[info] # Warmup Iteration   4: 520031.070 ops/s
[info] # Warmup Iteration   5: 518620.015 ops/s
[info] Iteration   1: 518212.678 ops/s
[info]                  ·gc.alloc.rate:                   1353.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4078.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 519552.342 ops/s
[info]                  ·gc.alloc.rate:                   1357.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4068.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 521664.439 ops/s
[info]                  ·gc.alloc.rate:                   1362.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4054.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 520015.057 ops/s
[info]                  ·gc.alloc.rate:                   1358.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4071.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 520325.414 ops/s
[info]                  ·gc.alloc.rate:                   1359.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4073.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   519953.986 ±(99.9%) 4817.465 ops/s [Average]
[info]   (min, avg, max) = (518212.678, 519953.986, 521664.439), stdev = 1251.080
[info]   CI (99.9%): [515136.521, 524771.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1358.312 ±(99.9%) 12.005 MB/sec [Average]
[info]   (min, avg, max) = (1353.826, 1358.312, 1362.487), stdev = 3.118
[info]   CI (99.9%): [1346.307, 1370.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4112.001, 4112.001, 4112.001), stdev = 0.001
[info]   CI (99.9%): [4112.001, 4112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.113 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.252), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344.213 ±(99.9%) 5.963 MB/sec [Average]
[info]   (min, avg, max) = (1342.735, 1344.213, 1346.495), stdev = 1.549
[info]   CI (99.9%): [1338.250, 1350.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4069.335 ±(99.9%) 34.725 B/op [Average]
[info]   (min, avg, max) = (4054.465, 4069.335, 4078.315), stdev = 9.018
[info]   CI (99.9%): [4034.609, 4104.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.14% complete, ETA 00:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6395.194 ops/s
[info] # Warmup Iteration   2: 16543.701 ops/s
[info] # Warmup Iteration   3: 16662.416 ops/s
[info] # Warmup Iteration   4: 16685.638 ops/s
[info] # Warmup Iteration   5: 16601.636 ops/s
[info] Iteration   1: 16493.508 ops/s
[info]                  ·gc.alloc.rate:                   2133.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              203600.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193775.879 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16583.696 ops/s
[info]                  ·gc.alloc.rate:                   2144.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              203600.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192989.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16631.573 ops/s
[info]                  ·gc.alloc.rate:                   2151.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              203600.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192621.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16520.887 ops/s
[info]                  ·gc.alloc.rate:                   2136.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              203600.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 258749.421 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16634.483 ops/s
[info]                  ·gc.alloc.rate:                   2151.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              203600.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192901.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   16572.829 ±(99.9%) 246.260 ops/s [Average]
[info]   (min, avg, max) = (16493.508, 16572.829, 16634.483), stdev = 63.953
[info]   CI (99.9%): [16326.569, 16819.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2143.431 ±(99.9%) 31.677 MB/sec [Average]
[info]   (min, avg, max) = (2133.148, 2143.431, 2151.236), stdev = 8.226
[info]   CI (99.9%): [2111.754, 2175.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   203600.026 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (203600.025, 203600.026, 203600.031), stdev = 0.003
[info]   CI (99.9%): [203600.016, 203600.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.734 ±(99.9%) 17.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.734, 11.816), stdev = 4.532
[info]   CI (99.9%): [≈ 0, 22.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2170.446 ±(99.9%) 1173.718 MB/sec [Average]
[info]   (min, avg, max) = (2030.219, 2170.446, 2715.683), stdev = 304.811
[info]   CI (99.9%): [996.728, 3344.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   206207.473 ±(99.9%) 113112.540 B/op [Average]
[info]   (min, avg, max) = (192621.319, 206207.473, 258749.421), stdev = 29374.967
[info]   CI (99.9%): [93094.933, 319320.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27529.206 ops/s
[info] # Warmup Iteration   2: 39803.610 ops/s
[info] # Warmup Iteration   3: 40099.476 ops/s
[info] # Warmup Iteration   4: 40358.318 ops/s
[info] # Warmup Iteration   5: 40221.069 ops/s
[info] Iteration   1: 41021.438 ops/s
[info]                  ·gc.alloc.rate:                   2235.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              85776.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2687.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103119.770 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 40982.067 ops/s
[info]                  ·gc.alloc.rate:                   2232.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              85776.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77571.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41354.755 ops/s
[info]                  ·gc.alloc.rate:                   2253.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              85776.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76998.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41267.009 ops/s
[info]                  ·gc.alloc.rate:                   2248.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              85776.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103086.983 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 41132.777 ops/s
[info]                  ·gc.alloc.rate:                   2241.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              85776.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77707.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   41151.609 ±(99.9%) 610.753 ops/s [Average]
[info]   (min, avg, max) = (40982.067, 41151.609, 41354.755), stdev = 158.611
[info]   CI (99.9%): [40540.857, 41762.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2242.271 ±(99.9%) 33.584 MB/sec [Average]
[info]   (min, avg, max) = (2232.850, 2242.271, 2253.387), stdev = 8.722
[info]   CI (99.9%): [2208.687, 2275.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   85776.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (85776.010, 85776.010, 85776.011), stdev = 0.001
[info]   CI (99.9%): [85776.008, 85776.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.029 ±(99.9%) 8.256 B/op [Average]
[info]   (min, avg, max) = (0.792, 3.029, 5.596), stdev = 2.144
[info]   CI (99.9%): [≈ 0, 11.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2292.421 ±(99.9%) 1414.527 MB/sec [Average]
[info]   (min, avg, max) = (2019.274, 2292.421, 2702.433), stdev = 367.348
[info]   CI (99.9%): [877.894, 3706.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87696.807 ±(99.9%) 54165.962 B/op [Average]
[info]   (min, avg, max) = (76998.661, 87696.807, 103119.770), stdev = 14066.728
[info]   CI (99.9%): [33530.845, 141862.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.55% complete, ETA 00:18:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e1277c77/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 141434.051 ops/s
[info] # Warmup Iteration   2: 233038.200 ops/s
[info] # Warmup Iteration   3: 232057.582 ops/s
[info] # Warmup Iteration   4: 222363.399 ops/s
[info] # Warmup Iteration   5: 227672.104 ops/s
[info] Iteration   1: 222951.816 ops/s
[info]                  ·gc.alloc.rate:                   1036.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9528.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 228077.137 ops/s
[info]                  ·gc.alloc.rate:                   1060.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4657.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 224785.190 ops/s
[info]                  ·gc.alloc.rate:                   1045.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9458.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 238085.818 ops/s
[info]                  ·gc.alloc.rate:                   1107.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4469.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 226972.890 ops/s
[info]                  ·gc.alloc.rate:                   1055.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9380.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   228174.570 ±(99.9%) 22654.374 ops/s [Average]
[info]   (min, avg, max) = (222951.816, 228174.570, 238085.818), stdev = 5883.269
[info]   CI (99.9%): [205520.196, 250828.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1060.912 ±(99.9%) 105.463 MB/sec [Average]
[info]   (min, avg, max) = (1036.607, 1060.912, 1107.054), stdev = 27.388
[info]   CI (99.9%): [955.449, 1166.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7320.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7320.002, 7320.002, 7320.002), stdev = 0.001
[info]   CI (99.9%): [7320.001, 7320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.204 ±(99.9%) 0.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.583), stdev = 0.244
[info]   CI (99.9%): [≈ 0, 1.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080.556 ±(99.9%) 1424.380 MB/sec [Average]
[info]   (min, avg, max) = (674.794, 1080.556, 1352.294), stdev = 369.907
[info]   CI (99.9%): [≈ 0, 2504.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7498.794 ±(99.9%) 10323.319 B/op [Average]
[info]   (min, avg, max) = (4469.127, 7498.794, 9528.705), stdev = 2680.933
[info]   CI (99.9%): [≈ 0, 17822.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.75% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1060052.285 ops/s
[info] # Warmup Iteration   2: 1128221.164 ops/s
[info] # Warmup Iteration   3: 1115919.094 ops/s
[info] # Warmup Iteration   4: 1112523.967 ops/s
[info] # Warmup Iteration   5: 1137977.027 ops/s
[info] Iteration   1: 1144993.330 ops/s
[info]                  ·gc.alloc.rate:                   576.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 703.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1138796.987 ops/s
[info]                  ·gc.alloc.rate:                   573.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 932.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1140961.115 ops/s
[info]                  ·gc.alloc.rate:                   573.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 930.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1139609.836 ops/s
[info]                  ·gc.alloc.rate:                   573.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 929.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1142504.799 ops/s
[info]                  ·gc.alloc.rate:      574.779 MB/sec
[info]                  ·gc.alloc.rate.norm: 792.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1141373.214 ±(99.9%) 9491.269 ops/s [Average]
[info]   (min, avg, max) = (1138796.987, 1141373.214, 1144993.330), stdev = 2464.852
[info]   CI (99.9%): [1131881.945, 1150864.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   574.237 ±(99.9%) 4.780 MB/sec [Average]
[info]   (min, avg, max) = (573.048, 574.237, 576.106), stdev = 1.241
[info]   CI (99.9%): [569.457, 579.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (792.000, 792.000, 792.000), stdev = 0.001
[info]   CI (99.9%): [792.000, 792.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.674 ±(99.9%) 5.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.305), stdev = 1.472
[info]   CI (99.9%): [≈ 0, 6.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.931 ±(99.9%) 7.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.931, 4.568), stdev = 2.034
[info]   CI (99.9%): [≈ 0, 8.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.688 ±(99.9%) 1123.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.688, 674.790), stdev = 291.855
[info]   CI (99.9%): [≈ 0, 1630.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   699.159 ±(99.9%) 1552.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 699.159, 932.615), stdev = 403.086
[info]   CI (99.9%): [≈ 0, 2251.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.95% complete, ETA 00:17:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1142047.320 ops/s
[info] # Warmup Iteration   2: 1156938.583 ops/s
[info] # Warmup Iteration   3: 1167974.595 ops/s
[info] # Warmup Iteration   4: 1167979.324 ops/s
[info] # Warmup Iteration   5: 1168589.161 ops/s
[info] Iteration   1: 1170077.760 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1172487.195 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1169632.932 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1168484.024 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1167888.552 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1169714.093 ±(99.9%) 6854.418 ops/s [Average]
[info]   (min, avg, max) = (1167888.552, 1169714.093, 1172487.195), stdev = 1780.070
[info]   CI (99.9%): [1162859.675, 1176568.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87.15% complete, ETA 00:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17966.398 ops/s
[info] # Warmup Iteration   2: 31963.737 ops/s
[info] # Warmup Iteration   3: 33276.544 ops/s
[info] # Warmup Iteration   4: 33005.924 ops/s
[info] # Warmup Iteration   5: 33026.462 ops/s
[info] Iteration   1: 33175.583 ops/s
[info]                  ·gc.alloc.rate:                   1776.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              84312.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64143.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33279.667 ops/s
[info]                  ·gc.alloc.rate:                   1782.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              84312.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96052.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 33220.711 ops/s
[info]                  ·gc.alloc.rate:                   1779.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              84312.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96306.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 33203.614 ops/s
[info]                  ·gc.alloc.rate:                   1778.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              84312.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64281.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 33108.621 ops/s
[info]                  ·gc.alloc.rate:                   1773.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              84312.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96793.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   33197.639 ±(99.9%) 241.297 ops/s [Average]
[info]   (min, avg, max) = (33108.621, 33197.639, 33279.667), stdev = 62.664
[info]   CI (99.9%): [32956.342, 33438.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1777.996 ±(99.9%) 12.701 MB/sec [Average]
[info]   (min, avg, max) = (1773.332, 1777.996, 1782.312), stdev = 3.298
[info]   CI (99.9%): [1765.295, 1790.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   84312.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (84312.012, 84312.012, 84312.013), stdev = 0.001
[info]   CI (99.9%): [84312.011, 84312.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.172 ±(99.9%) 8.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.172, 4.947), stdev = 2.143
[info]   CI (99.9%): [≈ 0, 10.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1761.255 ±(99.9%) 1432.330 MB/sec [Average]
[info]   (min, avg, max) = (1351.753, 1761.255, 2035.846), stdev = 371.972
[info]   CI (99.9%): [328.924, 3193.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83515.301 ±(99.9%) 67860.548 B/op [Average]
[info]   (min, avg, max) = (64143.718, 83515.301, 96793.092), stdev = 17623.169
[info]   CI (99.9%): [15654.753, 151375.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87.35% complete, ETA 00:16:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312480.696 ops/s
[info] # Warmup Iteration   2: 673467.306 ops/s
[info] # Warmup Iteration   3: 680466.208 ops/s
[info] # Warmup Iteration   4: 683100.963 ops/s
[info] # Warmup Iteration   5: 684024.252 ops/s
[info] Iteration   1: 686333.261 ops/s
[info]                  ·gc.alloc.rate:                   2096.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4622.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 675624.368 ops/s
[info]                  ·gc.alloc.rate:                   2063.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4703.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 683738.189 ops/s
[info]                  ·gc.alloc.rate:                   2088.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4653.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 670965.995 ops/s
[info]                  ·gc.alloc.rate:                   2049.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4752.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 684930.647 ops/s
[info]                  ·gc.alloc.rate:                   2091.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4661.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   680318.492 ±(99.9%) 25733.695 ops/s [Average]
[info]   (min, avg, max) = (670965.995, 680318.492, 686333.261), stdev = 6682.959
[info]   CI (99.9%): [654584.797, 706052.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2077.726 ±(99.9%) 78.311 MB/sec [Average]
[info]   (min, avg, max) = (2049.269, 2077.726, 2096.034), stdev = 20.337
[info]   CI (99.9%): [1999.415, 2156.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4808.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4808.001, 4808.001, 4808.001), stdev = 0.001
[info]   CI (99.9%): [4808.001, 4808.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.125 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.125, 0.194), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2021.578 ±(99.9%) 19.945 MB/sec [Average]
[info]   (min, avg, max) = (2015.060, 2021.578, 2027.911), stdev = 5.180
[info]   CI (99.9%): [2001.633, 2041.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4678.453 ±(99.9%) 193.651 B/op [Average]
[info]   (min, avg, max) = (4622.259, 4678.453, 4752.065), stdev = 50.291
[info]   CI (99.9%): [4484.802, 4872.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.55% complete, ETA 00:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461324.225 ops/s
[info] # Warmup Iteration   2: 1487716.875 ops/s
[info] # Warmup Iteration   3: 1518092.842 ops/s
[info] # Warmup Iteration   4: 1552050.736 ops/s
[info] # Warmup Iteration   5: 1564732.857 ops/s
[info] Iteration   1: 1555893.945 ops/s
[info]                  ·gc.alloc.rate:                   1178.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1365.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1559939.498 ops/s
[info]                  ·gc.alloc.rate:                   1181.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1363.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1563325.849 ops/s
[info]                  ·gc.alloc.rate:                   1183.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 680.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1554837.399 ops/s
[info]                  ·gc.alloc.rate:                   1177.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1369.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1545817.125 ops/s
[info]                  ·gc.alloc.rate:                   1170.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1378.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1555962.763 ±(99.9%) 25413.857 ops/s [Average]
[info]   (min, avg, max) = (1545817.125, 1555962.763, 1563325.849), stdev = 6599.898
[info]   CI (99.9%): [1530548.906, 1581376.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1178.191 ±(99.9%) 19.025 MB/sec [Average]
[info]   (min, avg, max) = (1170.619, 1178.191, 1183.688), stdev = 4.941
[info]   CI (99.9%): [1159.166, 1197.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.051 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.084), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.515 ±(99.9%) 1164.405 MB/sec [Average]
[info]   (min, avg, max) = (675.587, 1216.515, 1353.951), stdev = 302.392
[info]   CI (99.9%): [52.110, 2380.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1231.432 ±(99.9%) 1186.503 B/op [Average]
[info]   (min, avg, max) = (680.331, 1231.432, 1378.681), stdev = 308.131
[info]   CI (99.9%): [44.928, 2417.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.75% complete, ETA 00:16:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6528050.391 ops/s
[info] # Warmup Iteration   2: 7333710.904 ops/s
[info] # Warmup Iteration   3: 6910412.082 ops/s
[info] # Warmup Iteration   4: 7289162.749 ops/s
[info] # Warmup Iteration   5: 7366277.543 ops/s
[info] Iteration   1: 7355502.313 ops/s
[info]                  ·gc.alloc.rate:      224.259 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7355153.099 ops/s
[info]                  ·gc.alloc.rate:                   224.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7367200.447 ops/s
[info]                  ·gc.alloc.rate:      224.668 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7326273.035 ops/s
[info]                  ·gc.alloc.rate:                   223.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.887 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7387424.069 ops/s
[info]                  ·gc.alloc.rate:      225.241 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7358310.593 ±(99.9%) 85474.003 ops/s [Average]
[info]   (min, avg, max) = (7326273.035, 7358310.593, 7387424.069), stdev = 22197.327
[info]   CI (99.9%): [7272836.590, 7443784.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   224.377 ±(99.9%) 2.544 MB/sec [Average]
[info]   (min, avg, max) = (223.433, 224.377, 225.241), stdev = 0.661
[info]   CI (99.9%): [221.833, 226.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.011 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.604 ±(99.9%) 1078.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.604, 511.513), stdev = 280.165
[info]   CI (99.9%): [≈ 0, 1283.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.872 ±(99.9%) 231.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.872, 109.887), stdev = 60.074
[info]   CI (99.9%): [≈ 0, 275.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.95% complete, ETA 00:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42995.894 ops/s
[info] # Warmup Iteration   2: 228508.372 ops/s
[info] # Warmup Iteration   3: 230926.776 ops/s
[info] # Warmup Iteration   4: 234918.584 ops/s
[info] # Warmup Iteration   5: 235462.618 ops/s
[info] Iteration   1: 235446.986 ops/s
[info]                  ·gc.alloc.rate:                   1668.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13556.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 236369.351 ops/s
[info]                  ·gc.alloc.rate:                   1674.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9010.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 231268.968 ops/s
[info]                  ·gc.alloc.rate:                   1638.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9215.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 234964.056 ops/s
[info]                  ·gc.alloc.rate:                   1664.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13621.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 233084.043 ops/s
[info]                  ·gc.alloc.rate:                   1651.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9162.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   234226.681 ±(99.9%) 7862.668 ops/s [Average]
[info]   (min, avg, max) = (231268.968, 234226.681, 236369.351), stdev = 2041.910
[info]   CI (99.9%): [226364.013, 242089.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1659.402 ±(99.9%) 56.208 MB/sec [Average]
[info]   (min, avg, max) = (1638.271, 1659.402, 1674.705), stdev = 14.597
[info]   CI (99.9%): [1603.194, 1715.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11152.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11152.002, 11152.002, 11152.002), stdev = 0.001
[info]   CI (99.9%): [11152.002, 11152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.393 ±(99.9%) 1.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 0.708), stdev = 0.271
[info]   CI (99.9%): [≈ 0, 1.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1624.916 ±(99.9%) 1425.841 MB/sec [Average]
[info]   (min, avg, max) = (1353.166, 1624.916, 2033.417), stdev = 370.286
[info]   CI (99.9%): [199.075, 3050.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10913.171 ±(99.9%) 9409.766 B/op [Average]
[info]   (min, avg, max) = (9010.847, 10913.171, 13621.289), stdev = 2443.686
[info]   CI (99.9%): [1503.405, 20322.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88.15% complete, ETA 00:15:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437463.357 ops/s
[info] # Warmup Iteration   2: 929494.615 ops/s
[info] # Warmup Iteration   3: 923917.243 ops/s
[info] # Warmup Iteration   4: 910019.387 ops/s
[info] # Warmup Iteration   5: 914598.336 ops/s
[info] Iteration   1: 921811.344 ops/s
[info]                  ·gc.alloc.rate:                   1377.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2290.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 947433.385 ops/s
[info]                  ·gc.alloc.rate:                   1415.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2228.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 943222.068 ops/s
[info]                  ·gc.alloc.rate:                   1409.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3359.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 928445.576 ops/s
[info]                  ·gc.alloc.rate:                   1387.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2277.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 947175.069 ops/s
[info]                  ·gc.alloc.rate:                   1415.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2235.758 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   937617.489 ±(99.9%) 45278.589 ops/s [Average]
[info]   (min, avg, max) = (921811.344, 937617.489, 947433.385), stdev = 11758.706
[info]   CI (99.9%): [892338.899, 982896.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1400.925 ±(99.9%) 67.733 MB/sec [Average]
[info]   (min, avg, max) = (1377.094, 1400.925, 1415.629), stdev = 17.590
[info]   CI (99.9%): [1333.193, 1468.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.084 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.084, 0.142), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1476.853 ±(99.9%) 1154.643 MB/sec [Average]
[info]   (min, avg, max) = (1340.999, 1476.853, 2013.244), stdev = 299.857
[info]   CI (99.9%): [322.209, 2631.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2478.412 ±(99.9%) 1900.279 B/op [Average]
[info]   (min, avg, max) = (2228.007, 2478.412, 3359.916), stdev = 493.496
[info]   CI (99.9%): [578.133, 4378.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.35% complete, ETA 00:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e1277c77/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 753009.992 ops/s
[info] # Warmup Iteration   2: 2345336.763 ops/s
[info] # Warmup Iteration   3: 2469364.176 ops/s
[info] # Warmup Iteration   4: 2469113.643 ops/s
[info] # Warmup Iteration   5: 2401271.527 ops/s
[info] Iteration   1: 2321515.947 ops/s
[info]                  ·gc.alloc.rate:                   955.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 914.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2335866.182 ops/s
[info]                  ·gc.alloc.rate:                   961.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454.888 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2336575.876 ops/s
[info]                  ·gc.alloc.rate:                   962.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2316248.888 ops/s
[info]                  ·gc.alloc.rate:                   953.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 917.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2332586.861 ops/s
[info]                  ·gc.alloc.rate:                   960.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 456.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2328558.751 ±(99.9%) 35240.877 ops/s [Average]
[info]   (min, avg, max) = (2316248.888, 2328558.751, 2336575.876), stdev = 9151.944
[info]   CI (99.9%): [2293317.874, 2363799.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   958.664 ±(99.9%) 14.726 MB/sec [Average]
[info]   (min, avg, max) = (953.469, 958.664, 962.079), stdev = 3.824
[info]   CI (99.9%): [943.938, 973.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   945.171 ±(99.9%) 1422.321 MB/sec [Average]
[info]   (min, avg, max) = (675.161, 945.171, 1350.641), stdev = 369.372
[info]   CI (99.9%): [≈ 0, 2367.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   639.651 ±(99.9%) 972.169 B/op [Average]
[info]   (min, avg, max) = (454.749, 639.651, 917.927), stdev = 252.469
[info]   CI (99.9%): [≈ 0, 1611.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.55% complete, ETA 00:15:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4059735.987 ops/s
[info] # Warmup Iteration   2: 5449567.567 ops/s
[info] # Warmup Iteration   3: 5612560.321 ops/s
[info] # Warmup Iteration   4: 5739610.364 ops/s
[info] # Warmup Iteration   5: 5729287.910 ops/s
[info] Iteration   1: 5771833.806 ops/s
[info]                  ·gc.alloc.rate:      645.224 MB/sec
[info]                  ·gc.alloc.rate.norm: 176.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5774298.707 ops/s
[info]                  ·gc.alloc.rate:                   645.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.874 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5763577.834 ops/s
[info]                  ·gc.alloc.rate:                   644.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5757383.898 ops/s
[info]                  ·gc.alloc.rate:                   643.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5647072.280 ops/s
[info]                  ·gc.alloc.rate:                   631.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.310 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5742833.305 ±(99.9%) 207750.446 ops/s [Average]
[info]   (min, avg, max) = (5647072.280, 5742833.305, 5774298.707), stdev = 53952.131
[info]   CI (99.9%): [5535082.859, 5950583.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   642.042 ±(99.9%) 23.210 MB/sec [Average]
[info]   (min, avg, max) = (631.342, 642.042, 645.605), stdev = 6.028
[info]   CI (99.9%): [618.832, 665.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.677 ±(99.9%) 5.692 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 3.320), stdev = 1.478
[info]   CI (99.9%): [≈ 0, 6.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.184 ±(99.9%) 1.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.184, 0.905), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 1.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.578 ±(99.9%) 1159.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.578, 674.533), stdev = 301.077
[info]   CI (99.9%): [≈ 0, 1697.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   147.831 ±(99.9%) 318.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 147.831, 187.310), stdev = 82.653
[info]   CI (99.9%): [≈ 0, 466.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.76% complete, ETA 00:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4309894.849 ops/s
[info] # Warmup Iteration   2: 5847541.921 ops/s
[info] # Warmup Iteration   3: 5928461.159 ops/s
[info] # Warmup Iteration   4: 5955542.442 ops/s
[info] # Warmup Iteration   5: 5893382.735 ops/s
[info] Iteration   1: 5933468.848 ops/s
[info]                  ·gc.alloc.rate:                   361.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5924822.665 ops/s
[info]                  ·gc.alloc.rate:      361.396 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5934905.042 ops/s
[info]                  ·gc.alloc.rate:                   361.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5935369.732 ops/s
[info]                  ·gc.alloc.rate:                   361.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5907714.316 ops/s
[info]                  ·gc.alloc.rate:      360.262 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5927256.121 ±(99.9%) 45183.107 ops/s [Average]
[info]   (min, avg, max) = (5907714.316, 5927256.121, 5935369.732), stdev = 11733.909
[info]   CI (99.9%): [5882073.014, 5972439.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   361.460 ±(99.9%) 2.710 MB/sec [Average]
[info]   (min, avg, max) = (360.262, 361.460, 361.928), stdev = 0.704
[info]   CI (99.9%): [358.750, 364.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.843 ±(99.9%) 1078.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.843, 511.441), stdev = 280.108
[info]   CI (99.9%): [≈ 0, 1385.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   81.400 ±(99.9%) 286.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.400, 135.692), stdev = 74.307
[info]   CI (99.9%): [≈ 0, 367.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.96% complete, ETA 00:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36792.180 ops/s
[info] # Warmup Iteration   2: 331577.658 ops/s
[info] # Warmup Iteration   3: 335507.799 ops/s
[info] # Warmup Iteration   4: 332945.659 ops/s
[info] # Warmup Iteration   5: 337882.096 ops/s
[info] Iteration   1: 334507.541 ops/s
[info]                  ·gc.alloc.rate:                   1703.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9541.797 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 336657.781 ops/s
[info]                  ·gc.alloc.rate:                   1714.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6327.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 330157.374 ops/s
[info]                  ·gc.alloc.rate:                   1681.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9686.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 337215.292 ops/s
[info]                  ·gc.alloc.rate:                   1717.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6329.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 333975.162 ops/s
[info]                  ·gc.alloc.rate:                   1700.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9592.749 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   334502.630 ±(99.9%) 10747.833 ops/s [Average]
[info]   (min, avg, max) = (330157.374, 334502.630, 337215.292), stdev = 2791.178
[info]   CI (99.9%): [323754.797, 345250.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1703.244 ±(99.9%) 54.757 MB/sec [Average]
[info]   (min, avg, max) = (1681.091, 1703.244, 1717.110), stdev = 14.220
[info]   CI (99.9%): [1648.487, 1758.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8016.001, 8016.001, 8016.001), stdev = 0.001
[info]   CI (99.9%): [8016.001, 8016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.235 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.235, 0.389), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1760.578 ±(99.9%) 1427.529 MB/sec [Average]
[info]   (min, avg, max) = (1353.116, 1760.578, 2035.054), stdev = 370.725
[info]   CI (99.9%): [333.050, 3188.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8295.568 ±(99.9%) 6916.954 B/op [Average]
[info]   (min, avg, max) = (6327.735, 8295.568, 9686.046), stdev = 1796.311
[info]   CI (99.9%): [1378.614, 15212.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.16% complete, ETA 00:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56068.167 ops/s
[info] # Warmup Iteration   2: 68214.742 ops/s
[info] # Warmup Iteration   3: 67081.074 ops/s
[info] # Warmup Iteration   4: 69484.902 ops/s
[info] # Warmup Iteration   5: 68966.421 ops/s
[info] Iteration   1: 69321.828 ops/s
[info]                  ·gc.alloc.rate:                   1981.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45762.533 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 69112.947 ops/s
[info]                  ·gc.alloc.rate:                   1975.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45974.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 69150.329 ops/s
[info]                  ·gc.alloc.rate:                   1976.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46025.282 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 67655.001 ops/s
[info]                  ·gc.alloc.rate:                   1933.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47128.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 69102.653 ops/s
[info]                  ·gc.alloc.rate:                   1975.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46201.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   68868.552 ±(99.9%) 2634.313 ops/s [Average]
[info]   (min, avg, max) = (67655.001, 68868.552, 69321.828), stdev = 684.123
[info]   CI (99.9%): [66234.239, 71502.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1968.453 ±(99.9%) 75.619 MB/sec [Average]
[info]   (min, avg, max) = (1933.606, 1968.453, 1981.418), stdev = 19.638
[info]   CI (99.9%): [1892.834, 2044.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (44992.006, 44992.006, 44992.007), stdev = 0.001
[info]   CI (99.9%): [44992.005, 44992.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.143 ±(99.9%) 2.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.143, 1.896), stdev = 0.722
[info]   CI (99.9%): [≈ 0, 3.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2021.932 ±(99.9%) 20.116 MB/sec [Average]
[info]   (min, avg, max) = (2015.351, 2021.932, 2028.476), stdev = 5.224
[info]   CI (99.9%): [2001.816, 2042.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46218.517 ±(99.9%) 2049.679 B/op [Average]
[info]   (min, avg, max) = (45762.533, 46218.517, 47128.665), stdev = 532.295
[info]   CI (99.9%): [44168.838, 48268.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.36% complete, ETA 00:14:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58683.358 ops/s
[info] # Warmup Iteration   2: 108617.910 ops/s
[info] # Warmup Iteration   3: 109280.109 ops/s
[info] # Warmup Iteration   4: 109399.952 ops/s
[info] # Warmup Iteration   5: 109229.536 ops/s
[info] Iteration   1: 109224.208 ops/s
[info]                  ·gc.alloc.rate:                   1681.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29235.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 109992.828 ops/s
[info]                  ·gc.alloc.rate:                   1693.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19377.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 109446.572 ops/s
[info]                  ·gc.alloc.rate:                   1685.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29242.850 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 109498.754 ops/s
[info]                  ·gc.alloc.rate:                   1686.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19501.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 109584.663 ops/s
[info]                  ·gc.alloc.rate:                   1687.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29246.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   109549.405 ±(99.9%) 1083.600 ops/s [Average]
[info]   (min, avg, max) = (109224.208, 109549.405, 109992.828), stdev = 281.407
[info]   CI (99.9%): [108465.805, 110633.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1686.763 ±(99.9%) 16.641 MB/sec [Average]
[info]   (min, avg, max) = (1681.787, 1686.763, 1693.566), stdev = 4.321
[info]   CI (99.9%): [1670.122, 1703.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24240.004, 24240.004, 24240.004), stdev = 0.001
[info]   CI (99.9%): [24240.003, 24240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.657 ±(99.9%) 2.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.657, 1.497), stdev = 0.648
[info]   CI (99.9%): [≈ 0, 3.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1761.471 ±(99.9%) 1428.337 MB/sec [Average]
[info]   (min, avg, max) = (1353.863, 1761.471, 2035.827), stdev = 370.935
[info]   CI (99.9%): [333.134, 3189.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25320.702 ±(99.9%) 20673.231 B/op [Average]
[info]   (min, avg, max) = (19377.829, 25320.702, 29246.166), stdev = 5368.772
[info]   CI (99.9%): [4647.471, 45993.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.56% complete, ETA 00:14:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145658.452 ops/s
[info] # Warmup Iteration   2: 162232.199 ops/s
[info] # Warmup Iteration   3: 165046.894 ops/s
[info] # Warmup Iteration   4: 163071.609 ops/s
[info] # Warmup Iteration   5: 165367.107 ops/s
[info] Iteration   1: 164526.246 ops/s
[info]                  ·gc.alloc.rate:                   2416.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19328.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 166506.395 ops/s
[info]                  ·gc.alloc.rate:                   2445.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25514.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 165016.051 ops/s
[info]                  ·gc.alloc.rate:                   2423.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19344.311 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 164876.347 ops/s
[info]                  ·gc.alloc.rate:                   2421.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25856.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 164381.258 ops/s
[info]                  ·gc.alloc.rate:                   2414.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25978.277 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   165061.259 ±(99.9%) 3263.574 ops/s [Average]
[info]   (min, avg, max) = (164381.258, 165061.259, 166506.395), stdev = 847.540
[info]   CI (99.9%): [161797.686, 168324.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2424.127 ±(99.9%) 48.391 MB/sec [Average]
[info]   (min, avg, max) = (2414.276, 2424.127, 2445.575), stdev = 12.567
[info]   CI (99.9%): [2375.735, 2472.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23120.002, 23120.003, 23120.003), stdev = 0.001
[info]   CI (99.9%): [23120.002, 23120.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.833 ±(99.9%) 0.631 B/op [Average]
[info]   (min, avg, max) = (0.596, 0.833, 0.993), stdev = 0.164
[info]   CI (99.9%): [0.202, 1.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2433.384 ±(99.9%) 1439.968 MB/sec [Average]
[info]   (min, avg, max) = (2019.821, 2433.384, 2712.748), stdev = 373.955
[info]   CI (99.9%): [993.416, 3873.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23204.301 ±(99.9%) 13611.549 B/op [Average]
[info]   (min, avg, max) = (19328.751, 23204.301, 25978.277), stdev = 3534.876
[info]   CI (99.9%): [9592.751, 36815.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.76% complete, ETA 00:13:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36376.489 ops/s
[info] # Warmup Iteration   2: 59701.324 ops/s
[info] # Warmup Iteration   3: 58601.876 ops/s
[info] # Warmup Iteration   4: 59834.522 ops/s
[info] # Warmup Iteration   5: 59315.123 ops/s
[info] Iteration   1: 60409.531 ops/s
[info]                  ·gc.alloc.rate:                   3175.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88481.788 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 60336.438 ops/s
[info]                  ·gc.alloc.rate:                   3171.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70962.672 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 60407.999 ops/s
[info]                  ·gc.alloc.rate:                   3175.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88645.298 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 60427.997 ops/s
[info]                  ·gc.alloc.rate:                   3176.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88649.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 60334.853 ops/s
[info]                  ·gc.alloc.rate:                   3171.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71043.665 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   60383.364 ±(99.9%) 170.465 ops/s [Average]
[info]   (min, avg, max) = (60334.853, 60383.364, 60427.997), stdev = 44.269
[info]   CI (99.9%): [60212.898, 60553.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3174.271 ±(99.9%) 8.803 MB/sec [Average]
[info]   (min, avg, max) = (3171.825, 3174.271, 3176.729), stdev = 2.286
[info]   CI (99.9%): [3165.467, 3183.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82760.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (82760.007, 82760.007, 82760.007), stdev = 0.001
[info]   CI (99.9%): [82760.006, 82760.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.736 ±(99.9%) 2.723 B/op [Average]
[info]   (min, avg, max) = (1.084, 1.736, 2.711), stdev = 0.707
[info]   CI (99.9%): [≈ 0, 4.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3128.318 ±(99.9%) 1430.977 MB/sec [Average]
[info]   (min, avg, max) = (2719.698, 3128.318, 3402.784), stdev = 371.620
[info]   CI (99.9%): [1697.341, 4559.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81556.524 ±(99.9%) 37097.607 B/op [Average]
[info]   (min, avg, max) = (70962.672, 81556.524, 88649.196), stdev = 9634.131
[info]   CI (99.9%): [44458.917, 118654.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89.96% complete, ETA 00:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66317.751 ops/s
[info] # Warmup Iteration   2: 77755.389 ops/s
[info] # Warmup Iteration   3: 79857.106 ops/s
[info] # Warmup Iteration   4: 79327.518 ops/s
[info] # Warmup Iteration   5: 79847.646 ops/s
[info] Iteration   1: 78352.763 ops/s
[info]                  ·gc.alloc.rate:                   1597.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26982.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 80799.156 ops/s
[info]                  ·gc.alloc.rate:                   1647.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39271.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80712.447 ops/s
[info]                  ·gc.alloc.rate:                   1645.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26236.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 80804.192 ops/s
[info]                  ·gc.alloc.rate:                   1647.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26247.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 80704.398 ops/s
[info]                  ·gc.alloc.rate:                   1645.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39470.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   80274.591 ±(99.9%) 4140.795 ops/s [Average]
[info]   (min, avg, max) = (78352.763, 80274.591, 80804.192), stdev = 1075.351
[info]   CI (99.9%): [76133.797, 84415.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1636.737 ±(99.9%) 84.888 MB/sec [Average]
[info]   (min, avg, max) = (1597.337, 1636.737, 1647.573), stdev = 22.045
[info]   CI (99.9%): [1551.848, 1721.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   32096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32096.005, 32096.005, 32096.005), stdev = 0.001
[info]   CI (99.9%): [32096.004, 32096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.652 ±(99.9%) 2.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.652, 1.218), stdev = 0.543
[info]   CI (99.9%): [≈ 0, 2.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1614.989 ±(99.9%) 1422.940 MB/sec [Average]
[info]   (min, avg, max) = (1342.849, 1614.989, 2023.749), stdev = 369.533
[info]   CI (99.9%): [192.049, 3037.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   31641.551 ±(99.9%) 27195.197 B/op [Average]
[info]   (min, avg, max) = (26236.805, 31641.551, 39470.010), stdev = 7062.506
[info]   CI (99.9%): [4446.353, 58836.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90.16% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104861.059 ops/s
[info] # Warmup Iteration   2: 143759.767 ops/s
[info] # Warmup Iteration   3: 137495.935 ops/s
[info] # Warmup Iteration   4: 142991.577 ops/s
[info] # Warmup Iteration   5: 139685.297 ops/s
[info] Iteration   1: 140256.591 ops/s
[info]                  ·gc.alloc.rate:                   667.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7564.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 146310.659 ops/s
[info]                  ·gc.alloc.rate:                   696.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7251.276 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 140043.816 ops/s
[info]                  ·gc.alloc.rate:                   666.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7553.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 148417.717 ops/s
[info]                  ·gc.alloc.rate:                   705.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7126.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 147072.602 ops/s
[info]                  ·gc.alloc.rate:                   699.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7177.926 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   144420.277 ±(99.9%) 15291.177 ops/s [Average]
[info]   (min, avg, max) = (140043.816, 144420.277, 148417.717), stdev = 3971.070
[info]   CI (99.9%): [129129.100, 159711.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   686.988 ±(99.9%) 72.757 MB/sec [Average]
[info]   (min, avg, max) = (666.207, 686.988, 705.946), stdev = 18.895
[info]   CI (99.9%): [614.231, 759.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7488.003, 7488.003, 7488.003), stdev = 0.001
[info]   CI (99.9%): [7488.002, 7488.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.723 ±(99.9%) 6.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.723, 3.572), stdev = 1.593
[info]   CI (99.9%): [≈ 0, 6.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.108 ±(99.9%) 68.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.108, 40.098), stdev = 17.883
[info]   CI (99.9%): [≈ 0, 76.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   672.496 ±(99.9%) 5.706 MB/sec [Average]
[info]   (min, avg, max) = (670.594, 672.496, 674.111), stdev = 1.482
[info]   CI (99.9%): [666.790, 678.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7334.644 ±(99.9%) 805.862 B/op [Average]
[info]   (min, avg, max) = (7126.684, 7334.644, 7564.146), stdev = 209.280
[info]   CI (99.9%): [6528.783, 8140.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.36% complete, ETA 00:12:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313425.652 ops/s
[info] # Warmup Iteration   2: 553256.449 ops/s
[info] # Warmup Iteration   3: 550665.538 ops/s
[info] # Warmup Iteration   4: 554444.926 ops/s
[info] # Warmup Iteration   5: 558117.763 ops/s
[info] Iteration   1: 562478.779 ops/s
[info]                  ·gc.alloc.rate:                   485.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1431.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 571963.384 ops/s
[info]                  ·gc.alloc.rate:                   494.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1853.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 575459.755 ops/s
[info]                  ·gc.alloc.rate:      497.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 573677.841 ops/s
[info]                  ·gc.alloc.rate:                   495.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1848.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 573887.708 ops/s
[info]                  ·gc.alloc.rate:                   495.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1850.565 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   571493.494 ±(99.9%) 19982.649 ops/s [Average]
[info]   (min, avg, max) = (562478.779, 571493.494, 575459.755), stdev = 5189.430
[info]   CI (99.9%): [551510.845, 591476.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   493.716 ±(99.9%) 17.407 MB/sec [Average]
[info]   (min, avg, max) = (485.876, 493.716, 497.222), stdev = 4.520
[info]   CI (99.9%): [476.310, 511.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1360.001, 1360.001), stdev = 0.001
[info]   CI (99.9%): [1360.001, 1360.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.333), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.195 ±(99.9%) 1.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.195, 0.916), stdev = 0.404
[info]   CI (99.9%): [≈ 0, 1.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.611 ±(99.9%) 1123.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.611, 674.606), stdev = 291.818
[info]   CI (99.9%): [≈ 0, 1630.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1396.818 ±(99.9%) 3087.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1396.818, 1853.786), stdev = 801.703
[info]   CI (99.9%): [≈ 0, 4483.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.56% complete, ETA 00:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 507661.730 ops/s
[info] # Warmup Iteration   2: 514356.875 ops/s
[info] # Warmup Iteration   3: 532451.698 ops/s
[info] # Warmup Iteration   4: 528539.715 ops/s
[info] # Warmup Iteration   5: 532137.417 ops/s
[info] Iteration   1: 532664.832 ops/s
[info]                  ·gc.alloc.rate:                   286.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1511.506 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 533994.876 ops/s
[info]                  ·gc.alloc.rate:                   287.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1507.844 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 532073.660 ops/s
[info]                  ·gc.alloc.rate:      286.685 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 523249.184 ops/s
[info]                  ·gc.alloc.rate:                   281.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1538.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 532940.785 ops/s
[info]                  ·gc.alloc.rate:      287.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   530984.667 ±(99.9%) 16865.459 ops/s [Average]
[info]   (min, avg, max) = (523249.184, 530984.667, 533994.876), stdev = 4379.906
[info]   CI (99.9%): [514119.209, 547850.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   286.068 ±(99.9%) 9.107 MB/sec [Average]
[info]   (min, avg, max) = (281.886, 286.068, 287.669), stdev = 2.365
[info]   CI (99.9%): [276.961, 295.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.001, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.895 ±(99.9%) 1078.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.895, 511.508), stdev = 280.156
[info]   CI (99.9%): [≈ 0, 1385.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   911.611 ±(99.9%) 3204.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 911.611, 1538.703), stdev = 832.268
[info]   CI (99.9%): [≈ 0, 4116.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.76% complete, ETA 00:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 607466.673 ops/s
[info] # Warmup Iteration   2: 623278.692 ops/s
[info] # Warmup Iteration   3: 612184.277 ops/s
[info] # Warmup Iteration   4: 615324.418 ops/s
[info] # Warmup Iteration   5: 612670.103 ops/s
[info] Iteration   1: 614432.594 ops/s
[info]                  ·gc.alloc.rate:      6.244 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 616491.343 ops/s
[info]                  ·gc.alloc.rate:      6.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 613364.755 ops/s
[info]                  ·gc.alloc.rate:      6.234 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 608901.743 ops/s
[info]                  ·gc.alloc.rate:      6.189 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 613699.974 ops/s
[info]                  ·gc.alloc.rate:      6.238 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   613378.082 ±(99.9%) 10710.363 ops/s [Average]
[info]   (min, avg, max) = (608901.743, 613378.082, 616491.343), stdev = 2781.447
[info]   CI (99.9%): [602667.719, 624088.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.234 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (6.189, 6.234, 6.265), stdev = 0.028
[info]   CI (99.9%): [6.126, 6.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.96% complete, ETA 00:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23608.784 ops/s
[info] # Warmup Iteration   2: 33328.917 ops/s
[info] # Warmup Iteration   3: 33621.486 ops/s
[info] # Warmup Iteration   4: 34017.616 ops/s
[info] # Warmup Iteration   5: 34101.796 ops/s
[info] Iteration   1: 33904.694 ops/s
[info]                  ·gc.alloc.rate:                   1750.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93219.810 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34100.890 ops/s
[info]                  ·gc.alloc.rate:                   1759.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92825.214 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34093.740 ops/s
[info]                  ·gc.alloc.rate:                   1759.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61988.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 33960.961 ops/s
[info]                  ·gc.alloc.rate:                   1752.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93513.718 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34104.286 ops/s
[info]                  ·gc.alloc.rate:                   1760.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62187.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   34032.914 ±(99.9%) 360.361 ops/s [Average]
[info]   (min, avg, max) = (33904.694, 34032.914, 34104.286), stdev = 93.585
[info]   CI (99.9%): [33672.553, 34393.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1756.560 ±(99.9%) 17.962 MB/sec [Average]
[info]   (min, avg, max) = (1750.262, 1756.560, 1760.243), stdev = 4.665
[info]   CI (99.9%): [1738.598, 1774.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81248.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81248.012, 81248.012, 81248.013), stdev = 0.001
[info]   CI (99.9%): [81248.011, 81248.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.351 ±(99.9%) 5.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.351, 2.899), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1745.210 ±(99.9%) 1407.355 MB/sec [Average]
[info]   (min, avg, max) = (1342.435, 1745.210, 2017.474), stdev = 365.486
[info]   CI (99.9%): [337.855, 3152.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80746.883 ±(99.9%) 65596.482 B/op [Average]
[info]   (min, avg, max) = (61988.423, 80746.883, 93513.718), stdev = 17035.198
[info]   CI (99.9%): [15150.401, 146343.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91.16% complete, ETA 00:11:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75359.019 ops/s
[info] # Warmup Iteration   2: 86845.801 ops/s
[info] # Warmup Iteration   3: 86615.641 ops/s
[info] # Warmup Iteration   4: 88000.137 ops/s
[info] # Warmup Iteration   5: 88032.569 ops/s
[info] Iteration   1: 87809.814 ops/s
[info]                  ·gc.alloc.rate:                   2000.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              35872.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36127.328 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 88380.539 ops/s
[info]                  ·gc.alloc.rate:                   2014.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              35872.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35954.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 88193.479 ops/s
[info]                  ·gc.alloc.rate:                   2009.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              35872.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36087.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 87216.221 ops/s
[info]                  ·gc.alloc.rate:                   1987.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              35872.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36557.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 88310.390 ops/s
[info]                  ·gc.alloc.rate:                   2012.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              35872.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36151.858 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   87982.089 ±(99.9%) 1854.178 ops/s [Average]
[info]   (min, avg, max) = (87216.221, 87982.089, 88380.539), stdev = 481.524
[info]   CI (99.9%): [86127.911, 89836.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2004.814 ±(99.9%) 42.149 MB/sec [Average]
[info]   (min, avg, max) = (1987.596, 2004.814, 2014.061), stdev = 10.946
[info]   CI (99.9%): [1962.664, 2046.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   35872.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35872.005, 35872.005, 35872.005), stdev = 0.001
[info]   CI (99.9%): [35872.004, 35872.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1.116 ±(99.9%) 1.420 B/op [Average]
[info]   (min, avg, max) = (0.742, 1.116, 1.486), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 2.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2021.736 ±(99.9%) 20.354 MB/sec [Average]
[info]   (min, avg, max) = (2014.752, 2021.736, 2027.975), stdev = 5.286
[info]   CI (99.9%): [2001.383, 2042.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   36175.705 ±(99.9%) 872.708 B/op [Average]
[info]   (min, avg, max) = (35954.499, 36175.705, 36557.548), stdev = 226.639
[info]   CI (99.9%): [35302.998, 37048.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.37% complete, ETA 00:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4400351.975 ops/s
[info] # Warmup Iteration   2: 5075895.448 ops/s
[info] # Warmup Iteration   3: 5206758.740 ops/s
[info] # Warmup Iteration   4: 5239091.819 ops/s
[info] # Warmup Iteration   5: 5185412.767 ops/s
[info] Iteration   1: 5213513.402 ops/s
[info]                  ·gc.alloc.rate:                   3841.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3384.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1022.174 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5239930.971 ops/s
[info]                  ·gc.alloc.rate:                   3861.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4072.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1223.381 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5216282.549 ops/s
[info]                  ·gc.alloc.rate:                   3843.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1230.742 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5235406.203 ops/s
[info]                  ·gc.alloc.rate:                   3857.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1022.819 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5216603.184 ops/s
[info]                  ·gc.alloc.rate:                   3843.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1232.374 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   5224347.262 ±(99.9%) 47455.770 ops/s [Average]
[info]   (min, avg, max) = (5213513.402, 5224347.262, 5239930.971), stdev = 12324.113
[info]   CI (99.9%): [5176891.492, 5271803.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3849.630 ±(99.9%) 35.335 MB/sec [Average]
[info]   (min, avg, max) = (3841.266, 3849.630, 3861.148), stdev = 9.176
[info]   CI (99.9%): [3814.295, 3884.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.020, 0.031), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3804.145 ±(99.9%) 1444.540 MB/sec [Average]
[info]   (min, avg, max) = (3384.864, 3804.145, 4083.743), stdev = 375.143
[info]   CI (99.9%): [2359.604, 5248.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1146.298 ±(99.9%) 435.377 B/op [Average]
[info]   (min, avg, max) = (1022.174, 1146.298, 1232.374), stdev = 113.066
[info]   CI (99.9%): [710.921, 1581.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.57% complete, ETA 00:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679949.733 ops/s
[info] # Warmup Iteration   2: 7195973.383 ops/s
[info] # Warmup Iteration   3: 7500275.811 ops/s
[info] # Warmup Iteration   4: 7588947.232 ops/s
[info] # Warmup Iteration   5: 7504502.145 ops/s
[info] Iteration   1: 7607912.283 ops/s
[info]                  ·gc.alloc.rate:                   811.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.312 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7628586.981 ops/s
[info]                  ·gc.alloc.rate:                   814.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.630 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7606355.191 ops/s
[info]                  ·gc.alloc.rate:                   811.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7569976.615 ops/s
[info]                  ·gc.alloc.rate:                   807.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7613867.914 ops/s
[info]                  ·gc.alloc.rate:                   812.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7605339.797 ±(99.9%) 83288.007 ops/s [Average]
[info]   (min, avg, max) = (7569976.615, 7605339.797, 7628586.981), stdev = 21629.631
[info]   CI (99.9%): [7522051.790, 7688627.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   811.647 ±(99.9%) 8.899 MB/sec [Average]
[info]   (min, avg, max) = (807.892, 811.647, 814.180), stdev = 2.311
[info]   CI (99.9%): [802.748, 820.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   806.564 ±(99.9%) 1156.584 MB/sec [Average]
[info]   (min, avg, max) = (671.841, 806.564, 1343.865), stdev = 300.361
[info]   CI (99.9%): [≈ 0, 1963.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   167.078 ±(99.9%) 241.902 B/op [Average]
[info]   (min, avg, max) = (138.630, 167.078, 279.455), stdev = 62.821
[info]   CI (99.9%): [≈ 0, 408.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.77% complete, ETA 00:11:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2773118.884 ops/s
[info] # Warmup Iteration   2: 4653394.099 ops/s
[info] # Warmup Iteration   3: 4741361.836 ops/s
[info] # Warmup Iteration   4: 4669768.968 ops/s
[info] # Warmup Iteration   5: 4699879.554 ops/s
[info] Iteration   1: 4737509.205 ops/s
[info]                  ·gc.alloc.rate:                   2455.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 673.967 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4723360.005 ops/s
[info]                  ·gc.alloc.rate:                   2448.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 902.947 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4741011.777 ops/s
[info]                  ·gc.alloc.rate:                   2458.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 675.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4731830.490 ops/s
[info]                  ·gc.alloc.rate:                   2452.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 903.505 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4712194.085 ops/s
[info]                  ·gc.alloc.rate:                   2442.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 908.099 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4729181.113 ±(99.9%) 44690.093 ops/s [Average]
[info]   (min, avg, max) = (4712194.085, 4729181.113, 4741011.777), stdev = 11605.875
[info]   CI (99.9%): [4684491.020, 4773871.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2451.506 ±(99.9%) 24.047 MB/sec [Average]
[info]   (min, avg, max) = (2442.507, 2451.506, 2458.366), stdev = 6.245
[info]   CI (99.9%): [2427.459, 2475.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.021, 0.028), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2441.324 ±(99.9%) 1439.965 MB/sec [Average]
[info]   (min, avg, max) = (2028.120, 2441.324, 2718.185), stdev = 373.954
[info]   CI (99.9%): [1001.359, 3881.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   812.817 ±(99.9%) 485.331 B/op [Average]
[info]   (min, avg, max) = (673.967, 812.817, 908.099), stdev = 126.039
[info]   CI (99.9%): [327.486, 1298.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.97% complete, ETA 00:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7713494.287 ops/s
[info] # Warmup Iteration   2: 7929946.001 ops/s
[info] # Warmup Iteration   3: 8052452.935 ops/s
[info] # Warmup Iteration   4: 8269024.795 ops/s
[info] # Warmup Iteration   5: 8289090.677 ops/s
[info] Iteration   1: 8252413.317 ops/s
[info]                  ·gc.alloc.rate:                   880.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8307095.900 ops/s
[info]                  ·gc.alloc.rate:                   886.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.471 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8304286.078 ops/s
[info]                  ·gc.alloc.rate:                   886.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.255 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 8241845.883 ops/s
[info]                  ·gc.alloc.rate:                   879.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8279421.792 ops/s
[info]                  ·gc.alloc.rate:                   883.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.625 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   8277012.594 ±(99.9%) 113846.201 ops/s [Average]
[info]   (min, avg, max) = (8241845.883, 8277012.594, 8307095.900), stdev = 29565.497
[info]   CI (99.9%): [8163166.393, 8390858.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   883.218 ±(99.9%) 12.584 MB/sec [Average]
[info]   (min, avg, max) = (879.360, 883.218, 886.600), stdev = 3.268
[info]   CI (99.9%): [870.634, 895.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.835 ±(99.9%) 1419.007 MB/sec [Average]
[info]   (min, avg, max) = (671.208, 940.835, 1346.778), stdev = 368.511
[info]   CI (99.9%): [≈ 0, 2359.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   179.154 ±(99.9%) 272.621 B/op [Average]
[info]   (min, avg, max) = (127.255, 179.154, 256.985), stdev = 70.799
[info]   CI (99.9%): [≈ 0, 451.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.17% complete, ETA 00:10:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4006228.927 ops/s
[info] # Warmup Iteration   2: 5401811.733 ops/s
[info] # Warmup Iteration   3: 5489561.190 ops/s
[info] # Warmup Iteration   4: 5461458.549 ops/s
[info] # Warmup Iteration   5: 5463811.729 ops/s
[info] Iteration   1: 5460417.870 ops/s
[info]                  ·gc.alloc.rate:                   2941.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 776.211 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5484413.001 ops/s
[info]                  ·gc.alloc.rate:                   2954.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3376.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.121 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5485096.614 ops/s
[info]                  ·gc.alloc.rate:                   2954.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 777.044 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5440400.871 ops/s
[info]                  ·gc.alloc.rate:                   2930.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 784.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5411738.908 ops/s
[info]                  ·gc.alloc.rate:                   2915.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 987.559 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5456413.453 ±(99.9%) 119849.576 ops/s [Average]
[info]   (min, avg, max) = (5411738.908, 5456413.453, 5485096.614), stdev = 31124.554
[info]   CI (99.9%): [5336563.877, 5576263.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2939.120 ±(99.9%) 63.913 MB/sec [Average]
[info]   (min, avg, max) = (2915.312, 2939.120, 2954.266), stdev = 16.598
[info]   CI (99.9%): [2875.207, 3003.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.023, 0.036), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2976.471 ±(99.9%) 1438.783 MB/sec [Average]
[info]   (min, avg, max) = (2692.227, 2976.471, 3395.096), stdev = 373.647
[info]   CI (99.9%): [1537.689, 4415.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   858.925 ±(99.9%) 420.703 B/op [Average]
[info]   (min, avg, max) = (776.211, 858.925, 987.559), stdev = 109.255
[info]   CI (99.9%): [438.222, 1279.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92.37% complete, ETA 00:10:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4015601.437 ops/s
[info] # Warmup Iteration   2: 4301925.780 ops/s
[info] # Warmup Iteration   3: 4380373.780 ops/s
[info] # Warmup Iteration   4: 4340325.848 ops/s
[info] # Warmup Iteration   5: 4318890.820 ops/s
[info] Iteration   1: 4315787.267 ops/s
[info]                  ·gc.alloc.rate:                   2324.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 982.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4309884.788 ops/s
[info]                  ·gc.alloc.rate:                   2321.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4313180.021 ops/s
[info]                  ·gc.alloc.rate:                   2323.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 986.424 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4342591.880 ops/s
[info]                  ·gc.alloc.rate:                   2339.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 736.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4382121.833 ops/s
[info]                  ·gc.alloc.rate:                   2360.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   4332713.158 ±(99.9%) 117554.584 ops/s [Average]
[info]   (min, avg, max) = (4309884.788, 4332713.158, 4382121.833), stdev = 30528.552
[info]   CI (99.9%): [4215158.573, 4450267.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2333.891 ±(99.9%) 63.132 MB/sec [Average]
[info]   (min, avg, max) = (2321.392, 2333.891, 2360.444), stdev = 16.395
[info]   CI (99.9%): [2270.759, 2397.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.023, 0.038), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2296.601 ±(99.9%) 1411.138 MB/sec [Average]
[info]   (min, avg, max) = (2023.380, 2296.601, 2703.273), stdev = 366.468
[info]   CI (99.9%): [885.463, 3707.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   834.878 ±(99.9%) 525.646 B/op [Average]
[info]   (min, avg, max) = (730.479, 834.878, 986.424), stdev = 136.509
[info]   CI (99.9%): [309.231, 1360.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.57% complete, ETA 00:09:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2487936.027 ops/s
[info] # Warmup Iteration   2: 3118734.712 ops/s
[info] # Warmup Iteration   3: 3149087.828 ops/s
[info] # Warmup Iteration   4: 3278606.544 ops/s
[info] # Warmup Iteration   5: 3291978.501 ops/s
[info] Iteration   1: 3280796.895 ops/s
[info]                  ·gc.alloc.rate:                   783.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 323.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 3319546.774 ops/s
[info]                  ·gc.alloc.rate:                   792.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 318.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3306828.795 ops/s
[info]                  ·gc.alloc.rate:                   789.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3306117.031 ops/s
[info]                  ·gc.alloc.rate:                   789.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3320295.897 ops/s
[info]                  ·gc.alloc.rate:                   793.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 318.263 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3306717.078 ±(99.9%) 61526.429 ops/s [Average]
[info]   (min, avg, max) = (3280796.895, 3306717.078, 3320295.897), stdev = 15978.218
[info]   CI (99.9%): [3245190.649, 3368243.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   789.770 ±(99.9%) 15.027 MB/sec [Average]
[info]   (min, avg, max) = (783.421, 789.770, 793.068), stdev = 3.902
[info]   CI (99.9%): [774.743, 804.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   672.041 ±(99.9%) 3.901 MB/sec [Average]
[info]   (min, avg, max) = (671.277, 672.041, 673.753), stdev = 1.013
[info]   CI (99.9%): [668.140, 675.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   319.959 ±(99.9%) 7.762 B/op [Average]
[info]   (min, avg, max) = (318.263, 319.959, 323.365), stdev = 2.016
[info]   CI (99.9%): [312.197, 327.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.77% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356954.962 ops/s
[info] # Warmup Iteration   2: 7097241.436 ops/s
[info] # Warmup Iteration   3: 7106726.597 ops/s
[info] # Warmup Iteration   4: 7150613.974 ops/s
[info] # Warmup Iteration   5: 7150047.982 ops/s
[info] Iteration   1: 7172750.492 ops/s
[info]                  ·gc.alloc.rate:                   692.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7196089.410 ops/s
[info]                  ·gc.alloc.rate:                   694.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.292 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7167335.040 ops/s
[info]                  ·gc.alloc.rate:                   692.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.583 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7177318.479 ops/s
[info]                  ·gc.alloc.rate:                   693.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7176443.114 ops/s
[info]                  ·gc.alloc.rate:                   692.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7177987.307 ±(99.9%) 41802.683 ops/s [Average]
[info]   (min, avg, max) = (7167335.040, 7177987.307, 7196089.410), stdev = 10856.024
[info]   CI (99.9%): [7136184.624, 7219789.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   693.072 ±(99.9%) 3.991 MB/sec [Average]
[info]   (min, avg, max) = (692.048, 693.072, 694.799), stdev = 1.037
[info]   CI (99.9%): [689.081, 697.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.514 ±(99.9%) 4.332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.526), stdev = 1.125
[info]   CI (99.9%): [≈ 0, 4.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.113 ±(99.9%) 0.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.554), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.475 ±(99.9%) 2.820 MB/sec [Average]
[info]   (min, avg, max) = (671.931, 672.475, 673.277), stdev = 0.732
[info]   CI (99.9%): [669.656, 675.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   147.483 ±(99.9%) 0.727 B/op [Average]
[info]   (min, avg, max) = (147.292, 147.483, 147.762), stdev = 0.189
[info]   CI (99.9%): [146.756, 148.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.97% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2291363.979 ops/s
[info] # Warmup Iteration   2: 3544816.742 ops/s
[info] # Warmup Iteration   3: 3548222.581 ops/s
[info] # Warmup Iteration   4: 3564795.999 ops/s
[info] # Warmup Iteration   5: 3525771.925 ops/s
[info] Iteration   1: 3480094.595 ops/s
[info]                  ·gc.alloc.rate:                   1078.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 3478661.776 ops/s
[info]                  ·gc.alloc.rate:                   1078.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 608.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3480269.647 ops/s
[info]                  ·gc.alloc.rate:                   1078.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3495108.419 ops/s
[info]                  ·gc.alloc.rate:                   1083.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3561696.063 ops/s
[info]                  ·gc.alloc.rate:                   1104.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 596.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3499166.100 ±(99.9%) 137059.214 ops/s [Average]
[info]   (min, avg, max) = (3478661.776, 3499166.100, 3561696.063), stdev = 35593.843
[info]   CI (99.9%): [3362106.885, 3636225.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1084.670 ±(99.9%) 42.527 MB/sec [Average]
[info]   (min, avg, max) = (1078.405, 1084.670, 1104.065), stdev = 11.044
[info]   CI (99.9%): [1042.143, 1127.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.037), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1212.042 ±(99.9%) 1159.934 MB/sec [Average]
[info]   (min, avg, max) = (673.200, 1212.042, 1349.858), stdev = 301.231
[info]   CI (99.9%): [52.108, 2371.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   545.018 ±(99.9%) 518.019 B/op [Average]
[info]   (min, avg, max) = (304.530, 545.018, 608.930), stdev = 134.528
[info]   CI (99.9%): [26.998, 1063.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93.17% complete, ETA 00:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8419083.752 ops/s
[info] # Warmup Iteration   2: 9260247.157 ops/s
[info] # Warmup Iteration   3: 9352661.061 ops/s
[info] # Warmup Iteration   4: 9426013.385 ops/s
[info] # Warmup Iteration   5: 9356409.595 ops/s
[info] Iteration   1: 9413593.650 ops/s
[info]                  ·gc.alloc.rate:                   908.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 9401820.144 ops/s
[info]                  ·gc.alloc.rate:                   907.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 9353811.174 ops/s
[info]                  ·gc.alloc.rate:                   903.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.945 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9369339.396 ops/s
[info]                  ·gc.alloc.rate:                   904.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 9391553.823 ops/s
[info]                  ·gc.alloc.rate:                   906.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9386023.638 ±(99.9%) 93456.977 ops/s [Average]
[info]   (min, avg, max) = (9353811.174, 9386023.638, 9413593.650), stdev = 24270.480
[info]   CI (99.9%): [9292566.660, 9479480.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   906.227 ±(99.9%) 9.027 MB/sec [Average]
[info]   (min, avg, max) = (903.092, 906.227, 908.843), stdev = 2.344
[info]   CI (99.9%): [897.200, 915.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.011), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.002 ±(99.9%) 1154.697 MB/sec [Average]
[info]   (min, avg, max) = (671.240, 806.002, 1342.426), stdev = 299.871
[info]   CI (99.9%): [≈ 0, 1960.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   135.268 ±(99.9%) 195.189 B/op [Average]
[info]   (min, avg, max) = (112.477, 135.268, 225.945), stdev = 50.690
[info]   CI (99.9%): [≈ 0, 330.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.37% complete, ETA 00:08:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8770952.850 ops/s
[info] # Warmup Iteration   2: 9193511.269 ops/s
[info] # Warmup Iteration   3: 9202244.155 ops/s
[info] # Warmup Iteration   4: 9211650.147 ops/s
[info] # Warmup Iteration   5: 9227995.965 ops/s
[info] Iteration   1: 9234017.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9214525.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9227453.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9175102.896 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9207474.814 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   9211714.888 ±(99.9%) 88469.118 ops/s [Average]
[info]   (min, avg, max) = (9175102.896, 9211714.888, 9234017.685), stdev = 22975.149
[info]   CI (99.9%): [9123245.770, 9300184.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.57% complete, ETA 00:08:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2436723.571 ops/s
[info] # Warmup Iteration   2: 3409677.825 ops/s
[info] # Warmup Iteration   3: 3431847.284 ops/s
[info] # Warmup Iteration   4: 3450775.713 ops/s
[info] # Warmup Iteration   5: 3475023.799 ops/s
[info] Iteration   1: 3473254.543 ops/s
[info]                  ·gc.alloc.rate:                   1111.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3473744.064 ops/s
[info]                  ·gc.alloc.rate:                   1112.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.318 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3470685.298 ops/s
[info]                  ·gc.alloc.rate:                   1111.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3473747.047 ops/s
[info]                  ·gc.alloc.rate:                   1112.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.445 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3452952.487 ops/s
[info]                  ·gc.alloc.rate:                   1105.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 610.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3468876.688 ±(99.9%) 34625.222 ops/s [Average]
[info]   (min, avg, max) = (3452952.487, 3468876.688, 3473747.047), stdev = 8992.060
[info]   CI (99.9%): [3434251.466, 3503501.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1110.617 ±(99.9%) 11.127 MB/sec [Average]
[info]   (min, avg, max) = (1105.476, 1110.617, 1112.260), stdev = 2.890
[info]   CI (99.9%): [1099.490, 1121.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.047), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.467 ±(99.9%) 1413.073 MB/sec [Average]
[info]   (min, avg, max) = (669.382, 1071.467, 1339.757), stdev = 366.970
[info]   CI (99.9%): [≈ 0, 2484.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   486.407 ±(99.9%) 643.386 B/op [Average]
[info]   (min, avg, max) = (303.318, 486.407, 610.810), stdev = 167.085
[info]   CI (99.9%): [≈ 0, 1129.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93.78% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204607.331 ops/s
[info] # Warmup Iteration   2: 229749.472 ops/s
[info] # Warmup Iteration   3: 234702.524 ops/s
[info] # Warmup Iteration   4: 233068.392 ops/s
[info] # Warmup Iteration   5: 234730.904 ops/s
[info] Iteration   1: 233520.094 ops/s
[info]                  ·gc.alloc.rate:                   2700.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              18208.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18178.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 235515.079 ops/s
[info]                  ·gc.alloc.rate:                   2723.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              18208.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18063.854 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 232641.540 ops/s
[info]                  ·gc.alloc.rate:                   2691.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              18208.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18322.232 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 234439.447 ops/s
[info]                  ·gc.alloc.rate:                   2711.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              18208.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18215.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 233658.020 ops/s
[info]                  ·gc.alloc.rate:                   2702.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              18208.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18296.185 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   233954.836 ±(99.9%) 4161.124 ops/s [Average]
[info]   (min, avg, max) = (232641.540, 233954.836, 235515.079), stdev = 1080.631
[info]   CI (99.9%): [229793.712, 238115.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2705.925 ±(99.9%) 47.446 MB/sec [Average]
[info]   (min, avg, max) = (2691.194, 2705.925, 2723.772), stdev = 12.322
[info]   CI (99.9%): [2658.479, 2753.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   18208.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18208.002, 18208.002, 18208.002), stdev = 0.001
[info]   CI (99.9%): [18208.002, 18208.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.560 ±(99.9%) 0.384 B/op [Average]
[info]   (min, avg, max) = (0.419, 0.560, 0.701), stdev = 0.100
[info]   CI (99.9%): [0.176, 0.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2706.976 ±(99.9%) 30.124 MB/sec [Average]
[info]   (min, avg, max) = (2696.301, 2706.976, 2715.570), stdev = 7.823
[info]   CI (99.9%): [2676.853, 2737.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   18215.399 ±(99.9%) 395.691 B/op [Average]
[info]   (min, avg, max) = (18063.854, 18215.399, 18322.232), stdev = 102.760
[info]   CI (99.9%): [17819.708, 18611.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.98% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 522260.707 ops/s
[info] # Warmup Iteration   2: 711718.889 ops/s
[info] # Warmup Iteration   3: 702403.145 ops/s
[info] # Warmup Iteration   4: 721767.849 ops/s
[info] # Warmup Iteration   5: 715831.906 ops/s
[info] Iteration   1: 723002.388 ops/s
[info]                  ·gc.alloc.rate:                   1267.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2923.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 724615.346 ops/s
[info]                  ·gc.alloc.rate:                   1270.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2916.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 721877.439 ops/s
[info]                  ·gc.alloc.rate:                   1265.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2927.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 725094.245 ops/s
[info]                  ·gc.alloc.rate:                   1271.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1458.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 723495.420 ops/s
[info]                  ·gc.alloc.rate:                   1268.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2925.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   723616.968 ±(99.9%) 4945.323 ops/s [Average]
[info]   (min, avg, max) = (721877.439, 723616.968, 725094.245), stdev = 1284.285
[info]   CI (99.9%): [718671.645, 728562.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1268.615 ±(99.9%) 8.907 MB/sec [Average]
[info]   (min, avg, max) = (1265.548, 1268.615, 1271.258), stdev = 2.313
[info]   CI (99.9%): [1259.708, 1277.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2760.001, 2760.001, 2760.001), stdev = 0.001
[info]   CI (99.9%): [2760.000, 2760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.136 ±(99.9%) 0.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.226), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1208.741 ±(99.9%) 1155.575 MB/sec [Average]
[info]   (min, avg, max) = (671.909, 1208.741, 1344.419), stdev = 300.099
[info]   CI (99.9%): [53.166, 2364.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2630.352 ±(99.9%) 2521.974 B/op [Average]
[info]   (min, avg, max) = (1458.767, 2630.352, 2927.665), stdev = 654.949
[info]   CI (99.9%): [108.379, 5152.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94.18% complete, ETA 00:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.960 ops/s
[info] # Warmup Iteration   2: 2139217.243 ops/s
[info] # Warmup Iteration   3: 2189996.979 ops/s
[info] # Warmup Iteration   4: 2192288.295 ops/s
[info] # Warmup Iteration   5: 2197750.878 ops/s
[info] Iteration   1: 2125964.866 ops/s
[info]                  ·gc.alloc.rate:                   594.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 378.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2206286.156 ops/s
[info]                  ·gc.alloc.rate:                   616.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2206560.888 ops/s
[info]                  ·gc.alloc.rate:                   616.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480.324 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2206777.571 ops/s
[info]                  ·gc.alloc.rate:                   616.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.324 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2185685.913 ops/s
[info]                  ·gc.alloc.rate:                   610.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483.960 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2186255.079 ±(99.9%) 134359.009 ops/s [Average]
[info]   (min, avg, max) = (2125964.866, 2186255.079, 2206777.571), stdev = 34892.608
[info]   CI (99.9%): [2051896.070, 2320614.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   611.103 ±(99.9%) 37.519 MB/sec [Average]
[info]   (min, avg, max) = (594.277, 611.103, 616.803), stdev = 9.743
[info]   CI (99.9%): [573.584, 648.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.516 ±(99.9%) 4.395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.516, 2.557), stdev = 1.141
[info]   CI (99.9%): [≈ 0, 4.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.368 ±(99.9%) 3.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.824), stdev = 0.814
[info]   CI (99.9%): [≈ 0, 3.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   640.415 ±(99.9%) 277.527 MB/sec [Average]
[info]   (min, avg, max) = (511.493, 640.415, 673.431), stdev = 72.073
[info]   CI (99.9%): [362.888, 917.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   460.548 ±(99.9%) 176.297 B/op [Average]
[info]   (min, avg, max) = (378.707, 460.548, 483.960), stdev = 45.784
[info]   CI (99.9%): [284.250, 636.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.38% complete, ETA 00:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 555127.819 ops/s
[info] # Warmup Iteration   2: 1006734.917 ops/s
[info] # Warmup Iteration   3: 1091914.857 ops/s
[info] # Warmup Iteration   4: 1092868.599 ops/s
[info] # Warmup Iteration   5: 1098516.131 ops/s
[info] Iteration   1: 1097693.206 ops/s
[info]                  ·gc.alloc.rate:                   808.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.724 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1093269.209 ops/s
[info]                  ·gc.alloc.rate:                   805.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1934.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1101351.106 ops/s
[info]                  ·gc.alloc.rate:                   811.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 960.944 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1099193.773 ops/s
[info]                  ·gc.alloc.rate:                   809.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 962.821 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1099303.380 ops/s
[info]                  ·gc.alloc.rate:                   809.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1098162.135 ±(99.9%) 11663.203 ops/s [Average]
[info]   (min, avg, max) = (1093269.209, 1098162.135, 1101351.106), stdev = 3028.897
[info]   CI (99.9%): [1086498.931, 1109825.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   809.123 ±(99.9%) 8.340 MB/sec [Average]
[info]   (min, avg, max) = (805.631, 809.123, 811.445), stdev = 2.166
[info]   CI (99.9%): [800.783, 817.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.090), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   806.281 ±(99.9%) 1156.001 MB/sec [Average]
[info]   (min, avg, max) = (670.568, 806.281, 1343.310), stdev = 300.210
[info]   CI (99.9%): [≈ 0, 1962.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1156.766 ±(99.9%) 1673.461 B/op [Average]
[info]   (min, avg, max) = (960.944, 1156.766, 1934.186), stdev = 434.592
[info]   CI (99.9%): [≈ 0, 2830.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.58% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2302093.565 ops/s
[info] # Warmup Iteration   2: 2548494.381 ops/s
[info] # Warmup Iteration   3: 2389539.964 ops/s
[info] # Warmup Iteration   4: 2584298.875 ops/s
[info] # Warmup Iteration   5: 2565098.753 ops/s
[info] Iteration   1: 2578896.885 ops/s
[info]                  ·gc.alloc.rate:                   720.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2591458.539 ops/s
[info]                  ·gc.alloc.rate:                   724.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409.835 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2591578.315 ops/s
[info]                  ·gc.alloc.rate:                   724.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2585799.785 ops/s
[info]                  ·gc.alloc.rate:                   722.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 818.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2583293.517 ops/s
[info]                  ·gc.alloc.rate:                   722.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2586205.408 ±(99.9%) 20960.529 ops/s [Average]
[info]   (min, avg, max) = (2578896.885, 2586205.408, 2591578.315), stdev = 5443.383
[info]   CI (99.9%): [2565244.879, 2607165.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   722.865 ±(99.9%) 6.042 MB/sec [Average]
[info]   (min, avg, max) = (720.761, 722.865, 724.505), stdev = 1.569
[info]   CI (99.9%): [716.823, 728.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.667 ±(99.9%) 5.432 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.190), stdev = 1.411
[info]   CI (99.9%): [≈ 0, 6.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.407 ±(99.9%) 3.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.407, 1.947), stdev = 0.861
[info]   CI (99.9%): [≈ 0, 3.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.688 ±(99.9%) 1155.543 MB/sec [Average]
[info]   (min, avg, max) = (671.953, 807.688, 1344.502), stdev = 300.091
[info]   CI (99.9%): [≈ 0, 1963.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   491.647 ±(99.9%) 703.659 B/op [Average]
[info]   (min, avg, max) = (408.570, 491.647, 818.532), stdev = 182.738
[info]   CI (99.9%): [≈ 0, 1195.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.78% complete, ETA 00:07:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 759505.493 ops/s
[info] # Warmup Iteration   2: 1282733.336 ops/s
[info] # Warmup Iteration   3: 1298414.889 ops/s
[info] # Warmup Iteration   4: 1305296.365 ops/s
[info] # Warmup Iteration   5: 1272383.797 ops/s
[info] Iteration   1: 1256945.160 ops/s
[info]                  ·gc.alloc.rate:                   894.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1681.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1268633.553 ops/s
[info]                  ·gc.alloc.rate:                   902.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 831.313 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1310914.926 ops/s
[info]                  ·gc.alloc.rate:                   932.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 803.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1309422.995 ops/s
[info]                  ·gc.alloc.rate:                   931.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1609.274 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1293982.220 ops/s
[info]                  ·gc.alloc.rate:                   920.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 814.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1287979.771 ±(99.9%) 93517.663 ops/s [Average]
[info]   (min, avg, max) = (1256945.160, 1287979.771, 1310914.926), stdev = 24286.240
[info]   CI (99.9%): [1194462.108, 1381497.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   916.378 ±(99.9%) 65.999 MB/sec [Average]
[info]   (min, avg, max) = (894.533, 916.378, 932.532), stdev = 17.140
[info]   CI (99.9%): [850.380, 982.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.030 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.075), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   937.973 ±(99.9%) 1415.797 MB/sec [Average]
[info]   (min, avg, max) = (669.162, 937.973, 1342.916), stdev = 367.678
[info]   CI (99.9%): [≈ 0, 2353.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1147.976 ±(99.9%) 1751.459 B/op [Average]
[info]   (min, avg, max) = (803.684, 1147.976, 1681.398), stdev = 454.848
[info]   CI (99.9%): [≈ 0, 2899.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94.98% complete, ETA 00:06:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 825982.839 ops/s
[info] # Warmup Iteration   2: 1080255.051 ops/s
[info] # Warmup Iteration   3: 1102332.158 ops/s
[info] # Warmup Iteration   4: 1081218.820 ops/s
[info] # Warmup Iteration   5: 1107805.010 ops/s
[info] Iteration   1: 1105087.337 ops/s
[info]                  ·gc.alloc.rate:                   1499.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1912.433 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1107812.433 ops/s
[info]                  ·gc.alloc.rate:                   1503.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1908.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1106799.235 ops/s
[info]                  ·gc.alloc.rate:                   1501.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1911.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1092041.565 ops/s
[info]                  ·gc.alloc.rate:                   1481.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1939.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1093142.192 ops/s
[info]                  ·gc.alloc.rate:                   1483.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2911.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1100976.553 ±(99.9%) 29748.727 ops/s [Average]
[info]   (min, avg, max) = (1092041.565, 1100976.553, 1107812.433), stdev = 7725.650
[info]   CI (99.9%): [1071227.826, 1130725.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1493.995 ±(99.9%) 40.515 MB/sec [Average]
[info]   (min, avg, max) = (1481.704, 1493.995, 1503.173), stdev = 10.521
[info]   CI (99.9%): [1453.480, 1534.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2136.000, 2136.000, 2136.000), stdev = 0.001
[info]   CI (99.9%): [2136.000, 2136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.095, 0.120), stdev = 0.014
[info]   CI (99.9%): [0.042, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1479.359 ±(99.9%) 1167.403 MB/sec [Average]
[info]   (min, avg, max) = (1342.830, 1479.359, 2021.685), stdev = 303.171
[info]   CI (99.9%): [311.955, 2646.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2116.538 ±(99.9%) 1710.910 B/op [Average]
[info]   (min, avg, max) = (1908.702, 2116.538, 2911.052), stdev = 444.318
[info]   CI (99.9%): [405.628, 3827.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95.18% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1062639.920 ops/s
[info] # Warmup Iteration   2: 1709902.205 ops/s
[info] # Warmup Iteration   3: 1760562.361 ops/s
[info] # Warmup Iteration   4: 1768346.200 ops/s
[info] # Warmup Iteration   5: 1774041.634 ops/s
[info] Iteration   1: 1771974.969 ops/s
[info]                  ·gc.alloc.rate:                   1485.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1192.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1773385.020 ops/s
[info]                  ·gc.alloc.rate:                   1487.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1787.173 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1774469.130 ops/s
[info]                  ·gc.alloc.rate:                   1487.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1191.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1773589.613 ops/s
[info]                  ·gc.alloc.rate:                   1487.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1193.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1772462.882 ops/s
[info]                  ·gc.alloc.rate:                   1486.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1195.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1773176.323 ±(99.9%) 3771.845 ops/s [Average]
[info]   (min, avg, max) = (1771974.969, 1773176.323, 1774469.130), stdev = 979.536
[info]   CI (99.9%): [1769404.478, 1776948.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1486.881 ±(99.9%) 3.107 MB/sec [Average]
[info]   (min, avg, max) = (1485.710, 1486.881, 1487.840), stdev = 0.807
[info]   CI (99.9%): [1483.774, 1489.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1320.000, 1320.000), stdev = 0.001
[info]   CI (99.9%): [1320.000, 1320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.052, 0.074), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.808 ±(99.9%) 1153.040 MB/sec [Average]
[info]   (min, avg, max) = (1341.753, 1477.808, 2013.457), stdev = 299.441
[info]   CI (99.9%): [324.768, 2630.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1311.926 ±(99.9%) 1023.022 B/op [Average]
[info]   (min, avg, max) = (1191.598, 1311.926, 1787.173), stdev = 265.676
[info]   CI (99.9%): [288.904, 2334.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.38% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.903 ops/s
[info] # Warmup Iteration   2: 2438789.465 ops/s
[info] # Warmup Iteration   3: 2517330.694 ops/s
[info] # Warmup Iteration   4: 2509752.743 ops/s
[info] # Warmup Iteration   5: 2563474.440 ops/s
[info] Iteration   1: 2577395.019 ops/s
[info]                  ·gc.alloc.rate:                   668.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2568986.667 ops/s
[info]                  ·gc.alloc.rate:                   665.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.608 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2558566.411 ops/s
[info]                  ·gc.alloc.rate:                   663.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 413.441 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2561461.533 ops/s
[info]                  ·gc.alloc.rate:                   664.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2556857.815 ops/s
[info]                  ·gc.alloc.rate:                   662.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 413.696 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2564653.489 ±(99.9%) 32738.210 ops/s [Average]
[info]   (min, avg, max) = (2556857.815, 2564653.489, 2577395.019), stdev = 8502.009
[info]   CI (99.9%): [2531915.278, 2597391.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   664.746 ±(99.9%) 8.484 MB/sec [Average]
[info]   (min, avg, max) = (662.673, 664.746, 668.013), stdev = 2.203
[info]   CI (99.9%): [656.262, 673.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.515 ±(99.9%) 4.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.515, 2.514), stdev = 1.117
[info]   CI (99.9%): [≈ 0, 4.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.315 ±(99.9%) 2.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.315, 1.535), stdev = 0.682
[info]   CI (99.9%): [≈ 0, 2.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.545 ±(99.9%) 2.821 MB/sec [Average]
[info]   (min, avg, max) = (671.925, 672.545, 673.400), stdev = 0.733
[info]   CI (99.9%): [669.724, 675.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   412.789 ±(99.9%) 3.751 B/op [Average]
[info]   (min, avg, max) = (411.216, 412.789, 413.696), stdev = 0.974
[info]   CI (99.9%): [409.039, 416.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.58% complete, ETA 00:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1147330.768 ops/s
[info] # Warmup Iteration   2: 2488334.521 ops/s
[info] # Warmup Iteration   3: 2549571.444 ops/s
[info] # Warmup Iteration   4: 2553669.676 ops/s
[info] # Warmup Iteration   5: 2549615.468 ops/s
[info] Iteration   1: 2552794.464 ops/s
[info]                  ·gc.alloc.rate:                   1206.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 829.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2555181.924 ops/s
[info]                  ·gc.alloc.rate:                   1207.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 414.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2553577.831 ops/s
[info]                  ·gc.alloc.rate:                   1206.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 830.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2559126.095 ops/s
[info]                  ·gc.alloc.rate:                   1209.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 829.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2559572.619 ops/s
[info]                  ·gc.alloc.rate:                   1209.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 830.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2556050.587 ±(99.9%) 12075.145 ops/s [Average]
[info]   (min, avg, max) = (2552794.464, 2556050.587, 2559572.619), stdev = 3135.877
[info]   CI (99.9%): [2543975.442, 2568125.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1208.067 ±(99.9%) 5.740 MB/sec [Average]
[info]   (min, avg, max) = (1206.450, 1208.067, 1209.700), stdev = 1.491
[info]   CI (99.9%): [1202.328, 1213.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.064), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1212.978 ±(99.9%) 1161.588 MB/sec [Average]
[info]   (min, avg, max) = (673.366, 1212.978, 1350.600), stdev = 301.661
[info]   CI (99.9%): [51.390, 2374.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   747.000 ±(99.9%) 715.054 B/op [Average]
[info]   (min, avg, max) = (414.817, 747.000, 830.658), stdev = 185.697
[info]   CI (99.9%): [31.946, 1462.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.78% complete, ETA 00:05:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1958068.017 ops/s
[info] # Warmup Iteration   2: 2676852.930 ops/s
[info] # Warmup Iteration   3: 2730238.255 ops/s
[info] # Warmup Iteration   4: 2720027.976 ops/s
[info] # Warmup Iteration   5: 2728067.054 ops/s
[info] Iteration   1: 2731426.815 ops/s
[info]                  ·gc.alloc.rate:                   707.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 388.792 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2742853.782 ops/s
[info]                  ·gc.alloc.rate:                   710.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2733907.057 ops/s
[info]                  ·gc.alloc.rate:                   708.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2735377.817 ops/s
[info]                  ·gc.alloc.rate:                   708.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2703755.277 ops/s
[info]                  ·gc.alloc.rate:                   700.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 390.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2729464.149 ±(99.9%) 57720.862 ops/s [Average]
[info]   (min, avg, max) = (2703755.277, 2729464.149, 2742853.782), stdev = 14989.924
[info]   CI (99.9%): [2671743.288, 2787185.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   707.406 ±(99.9%) 14.934 MB/sec [Average]
[info]   (min, avg, max) = (700.773, 707.406, 710.905), stdev = 3.878
[info]   CI (99.9%): [692.472, 722.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.680 ±(99.9%) 5.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.680, 3.275), stdev = 1.451
[info]   CI (99.9%): [≈ 0, 6.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.392 ±(99.9%) 3.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.392, 1.888), stdev = 0.836
[info]   CI (99.9%): [≈ 0, 3.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.131 ±(99.9%) 5.501 MB/sec [Average]
[info]   (min, avg, max) = (671.297, 673.131, 674.669), stdev = 1.429
[info]   CI (99.9%): [667.629, 678.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   388.238 ±(99.9%) 6.210 B/op [Average]
[info]   (min, avg, max) = (387.076, 388.238, 390.839), stdev = 1.613
[info]   CI (99.9%): [382.028, 394.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.98% complete, ETA 00:05:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2128541.859 ops/s
[info] # Warmup Iteration   2: 2804728.136 ops/s
[info] # Warmup Iteration   3: 2787821.406 ops/s
[info] # Warmup Iteration   4: 2786802.568 ops/s
[info] # Warmup Iteration   5: 2798894.625 ops/s
[info] Iteration   1: 2795198.669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2798736.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2795277.056 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2789261.541 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2781512.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2791997.265 ±(99.9%) 26105.155 ops/s [Average]
[info]   (min, avg, max) = (2781512.388, 2791997.265, 2798736.672), stdev = 6779.426
[info]   CI (99.9%): [2765892.110, 2818102.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.18% complete, ETA 00:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1883451.321 ops/s
[info] # Warmup Iteration   2: 2452798.859 ops/s
[info] # Warmup Iteration   3: 2416127.242 ops/s
[info] # Warmup Iteration   4: 2387063.507 ops/s
[info] # Warmup Iteration   5: 2450995.916 ops/s
[info] Iteration   1: 2466467.308 ops/s
[info]                  ·gc.alloc.rate:                   1240.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 855.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2487698.657 ops/s
[info]                  ·gc.alloc.rate:                   1251.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 423.964 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2470465.741 ops/s
[info]                  ·gc.alloc.rate:                   1242.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 853.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2476533.463 ops/s
[info]                  ·gc.alloc.rate:                   1245.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2478996.930 ops/s
[info]                  ·gc.alloc.rate:                   1247.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2476032.420 ±(99.9%) 31496.510 ops/s [Average]
[info]   (min, avg, max) = (2466467.308, 2476032.420, 2487698.657), stdev = 8179.544
[info]   CI (99.9%): [2444535.910, 2507528.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1245.716 ±(99.9%) 16.013 MB/sec [Average]
[info]   (min, avg, max) = (1240.832, 1245.716, 1251.639), stdev = 4.158
[info]   CI (99.9%): [1229.703, 1261.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (792.000, 792.000, 792.000), stdev = 0.001
[info]   CI (99.9%): [792.000, 792.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.037 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.080), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1206.403 ±(99.9%) 1154.625 MB/sec [Average]
[info]   (min, avg, max) = (670.012, 1206.403, 1341.861), stdev = 299.853
[info]   CI (99.9%): [51.778, 2361.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   767.416 ±(99.9%) 739.323 B/op [Average]
[info]   (min, avg, max) = (423.964, 767.416, 855.164), stdev = 192.000
[info]   CI (99.9%): [28.093, 1506.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.39% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6000.179 ops/s
[info] # Warmup Iteration   2: 10043.950 ops/s
[info] # Warmup Iteration   3: 11429.868 ops/s
[info] # Warmup Iteration   4: 11404.139 ops/s
[info] # Warmup Iteration   5: 11772.802 ops/s
[info] Iteration   1: 12854.220 ops/s
[info]                  ·gc.alloc.rate:                   1868.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              228798.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246363.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12837.569 ops/s
[info]                  ·gc.alloc.rate:                   1866.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246834.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12869.594 ops/s
[info]                  ·gc.alloc.rate:                   1870.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164377.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 12892.324 ops/s
[info]                  ·gc.alloc.rate:                   1874.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246573.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11732.269 ops/s
[info]                  ·gc.alloc.rate:                   1705.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              228821.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271391.411 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12637.195 ±(99.9%) 1949.469 ops/s [Average]
[info]   (min, avg, max) = (11732.269, 12637.195, 12892.324), stdev = 506.271
[info]   CI (99.9%): [10687.727, 14586.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1836.909 ±(99.9%) 283.496 MB/sec [Average]
[info]   (min, avg, max) = (1705.318, 1836.909, 1874.166), stdev = 73.623
[info]   CI (99.9%): [1553.414, 2120.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228823.290 ±(99.9%) 56.026 B/op [Average]
[info]   (min, avg, max) = (228798.484, 228823.290, 228832.040), stdev = 14.550
[info]   CI (99.9%): [228767.264, 228879.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.081 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.022, 0.081, 0.147), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.192 ±(99.9%) 28.456 B/op [Average]
[info]   (min, avg, max) = (2.718, 10.192, 18.017), stdev = 7.390
[info]   CI (99.9%): [≈ 0, 38.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1882.084 ±(99.9%) 1158.858 MB/sec [Average]
[info]   (min, avg, max) = (1343.786, 1882.084, 2022.572), stdev = 300.952
[info]   CI (99.9%): [723.226, 3040.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   235107.966 ±(99.9%) 157770.671 B/op [Average]
[info]   (min, avg, max) = (164377.097, 235107.966, 271391.411), stdev = 40972.542
[info]   CI (99.9%): [77337.294, 392878.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.59% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4770.712 ops/s
[info] # Warmup Iteration   2: 14883.092 ops/s
[info] # Warmup Iteration   3: 15220.305 ops/s
[info] # Warmup Iteration   4: 15411.986 ops/s
[info] # Warmup Iteration   5: 15378.708 ops/s
[info] Iteration   1: 15433.361 ops/s
[info]                  ·gc.alloc.rate:                   218.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              22256.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52163.905 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15557.384 ops/s
[info]                  ·gc.alloc.rate:      219.931 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15433.991 ops/s
[info]                  ·gc.alloc.rate:                   218.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              22253.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52163.905 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15569.341 ops/s
[info]                  ·gc.alloc.rate:      219.951 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15248.069 ops/s
[info]                  ·gc.alloc.rate:                   215.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52800.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15448.429 ±(99.9%) 498.619 ops/s [Average]
[info]   (min, avg, max) = (15248.069, 15448.429, 15569.341), stdev = 129.490
[info]   CI (99.9%): [14949.811, 15947.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   218.343 ±(99.9%) 7.033 MB/sec [Average]
[info]   (min, avg, max) = (215.484, 218.343, 219.951), stdev = 1.826
[info]   CI (99.9%): [211.310, 225.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22249.101 ±(99.9%) 32.162 B/op [Average]
[info]   (min, avg, max) = (22240.027, 22249.101, 22256.029), stdev = 8.352
[info]   CI (99.9%): [22216.939, 22281.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.425 ±(99.9%) 3.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 2.123), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.872 ±(99.9%) 1078.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.872, 511.580), stdev = 280.134
[info]   CI (99.9%): [≈ 0, 1385.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31425.572 ±(99.9%) 110469.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31425.572, 52800.050), stdev = 28688.667
[info]   CI (99.9%): [≈ 0, 141895.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.79% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19451.036 ops/s
[info] # Warmup Iteration   2: 23571.499 ops/s
[info] # Warmup Iteration   3: 37090.701 ops/s
[info] # Warmup Iteration   4: 37329.610 ops/s
[info] # Warmup Iteration   5: 37570.603 ops/s
[info] Iteration   1: 37231.100 ops/s
[info]                  ·gc.alloc.rate:                   344.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21625.349 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 37433.188 ops/s
[info]                  ·gc.alloc.rate:                   346.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21508.677 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 37259.612 ops/s
[info]                  ·gc.alloc.rate:                   344.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21608.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37504.007 ops/s
[info]                  ·gc.alloc.rate:      347.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37183.966 ops/s
[info]                  ·gc.alloc.rate:                   344.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21652.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37322.375 ±(99.9%) 533.203 ops/s [Average]
[info]   (min, avg, max) = (37183.966, 37322.375, 37504.007), stdev = 138.471
[info]   CI (99.9%): [36789.172, 37855.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   345.560 ±(99.9%) 4.914 MB/sec [Average]
[info]   (min, avg, max) = (344.295, 345.560, 347.239), stdev = 1.276
[info]   CI (99.9%): [340.646, 350.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.011, 14576.012), stdev = 0.001
[info]   CI (99.9%): [14576.010, 14576.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.501 ±(99.9%) 2.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.501, 1.448), stdev = 0.692
[info]   CI (99.9%): [≈ 0, 3.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   409.140 ±(99.9%) 880.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 409.140, 511.437), stdev = 228.716
[info]   CI (99.9%): [≈ 0, 1289.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17278.928 ±(99.9%) 37194.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17278.928, 21652.095), stdev = 9659.367
[info]   CI (99.9%): [≈ 0, 54473.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.99% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 843.528 ops/s
[info] # Warmup Iteration   2: 3374.602 ops/s
[info] # Warmup Iteration   3: 3140.935 ops/s
[info] # Warmup Iteration   4: 3532.232 ops/s
[info] # Warmup Iteration   5: 3740.788 ops/s
[info] Iteration   1: 3748.516 ops/s
[info]                  ·gc.alloc.rate:                   1223.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              513560.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 566242.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3759.947 ops/s
[info]                  ·gc.alloc.rate:                   1227.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              513560.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 564853.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3781.933 ops/s
[info]                  ·gc.alloc.rate:                   1234.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              513560.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280923.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3776.729 ops/s
[info]                  ·gc.alloc.rate:                   1232.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              513560.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563144.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3754.123 ops/s
[info]                  ·gc.alloc.rate:                   1225.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              513560.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567152.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3764.250 ±(99.9%) 55.703 ops/s [Average]
[info]   (min, avg, max) = (3748.516, 3764.250, 3781.933), stdev = 14.466
[info]   CI (99.9%): [3708.547, 3819.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1228.713 ±(99.9%) 18.335 MB/sec [Average]
[info]   (min, avg, max) = (1223.587, 1228.713, 1234.521), stdev = 4.761
[info]   CI (99.9%): [1210.378, 1247.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513560.110 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (513560.108, 513560.110, 513560.116), stdev = 0.004
[info]   CI (99.9%): [513560.096, 513560.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.960 ±(99.9%) 14.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.960, 8.740), stdev = 3.891
[info]   CI (99.9%): [≈ 0, 21.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1215.868 ±(99.9%) 1163.638 MB/sec [Average]
[info]   (min, avg, max) = (675.296, 1215.868, 1353.184), stdev = 302.193
[info]   CI (99.9%): [52.230, 2379.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   508463.253 ±(99.9%) 489832.154 B/op [Average]
[info]   (min, avg, max) = (280923.018, 508463.253, 567152.558), stdev = 127207.855
[info]   CI (99.9%): [18631.099, 998295.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.19% complete, ETA 00:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e1277c77/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 24201.340 ops/s
[info] # Warmup Iteration   2: 58666.277 ops/s
[info] # Warmup Iteration   3: 59141.750 ops/s
[info] # Warmup Iteration   4: 59213.245 ops/s
[info] # Warmup Iteration   5: 59588.217 ops/s
[info] Iteration   1: 60146.644 ops/s
[info]                  ·gc.alloc.rate:                   768.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17629.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 60367.194 ops/s
[info]                  ·gc.alloc.rate:                   770.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17573.802 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 60258.787 ops/s
[info]                  ·gc.alloc.rate:                   769.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17605.583 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 60307.129 ops/s
[info]                  ·gc.alloc.rate:                   769.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17591.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 59948.501 ops/s
[info]                  ·gc.alloc.rate:                   765.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35411.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   60205.651 ±(99.9%) 635.138 ops/s [Average]
[info]   (min, avg, max) = (59948.501, 60205.651, 60367.194), stdev = 164.943
[info]   CI (99.9%): [59570.513, 60840.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   768.742 ±(99.9%) 8.183 MB/sec [Average]
[info]   (min, avg, max) = (765.398, 768.742, 770.854), stdev = 2.125
[info]   CI (99.9%): [760.559, 776.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.010 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (20099.982, 20100.010, 20100.022), stdev = 0.017
[info]   CI (99.9%): [20099.946, 20100.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.872 ±(99.9%) 3.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.872, 1.639), stdev = 0.827
[info]   CI (99.9%): [≈ 0, 4.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.779 ±(99.9%) 1161.670 MB/sec [Average]
[info]   (min, avg, max) = (673.686, 808.779, 1348.445), stdev = 301.682
[info]   CI (99.9%): [≈ 0, 1970.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21162.376 ±(99.9%) 30671.935 B/op [Average]
[info]   (min, avg, max) = (17573.802, 21162.376, 35411.277), stdev = 7965.404
[info]   CI (99.9%): [≈ 0, 51834.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.39% complete, ETA 00:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67032.061 ops/s
[info] # Warmup Iteration   2: 79114.134 ops/s
[info] # Warmup Iteration   3: 80771.419 ops/s
[info] # Warmup Iteration   4: 80281.170 ops/s
[info] # Warmup Iteration   5: 80616.464 ops/s
[info] Iteration   1: 80126.748 ops/s
[info]                  ·gc.alloc.rate:                   525.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10048.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 80539.809 ops/s
[info]                  ·gc.alloc.rate:      528.020 MB/sec
[info]                  ·gc.alloc.rate.norm: 10320.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 78156.131 ops/s
[info]                  ·gc.alloc.rate:                   512.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13587.386 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 78254.948 ops/s
[info]                  ·gc.alloc.rate:                   513.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13570.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 78050.924 ops/s
[info]                  ·gc.alloc.rate:                   511.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13551.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   79025.712 ±(99.9%) 4638.880 ops/s [Average]
[info]   (min, avg, max) = (78050.924, 79025.712, 80539.809), stdev = 1204.702
[info]   CI (99.9%): [74386.832, 83664.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   518.100 ±(99.9%) 30.356 MB/sec [Average]
[info]   (min, avg, max) = (511.773, 518.100, 528.020), stdev = 7.883
[info]   CI (99.9%): [487.744, 548.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.686 ±(99.9%) 5.864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.686, 3.410), stdev = 1.523
[info]   CI (99.9%): [≈ 0, 6.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13.822 ±(99.9%) 118.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.822, 68.692), stdev = 30.674
[info]   CI (99.9%): [≈ 0, 131.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.552 ±(99.9%) 1123.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.552, 674.636), stdev = 291.759
[info]   CI (99.9%): [≈ 0, 1630.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10151.704 ±(99.9%) 22627.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10151.704, 13587.386), stdev = 5876.207
[info]   CI (99.9%): [≈ 0, 32778.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.59% complete, ETA 00:03:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81083.148 ops/s
[info] # Warmup Iteration   2: 95788.121 ops/s
[info] # Warmup Iteration   3: 95849.743 ops/s
[info] # Warmup Iteration   4: 95621.645 ops/s
[info] # Warmup Iteration   5: 95697.605 ops/s
[info] Iteration   1: 95547.040 ops/s
[info]                  ·gc.alloc.rate:      13.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 95918.816 ops/s
[info]                  ·gc.alloc.rate:      13.647 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 95606.274 ops/s
[info]                  ·gc.alloc.rate:      13.604 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 95704.547 ops/s
[info]                  ·gc.alloc.rate:      13.618 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 95651.183 ops/s
[info]                  ·gc.alloc.rate:      13.612 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   95685.572 ±(99.9%) 549.390 ops/s [Average]
[info]   (min, avg, max) = (95547.040, 95685.572, 95918.816), stdev = 142.675
[info]   CI (99.9%): [95136.182, 96234.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   13.616 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (13.597, 13.616, 13.647), stdev = 0.019
[info]   CI (99.9%): [13.542, 13.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.004, 224.004, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.79% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327467.965 ops/s
[info] # Warmup Iteration   2: 382425.197 ops/s
[info] # Warmup Iteration   3: 387682.387 ops/s
[info] # Warmup Iteration   4: 389453.820 ops/s
[info] # Warmup Iteration   5: 391067.031 ops/s
[info] Iteration   1: 392094.869 ops/s
[info]                  ·gc.alloc.rate:                   2099.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8095.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 394136.718 ops/s
[info]                  ·gc.alloc.rate:                   2111.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8067.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 391717.622 ops/s
[info]                  ·gc.alloc.rate:                   2098.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8131.722 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 386523.915 ops/s
[info]                  ·gc.alloc.rate:                   2070.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8251.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 391555.810 ops/s
[info]                  ·gc.alloc.rate:                   2097.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10880.694 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   391205.787 ±(99.9%) 10837.569 ops/s [Average]
[info]   (min, avg, max) = (386523.915, 391205.787, 394136.718), stdev = 2814.482
[info]   CI (99.9%): [380368.218, 402043.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2095.480 ±(99.9%) 58.278 MB/sec [Average]
[info]   (min, avg, max) = (2070.319, 2095.480, 2111.343), stdev = 15.135
[info]   CI (99.9%): [2037.202, 2153.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.268 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (0.167, 0.268, 0.335), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2158.525 ±(99.9%) 1180.414 MB/sec [Average]
[info]   (min, avg, max) = (2016.208, 2158.525, 2706.858), stdev = 306.550
[info]   CI (99.9%): [978.111, 3338.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8685.510 ±(99.9%) 4733.034 B/op [Average]
[info]   (min, avg, max) = (8067.401, 8685.510, 10880.694), stdev = 1229.154
[info]   CI (99.9%): [3952.475, 13418.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97.99% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230982.289 ops/s
[info] # Warmup Iteration   2: 437521.155 ops/s
[info] # Warmup Iteration   3: 453645.988 ops/s
[info] # Warmup Iteration   4: 457661.629 ops/s
[info] # Warmup Iteration   5: 457750.066 ops/s
[info] Iteration   1: 455689.582 ops/s
[info]                  ·gc.alloc.rate:                   546.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1888.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1766.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 457868.064 ops/s
[info]                  ·gc.alloc.rate:                   549.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              1888.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2316.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 458470.953 ops/s
[info]                  ·gc.alloc.rate:                   549.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              1888.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2312.847 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 456922.387 ops/s
[info]                  ·gc.alloc.rate:                   547.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              1888.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2323.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 458182.394 ops/s
[info]                  ·gc.alloc.rate:                   549.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              1888.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2316.725 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   457426.676 ±(99.9%) 4360.015 ops/s [Average]
[info]   (min, avg, max) = (455689.582, 457426.676, 458470.953), stdev = 1132.282
[info]   CI (99.9%): [453066.661, 461786.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   548.586 ±(99.9%) 5.327 MB/sec [Average]
[info]   (min, avg, max) = (546.454, 548.586, 549.834), stdev = 1.384
[info]   CI (99.9%): [543.259, 553.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1888.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1888.001, 1888.001, 1888.001), stdev = 0.001
[info]   CI (99.9%): [1888.001, 1888.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.271), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.229 ±(99.9%) 1.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.930), stdev = 0.396
[info]   CI (99.9%): [≈ 0, 1.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   641.433 ±(99.9%) 279.969 MB/sec [Average]
[info]   (min, avg, max) = (511.372, 641.433, 674.335), stdev = 72.707
[info]   CI (99.9%): [361.464, 921.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2207.114 ±(99.9%) 947.932 B/op [Average]
[info]   (min, avg, max) = (1766.794, 2207.114, 2323.107), stdev = 246.175
[info]   CI (99.9%): [1259.183, 3155.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.19% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1043163.567 ops/s
[info] # Warmup Iteration   2: 1161758.610 ops/s
[info] # Warmup Iteration   3: 1174657.995 ops/s
[info] # Warmup Iteration   4: 1182022.691 ops/s
[info] # Warmup Iteration   5: 1178027.592 ops/s
[info] Iteration   1: 1185913.046 ops/s
[info]                  ·gc.alloc.rate:      620.683 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1184970.660 ops/s
[info]                  ·gc.alloc.rate:                   620.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 896.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1181858.419 ops/s
[info]                  ·gc.alloc.rate:                   618.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 898.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1181678.801 ops/s
[info]                  ·gc.alloc.rate:                   618.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 895.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1185661.606 ops/s
[info]                  ·gc.alloc.rate:                   620.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 892.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1184016.506 ±(99.9%) 8016.333 ops/s [Average]
[info]   (min, avg, max) = (1181678.801, 1184016.506, 1185913.046), stdev = 2081.816
[info]   CI (99.9%): [1176000.174, 1192032.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   619.740 ±(99.9%) 4.182 MB/sec [Average]
[info]   (min, avg, max) = (618.518, 619.740, 620.683), stdev = 1.086
[info]   CI (99.9%): [615.557, 623.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.673 ±(99.9%) 5.665 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.673, 3.305), stdev = 1.471
[info]   CI (99.9%): [≈ 0, 6.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.895 ±(99.9%) 7.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.390), stdev = 1.954
[info]   CI (99.9%): [≈ 0, 8.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.612 ±(99.9%) 1159.415 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.612, 674.659), stdev = 301.096
[info]   CI (99.9%): [≈ 0, 1698.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   716.408 ±(99.9%) 1542.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 716.408, 898.538), stdev = 400.491
[info]   CI (99.9%): [≈ 0, 2258.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.39% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64680.336 ops/s
[info] # Warmup Iteration   2: 110255.801 ops/s
[info] # Warmup Iteration   3: 109504.787 ops/s
[info] # Warmup Iteration   4: 109338.877 ops/s
[info] # Warmup Iteration   5: 112668.739 ops/s
[info] Iteration   1: 111580.486 ops/s
[info]                  ·gc.alloc.rate:                   3877.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4073.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57469.218 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 111638.198 ops/s
[info]                  ·gc.alloc.rate:                   3880.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47932.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 109603.847 ops/s
[info]                  ·gc.alloc.rate:                   3808.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4082.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58640.526 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 110879.368 ops/s
[info]                  ·gc.alloc.rate:                   3852.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57984.767 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 109769.780 ops/s
[info]                  ·gc.alloc.rate:                   3814.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3406.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48849.377 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   110694.336 ±(99.9%) 3730.529 ops/s [Average]
[info]   (min, avg, max) = (109603.847, 110694.336, 111638.198), stdev = 968.807
[info]   CI (99.9%): [106963.807, 114424.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3846.761 ±(99.9%) 130.730 MB/sec [Average]
[info]   (min, avg, max) = (3808.674, 3846.761, 3880.403), stdev = 33.950
[info]   CI (99.9%): [3716.031, 3977.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.004), stdev = 0.001
[info]   CI (99.9%): [54704.003, 54704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.006 ±(99.9%) 1.290 B/op [Average]
[info]   (min, avg, max) = (0.591, 1.006, 1.467), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 2.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3809.275 ±(99.9%) 1427.847 MB/sec [Average]
[info]   (min, avg, max) = (3400.058, 3809.275, 4083.953), stdev = 370.807
[info]   CI (99.9%): [2381.428, 5237.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54175.243 ±(99.9%) 20433.857 B/op [Average]
[info]   (min, avg, max) = (47932.327, 54175.243, 58640.526), stdev = 5306.608
[info]   CI (99.9%): [33741.386, 74609.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517056.855 ops/s
[info] # Warmup Iteration   2: 572587.977 ops/s
[info] # Warmup Iteration   3: 594171.109 ops/s
[info] # Warmup Iteration   4: 594636.490 ops/s
[info] # Warmup Iteration   5: 576855.315 ops/s
[info] Iteration   1: 583121.221 ops/s
[info]                  ·gc.alloc.rate:                   1701.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5438.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 591439.355 ops/s
[info]                  ·gc.alloc.rate:                   1725.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5367.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 591220.934 ops/s
[info]                  ·gc.alloc.rate:                   1724.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3584.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 591605.124 ops/s
[info]                  ·gc.alloc.rate:                   1725.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5380.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 591823.580 ops/s
[info]                  ·gc.alloc.rate:                   1726.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3590.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   589842.043 ±(99.9%) 14492.078 ops/s [Average]
[info]   (min, avg, max) = (583121.221, 589842.043, 591823.580), stdev = 3763.547
[info]   CI (99.9%): [575349.965, 604334.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1720.852 ±(99.9%) 42.107 MB/sec [Average]
[info]   (min, avg, max) = (1701.342, 1720.852, 1726.828), stdev = 10.935
[info]   CI (99.9%): [1678.745, 1762.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4592.001, 4592.001, 4592.001), stdev = 0.001
[info]   CI (99.9%): [4592.001, 4592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.156 ±(99.9%) 0.237 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.156, 0.225), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1750.127 ±(99.9%) 1412.887 MB/sec [Average]
[info]   (min, avg, max) = (1346.179, 1750.127, 2022.110), stdev = 366.922
[info]   CI (99.9%): [337.240, 3163.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4672.282 ±(99.9%) 3814.681 B/op [Average]
[info]   (min, avg, max) = (3584.431, 4672.282, 5438.598), stdev = 990.661
[info]   CI (99.9%): [857.600, 8486.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.80% complete, ETA 00:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258001.204 ops/s
[info] # Warmup Iteration   2: 321986.971 ops/s
[info] # Warmup Iteration   3: 321148.524 ops/s
[info] # Warmup Iteration   4: 324411.211 ops/s
[info] # Warmup Iteration   5: 335982.269 ops/s
[info] Iteration   1: 337746.771 ops/s
[info]                  ·gc.alloc.rate:                   530.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2383.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 338337.906 ops/s
[info]                  ·gc.alloc.rate:      531.295 MB/sec
[info]                  ·gc.alloc.rate.norm: 2472.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 336512.432 ops/s
[info]                  ·gc.alloc.rate:                   528.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3152.638 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 337752.554 ops/s
[info]                  ·gc.alloc.rate:                   530.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3141.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 337433.379 ops/s
[info]                  ·gc.alloc.rate:                   529.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3134.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   337556.609 ±(99.9%) 2576.246 ops/s [Average]
[info]   (min, avg, max) = (336512.432, 337556.609, 338337.906), stdev = 669.043
[info]   CI (99.9%): [334980.363, 340132.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   530.049 ±(99.9%) 4.050 MB/sec [Average]
[info]   (min, avg, max) = (528.410, 530.049, 531.295), stdev = 1.052
[info]   CI (99.9%): [525.999, 534.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.719 ±(99.9%) 6.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.719, 3.540), stdev = 1.577
[info]   CI (99.9%): [≈ 0, 6.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.365 ±(99.9%) 28.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.365, 16.561), stdev = 7.377
[info]   CI (99.9%): [≈ 0, 31.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   506.231 ±(99.9%) 1122.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.231, 673.919), stdev = 291.545
[info]   CI (99.9%): [≈ 0, 1628.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2362.473 ±(99.9%) 5240.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2362.473, 3152.638), stdev = 1360.960
[info]   CI (99.9%): [≈ 0, 7603.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427464.072 ops/s
[info] # Warmup Iteration   2: 694754.868 ops/s
[info] # Warmup Iteration   3: 693402.960 ops/s
[info] # Warmup Iteration   4: 718509.099 ops/s
[info] # Warmup Iteration   5: 718300.330 ops/s
[info] Iteration   1: 719115.888 ops/s
[info]                  ·gc.alloc.rate:                   548.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1119.577 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 718664.776 ops/s
[info]                  ·gc.alloc.rate:                   547.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1475.608 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 715206.074 ops/s
[info]                  ·gc.alloc.rate:                   545.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1482.611 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 714841.292 ops/s
[info]                  ·gc.alloc.rate:                   544.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.561 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 715055.952 ops/s
[info]                  ·gc.alloc.rate:                   545.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   716576.797 ±(99.9%) 8170.823 ops/s [Average]
[info]   (min, avg, max) = (714841.292, 716576.797, 719115.888), stdev = 2121.937
[info]   CI (99.9%): [708405.974, 724747.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   546.204 ±(99.9%) 6.188 MB/sec [Average]
[info]   (min, avg, max) = (544.906, 546.204, 548.175), stdev = 1.607
[info]   CI (99.9%): [540.016, 552.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.000, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.291), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 1.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.638), stdev = 0.271
[info]   CI (99.9%): [≈ 0, 1.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   641.533 ±(99.9%) 280.049 MB/sec [Average]
[info]   (min, avg, max) = (511.436, 641.533, 674.575), stdev = 72.728
[info]   CI (99.9%): [361.483, 921.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1409.705 ±(99.9%) 624.710 B/op [Average]
[info]   (min, avg, max) = (1119.577, 1409.705, 1485.561), stdev = 162.235
[info]   CI (99.9%): [784.994, 2034.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1815171.346 ops/s
[info] # Warmup Iteration   2: 1916454.544 ops/s
[info] # Warmup Iteration   3: 1991670.944 ops/s
[info] # Warmup Iteration   4: 2001144.204 ops/s
[info] # Warmup Iteration   5: 1973687.344 ops/s
[info] Iteration   1: 2000923.527 ops/s
[info]                  ·gc.alloc.rate:                   925.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1958544.793 ops/s
[info]                  ·gc.alloc.rate:                   906.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1945612.424 ops/s
[info]                  ·gc.alloc.rate:                   899.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1086.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1950249.363 ops/s
[info]                  ·gc.alloc.rate:                   901.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 541.875 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1994087.757 ops/s
[info]                  ·gc.alloc.rate:                   922.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1060.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1969883.573 ±(99.9%) 99158.381 ops/s [Average]
[info]   (min, avg, max) = (1945612.424, 1969883.573, 2000923.527), stdev = 25751.117
[info]   CI (99.9%): [1870725.192, 2069041.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   911.019 ±(99.9%) 45.519 MB/sec [Average]
[info]   (min, avg, max) = (899.755, 911.019, 925.173), stdev = 11.821
[info]   CI (99.9%): [865.499, 956.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.067), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.184 ±(99.9%) 1415.190 MB/sec [Average]
[info]   (min, avg, max) = (671.345, 940.184, 1342.954), stdev = 367.520
[info]   CI (99.9%): [≈ 0, 2355.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   751.422 ±(99.9%) 1131.986 B/op [Average]
[info]   (min, avg, max) = (528.640, 751.422, 1086.318), stdev = 293.973
[info]   CI (99.9%): [≈ 0, 1883.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1786745.629 ops/s
[info] # Warmup Iteration   2: 1905805.990 ops/s
[info] # Warmup Iteration   3: 1914934.067 ops/s
[info] # Warmup Iteration   4: 1909419.764 ops/s
[info] # Warmup Iteration   5: 1916571.026 ops/s
[info] Iteration   1: 1919169.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1920955.464 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1917860.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1914526.842 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1912454.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1916993.207 ±(99.9%) 13321.249 ops/s [Average]
[info]   (min, avg, max) = (1912454.208, 1916993.207, 1920955.464), stdev = 3459.486
[info]   CI (99.9%): [1903671.958, 1930314.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294091.569 ops/s
[info] # Warmup Iteration   2: 359622.712 ops/s
[info] # Warmup Iteration   3: 362926.251 ops/s
[info] # Warmup Iteration   4: 371384.342 ops/s
[info] # Warmup Iteration   5: 369438.442 ops/s
[info] Iteration   1: 374196.364 ops/s
[info]                  ·gc.alloc.rate:                   553.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2151.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 374460.113 ops/s
[info]                  ·gc.alloc.rate:                   553.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2830.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 375682.431 ops/s
[info]                  ·gc.alloc.rate:      555.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 368300.245 ops/s
[info]                  ·gc.alloc.rate:                   544.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2877.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 377087.511 ops/s
[info]                  ·gc.alloc.rate:                   557.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2799.576 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   373945.333 ±(99.9%) 12927.764 ops/s [Average]
[info]   (min, avg, max) = (368300.245, 373945.333, 377087.511), stdev = 3357.299
[info]   CI (99.9%): [361017.569, 386873.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   553.007 ±(99.9%) 18.987 MB/sec [Average]
[info]   (min, avg, max) = (544.724, 553.007, 557.637), stdev = 4.931
[info]   CI (99.9%): [534.019, 571.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.001, 2328.001, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.001, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.816 ±(99.9%) 6.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 4.037), stdev = 1.801
[info]   CI (99.9%): [≈ 0, 7.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.430 ±(99.9%) 29.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.430, 16.970), stdev = 7.570
[info]   CI (99.9%): [≈ 0, 32.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   505.731 ±(99.9%) 1121.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.731, 673.348), stdev = 291.181
[info]   CI (99.9%): [≈ 0, 1626.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2131.887 ±(99.9%) 4730.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2131.887, 2877.708), stdev = 1228.369
[info]   CI (99.9%): [≈ 0, 6861.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.817
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99.80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97981.339 ops/s
[info] # Warmup Iteration   2: 111859.256 ops/s
[info] # Warmup Iteration   3: 111131.150 ops/s
[info] # Warmup Iteration   4: 111300.815 ops/s
[info] # Warmup Iteration   5: 113358.123 ops/s
[info] Iteration   1: 113669.425 ops/s
[info]                  ·gc.alloc.rate:                   2102.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              29120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27925.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 113570.256 ops/s
[info]                  ·gc.alloc.rate:                   2100.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              29120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27987.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 113203.060 ops/s
[info]                  ·gc.alloc.rate:                   2094.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              29120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28137.789 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 111107.236 ops/s
[info]                  ·gc.alloc.rate:                   2055.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              29120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38286.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 111907.363 ops/s
[info]                  ·gc.alloc.rate:                   2070.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              29120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28556.991 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   112691.468 ±(99.9%) 4354.381 ops/s [Average]
[info]   (min, avg, max) = (111107.236, 112691.468, 113669.425), stdev = 1130.819
[info]   CI (99.9%): [108337.086, 117045.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2084.542 ±(99.9%) 80.197 MB/sec [Average]
[info]   (min, avg, max) = (2055.314, 2084.542, 2102.357), stdev = 20.827
[info]   CI (99.9%): [2004.344, 2164.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   29120.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29120.004, 29120.004, 29120.004), stdev = 0.001
[info]   CI (99.9%): [29120.003, 29120.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.870 ±(99.9%) 1.353 B/op [Average]
[info]   (min, avg, max) = (0.293, 0.870, 1.154), stdev = 0.351
[info]   CI (99.9%): [≈ 0, 2.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2158.220 ±(99.9%) 1171.279 MB/sec [Average]
[info]   (min, avg, max) = (2016.145, 2158.220, 2702.268), stdev = 304.177
[info]   CI (99.9%): [986.941, 3329.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   30178.884 ±(99.9%) 17477.198 B/op [Average]
[info]   (min, avg, max) = (27925.874, 30178.884, 38286.138), stdev = 4538.773
[info]   CI (99.9%): [12701.686, 47656.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # Run complete. Total time: 02:14:13
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    716587.328 ±   28345.891   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      1882.684 ±      73.994  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4136.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.037 ±       0.104  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0.082 ±       0.226    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      1883.156 ±    1148.059  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5      4134.120 ±    2448.588    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        14.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        11.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1655740.344 ±  140082.828   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1178.029 ±      99.480  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.046 ±       0.119  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.044 ±       0.114    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1216.635 ±    1164.647  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      1159.845 ±    1146.118    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         7.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   3897865.572 ±   35142.082   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       257.500 ±       2.351  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5       306.848 ±    1078.612  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       124.139 ±     436.365    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         6.000                    ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    170906.978 ±    9021.666   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1350.661 ±      70.702  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     12440.002 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.037 ±       0.104  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.343 ±       0.959    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      1352.597 ±       7.264  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5     12459.743 ±     679.018    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5         7.000                    ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    545006.050 ±   15889.247   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1656.298 ±      48.152  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4784.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.050 ±       0.091  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.145 ±       0.267    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      1746.836 ±    1417.343  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5      5050.764 ±    4200.981    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        13.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        10.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2081035.454 ±   17666.453   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       867.266 ±       7.202  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       656.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.021 ±       0.080  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.016 ±       0.061    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5       944.616 ±    1423.050  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       714.332 ±    1073.894    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         6.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  16261389.433 ±  110649.680   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       826.363 ±       5.592  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.029 ±       0.134  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.003 ±       0.013    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5       806.710 ±    1153.289  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        78.122 ±     112.121    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         5.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  16837563.996 ±  109729.981   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    309945.350 ±    4363.765   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1011.202 ±      14.272  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      5136.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.029 ±       0.108  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.148 ±       0.545    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      1080.552 ±    1424.577  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      5486.889 ±    7218.851    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         7.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1699621.429 ±   19399.831   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2617.119 ±      30.420  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2424.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.058 ±       0.067  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.054 ±       0.062    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      2568.645 ±    1155.462  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      2379.241 ±    1074.809    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5  10163875.931 ± 2075715.086   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1239.704 ±     253.054  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.067 ±       0.174  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.010 ±       0.028    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1210.145 ±    1156.313  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       187.853 ±     184.967    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2563520.465 ±   72596.996   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1797.759 ±      50.841  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.083 ±       0.113  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.051 ±       0.071    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1897.293 ±    1167.254  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      1165.588 ±     727.358    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  10405386.306 ±  409799.476   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1322.051 ±      51.100  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.050 ±       0.134  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.008 ±       0.020    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1210.078 ±    1157.751  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       182.717 ±     170.539    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    641136.541 ±    4140.903   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1694.213 ±      10.764  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.046 ±       0.154  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.112 ±       0.378    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1625.474 ±    1429.376  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      3991.196 ±    3509.185    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   2185657.856 ±  118310.916   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1843.743 ±     100.098  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1328.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.054 ±       0.122  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.039 ±       0.087    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1749.487 ±    1418.911  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5      1261.433 ±    1048.528    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  18613041.583 ±  488256.540   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       567.535 ±      14.898  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.511 ±       4.402  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.043 ±       0.373    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5       505.988 ±    1121.937  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        42.807 ±      94.666    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         7.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   6357487.473 ±   86944.477   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1744.651 ±      23.011  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.054 ±       0.091  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.013 ±       0.023    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1760.494 ±    1430.304  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       435.767 ±     350.815    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  20782077.357 ± 3650690.748   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       633.632 ±     111.354  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.677 ±       5.788  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.050 ±       0.424    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       538.572 ±    1159.327  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        41.067 ±      88.907    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         4.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  22026691.957 ±  225932.117   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1189194.479 ±    9239.404   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1794.904 ±      13.653  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2376.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.058 ±       0.036  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.077 ±       0.048    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1897.145 ±    1166.812  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      2511.559 ±    1549.628    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    377005.054 ±    9224.753   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2074.860 ±      50.680  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8664.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.054 ±       0.166  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.225 ±       0.691    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2022.835 ±      20.129  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      8447.078 ±     251.873    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        15.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    463424.289 ±   16618.865   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       631.218 ±      22.758  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2144.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.079 ±       0.505  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.271 ±       1.735    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       674.211 ±       1.837  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      2290.191 ±      82.613    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         6.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1029110.273 ±   45024.039   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       685.125 ±      29.545  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.687 ±       5.785  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         1.047 ±       8.809    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       672.918 ±       6.059  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5      1029.428 ±      43.403    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         5.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    110663.350 ±    4897.528   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      3827.474 ±     168.827  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54448.004 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.243 ±       0.940    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      3809.011 ±    1421.961  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     54150.292 ±   18327.677    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        28.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                        128  thrpt    5    617633.489 ±   21622.024   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1889.583 ±      65.905  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      4816.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.127 ±       0.309    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1887.056 ±    1169.830  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      4805.347 ±    2877.581    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                               128  thrpt    5        10.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    313724.316 ±    6089.782   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       479.895 ±       9.253  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      2408.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.703 ±       6.010  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3.529 ±      30.162    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       474.195 ±    1067.639  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      2381.018 ±    5354.586    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5        10.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    626721.130 ±   35193.333   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       461.804 ±      26.023  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.075 ±       0.473  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.188 ±       1.184    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       371.742 ±    1331.359  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       932.446 ±    3329.785    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   2727854.755 ±   60258.553   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1261.506 ±      27.227  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.041 ±       0.090    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1208.996 ±    1154.217  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       696.941 ±     656.075    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         7.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2705516.727 ±    9485.910   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    374563.504 ±   11289.074   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       538.692 ±      16.140  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.829 ±       6.889  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         3.497 ±      29.090    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5       505.626 ±    1120.947  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      2126.021 ±    4729.784    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                       128  thrpt    5    107585.356 ±    1448.018   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5      1985.726 ±      26.962  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5     29056.004 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.731 ±       0.649    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5      2021.728 ±      19.719  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     29583.121 ±     525.019    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                              128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     20828.222 ±    1074.458   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1303.033 ±      67.417  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     98480.026 ±       0.050    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         2.531 ±       6.997    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1343.332 ±       5.227  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    101539.833 ±    5051.064    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     33589.904 ±     231.019   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       841.215 ±       5.419  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     39424.012 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.780 ±       4.111    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       945.024 ±    1423.296  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     44280.964 ±   66588.702    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     35303.969 ±     579.834   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       525.809 ±       8.460  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448.012 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.679 ±       5.756  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5        30.249 ±     256.480    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       506.475 ±    1123.300  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     22616.261 ±   50122.994    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         6.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     26927.083 ±    1367.548   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1427.277 ±      72.701  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     83432.015 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.215 ±       4.688    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1489.689 ±    1157.879  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     87043.048 ±   66300.679    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     31447.006 ±     604.282   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1726.570 ±      33.024  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     86432.013 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.062 ±       0.196  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3.126 ±       9.821    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1748.298 ±    1421.513  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     87564.195 ±   72077.030    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     29347.594 ±     592.762   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1579.310 ±      31.468  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     84720.014 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         1.785 ±       6.537    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1625.333 ±    1425.356  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     87187.000 ±   76389.012    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     34113.555 ±     820.324   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1728.035 ±      41.105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     79736.012 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.050 ±       0.185  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         2.312 ±       8.560    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1749.890 ±    1420.348  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     80791.656 ±   66503.920    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        12.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     34679.758 ±    2038.349   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1656.487 ±      97.370  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     75192.012 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5         0.033 ±       0.134  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5         1.503 ±       6.050    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5      1614.890 ±    1419.489  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5     73242.756 ±   62827.302    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5      8636.182 ±     227.799   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1112.994 ±      29.510  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    202880.049 ±       0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3.023 ±      12.109    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1071.007 ±    1411.142  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    195047.618 ±  255003.332    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     21139.301 ±     999.563   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1614.672 ±      76.212  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    120240.020 ±       0.003    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         2.181 ±      10.051    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1614.514 ±    1425.857  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5    120253.815 ±  106565.812    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        11.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     42216.028 ±     328.585   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1040.284 ±       7.884  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     38792.010 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.085 ±       4.526    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1081.477 ±    1428.085  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     40323.497 ±   53197.189    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     58459.172 ±     788.412   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       755.178 ±      10.262  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.561 ±       3.745    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       672.184 ±       5.033  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     18101.223 ±     217.230    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     33039.637 ±     175.119   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2206.645 ±      11.718  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    105144.013 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.058 ±       0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.776 ±       5.669    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2306.690 ±    1429.233  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    109908.195 ±   68010.272    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        17.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     32874.582 ±    1908.316   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1861.690 ±     107.072  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     89144.013 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         2.986 ±       2.624    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1763.062 ±    1431.222  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     84500.778 ±   70055.109    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     48413.473 ±    1984.126   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1859.905 ±      76.544  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     60480.009 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.050 ±       0.156  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.626 ±       5.120    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1751.551 ±    1421.289  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     56916.591 ±   45324.964    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     48228.830 ±    1372.721   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1925.831 ±      55.014  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     62856.008 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         2.173 ±       2.879    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5      1886.959 ±    1156.456  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5     61540.588 ±   36581.663    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        11.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    386457.944 ±    6372.792   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1954.005 ±      32.556  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7960.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.238 ±       0.276    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1886.517 ±    1150.952  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      7687.380 ±    4742.444    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1557791.208 ±   20582.510   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       490.802 ±       6.588  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.506 ±       4.312  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.512 ±       4.366    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5       371.710 ±    1331.269  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       376.516 ±    1348.782    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    674054.435 ±   26831.962   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       558.300 ±      22.188  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.107 ±       0.427    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       539.408 ±    1161.120  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1262.845 ±    2719.040    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         4.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1804194.796 ±   12912.524   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       348.400 ±       2.540  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.001 ±       0.005  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.001 ±       0.004    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       306.860 ±    1078.657  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       268.040 ±     942.199    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    104172.136 ±    5060.707   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3783.434 ±     182.873  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.128 ±       1.810    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      3811.417 ±    1433.187  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     57591.613 ±   21124.252    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        28.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                              128  thrpt    5    639586.861 ±   10979.025   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1670.857 ±      28.734  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4112.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.058 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.143 ±       0.087    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1750.135 ±    1420.832  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      4310.020 ±    3556.833    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    323933.206 ±    1439.268   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5       498.803 ±       2.209  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      2424.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.715 ±       5.984  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         3.474 ±      29.088    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       474.163 ±    1067.549  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      2304.866 ±    5191.188    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1086516.587 ±   13630.171   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       502.455 ±       6.357  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.504 ±       4.343  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.732 ±       6.307    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5       505.971 ±    1121.897  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       733.702 ±    1625.600    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5   1001160.315 ±   42312.298   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       707.167 ±      29.851  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.020 ±       0.113    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       674.905 ±       3.146  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1061.380 ±      48.452    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         4.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   2021683.869 ±   37599.425   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       934.932 ±      17.529  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.046 ±       0.200  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.036 ±       0.155    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       940.130 ±    1416.634  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       732.856 ±    1114.340    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   2532538.100 ±   12097.117   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    511474.278 ±   21153.934   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       603.012 ±      24.900  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1856.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.826 ±       6.933  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.541 ±      21.332    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5       639.808 ±     276.373  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1967.738 ±     789.738    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                             128  thrpt    5    113283.549 ±    2433.253   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5      2091.177 ±      43.638  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     29056.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.982 ±       1.257    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      2158.557 ±    1151.904  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     29986.234 ±   15737.319    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5        16.000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    138391.124 ±    1599.801   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1663.379 ±      19.452  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     18920.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.237 ±       0.910    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1614.676 ±    1418.374  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     18361.909 ±   16038.039    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    408113.772 ±    3091.741   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       338.044 ±       2.467  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.025 ±       0.215  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.096 ±       0.829    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.349 ±    1219.867  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1310.190 ±    4707.948    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5   1070126.698 ±   38988.252   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       206.663 ±       7.512  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       204.580 ±    1078.691  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       303.333 ±    1599.457    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     88389.837 ±    2769.755   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3762.763 ±     118.071  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67016.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.121 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.150 ±       1.860    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3811.084 ±    1434.810  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     67905.136 ±   26800.787    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        28.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                 128  thrpt    5    244398.874 ±   15058.439   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1115.312 ±      68.713  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7184.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.062 ±       0.179  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.402 ±       1.146    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1209.097 ±    1157.763  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      7795.643 ±    7554.500    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    330043.040 ±    2017.194   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1460.979 ±       8.797  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      6968.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.238 ±       0.435    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1477.700 ±    1151.456  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      7047.750 ±    5491.397    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   1789750.473 ±   29469.448   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       918.559 ±      15.062  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.026 ±       0.137    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       945.979 ±    1425.311  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       831.763 ±    1248.606    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   1847300.427 ±  106779.838   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       497.537 ±      28.616  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.671 ±       5.679  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.576 ±       4.874    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       474.399 ±    1068.395  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       404.344 ±     913.613    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1999269.181 ±   10214.013   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     46290.919 ±    1167.823   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1950.517 ±      49.592  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     66336.009 ±       0.002    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.054 ±       0.166  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.846 ±       5.693    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1882.185 ±    1163.623  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     63985.091 ±   38913.663    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                128  thrpt    5     93801.709 ±    4694.218   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      2030.587 ±     101.210  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     34080.004 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.910 ±       2.034    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      2022.724 ±      20.529  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     33952.861 ±    1827.166    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        11.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    218011.174 ±    3133.899   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2243.552 ±      31.799  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16200.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.451 ±       0.580    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      2159.680 ±    1141.759  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     15591.653 ±    8125.534    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        13.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    351936.401 ±   16400.462   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1695.592 ±      78.352  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7584.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.042 ±       0.098  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.186 ±       0.437    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1762.251 ±    1429.099  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      7894.607 ±    6642.393    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1300850.423 ±    9392.943   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       449.538 ±       3.345  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.672 ±       5.629  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.815 ±       6.827    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474.413 ±    1068.418  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       574.520 ±    1294.575    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     85279.825 ±    2997.631   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3583.347 ±     126.274  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66144.005 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.104 ±       0.057  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.922 ±       1.103    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3673.600 ±    1432.593  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     67831.696 ±   27398.803    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        27.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                 128  thrpt    5    232909.694 ±   10158.155   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2466.644 ±     108.188  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16672.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.451 ±       0.461    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2433.360 ±    1433.785  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     16436.963 ±    9359.997    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        13.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    224136.530 ±    7523.342   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1898.852 ±      63.923  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     13336.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.410 ±       1.090    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2020.192 ±      21.370  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     14189.055 ±     495.353    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        10.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1220649.164 ±   14823.432   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       713.409 ±       8.840  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.032 ±       0.135    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       674.998 ±       2.988  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       870.474 ±      13.458    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2434709.602 ±  113875.983   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       828.955 ±      38.709  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.251  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.019 ±       0.162    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       806.743 ±    1156.117  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       521.332 ±     740.754    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2772988.549 ±   15038.880   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    306776.552 ±   10444.854   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2509.955 ±      85.590  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.364 ±       0.630    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2445.028 ±    1429.089  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     12544.520 ±    7255.992    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        15.000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                128  thrpt    5     58504.960 ±     494.335   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      2074.077 ±      17.168  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     55808.007 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.793 ±       3.206    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      2022.881 ±      20.190  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     54430.735 ±     805.882    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     27268.421 ±     562.544   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1597.028 ±      33.229  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     92192.015 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.445 ±       6.045    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1613.708 ±    1415.330  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     93229.279 ±   83372.737    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5     98105.572 ±    7059.344   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       883.590 ±      63.440  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14176.004 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.403 ±       1.672    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       941.105 ±    1416.292  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     15140.418 ±   23291.403    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     62202.615 ±     514.925   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1026.328 ±       8.433  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     25976.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.054 ±       4.762    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       946.162 ±    1425.797  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     23954.964 ±   36197.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    131086.934 ±    7299.753   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       844.675 ±      47.138  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10144.003 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.350 ±       1.598    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       940.674 ±    1414.866  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     11315.403 ±   17241.483    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     35269.930 ±    1354.723   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1842.001 ±      70.561  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82216.012 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.229 ±       6.526    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1898.860 ±    1167.517  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     84696.835 ±   50690.204    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                               128  thrpt    5     66503.501 ±    3331.997   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1196.037 ±      60.186  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     28312.006 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.037 ±       0.143  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.889 ±       3.402    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1208.805 ±    1156.933  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     28673.778 ±   28128.188    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     41032.960 ±     254.079   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       459.627 ±       2.997  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     17632.010 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.718 ±       6.077  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        27.584 ±     233.585    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       474.187 ±    1067.524  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     18197.006 ±   41006.064    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     42349.594 ±     230.342   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       382.426 ±       2.079  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     14216.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.930 ±       6.470    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       339.287 ±    1219.558  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     12617.590 ±   45372.714    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     44464.676 ±    1170.320   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       390.687 ±      10.365  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     13832.009 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.670 ±       5.746  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5        23.629 ±     202.675    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       441.777 ±     989.111  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     15638.231 ±   34964.937    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     45216.170 ±     963.544   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       345.607 ±       7.471  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     12032.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.004 ±       0.030  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         0.123 ±       1.062    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5       306.867 ±    1078.681  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5     10718.727 ±   37678.390    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                              128  thrpt    5     30157.841 ±     992.846   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1039.126 ±      33.859  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     54240.014 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.042 ±       0.170  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.176 ±       8.875    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1074.295 ±    1416.819  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     56136.916 ±   74693.602    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     20249.905 ±    1141.822   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5       759.440 ±      42.602  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     59040.026 ±       0.049    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.328 ±       2.825    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       672.701 ±       4.026  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     52305.266 ±    2798.892    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         4.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     20817.772 ±     333.118   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       590.515 ±       9.058  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     44652.532 ±      38.848    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.896 ±      10.906    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       539.323 ±    1160.934  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     40793.120 ±   87813.220    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     76287.010 ±     932.434   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       198.490 ±       2.476  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.006 ±       0.054  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.129 ±       1.114    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       204.561 ±    1078.590  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      4235.783 ±   22334.073    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     16735.405 ±     662.034   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1085.195 ±      43.137  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    102079.831 ±       1.676    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.167 ±       6.699    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1081.798 ±    1426.123  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    101849.082 ±  135235.683    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                             128  thrpt    5     16734.121 ±     425.408   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5       576.860 ±      14.392  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     54264.789 ±      46.559    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.549 ±       4.682  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5        51.588 ±     439.996    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       507.422 ±    1125.916  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     47751.913 ±  105673.837    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     60511.235 ±    4256.288   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       916.726 ±      64.471  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     23848.007 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.033 ±       0.184  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.858 ±       4.752    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       940.712 ±    1419.225  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     24556.567 ±   38076.666    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5     90092.009 ±    1227.517   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1068.150 ±      14.790  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     18664.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.042 ±       0.160  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.729 ±       2.809    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1081.683 ±    1425.554  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     18915.787 ±   25095.624    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    200398.459 ±    4600.161   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       317.734 ±       7.259  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.017 ±       0.139    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       306.860 ±    1078.657  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      2419.030 ±    8503.398    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    249659.986 ±    1399.265   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     74767.525 ±    2006.159   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1164.589 ±      31.207  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     24520.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.614 ±       2.820    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1205.512 ±    1154.280  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     25396.370 ±   24491.462    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                            128  thrpt    5     11380.143 ±     246.426   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1503.341 ±      33.234  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    207956.309 ±      23.462    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         6.893 ±      16.692    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1482.975 ±    1161.799  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    205108.927 ±  159697.855    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     27671.311 ±     584.390   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       575.458 ±      12.274  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     32736.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.715 ±       6.114  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5        40.945 ±     350.021    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       506.298 ±    1122.794  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     28818.710 ±   63836.798    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5     28688.397 ±     232.540   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       376.427 ±       3.037  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20656.014 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.037 ±       0.323  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.059 ±      17.731    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.284 ±    1219.577  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     18639.720 ±   67013.780    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    123299.879 ±    4512.632   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       481.218 ±      17.554  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.675 ±       5.671  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         8.677 ±      72.949    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474.415 ±    1068.395  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      6056.098 ±   13703.887    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     22665.721 ±    1228.540   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1251.577 ±      67.533  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86920.019 ±       0.013    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.455 ±       4.037    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1217.247 ±    1162.126  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     84619.988 ±   81785.487    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                 128  thrpt    5     76931.714 ±    3522.089   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1468.111 ±      66.982  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30040.005 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.033 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.683 ±       0.921    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1344.184 ±       6.773  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     27507.554 ±    1345.039    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    178641.614 ±    1519.496   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       620.982 ±       5.022  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5472.002 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.731 ±       6.115  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         6.437 ±      53.854    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       640.652 ±     278.306  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      5646.295 ±    2486.678    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         7.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    281366.649 ±    9243.842   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       284.544 ±       9.394  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       306.855 ±    1078.639  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1723.133 ±    6057.552    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    481337.953 ±   44301.251   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       369.371 ±      34.037  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.671 ±       5.718  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.172 ±      18.517    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       441.838 ±     989.248  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1448.403 ±    3230.358    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    533497.560 ±    2377.102   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    276726.870 ±    2377.934   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       765.133 ±       6.107  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.142 ±       0.381    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       809.709 ±    1161.616  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      4607.942 ±    6653.324    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         5.000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                128  thrpt    5     27782.432 ±     502.904   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1699.892 ±      30.935  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     96320.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         3.538 ±       3.225    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1749.484 ±    1419.204  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     99197.084 ±   81805.397    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     38046.842 ±    1698.272   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1696.635 ±      75.793  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     70200.011 ±       0.002    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2.402 ±       6.381    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1749.560 ±    1419.779  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     72333.250 ±   57447.662    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    300112.854 ±    6318.729   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       311.127 ±       6.601  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.007 ±       0.039  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.039 ±       0.208    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       306.853 ±    1078.633  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1614.708 ±    5676.021    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5     98372.786 ±    5922.543   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1084.748 ±      65.187  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17360.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.033 ±       0.146  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.532 ±       2.340    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1081.393 ±    1423.144  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     17315.190 ±   22881.014    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    430644.399 ±    4929.373   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       280.125 ±       3.241  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.009 ±       0.062  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.035 ±       0.228    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       306.856 ±    1078.643  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1123.601 ±    3949.614    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     40233.933 ±    1396.093   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2147.325 ±      74.975  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     84016.010 ±       0.002    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.054 ±       0.146  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.119 ±       5.690    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2172.243 ±    1165.552  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     84974.187 ±   44777.860    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                128  thrpt    5     78638.775 ±    4969.826   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1438.105 ±      90.365  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     28784.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.042 ±       0.113  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.834 ±       2.263    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1478.262 ±    1149.150  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     29649.578 ±   24717.371    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5     89196.696 ±    1199.762   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       430.627 ±       5.869  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      7600.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.711 ±       6.103  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        12.572 ±     107.922    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       339.349 ±    1219.872  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      6002.806 ±   21576.238    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    113987.310 ±    2993.859   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       348.740 ±       9.215  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.507 ±       4.284  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         6.993 ±      59.063    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       441.572 ±     988.088  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      6106.508 ±   13647.520    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5     97357.711 ±    1525.009   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       321.604 ±       5.041  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      5200.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.068 ±       0.583    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       204.600 ±    1078.798  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3318.444 ±   17497.370    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    114769.213 ±    3413.735   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       351.111 ±      10.409  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.006 ±       0.033  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.079 ±       0.448    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       306.863 ±    1078.668  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4230.690 ±   14871.707    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    114646.439 ±    2305.550   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       260.449 ±       5.276  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      3576.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.004 ±       0.034  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.054 ±       0.467    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5       306.891 ±    1078.764  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      4225.591 ±   14853.652    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5      9918.855 ±     425.328   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1631.067 ±      70.488  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    258856.042 ±       0.005    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         4.611 ±      24.663    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1615.286 ±    1414.293  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    256315.036 ±  223337.102    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     10331.365 ±     262.790   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1598.096 ±      40.210  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    243502.794 ±      54.424    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3.156 ±      14.876    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1490.531 ±    1167.462  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    227013.727 ±  174740.770    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    185858.651 ±    8632.196   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       483.568 ±      22.390  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.545 ±       4.645  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         4.651 ±      39.663    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       474.924 ±    1070.200  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      4043.041 ±    9105.801    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      5954.088 ±     250.048   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1581.142 ±      66.242  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    418024.072 ±       0.016    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.037 ±       0.088  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         9.913 ±      23.369    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1625.817 ±    1426.165  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    429090.723 ±  359163.562    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                              128  thrpt    5     10702.654 ±     111.565   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1721.391 ±      18.266  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    253170.735 ±      40.461    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         4.288 ±      13.474    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1753.530 ±    1425.834  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    257868.872 ±  209092.781    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     26150.384 ±     268.820   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1355.014 ±      14.056  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     81568.016 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         3.759 ±       6.836    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1478.540 ±    1164.443  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     89008.509 ±   70225.824    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     30934.724 ±    1143.724   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1512.091 ±      55.601  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     76944.013 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.485 ±       4.683    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1490.220 ±    1168.588  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     75869.422 ±   60510.430    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    360083.740 ±    2808.585   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       795.972 ±       6.257  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.091 ±       0.429    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       808.692 ±    1157.682  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3535.258 ±    5054.297    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         5.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    406692.293 ±   24951.555   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     28355.043 ±    1389.762   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1491.965 ±      73.397  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     82824.015 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.062 ±       0.179  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3.465 ±       9.969    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1475.360 ±    1163.777  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     81827.587 ±   62145.335    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                             128  thrpt    5      7268.043 ±     145.128   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5      1551.272 ±      30.629  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5    336006.538 ±      40.228    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.046 ±       0.119  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         9.911 ±      25.639    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1617.874 ±    1424.447  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    350710.438 ±  314744.025    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5     98398.972 ±     766.379   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1602.745 ±      12.498  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     25640.004 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.400 ±       2.106    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1479.676 ±    1157.536  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     23670.917 ±   18508.024    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    471205.598 ±    5232.829   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       488.558 ±       5.504  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.512 ±       4.381  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.714 ±      14.662    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       371.622 ±    1330.878  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1242.685 ±    4448.557    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    288600.469 ±    1717.122   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       407.768 ±       2.477  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.033 ±       0.287  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.182 ±       1.568    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       474.058 ±    1067.149  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2585.939 ±    5825.660    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         4.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    631459.086 ±    6703.748   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       410.750 ±       4.336  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.662 ±       5.661  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.657 ±      14.173    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.501 ±    1220.642  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       847.568 ±    3049.740    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     78182.983 ±    2094.368   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3424.440 ±      91.225  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68952.005 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.761 ±       1.385    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      3401.533 ±      10.907  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     68493.583 ±    1966.403    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        20.000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                  128  thrpt    5    191357.082 ±   11049.993   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1452.764 ±      83.663  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11952.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.410 ±       0.739    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1344.332 ±       7.183  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     11062.045 ±     682.667    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    251749.369 ±    7854.892   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1495.520 ±      46.674  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9352.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.261 ±       1.182    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1478.047 ±    1160.910  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5      9253.809 ±    7578.813    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1208084.308 ±   32410.688   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       656.949 ±      17.864  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.518 ±       4.326  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.675 ±       5.637    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       672.523 ±       3.118  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       876.325 ±      22.214    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    812727.162 ±   35212.029   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       640.150 ±      27.697  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.056 ±       0.257    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       674.485 ±       3.502  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1306.657 ±      62.845    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1066633.138 ±    6528.465   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       579.977 ±       3.498  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.674 ±       5.629  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.993 ±       8.294    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       641.161 ±     279.378  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       946.348 ±     413.957    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1092877.477 ±   10448.181   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     29121.974 ±     307.296   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1574.750 ±      16.590  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     85128.014 ±       0.002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.029 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.575 ±       2.378    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1609.728 ±    1418.458  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     87033.097 ±   77002.160    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                 128  thrpt    5     84449.906 ±    1156.434   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      2096.868 ±      28.529  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     39088.005 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.050 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.931 ±       1.339    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2158.223 ±    1171.170  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     40245.470 ±   22374.405    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5        16.000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    121163.316 ±    1349.652   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1494.970 ±      16.815  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     19424.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.037 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.487 ±       0.468    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1611.971 ±    1418.331  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     20950.755 ±   18575.759    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    186069.849 ±   11948.504   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       989.111 ±      63.619  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.142 ±       0.575    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       946.084 ±    1427.132  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      8004.916 ±   12077.587    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         6.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    271467.359 ±    3624.993   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       706.338 ±       9.317  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.682 ±       5.697  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         3.939 ±      32.884    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       807.169 ±    1152.803  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      4683.983 ±    6748.072    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     70601.965 ±    3666.593   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2980.226 ±     154.910  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     66448.006 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.763 ±       1.471    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      2991.187 ±    1442.120  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     66688.611 ±   31807.605    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        22.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                             128  thrpt    5    148052.555 ±     958.086   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1669.451 ±      11.143  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17752.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.042 ±       0.113  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.442 ±       1.207    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1614.491 ±    1418.114  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     17164.143 ±   14999.851    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    176365.537 ±    3879.120   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       613.039 ±      13.318  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5472.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.717 ±       6.087  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         6.403 ±      54.331    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       640.631 ±     278.302  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      5718.707 ±    2497.747    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    515738.200 ±    1673.152   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       521.525 ±       1.706  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.042 ±       0.315  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.127 ±       0.962    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       506.606 ±    1123.697  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1546.887 ±    3431.317    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         5.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    505338.456 ±   20002.037   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       387.779 ±      15.512  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.672 ±       5.695  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.083 ±      17.653    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       441.787 ±     989.126  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1373.902 ±    3072.405    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    549362.528 ±    2536.409   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    302192.568 ±   10423.246   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       832.330 ±      28.663  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.087 ±       0.348    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       944.590 ±    1423.135  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4926.876 ±    7497.371    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                            128  thrpt    5     27175.216 ±     190.802   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1662.745 ±      11.575  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     96320.015 ±       0.002    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3.134 ±       5.284    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1614.617 ±    1418.391  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     93552.231 ±   82622.222    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     10391.138 ±     646.142   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1315.106 ±      81.706  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    199232.047 ±       0.060    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.042 ±       0.098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         6.287 ±      14.916    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1344.643 ±       4.473  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    203748.173 ±   12391.046    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     11151.279 ±     609.906   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1321.586 ±      72.358  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    186576.337 ±       1.779    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         2.946 ±      14.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1353.657 ±       7.915  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5    191134.116 ±   10243.867    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    205920.154 ±    1286.366   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1339.401 ±       8.223  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240.002 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.318 ±       1.435    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1347.475 ±       4.407  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     10301.755 ±      85.426    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      8856.449 ±     501.664   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1648.871 ±      93.442  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    293096.067 ±       0.170    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.058 ±       0.183  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5        10.309 ±      32.031    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1626.200 ±    1430.853  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    288544.455 ±  241507.120    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                        128  thrpt    5     10849.563 ±     255.629   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1281.889 ±      30.029  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    185963.563 ±      38.552    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.037 ±       0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         5.455 ±      19.260    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1347.204 ±       3.294  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5    195445.209 ±    5005.105    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     21556.714 ±     728.391   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       904.878 ±      30.439  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     66081.205 ±      10.205    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.507 ±       8.217    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       940.931 ±    1419.385  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     68543.031 ±  101206.766    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     26295.026 ±    1581.495   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1011.416 ±      60.741  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     60552.016 ±       0.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.033 ±       0.184  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         2.008 ±      11.171    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       945.897 ±    1424.965  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     56710.680 ±   86373.493    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    700522.742 ±   21262.004   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1263.789 ±      38.124  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.196 ±       0.146    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1347.208 ±       3.322  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      3027.599 ±      85.443    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    710544.830 ±    3321.574   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     24254.252 ±    1219.512   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1023.234 ±      51.326  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     66416.017 ±       0.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±       0.146  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.151 ±       9.365    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1071.049 ±    1412.437  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     69549.641 ±   92031.877    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      8979.590 ±     163.825   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5      1512.963 ±      27.159  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    265230.398 ±      50.445    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         8.762 ±      25.495    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1482.762 ±    1159.250  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    259860.197 ±  200848.483    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     26938.507 ±    1400.567   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1462.072 ±      75.753  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     85440.016 ±       0.003    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.684 ±       7.668    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1479.929 ±    1152.908  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     86312.657 ±   61845.684    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     31100.121 ±    1745.358   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1419.819 ±      80.129  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     71856.013 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.033 ±       0.176  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.700 ±       8.965    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1488.948 ±    1158.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     75548.531 ±   64134.701    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    348994.380 ±    8881.402   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       908.092 ±      22.736  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.076 ±       0.654    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       808.239 ±    1159.410  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3652.633 ±    5363.530    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         5.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     18042.128 ±     570.872   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1798.112 ±      56.816  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    156904.024 ±       0.009    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±       0.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.262 ±       5.769    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1763.010 ±    1432.834  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    153714.454 ±  122234.208    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                            128  thrpt    5     27382.660 ±     721.642   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1415.293 ±      37.556  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     81368.015 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3.342 ±       9.935    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1482.242 ±    1166.331  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     85188.061 ±   66119.326    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     42712.169 ±    1220.833   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1036.484 ±      29.432  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     38200.010 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.918 ±       5.264    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1075.173 ±    1417.193  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     39583.500 ±   51694.043    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    133782.225 ±    3497.251   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1133.491 ±      29.404  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     13336.003 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.393 ±       1.435    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1082.260 ±    1428.215  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     12741.698 ±   16907.380    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1024332.800 ±   34704.798   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1098.327 ±      36.938  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.042 ±       0.160  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.064 ±       0.246    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1077.443 ±    1419.437  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1653.888 ±    2155.783    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    909740.201 ±    6461.764   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     57612.733 ±     101.507   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1338.810 ±       2.155  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     36584.007 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.478 ±       3.322    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1339.469 ±       5.593  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     36602.025 ±     180.127    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                           128  thrpt    5     17175.237 ±     296.825   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5      1594.890 ±      27.159  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    146183.554 ±      42.133    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.054 ±       0.166  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         4.953 ±      15.228    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1617.899 ±    1415.907  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    148287.249 ±  129630.065    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     15884.469 ±     936.588   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1417.518 ±      83.748  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    140480.028 ±       0.010    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.042 ±       0.113  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         4.120 ±      11.206    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1479.808 ±    1156.475  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    146883.166 ±  120937.275    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         8.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     16588.386 ±     275.743   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1339.951 ±      21.967  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    127165.004 ±      65.604    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.042 ±       0.113  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         3.954 ±      10.781    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1353.604 ±       8.095  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    128461.960 ±    1522.256    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    411298.537 ±    3332.234   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1070.183 ±       8.767  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.159 ±       0.574    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1077.322 ±    1420.323  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      4125.047 ±    5457.196    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     12236.288 ±     398.034   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1689.162 ±      54.841  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    217320.050 ±       0.119    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.755 ±      20.175    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1626.450 ±    1429.184  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    209226.414 ±  183168.466    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                            128  thrpt    5     16496.362 ±     830.202   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1377.851 ±      69.286  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    131488.752 ±      46.393    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.380 ±       6.424    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1347.214 ±       4.418  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    128583.665 ±    6836.713    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     38189.341 ±    2360.075   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1186.987 ±      73.224  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     48928.011 ±       0.003    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.054 ±       0.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         2.231 ±       5.482    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1209.513 ±    1157.189  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     49914.217 ±   48430.674    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     46366.065 ±    2441.083   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1229.673 ±      64.541  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     41752.009 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1.264 ±       5.539    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1217.705 ±    1162.168  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     41374.178 ±   39829.083    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1206743.246 ±   38391.669   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1097.701 ±      35.098  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.042 ±       0.170  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.054 ±       0.220    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1077.495 ±    1419.729  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1404.737 ±    1840.514    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1425113.611 ±    8026.345   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5     36812.220 ±     766.202   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1113.955 ±      23.370  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     47632.011 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.780 ±       6.413    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1071.197 ±    1411.389  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     45800.023 ±   60299.364    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                           128  thrpt    5     19555.178 ±     433.079   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5      1580.539 ±      35.581  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    127235.994 ±      34.211    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.675 ±       6.436    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1617.891 ±    1419.103  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    130352.658 ±  116688.385    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     77746.415 ±    1344.658   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1333.408 ±      23.043  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     27000.005 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.037 ±       0.132  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.756 ±       2.656    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1343.293 ±       4.631  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     27200.626 ±     510.748    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    330884.259 ±    2233.994   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       662.537 ±       4.802  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.514 ±       4.295  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         2.447 ±      20.435    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       672.499 ±       3.164  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      3199.402 ±      16.707    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    261420.113 ±    3292.586   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       573.916 ±       7.407  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.029 ±       0.209  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.175 ±       1.258    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       539.271 ±    1160.824  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3250.482 ±    6996.990    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    469342.243 ±    3769.537   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       591.485 ±       4.814  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.673 ±       5.662  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.255 ±      18.957    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       640.873 ±     278.808  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2149.503 ±     929.327    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     71955.113 ±    2589.003   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3210.156 ±     115.393  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     70232.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.075 ±       0.044  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.640 ±       0.987    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3129.050 ±    1437.876  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     68488.621 ±   32562.069    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        20.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    194054.810 ±    6506.855   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1368.850 ±      45.453  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     11104.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.271 ±       0.991    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1342.803 ±       5.939  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     10893.332 ±     349.589    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    680802.194 ±   39762.613   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       532.840 ±      30.883  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.509 ±       4.340  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.174 ±      10.010    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       506.025 ±    1121.954  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1170.608 ±    2579.568    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    468669.198 ±    3584.848   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       481.106 ±       3.941  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.070 ±       0.380    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       506.658 ±    1123.837  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1702.130 ±    3774.647    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    576287.785 ±    6300.321   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       451.030 ±       5.123  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.664 ±       5.649  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.813 ±      15.428    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       474.440 ±    1068.565  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1297.023 ±    2918.246    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    708985.869 ±   28782.547   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     27794.487 ±     390.685   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1678.780 ±      23.775  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     95088.015 ±       0.002    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.033 ±       0.134  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.887 ±       7.582    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1610.317 ±    1413.714  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     91227.082 ±   80450.163    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      7882.916 ±     528.689   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1213.199 ±      81.747  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    242296.053 ±       0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3.373 ±      21.342    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1209.634 ±    1156.180  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    242127.715 ±  237692.404    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      8183.061 ±     524.306   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1179.329 ±      75.839  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    226864.051 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         4.838 ±      20.339    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1081.950 ±    1425.037  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5    208433.790 ±  277660.512    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    156409.801 ±    6274.004   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1515.149 ±      61.240  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248.003 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.210 ±       0.983    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1483.144 ±    1157.722  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     14920.364 ±   11455.968    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      7657.127 ±     374.646   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1392.573 ±      68.262  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    286296.078 ±       0.207    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         5.116 ±      21.240    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1353.938 ±       6.710  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    278387.532 ±   13030.399    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                       128  thrpt    5      8452.521 ±     205.166   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                        128  thrpt    5      1171.158 ±      28.333  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    218083.347 ±      46.602    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         4.637 ±      19.371    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1212.189 ±    1159.766  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    225603.154 ±  214385.451    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     18203.453 ±     316.509   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       825.849 ±      13.855  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71414.037 ±      40.027    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.439 ±       5.786    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5       806.745 ±    1156.092  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     69731.619 ±   99364.859    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         5.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     20302.407 ±     597.505   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       860.167 ±      25.233  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     66696.021 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.029 ±       0.108  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         2.268 ±       8.380    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       810.314 ±    1162.741  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     62858.464 ±   90661.983    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    458565.888 ±    2395.756   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1039.302 ±       5.274  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.033 ±       0.176  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         0.114 ±       0.602    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5       942.658 ±    1419.710  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5      3235.694 ±    4866.613    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         4.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    483830.959 ±    1165.214   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     19151.202 ±     770.952   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       882.784 ±      35.945  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     72563.180 ±      27.195    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±       0.185  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         2.717 ±      15.043    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5       938.060 ±    1416.439  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     76958.510 ±  114276.915    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                      128  thrpt    5      7319.419 ±     159.649   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                       128  thrpt    5      1594.649 ±      35.251  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                  128  thrpt    5    342950.870 ±      40.621    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5        10.765 ±      31.586    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1617.861 ±    1415.785  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    348214.102 ±  310566.887    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     13048.987 ±     156.358   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1310.674 ±      16.297  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    158112.042 ±       0.076    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.029 ±       0.044  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         3.515 ±       5.297    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1343.327 ±       5.251  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    162052.166 ±    1794.390    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     13444.281 ±     493.877   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1230.596 ±      45.008  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    144088.241 ±       1.791    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         3.900 ±      19.514    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1217.541 ±    1163.017  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    142503.702 ±  135455.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    250141.932 ±   12026.949   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1446.554 ±      69.535  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104.002 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.210 ±       0.580    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1479.402 ±    1166.218  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      9322.452 ±    7664.572    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     12394.930 ±     250.488   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1551.261 ±      31.534  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    197016.050 ±       0.122    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         4.222 ±      15.363    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1489.193 ±    1163.169  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    189074.532 ±  145878.153    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                           128  thrpt    5     12931.647 ±     178.528   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1262.202 ±      16.656  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    153649.914 ±      39.252    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         4.051 ±      11.134    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1208.712 ±    1155.197  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    147083.486 ±  139905.034    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     28170.760 ±     371.511   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       971.978 ±      13.458  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     54312.015 ±       0.003    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.627 ±       8.728    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       939.110 ±    1414.870  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     52454.095 ±   78756.918    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     79731.395 ±     622.901   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1269.097 ±      10.347  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     25056.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.328 ±       1.322    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1353.213 ±       8.367  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     26716.790 ±     227.225    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    739570.607 ±    9811.827   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1014.816 ±      13.558  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.046 ±       0.164  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.097 ±       0.349    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1074.530 ±    1416.692  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      2285.789 ±    2999.089    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    775718.633 ±    5466.825   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     64811.131 ±    1905.199   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1397.569 ±      40.761  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     33944.006 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.050 ±       0.134  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.213 ±       3.266    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1488.809 ±    1165.745  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     36175.290 ±   28740.425    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                          128  thrpt    5     12515.411 ±     314.888   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5      1532.308 ±      37.862  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5    192746.509 ±      39.979    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.046 ±       0.088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         5.766 ±      11.098    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1478.879 ±    1152.564  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    185974.917 ±  143314.946    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     20399.048 ±    1019.716   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       737.605 ±      37.037  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     56920.021 ±       0.013    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.636 ±       5.391  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        50.203 ±     425.430    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       673.292 ±       4.795  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     51964.983 ±    2949.818    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     15980.700 ±     474.904   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       447.525 ±      13.335  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     44088.203 ±       1.517    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.025 ±       0.215  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.491 ±      21.448    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       473.979 ±    1066.956  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     46774.951 ±  105498.304    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5     92968.411 ±    1031.328   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       233.398 ±       2.592  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.010 ±       0.090  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.177 ±       1.525    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204.594 ±    1078.766  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3473.025 ±   18312.281    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     14780.628 ±     208.476   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5       933.226 ±      13.236  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     99392.252 ±       1.904    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3.102 ±       9.727    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       945.931 ±    1426.763  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    100814.805 ±  152919.555    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         5.000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                               128  thrpt    5     17640.263 ±     108.597   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       567.729 ±       3.756  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     50664.779 ±      46.519    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.568 ±       4.620  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5        50.764 ±     413.217    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       507.437 ±    1125.971  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     45309.731 ±  100547.529    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     59754.325 ±     730.116   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1065.552 ±      13.336  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     28072.007 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.548 ±       2.985    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       940.415 ±    1416.338  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     24771.227 ±   37254.588    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     79957.797 ±    4034.907   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1143.338 ±      57.676  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     22512.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.037 ±       0.104  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.740 ±       2.069    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1082.099 ±    1427.308  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     21323.849 ±   28312.745    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    239830.382 ±   10169.011   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       459.499 ±      19.543  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.545 ±       4.601  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3.546 ±      29.951    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       474.978 ±    1070.310  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      3111.440 ±    6973.002    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    316012.822 ±    1749.714   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     69050.981 ±     871.211   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1239.066 ±      15.647  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     28248.006 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.570 ±       2.002    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1205.331 ±    1154.017  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     27488.543 ±   26432.753    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                              128  thrpt    5     10224.118 ±      93.258   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1602.184 ±      15.128  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    246690.384 ±      40.126    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.042 ±       0.170  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         6.414 ±      26.190    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1483.231 ±    1159.665  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    228376.274 ±  178576.520    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    125875.011 ±    1507.781   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1823.247 ±      21.944  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     22800.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.624 ±       0.543    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1885.715 ±    1160.762  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     23586.338 ±   14635.540    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    672521.610 ±   36455.077   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       372.532 ±      20.226  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.506 ±       4.233  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.195 ±      10.010    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.242 ±    1219.297  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       791.217 ±    2854.982    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    379958.913 ±    2604.499   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       388.083 ±       2.713  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.215  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.104 ±       0.893    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       339.302 ±    1219.610  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1406.402 ±    5058.685    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    778319.359 ±   10803.507   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       268.962 ±       3.794  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.010 ±       0.090  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.021 ±       0.182    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       306.847 ±    1078.611  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       622.042 ±    2186.576    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     80567.474 ±    1984.493   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3453.393 ±      83.790  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     67472.005 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.096 ±       0.134  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.868 ±       2.600    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      3401.796 ±      12.380  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     66466.276 ±    1814.471    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        25.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        21.000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                128  thrpt    5    221783.944 ±   13337.087   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1400.909 ±      84.458  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9944.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.037 ±       0.154  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.264 ±       1.083    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1478.581 ±    1159.245  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     10487.953 ±    7964.774    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    291689.974 ±    8982.903   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1519.373 ±      47.024  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8200.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.071 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.382 ±       0.383    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1478.050 ±    1156.817  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      7974.507 ±    6160.230    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1503323.693 ±   18857.673   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       511.861 ±       6.425  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.506 ±       4.315  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.532 ±       4.538    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       505.992 ±    1121.966  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       530.537 ±    1176.822    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1298385.132 ±   65928.978   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       758.747 ±      38.776  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.176  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.035 ±       0.212    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       810.096 ±    1165.115  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       981.578 ±    1397.700    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1300598.712 ±    9831.074   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       442.822 ±       3.336  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.668 ±       5.653  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.809 ±       6.847    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       474.391 ±    1068.404  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       574.570 ±    1294.044    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1396749.069 ±    8812.113   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     38952.926 ±    2026.395   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1880.727 ±      97.448  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     76000.011 ±       0.002    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.042 ±       0.057  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.686 ±       2.351    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1881.459 ±    1145.878  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     76039.064 ±   46461.610    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                               128  thrpt    5     88123.043 ±    1806.325   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      2044.273 ±      42.402  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     36520.005 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.067 ±       0.088  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.191 ±       1.599    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2022.869 ±      20.035  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     36138.258 ±     625.546    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        13.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     36235.037 ±    1719.084   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       723.383 ±      34.243  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     31424.012 ±       0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.680 ±       5.724  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5        30.198 ±     254.234    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       807.171 ±    1155.234  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     35039.521 ±   49650.521    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         7.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     86464.586 ±    4723.317   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       909.599 ±      50.169  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     16560.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.037 ±       0.174  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.680 ±       3.137    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       945.707 ±    1424.923  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     17187.510 ±   25492.645    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    263684.370 ±   18031.003   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       857.557 ±      58.693  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.125 ±       0.583    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       940.646 ±    1419.438  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      5639.757 ±    8798.947    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     24715.691 ±    1694.371   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1161.135 ±      79.359  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73960.017 ±       0.003    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.788 ±       4.489    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1077.822 ±    1419.362  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     68758.711 ±   91635.889    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         7.000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                 128  thrpt    5     31433.874 ±     506.561   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       524.438 ±       8.589  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     26264.013 ±       0.002    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.681 ±       5.732  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        34.128 ±     287.189    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       506.528 ±    1123.451  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     25380.244 ±   56205.803    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     59773.083 ±     351.380   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       886.772 ±       5.062  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23352.007 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.766 ±       4.110    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       940.117 ±    1418.495  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     24748.837 ±   37242.239    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5     94854.980 ±    4453.696   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1299.140 ±      61.144  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560.004 ±       0.057    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.689 ±       2.086    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1218.008 ±    1163.906  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     20232.462 ±   19558.753    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    280068.716 ±    1469.110   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       892.302 ±       4.702  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.012 ±       0.107  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.070 ±       0.605    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       805.731 ±    1155.168  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4529.722 ±    6500.798    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    325804.230 ±   17088.327   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     72427.142 ±    1801.040   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1074.083 ±      26.949  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     23344.000 ±       0.089    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.631 ±       3.383    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1071.159 ±    1411.624  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     23255.339 ±   30363.888    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                128  thrpt    5      6481.071 ±     125.268   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1598.901 ±      30.819  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5    388353.791 ±      14.869    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.033 ±       0.134  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         8.090 ±      32.496    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1479.481 ±    1157.083  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    359341.857 ±  280694.502    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     21284.035 ±     517.969   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1108.427 ±      27.125  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     81984.019 ±       0.003    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.856 ±       7.795    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1074.250 ±    1415.437  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     79523.954 ±  105519.601    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     29353.428 ±      84.601   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1148.809 ±       3.660  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     61616.014 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.116 ±       5.267    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1081.888 ±    1426.103  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     58030.049 ±   76529.312    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    503157.362 ±    8988.671   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1309.135 ±      23.276  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.054 ±       0.146  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.169 ±       0.453    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1209.162 ±    1157.291  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3785.266 ±    3647.294    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     22169.828 ±     933.271   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1685.803 ±      70.164  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    119696.020 ±       0.011    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.046 ±       0.104  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.250 ±       7.379    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1625.584 ±    1428.615  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    115334.770 ±   99315.263    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                            128  thrpt    5     28847.150 ±    1053.811   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1301.634 ±      47.514  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     71032.014 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.054 ±       0.134  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.947 ±       7.248    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1343.267 ±       4.640  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     73309.668 ±    2875.101    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     71172.300 ±    2762.278   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1506.189 ±      58.797  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     33312.006 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.383 ±       2.522    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1478.016 ±    1165.314  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     32690.639 ±   25773.385    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    162569.619 ±    8611.741   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1231.880 ±      65.000  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     11928.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.405 ±       1.248    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1353.398 ±       6.721  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     13106.550 ±     677.617    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1322210.593 ±   53839.511   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1095.223 ±      44.642  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304.000 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.046 ±       0.243  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.055 ±       0.291    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1074.382 ±    1416.273  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1281.410 ±    1713.186    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1483780.053 ±   14118.305   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    147168.385 ±    1472.078   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1371.544 ±      13.575  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     14672.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.534 ±       1.556    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1353.018 ±       6.584  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     14473.912 ±     188.680    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                           128  thrpt    5     23477.732 ±     241.844   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5      1740.911 ±      17.848  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    116736.018 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.907 ±       4.489    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1750.315 ±    1428.017  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    117352.716 ±   95456.699    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     38140.116 ±    2137.690   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1368.880 ±      75.715  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56496.011 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.855 ±       4.010    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1353.831 ±       7.395  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     55884.981 ±    3377.291    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    736658.689 ±   39301.745   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1437.754 ±      77.229  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.178 ±       0.171    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1344.638 ±       6.264  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2873.515 ±     163.456    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     27336.954 ±     874.663   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1989.741 ±      64.182  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    114576.015 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.046 ±       0.104  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.635 ±       5.985    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1898.303 ±    1164.864  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    109353.731 ±   68042.594    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        12.000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                 128  thrpt    5     30646.215 ±     784.577   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1279.483 ±      33.116  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     65720.014 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.710 ±       6.243    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1343.423 ±       4.226  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     69006.848 ±    1889.752    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         8.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    359351.720 ±    2784.649   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       999.000 ±       7.764  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      4376.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.091 ±       0.609    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       946.324 ±    1426.332  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4146.725 ±    6268.371    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1673608.328 ±   86228.797   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       978.091 ±      50.334  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.028 ±       0.147    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       940.113 ±    1416.782  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       885.779 ±    1353.166    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1914819.739 ±   22588.640   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    221674.604 ±   11225.054   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1435.237 ±      72.964  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192.002 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.234 ±       1.167    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1353.687 ±       6.881  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      9614.149 ±     458.035    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                128  thrpt    5     34133.802 ±     902.042   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1759.697 ±      46.330  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     81152.012 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.054 ±       0.108  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.495 ±       4.936    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1750.489 ±    1423.949  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     80692.593 ±   64891.994    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     72645.499 ±     468.749   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1459.450 ±       9.873  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     31624.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.541 ±       1.902    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1473.987 ±    1149.461  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     31931.370 ±   24674.493    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     83561.852 ±     674.455   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       945.305 ±       7.935  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     17808.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.166  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.549 ±       3.132    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       944.396 ±    1420.208  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     17790.053 ±   26742.144    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    109054.973 ±     824.713   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1148.279 ±       8.682  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     16576.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.841 ±       2.507    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1205.446 ±    1153.482  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     17406.463 ±   16718.245    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     39501.649 ±    1047.471   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1963.609 ±      51.487  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     78248.010 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.994 ±       3.691    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1898.286 ±    1162.109  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     75681.395 ±   47147.335    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                               128  thrpt    5     77021.413 ±    2347.425   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1336.697 ±      40.931  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     27320.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.678 ±       2.450    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1339.919 ±       6.691  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     27387.031 ±     714.951    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    124232.853 ±    2577.543   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       549.332 ±      11.379  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      6960.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.858 ±       7.341  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        10.872 ±      92.984    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       505.384 ±    1120.248  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      6410.446 ±   14239.637    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    165967.478 ±    2470.614   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       246.269 ±       3.647  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204.569 ±    1078.635  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1942.567 ±   10242.614    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         2.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    749291.780 ±   11092.463   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       929.176 ±      13.461  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.046 ±       0.243  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.096 ±       0.511    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       937.634 ±    1410.142  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1970.268 ±    2969.206    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    726193.122 ±    9527.387   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    202900.688 ±   16475.339   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       663.032 ±      53.852  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.967 ±       8.149  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         7.464 ±      62.860    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       669.555 ±       7.302  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      5196.365 ±     403.586    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                              128  thrpt    5     17172.218 ±     285.918   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1652.945 ±      27.557  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    151527.479 ±      41.927    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         4.965 ±       6.658    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1610.329 ±    1413.774  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    147671.355 ±  130730.403    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    132007.694 ±    1610.661   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1625.601 ±      18.703  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19384.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.496 ±       1.786    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1747.818 ±    1417.739  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     20837.554 ±   16823.513    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    175666.533 ±     714.627   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       933.728 ±       3.812  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±       0.209  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.299 ±       1.875    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       945.564 ±    1423.101  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      8475.912 ±   12779.493    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    480555.006 ±    9681.944   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       932.895 ±      18.758  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±       0.176  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.109 ±       0.575    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       940.092 ±    1416.386  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3079.619 ±    4640.211    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     67867.302 ±    2585.213   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2864.624 ±     109.336  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     66448.006 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.067 ±       0.104  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.547 ±       2.438    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2854.374 ±    1177.031  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     66176.928 ±   25390.156    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        21.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                           128  thrpt    5    133162.955 ±    1895.916   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1499.053 ±      20.854  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     17720.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±       0.098  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.492 ±       1.162    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1479.168 ±    1160.849  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     17484.408 ±   13701.413    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    172328.780 ±    1796.910   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       590.242 ±       6.094  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      5392.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.725 ±       6.022  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         6.616 ±      54.916    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       640.638 ±     278.266  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      5853.500 ±    2581.525    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    294171.844 ±    4304.078   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       289.992 ±       4.169  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.022 ±       0.193    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       306.843 ±    1078.596  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1645.918 ±    5785.657    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         4.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1116223.981 ±   53889.203   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       828.135 ±      39.899  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.023 ±       0.094    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       806.426 ±    1157.084  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      1136.694 ±    1616.785    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         5.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1187507.375 ±    7194.134   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    305674.012 ±   11103.956   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       834.111 ±      30.103  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.037 ±       0.200  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.192 ±       1.023    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5       944.959 ±    1423.532  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4860.838 ±    7242.758    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                          128  thrpt    5     28709.948 ±     407.178   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5      1706.730 ±      24.940  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     93576.014 ±       0.002    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.054 ±       0.134  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.971 ±       7.362    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1749.621 ±    1419.188  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     95977.695 ±   78846.895    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5      5221.626 ±      32.441   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1028.327 ±       6.363  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    310024.081 ±       0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         3.761 ±      21.572    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1063.912 ±    1403.753  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    320882.807 ±  424803.427    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      5294.268 ±      74.625   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       983.524 ±      13.722  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    292456.079 ±       0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         7.442 ±      31.210    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1076.106 ±    1418.231  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5    320198.972 ±  424334.452    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         7.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     39191.639 ±    1048.995   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       643.270 ±      17.166  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     25840.011 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         1.117 ±       9.531  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5        44.605 ±     380.501    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       534.320 ±    1150.191  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     21442.219 ±   46157.724    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      4542.252 ±     172.701   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1157.189 ±      44.520  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    401024.093 ±       0.018    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.435 ±      12.358    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1212.020 ±    1157.674  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    420446.982 ±  406504.153    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                        128  thrpt    5      4996.502 ±      44.918   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5       959.141 ±       9.294  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    302160.085 ±       0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         6.548 ±      30.882    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5       931.025 ±    1402.855  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5    293116.244 ±  439306.120    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         5.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     14409.475 ±     160.787   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       807.394 ±       9.659  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     88197.861 ±      53.764    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         2.279 ±      15.213    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       797.350 ±    1142.047  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     87149.614 ±  125695.305    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         4.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     16543.558 ±     503.359   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       861.148 ±      26.058  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     81944.027 ±       0.457    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         2.380 ±       9.945    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       806.808 ±    1157.210  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     76808.353 ±  110742.202    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    251897.444 ±   11172.425   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       912.658 ±      40.354  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.208 ±       0.567    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       931.280 ±    1402.804  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      5812.378 ±    8648.796    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    301388.946 ±    2135.725   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     15527.772 ±     140.845   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       886.135 ±       7.918  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     89839.974 ±      30.959    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.037 ±       0.143  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         3.792 ±      14.501    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5       929.256 ±    1400.843  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     94204.433 ±  141917.126    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      4940.733 ±      27.829   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5      1595.795 ±       9.221  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    508432.084 ±       0.012    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5        15.920 ±      46.390    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1601.137 ±    1418.369  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    510222.245 ±  453885.322    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         9.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5    940336.690 ±    4386.042   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        38.233 ±       0.184  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64.000 ±       0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     73535.775 ±    2343.011   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3317.186 ±     105.917  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     71008.006 ±       0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.096 ±       0.146  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         2.047 ±       3.091    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      3400.075 ±      15.316  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     72786.697 ±    2547.453    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        25.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        20.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1123401.153 ±    8459.776   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       645.135 ±       5.063  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.062 ±       0.330  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.087 ±       0.463    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       674.349 ±       2.530  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5       944.941 ±       9.985    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         4.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5   1384499.368 ±   90661.818   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       386.992 ±      25.356  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       440.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.663 ±       5.679  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.737 ±       6.318    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       441.824 ±     989.157  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5       498.597 ±    1109.894    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1468116.880 ±    6164.400   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        14.921 ±       0.063  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     45345.313 ±    1218.888   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1910.647 ±      51.622  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66328.009 ±       0.001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.067 ±       0.132  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         2.309 ±       4.538    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1898.372 ±    1173.656  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     65924.006 ±   41247.558    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        14.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        12.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    746897.087 ±   12508.522   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2372.200 ±      40.555  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5000.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.029 ±       0.044  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.061 ±       0.092    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      2295.016 ±    1424.376  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5      4836.733 ±    2982.166    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        17.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        14.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   5535994.026 ±   95396.932   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       337.616 ±       5.951  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.005 ±       0.042  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0.002 ±       0.012    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       306.860 ±    1078.655  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        87.464 ±     307.451    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5    957758.007 ±   35958.676   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1187.643 ±      44.320  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.050 ±       0.146  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5         0.082 ±       0.238    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5      1216.771 ±    1163.529  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5      2001.937 ±    1938.573    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   8059248.128 ±   38984.098   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       368.620 ±       1.884  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         0.001 ±       0.007    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       306.874 ±    1078.706  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        59.959 ±     210.766    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    332955.844 ±    7458.047   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1866.489 ±      42.612  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8824.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.058 ±       0.067  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.275 ±       0.314    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1897.289 ±    1166.708  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5      8969.411 ±    5510.033    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        14.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        11.000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                N/A  thrpt    5    722174.654 ±    4711.341   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1211.031 ±       7.995  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      2640.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.050 ±       0.146  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.109 ±       0.318    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1208.620 ±    1155.389  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5      2635.195 ±    2524.509    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      3840.057 ±     159.600   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      1813.325 ±      74.720  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    743312.110 ±       0.016    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.087 ±       0.104  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5        35.860 ±      43.195    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      1763.465 ±    1429.028  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5    723494.295 ±  598321.989    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        13.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        13.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5182.264 ±     144.507   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2141.653 ±      59.285  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    650536.081 ±       0.015    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.079 ±       0.036  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        24.024 ±      11.027    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      2169.118 ±    1177.611  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    658764.940 ±  352338.667    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        16.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        14.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     43264.047 ±    1673.571   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       719.605 ±      27.947  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     26184.010 ±       0.002    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.568 ±       4.664  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5        21.012 ±     172.842    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       809.259 ±    1156.703  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5     29435.849 ±   41853.382    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4155.453 ±      46.444   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       764.002 ±       8.431  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    289432.101 ±       0.017    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.021 ±       0.113  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         7.885 ±      42.962    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5       807.847 ±    1159.565  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5    305950.106 ±  437476.460    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         6.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      4837.704 ±      23.262   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       485.188 ±       2.479  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    157877.421 ±       0.878    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.183 ±       1.490  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5        59.629 ±     484.444    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       506.354 ±    1123.020  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5    164817.302 ±  365395.754    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         5.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      6422.440 ±     328.469   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       171.582 ±       8.723  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     42056.065 ±       0.009    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       204.583 ±    1078.705  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5     50680.741 ±  267262.876    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         4.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      6552.780 ±      58.373   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       127.182 ±       1.130  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     30552.063 ±       0.008    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5       102.297 ±     880.808  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5     24645.949 ±  212209.050    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         2.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      7813.040 ±      74.684   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      1819.341 ±      18.598  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    366552.951 ±      47.162    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.018 ±       0.074  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         3.693 ±      14.918    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1748.813 ±    1414.120  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    352482.375 ±  287815.813    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                            N/A  thrpt    5     11183.030 ±      60.924   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       257.750 ±       1.353  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5     36280.039 ±       0.020    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         1.173 ±      10.104    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       204.606 ±    1078.829  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5     28834.315 ±  152035.024    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         5.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     14869.200 ±     920.930   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       377.772 ±      23.325  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     39992.029 ±       0.011    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.108 ±       0.932  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        11.382 ±      97.999    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       339.295 ±    1219.594  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     35908.300 ±  128876.044    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         4.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     23033.335 ±     257.165   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       431.573 ±       4.868  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     29496.018 ±       0.002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.684 ±       5.848  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        46.968 ±     401.361    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       339.493 ±    1220.603  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5     23239.975 ±   83616.562    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2452.067 ±      26.115   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1557.553 ±      16.987  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    999800.172 ±       0.028    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.033 ±       0.201  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        21.347 ±     128.889    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1488.225 ±    1161.914  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5    955568.698 ±  753884.343    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        11.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                N/A  thrpt    5      8107.686 ±     265.397   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5       995.368 ±      32.336  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5    193259.335 ±      46.615    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.029 ±       0.091  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         5.662 ±      17.711    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1073.929 ±    1416.637  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5    208793.068 ±  278455.985    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      7857.108 ±     266.386   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1512.986 ±      51.605  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    303121.061 ±      47.662    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.054 ±       0.176  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        10.855 ±      35.366    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1611.623 ±    1417.566  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    322730.075 ±  280336.863    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     52595.149 ±    1915.563   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       491.549 ±      17.990  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712.008 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.580 ±       4.981  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        17.527 ±     150.504    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       371.865 ±    1331.904  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     11181.311 ±   40081.795    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     39304.805 ±    1773.140   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       585.034 ±      26.259  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431.834 ±       0.454    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.150 ±       1.159  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         6.007 ±      46.349    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       538.995 ±    1160.228  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5     21627.853 ±   46570.393    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         4.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     73220.091 ±    2902.748   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       550.341 ±      21.832  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5         0.698 ±       5.886  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        15.017 ±     126.721    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       506.563 ±    1123.561  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5     10919.497 ±   24211.317    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5     98757.697 ±     619.128   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      6198.691 ±      73.426   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      1825.708 ±      21.786  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    463631.846 ±       2.013    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.025 ±       0.104  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         6.340 ±      26.572    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5      1760.373 ±    1428.594  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5    447030.444 ±  362565.100    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                               N/A  thrpt    5      2688.489 ±     136.423   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                N/A  thrpt    5      1441.590 ±      72.017  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                           N/A  thrpt    5    843968.156 ±       0.022    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.058 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        34.137 ±      21.500    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1477.391 ±    1148.934  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5    864252.225 ±  649593.508    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                     N/A  thrpt    5        11.000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                      N/A  thrpt    5         8.000                    ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   5278975.325 ±  150964.847   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3272.943 ±      94.292  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.058 ±       0.067  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0.017 ±       0.020    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      3254.331 ±    1176.922  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5       970.863 ±     368.216    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        24.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  41103318.580 ± 6399750.692   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       417.813 ±      65.196  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16.000 ±       0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.510 ±       4.394  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.019 ±       0.166    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5       339.279 ±    1219.496  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        12.790 ±      46.017    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         3.000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         7.000                    ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   9018545.719 ±   67837.332   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3391.398 ±      25.600  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.075 ±       0.072  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.013 ±       0.012    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      3397.676 ±      21.945  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5       593.099 ±       7.234    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        25.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        17.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  52552738.375 ±  149471.629   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  35727329.085 ± 1165023.402   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1270.932 ±      41.591  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5        56.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.050 ±       0.122  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.002 ±       0.005    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1209.178 ±    1155.836  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        53.341 ±      51.718    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         7.000                    ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   7435668.630 ±   92742.360   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      3590.191 ±      42.277  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.092 ±       0.108  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.019 ±       0.023    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      3661.000 ±    1440.297  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5       774.987 ±     304.586    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.readUPickle                                                                          N/A  thrpt    5  10220756.885 ±   27678.054   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                           N/A  thrpt    5      4310.941 ±      12.545  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                      N/A  thrpt    5       664.000 ±       0.001    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0.079 ±       0.067  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5         0.012 ±       0.010    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5      4351.180 ±    1421.024  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       670.172 ±     217.341    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                N/A  thrpt    5        32.000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                 N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  21036667.434 ± 1121672.321   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1924.475 ±     102.321  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       144.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.071 ±       0.108  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.005 ±       0.008    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      1884.900 ±    1153.726  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5       140.952 ±      84.115    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        14.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        10.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  58082598.944 ±  423706.550   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1771.179 ±      13.456  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48.000 ±       0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.083 ±       0.098  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.002 ±       0.003    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1751.364 ±    1417.031  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        47.475 ±      38.661    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5        10.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  13465599.511 ±  744376.410   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      2668.780 ±     147.740  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.071 ±       0.091  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.008 ±       0.011    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      2717.574 ±      15.142  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       317.761 ±      18.953    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        20.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  46732274.350 ±  914575.904   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       949.998 ±      18.926  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.037 ±       0.200  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.001 ±       0.007    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5       940.148 ±    1414.968  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        31.703 ±      48.147    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         5.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  52112105.541 ±  279193.420   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  40875883.057 ±  275968.072   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2077.158 ±      13.631  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        80.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.071 ±       0.122  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.003 ±       0.005    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5      2024.273 ±      18.462  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        77.964 ±       1.166    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5        11.000                    ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2526842.500 ±   80299.573   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2067.345 ±      65.378  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1288.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.058 ±       0.132  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.036 ±       0.082    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      2153.746 ±    1171.042  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      1341.930 ±     731.605    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5        13.000                    ms
[info] IntBenchmark.writeUPickle                                                                         N/A  thrpt    5   1820551.988 ±   29239.447   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                          N/A  thrpt    5     10094.007 ±     163.585  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                     N/A  thrpt    5      8728.000 ±       0.001    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.104 ±       0.113  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.090 ±       0.098    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      9946.177 ±    1440.732  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5      8600.523 ±    1281.281    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                               N/A  thrpt    5        74.000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                N/A  thrpt    5        58.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    158989.664 ±    2686.503   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      2915.784 ±      48.721  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.075 ±       0.091  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.743 ±       0.915    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      2980.533 ±    1438.743  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     29502.978 ±   13822.126    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        22.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        19.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     24343.086 ±     366.572   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1892.912 ±      28.579  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122400.017 ±       0.003    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.046 ±       0.132  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.961 ±       8.506    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1897.883 ±    1166.132  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    122734.765 ±   75712.404    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        14.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    122776.652 ±    5727.830   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1363.960 ±      63.504  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     17488.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.071 ±       0.044  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.908 ±       0.596    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1353.060 ±       6.282  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     17350.295 ±     818.336    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         8.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    492535.414 ±    7542.131   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1018.697 ±      15.690  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±       0.122  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.106 ±       0.388    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1074.390 ±    1416.577  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3431.933 ±    4501.907    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    528908.583 ±   10281.534   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       516.069 ±      10.134  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.676 ±       5.685  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         2.015 ±      16.950    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5       506.557 ±    1123.509  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      1508.886 ±    3340.741    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         4.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         6.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     20572.931 ±    1201.067   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       449.901 ±      26.033  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     34424.180 ±       1.371    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.067 ±       0.574  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         5.236 ±      45.084    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       371.758 ±    1331.460  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     28637.164 ±  102783.717    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         3.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    390886.812 ±    4613.667   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2652.310 ±      31.502  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10680.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.201 ±       0.368    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2706.539 ±      30.683  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     10898.492 ±     227.693    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        14.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    444100.616 ±    2199.741   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1171.355 ±       5.896  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4152.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.166  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.103 ±       0.590    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1081.638 ±    1425.314  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3834.773 ±    5061.826    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    430471.392 ±    4509.224   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       848.797 ±       9.010  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3104.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.033 ±       0.134  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.122 ±       0.490    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       940.715 ±    1419.338  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3441.609 ±    5210.891    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    110372.515 ±    3203.349   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3995.062 ±     115.866  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56984.004 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.079 ±       0.088  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.126 ±       1.229    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      4081.866 ±      19.351  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     58225.129 ±    1918.058    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        30.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        22.000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    571064.811 ±   25248.211   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2492.883 ±     110.272  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      6872.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.067 ±       0.088  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.183 ±       0.237    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2568.926 ±    1164.687  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      7075.249 ±    2968.091    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        13.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    326526.463 ±    2274.558   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       497.811 ±       3.321  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2400.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.715 ±       6.027  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         3.449 ±      29.056    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       474.150 ±    1067.492  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      2285.764 ±    5146.495    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    701522.220 ±   31590.578   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       513.388 ±      23.013  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1152.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.062 ±       0.453  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.141 ±       1.024    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       506.600 ±    1123.598  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1135.728 ±    2515.637    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2003441.215 ±   22380.943   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       926.486 ±      10.606  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728.000 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.042 ±       0.227  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.033 ±       0.178    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       940.117 ±    1415.970  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       738.799 ±    1113.841    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2361105.383 ±   45294.796   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    382123.347 ±   15235.922   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       549.568 ±      21.994  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.821 ±       6.982  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         3.380 ±      28.738    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       505.744 ±    1121.269  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2083.469 ±    4599.407    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    112409.346 ±     914.276   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      2074.668 ±      16.700  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     29056.004 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.062 ±       0.113  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.874 ±       1.588    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2022.767 ±      20.167  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     28329.228 ±     360.867    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5        15.000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     51410.579 ±    1217.767   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1732.172 ±      40.729  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     53040.008 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±       0.146  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.021 ±       4.470    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1615.369 ±    1419.937  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     49449.701 ±   43149.491    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     69836.268 ±    3976.390   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1255.547 ±      71.405  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28304.006 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±       0.134  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.745 ±       3.004    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1217.251 ±    1162.491  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     27364.157 ±   25157.567    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5     99207.514 ±    2547.305   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1521.040 ±      39.101  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24136.004 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.025 ±       0.088  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.396 ±       1.387    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1479.294 ±    1154.113  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     23479.477 ±   18474.012    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        10.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     18135.566 ±     225.148   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1263.950 ±      15.617  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109712.024 ±       0.013    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.054 ±       0.091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         4.694 ±       7.911    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1352.268 ±       6.925  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    117378.903 ±    1324.801    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         7.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    122377.183 ±    1070.156   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1126.820 ±       9.782  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     14496.003 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.050 ±       0.134  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.643 ±       1.726    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1216.381 ±    1164.194  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     15653.551 ±   15046.015    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         7.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    452358.192 ±   54011.561   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       498.828 ±      59.484  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.671 ±       5.776  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         2.423 ±      20.865    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       474.399 ±    1068.412  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1654.158 ±    3799.309    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         8.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    493534.805 ±    2523.822   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5.016 ±       0.026  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     21050.195 ±      60.621   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       401.803 ±       1.173  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30048.177 ±       1.347    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.075 ±       0.515  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         5.603 ±      38.521    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5       473.999 ±    1067.037  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     35449.245 ±   79777.220    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         5.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2250073.839 ±   63001.529   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3087.271 ±      86.001  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2160.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.062 ±       0.080  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.044 ±       0.056    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      3115.756 ±    1426.145  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5      2180.076 ±    1001.589    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        23.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    843555.797 ±   37291.859   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       535.881 ±      23.658  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5      1000.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.514 ±       4.284  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         0.967 ±       8.060    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       506.028 ±    1122.031  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5       941.635 ±    2083.069    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    327112.986 ±    6449.565   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       621.702 ±      11.913  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      2992.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5         0.062 ±       0.372  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5         0.299 ±       1.780    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       539.265 ±    1160.810  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5      2597.852 ±    5592.357    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         4.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    784105.223 ±   45177.374   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       589.746 ±      34.168  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1184.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5         0.665 ±       5.469  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5         1.342 ±      11.034    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5       641.177 ±     279.511  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5      1286.806 ±     541.603    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         8.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4360286.552 ±  187952.209   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      1396.009 ±      60.104  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       504.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5         0.050 ±       0.122  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5         0.018 ±       0.044    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5      1479.568 ±    1160.198  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5       533.905 ±     409.889    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   9108985.338 ±  415690.040   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       740.615 ±      34.094  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       128.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5         0.668 ±       5.619  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5         0.117 ±       0.986    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5       807.621 ±    1165.356  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5       139.950 ±     208.294    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         6.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    194537.886 ±    9362.692   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1312.857 ±      63.112  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     10624.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.021 ±       0.080  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.168 ±       0.649    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5      1352.479 ±       6.567  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     10946.117 ±     570.087    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                              N/A  thrpt    5    315994.442 ±    5386.500   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                               N/A  thrpt    5       624.686 ±      10.564  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                          N/A  thrpt    5      3112.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.698 ±       5.777  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         3.472 ±      28.715    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       640.952 ±     278.924  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5      3193.693 ±    1412.547    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                    N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                     N/A  thrpt    5         7.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5    939665.568 ±   18231.967   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        52.530 ±       0.998  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       102.321 ±     881.010  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       172.838 ±    1488.188    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         2.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     64125.531 ±     314.330   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2978.471 ±      14.874  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     73120.006 ±       0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.083 ±       0.127  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.044 ±       3.114    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2990.442 ±    1423.577  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     73419.158 ±   35158.815    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        22.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        20.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1061363.675 ±   26192.400   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       609.506 ±      14.681  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.062 ±       0.372  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.092 ±       0.549    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       674.249 ±       2.372  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1000.056 ±      24.047    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5    690717.323 ±    9847.750   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       193.054 ±       2.762  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440.001 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204.576 ±    1078.668  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       468.145 ±    2468.393    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         4.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    928574.458 ±    2626.591   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         9.438 ±       0.026  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     46128.450 ±     918.964   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1951.973 ±      38.485  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66616.009 ±       0.001    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.054 ±       0.134  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.845 ±       4.564    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1898.528 ±    1166.812  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     64809.537 ±   40220.276    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        14.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    240344.194 ±   10052.820   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       940.465 ±      39.273  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160.002 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0.021 ±       0.113  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0.136 ±       0.738    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5       940.104 ±    1415.683  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5      6155.461 ±    9238.642    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         6.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     19123.554 ±     496.207   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1043.964 ±      26.863  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85936.024 ±       0.010    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.042 ±       0.160  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         3.437 ±      13.227    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1081.267 ±    1427.333  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     89132.458 ±  119012.772    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5         7.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    138907.297 ±    5847.779   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1697.000 ±      71.732  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     19232.003 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0.042 ±       0.113  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0.471 ±       1.275    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5      1761.047 ±    1428.937  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5     19962.751 ±   16283.344    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        13.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        10.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    352057.629 ±   14944.832   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1676.493 ±      70.502  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.071 ±       0.122  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0.316 ±       0.533    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5      1749.952 ±    1419.469  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      7822.948 ±    6307.612    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        13.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        11.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    429905.450 ±   10475.991   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1472.677 ±      34.965  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5         0.062 ±       0.080  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5         0.229 ±       0.292    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5      1479.353 ±    1161.229  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5      5415.179 ±    4210.361    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        11.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         8.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     19869.647 ±     158.129   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       498.527 ±       4.026  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     39496.050 ±       0.250    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.075 ±       0.601  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         5.917 ±      47.471    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5       506.631 ±    1123.756  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5     40137.044 ±   88986.174    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         4.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         5.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     78922.121 ±    4180.063   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1631.700 ±      85.985  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     32544.005 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.037 ±       0.088  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.745 ±       1.757    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1614.789 ±    1418.534  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     32216.430 ±   28444.801    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5        11.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    129952.518 ±     733.870   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       642.615 ±       3.798  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7784.003 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.058 ±       0.332  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0.707 ±       4.035    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5       674.412 ±       2.721  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      8169.172 ±      54.847    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         5.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    195571.209 ±    1901.687   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5       805.075 ±       8.197  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480.002 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5         0.025 ±       0.088  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5         0.201 ±       0.704    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5       806.320 ±    1154.108  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5      6486.830 ±    9227.008    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         5.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     18524.033 ±     203.013   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1060.335 ±      12.015  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90104.024 ±       0.009    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.025 ±       0.104  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         2.122 ±       8.867    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1080.964 ±    1426.945  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     91866.261 ±  121370.095    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         7.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    129328.360 ±    4933.278   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1301.297 ±      49.754  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     15840.003 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5         0.033 ±       0.201  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5         0.403 ±       2.433    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5      1217.029 ±    1166.732  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5     14821.214 ±   14290.934    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         7.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    516842.791 ±   20210.838   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       575.215 ±      22.328  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5         0.674 ±       5.712  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5         2.047 ±      17.352    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5       640.907 ±     278.907  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5      1953.858 ±     908.368    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         8.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    568672.694 ±    2570.780   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        11.560 ±       0.051  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     21168.591 ±    1623.290   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5       433.854 ±      33.274  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32264.181 ±       1.393    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.054 ±       0.466  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         3.993 ±      34.383    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5       474.005 ±    1067.013  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     35297.430 ±   79017.256    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         4.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         5.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     74751.704 ±     655.832   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1307.194 ±      11.221  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     27528.006 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.042 ±       0.160  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.878 ±       3.382    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1343.385 ±       4.212  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     28290.256 ±     218.757    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    143064.844 ±     934.776   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       611.451 ±       4.239  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6728.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.062 ±       0.409  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.688 ±       4.505    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       539.286 ±    1160.854  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      5936.796 ±   12779.488    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    212240.472 ±    5162.947   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       756.035 ±      18.621  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.093 ±       0.536    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       672.414 ±       5.076  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      4987.945 ±     158.239    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     41664.777 ±    1855.371   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1726.812 ±      77.341  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65248.010 ±       0.002    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.029 ±       0.122  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.102 ±       4.581    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1627.037 ±    1429.756  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     61581.170 ±   56277.175    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                             128  thrpt    5    122972.273 ±    1987.984   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1139.266 ±      18.293  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     14584.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.029 ±       0.091  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.373 ±       1.166    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1208.897 ±    1157.246  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     15481.891 ±   14897.656    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9.000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    264025.089 ±    4163.478   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1242.499 ±      18.903  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      7408.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.025 ±       0.132  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.150 ±       0.790    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1208.036 ±    1156.266  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      7206.147 ±    6940.374    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    524127.073 ±   27712.550   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       420.837 ±      22.354  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.071 ±       0.609  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.210 ±       1.810    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       474.017 ±    1067.115  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1416.909 ±    3168.629    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    583654.663 ±   26623.553   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       308.463 ±      14.058  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       832.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       306.866 ±    1078.677  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       823.231 ±    2894.171    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    698333.075 ±   12496.163   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     34250.749 ±     486.493   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1773.976 ±      25.522  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     81536.012 ±       0.002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.075 ±       0.108  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.441 ±       4.915    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1880.185 ±    1157.793  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     86440.347 ±   53742.984    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                            128  thrpt    5     88970.802 ±    2965.039   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      2023.028 ±      67.592  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     35792.005 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.054 ±       0.091  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.957 ±       1.605    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      2023.082 ±      19.468  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     35795.455 ±    1417.003    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5        15.000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] NestedStructsBenchmark.readCirce                                                                  128  thrpt    5     61592.729 ±    1276.468   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2788.138 ±      57.006  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     71264.007 ±       0.001    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.092 ±       0.108  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2.343 ±       2.768    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2706.886 ±      28.727  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     69188.905 ±    1666.161    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        20.000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        17.000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                           128  thrpt    5    126529.157 ±    3935.118   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1631.223 ±      50.732  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     20296.003 ±       0.001    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.075 ±       0.176  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.929 ±       2.175    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1625.452 ±    1428.932  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     20216.877 ±   17595.363    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                          128  thrpt    5    519953.986 ±    4817.465   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1358.312 ±      12.005  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4112.001 ±       0.001    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.037 ±       0.132  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.113 ±       0.399    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1344.213 ±       5.963  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4069.335 ±      34.725    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        10.000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                               128  thrpt    5     16572.829 ±     246.260   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2143.431 ±      31.677  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    203600.026 ±       0.011    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.050 ±       0.184  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         4.734 ±      17.453    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2170.446 ±    1173.718  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5    206207.473 ±  113112.540    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        16.000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        14.000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                 128  thrpt    5     41151.609 ±     610.753   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      2242.271 ±      33.584  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     85776.010 ±       0.002    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.079 ±       0.215  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         3.029 ±       8.256    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2292.421 ±    1414.527  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     87696.807 ±   54165.962    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        17.000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        13.000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                          128  thrpt    5    228174.570 ±   22654.374   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1060.912 ±     105.463  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      7320.002 ±       0.001    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.134  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.204 ±       0.940    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1080.556 ±    1424.380  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      7498.794 ±   10323.319    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1141373.214 ±    9491.269   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       574.237 ±       4.780  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       792.000 ±       0.001    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.674 ±       5.666  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.931 ±       7.831    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       506.688 ±    1123.829  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       699.159 ±    1552.141    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1169714.093 ±    6854.418   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻³                  B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                              128  thrpt    5     33197.639 ±     241.297   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1777.996 ±      12.701  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     84312.012 ±       0.002    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.046 ±       0.174  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.172 ±       8.251    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1761.255 ±    1432.330  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     83515.301 ±   67860.548    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        13.000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    680318.492 ±   25733.695   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2077.726 ±      78.311  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4808.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.054 ±       0.072  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.125 ±       0.168    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      2021.578 ±      19.945  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      4678.453 ±     193.651    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        11.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1555962.763 ±   25413.857   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1178.191 ±      19.025  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.050 ±       0.146  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0.051 ±       0.147    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5      1216.515 ±    1164.405  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5      1231.432 ±    1186.503    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   7358310.593 ±   85474.003   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       224.377 ±       2.544  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.011 ±       0.076  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.002 ±       0.016    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       204.604 ±    1078.816  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5        43.872 ±     231.324    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         4.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    234226.681 ±    7862.668   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1659.402 ±      56.208  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     11152.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.058 ±       0.154  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.393 ±       1.044    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1624.916 ±    1425.841  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5     10913.171 ±    9409.766    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        12.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        11.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5    937617.489 ±   45278.589   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1400.925 ±      67.733  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2352.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.050 ±       0.122  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.084 ±       0.206    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1476.853 ±    1154.643  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      2478.412 ±    1900.279    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        11.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2328558.751 ±   35240.877   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       958.664 ±      14.726  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.021 ±       0.098  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.014 ±       0.067    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       945.171 ±    1422.321  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5       639.651 ±     972.169    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         7.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   5742833.305 ±  207750.446   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       642.042 ±      23.210  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.677 ±       5.692  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0.184 ±       1.552    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       538.578 ±    1159.340  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       147.831 ±     318.269    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         5.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   5927256.121 ±   45183.107   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       361.460 ±       2.710  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5         0.012 ±       0.105  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5         0.003 ±       0.028    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5       306.843 ±    1078.595  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        81.400 ±     286.131    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    334502.630 ±   10747.833   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      1703.244 ±      54.757  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8016.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.050 ±       0.091  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.235 ±       0.429    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1760.578 ±    1427.529  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      8295.568 ±    6916.954    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5        10.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     68868.552 ±    2634.313   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1968.453 ±      75.619  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     44992.006 ±       0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.050 ±       0.122  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         1.143 ±       2.781    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      2021.932 ±      20.116  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     46218.517 ±    2049.679    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        15.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        12.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    109549.405 ±    1083.600   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1686.763 ±      16.641  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24240.004 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.046 ±       0.174  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.657 ±       2.494    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1761.471 ±    1428.337  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     25320.702 ±   20673.231    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    165061.259 ±    3263.574   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2424.127 ±      48.391  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120.003 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.087 ±       0.067  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.833 ±       0.631    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2433.384 ±    1439.968  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     23204.301 ±   13611.549    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        18.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     60383.364 ±     170.465   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3174.271 ±       8.803  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     82760.007 ±       0.001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.067 ±       0.104  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.736 ±       2.723    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      3128.318 ±    1430.977  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     81556.524 ±   37097.607    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        20.000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                    128  thrpt    5     80274.591 ±    4140.795   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1636.737 ±      84.888  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5     32096.005 ±       0.001    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.033 ±       0.108  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.652 ±       2.091    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1614.989 ±    1422.940  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     31641.551 ±   27195.197    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        12.000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    144420.277 ±   15291.177   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5       686.988 ±      72.757  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      7488.003 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.723 ±       6.134  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         8.108 ±      68.862    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5       672.496 ±       5.706  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5      7334.644 ±     805.862    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         5.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         6.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    571493.494 ±   19982.649   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       493.716 ±      17.407  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.071 ±       0.565  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.195 ±       1.556    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506.611 ±    1123.686  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1396.818 ±    3087.074    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         4.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    530984.667 ±   16865.459   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       286.068 ±       9.107  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.005 ±       0.040  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.014 ±       0.119    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       306.895 ±    1078.780  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       911.611 ±    3204.769    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    613378.082 ±   10710.363   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         6.234 ±       0.108  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34032.914 ±     360.361   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1756.560 ±      17.962  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     81248.012 ±       0.002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.029 ±       0.122  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         1.351 ±       5.639    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1745.210 ±    1407.355  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     80746.883 ±   65596.482    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5     87982.089 ±    1854.178   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      2004.814 ±      42.149  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     35872.005 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.062 ±       0.080  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.116 ±       1.420    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      2021.736 ±      20.354  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     36175.705 ±     872.708    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5        15.000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   5224347.262 ±   47455.770   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3849.630 ±      35.335  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.067 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.020 ±       0.040    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      3804.145 ±    1444.540  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1146.298 ±     435.377    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        28.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   7605339.797 ±   83288.007   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       811.647 ±       8.899  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.021 ±       0.098  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.004 ±       0.020    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5       806.564 ±    1156.584  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       167.078 ±     241.902    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   4729181.113 ±   44690.093   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2451.506 ±      24.047  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       816.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.062 ±       0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.021 ±       0.038    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      2441.324 ±    1439.965  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       812.817 ±     485.331    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   8277012.594 ±  113846.201   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       883.218 ±      12.584  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±       0.184  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.006 ±       0.035    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       940.835 ±    1419.007  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       179.154 ±     272.621    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         4.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   5456413.453 ±  119849.576   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2939.120 ±      63.913  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       848.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.079 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.023 ±       0.038    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2976.471 ±    1438.783  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       858.925 ±     420.703    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        22.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                           128  thrpt    5   4332713.158 ±  117554.584   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      2333.891 ±      63.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5       848.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.062 ±       0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.023 ±       0.042    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      2296.601 ±    1411.138  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       834.878 ±     525.646    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   3306717.078 ±   61526.429   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       789.770 ±      15.027  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       376.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.006 ±       0.034    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       672.041 ±       3.901  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       319.959 ±       7.762    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   7177987.307 ±   41802.683   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       693.072 ±       3.991  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.514 ±       4.332  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.113 ±       0.951    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5       672.475 ±       2.820  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       147.483 ±       0.727    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   3499166.100 ±  137059.214   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1084.670 ±      42.527  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.042 ±       0.127  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.019 ±       0.056    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1212.042 ±    1159.934  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       545.018 ±     518.019    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   9386023.638 ±   93456.977   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       906.227 ±       9.027  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.025 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.004 ±       0.022    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       806.002 ±    1154.697  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       135.268 ±     195.189    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         4.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   9211714.888 ±   88469.118   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   3468876.688 ±   34625.222   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1110.617 ±      11.127  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.033 ±       0.166  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.015 ±       0.075    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1071.467 ±    1413.073  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       486.407 ±     643.386    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         7.000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                          128  thrpt    5    233954.836 ±    4161.124   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5      2705.925 ±      47.446  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     18208.002 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.083 ±       0.057  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.560 ±       0.384    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2706.976 ±      30.124  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     18215.399 ±     395.691    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5        20.000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5    723616.968 ±    4945.323   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1268.615 ±       8.907  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2760.001 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.062 ±       0.150  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.136 ±       0.326    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1208.741 ±    1155.575  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      2630.352 ±    2521.974    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   2186255.079 ±  134359.009   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       611.103 ±      37.519  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.516 ±       4.395  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.368 ±       3.135    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5       640.415 ±     277.527  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       460.548 ±     176.297    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1098162.135 ±   11663.203   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       809.123 ±       8.340  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.033 ±       0.091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.048 ±       0.131    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       806.281 ±    1156.001  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1156.766 ±    1673.461    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2586205.408 ±   20960.529   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       722.865 ±       6.042  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.667 ±       5.432  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.407 ±       3.316    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       807.688 ±    1155.543  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       491.647 ±     703.659    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1287979.771 ±   93517.663   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5       916.378 ±      65.999  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      1120.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.025 ±       0.104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.030 ±       0.125    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5       937.973 ±    1415.797  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1147.976 ±    1751.459    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         5.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                        128  thrpt    5   1100976.553 ±   29748.727   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1493.995 ±      40.515  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      2136.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.067 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.095 ±       0.053    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1479.359 ±    1167.403  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      2116.538 ±    1710.910    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                              128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                               128  thrpt    5        10.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1773176.323 ±    3771.845   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1486.881 ±       3.107  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1320.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.058 ±       0.104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.052 ±       0.093    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1477.808 ±    1153.040  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1311.926 ±    1023.022    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2564653.489 ±   32738.210   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       664.746 ±       8.484  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.515 ±       4.302  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.315 ±       2.628    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5       672.545 ±       2.821  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       412.789 ±       3.751    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2556050.587 ±   12075.145   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1208.067 ±       5.740  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.042 ±       0.160  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.026 ±       0.099    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1212.978 ±    1161.588  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       747.000 ±     715.054    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   2729464.149 ±   57720.862   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       707.406 ±      14.934  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.680 ±       5.588  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.392 ±       3.221    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       673.131 ±       5.501  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       388.238 ±       6.210    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2791997.265 ±   26105.155   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2476032.420 ±   31496.510   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1245.716 ±      16.013  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       792.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.058 ±       0.222  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.037 ±       0.142    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1206.403 ±    1154.625  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       767.416 ±     739.323    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         8.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     12637.195 ±    1949.469   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1836.909 ±     283.496  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    228823.290 ±      56.026    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.081 ±       0.222  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        10.192 ±      28.456    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1882.084 ±    1158.858  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5    235107.966 ±  157770.671    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     15448.429 ±     498.619   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       218.343 ±       7.033  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     22249.101 ±      32.162    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0.425 ±       3.655    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       306.872 ±    1078.697  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5     31425.572 ±  110469.840    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     37322.375 ±     533.203   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       345.560 ±       4.914  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     14576.011 ±       0.002    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.012 ±       0.063  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.501 ±       2.666    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       409.140 ±     880.704  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     17278.928 ±   37194.782    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      3764.250 ±      55.703   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1228.713 ±      18.335  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    513560.110 ±       0.014    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.017 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         6.960 ±      14.983    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1215.868 ±    1163.638  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    508463.253 ±  489832.154    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5         9.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     60205.651 ±     635.138   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       768.742 ±       8.183  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20100.010 ±       0.064    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.033 ±       0.122  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.872 ±       3.185    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       808.779 ±    1161.670  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     21162.376 ±   30671.935    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     79025.712 ±    4638.880   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       518.100 ±      30.356  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.686 ±       5.864  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        13.822 ±     118.113    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       506.552 ±    1123.459  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5     10151.704 ±   22627.182    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5     95685.572 ±     549.390   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        13.616 ±       0.074  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       224.004 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    391205.787 ±   10837.569   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2095.480 ±      58.278  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      8432.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.067 ±       0.067  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.268 ±       0.269    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2158.525 ±    1180.414  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      8685.510 ±    4733.034    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        16.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    457426.676 ±    4360.015   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       548.586 ±       5.327  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1888.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.067 ±       0.444  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.229 ±       1.527    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       641.433 ±     279.969  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      2207.114 ±     947.932    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1184016.506 ±    8016.333   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       619.740 ±       4.182  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.673 ±       5.665  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.895 ±       7.525    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       538.612 ±    1159.415  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       716.408 ±    1542.148    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    110694.336 ±    3730.529   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3846.761 ±     130.730  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54704.004 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.071 ±       0.091  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.006 ±       1.290    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      3809.275 ±    1427.847  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     54175.243 ±   20433.857    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        28.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                             128  thrpt    5    589842.043 ±   14492.078   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1720.852 ±      42.107  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4592.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.058 ±       0.088  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.156 ±       0.237    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1750.127 ±    1412.887  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      4672.282 ±    3814.681    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    337556.609 ±    2576.246   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       530.049 ±       4.050  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      2472.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.719 ±       6.072  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3.365 ±      28.406    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506.231 ±    1122.637  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      2362.473 ±    5240.571    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    716576.797 ±    8170.823   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       546.204 ±       6.188  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.071 ±       0.476  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.155 ±       1.043    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       641.533 ±     280.049  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1409.705 ±     624.710    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         5.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   1969883.573 ±   99158.381   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       911.019 ±      45.519  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.042 ±       0.160  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.033 ±       0.128    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       940.184 ±    1415.190  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       751.422 ±    1131.986    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1916993.207 ±   13321.249   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    373945.333 ±   12927.764   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       553.007 ±      18.987  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.816 ±       6.934  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.430 ±      29.149    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       505.731 ±    1121.233  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2131.887 ±    4730.013    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                            128  thrpt    5    112691.468 ±    4354.381   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      2084.542 ±      80.197  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     29120.004 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.062 ±       0.098  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.870 ±       1.353    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      2158.220 ±    1171.279  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     30178.884 ±   17477.198    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5        16.000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 8237 s, completed May 31, 2018 6:12:47 AM
