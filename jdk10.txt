[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 30 черв. 2018 22:19:49
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:8:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]     private static final sun.misc.Unsafe UNSAFE;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:13:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]         sun.misc.Unsafe u = null;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:16:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             Field f = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:18:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             u = (sun.misc.Unsafe) f.get(null);
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.28.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d7(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d11(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d14(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e5(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e11(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e14(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = new scala.collection.mutable.ListBuffer[Boolean]();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.toList
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:40:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:47:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 63 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT.jar ...
Processing 523 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 50 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 694 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 494580,944 ops/s
[info] # Warmup Iteration   2: 835486,127 ops/s
[info] # Warmup Iteration   3: 839086,228 ops/s
[info] # Warmup Iteration   4: 837237,083 ops/s
[info] # Warmup Iteration   5: 842630,692 ops/s
[info] Iteration   1: 819735,687 ops/s
[info]                  ·gc.alloc.rate:                   2153,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3869,291 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 842825,311 ops/s
[info]                  ·gc.alloc.rate:                   2214,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692,718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5028,050 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 820746,715 ops/s
[info]                  ·gc.alloc.rate:                   2157,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3879,802 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 846402,798 ops/s
[info]                  ·gc.alloc.rate:                   2224,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3769,642 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 845775,671 ops/s
[info]                  ·gc.alloc.rate:                   2222,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3778,606 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   835097,236 ±(99.9%) 52497,513 ops/s [Average]
[info]   (min, avg, max) = (819735,687, 835097,236, 846402,798), stdev = 13633,437
[info]   CI (99.9%): [782599,724, 887594,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2194,612 ±(99.9%) 138,251 MB/sec [Average]
[info]   (min, avg, max) = (2153,954, 2194,612, 2224,334), stdev = 35,903
[info]   CI (99.9%): [2056,361, 2332,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4136,000, 4136,000, 4136,001), stdev = 0,001
[info]   CI (99.9%): [4136,000, 4136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,118 ±(99.9%) 0,107 B/op [Average]
[info]   (min, avg, max) = (0,077, 0,118, 0,155), stdev = 0,028
[info]   CI (99.9%): [0,011, 0,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2157,836 ±(99.9%) 1151,592 MB/sec [Average]
[info]   (min, avg, max) = (2015,056, 2157,836, 2692,718), stdev = 299,065
[info]   CI (99.9%): [1006,244, 3309,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4065,078 ±(99.9%) 2081,951 B/op [Average]
[info]   (min, avg, max) = (3769,642, 4065,078, 5028,050), stdev = 540,676
[info]   CI (99.9%): [1983,127, 6147,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0,20% complete, ETA 02:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 699239,392 ops/s
[info] # Warmup Iteration   2: 1767085,720 ops/s
[info] # Warmup Iteration   3: 1829593,366 ops/s
[info] # Warmup Iteration   4: 1834139,676 ops/s
[info] # Warmup Iteration   5: 1832648,165 ops/s
[info] Iteration   1: 1815338,869 ops/s
[info]                  ·gc.alloc.rate:                   1291,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1171,160 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1831514,996 ops/s
[info]                  ·gc.alloc.rate:                   1303,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1162,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1826710,954 ops/s
[info]                  ·gc.alloc.rate:                   1299,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1165,589 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1826475,261 ops/s
[info]                  ·gc.alloc.rate:                   1299,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1166,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1830252,838 ops/s
[info]                  ·gc.alloc.rate:                   1302,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1165,079 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1826058,583 ±(99.9%) 24571,491 ops/s [Average]
[info]   (min, avg, max) = (1815338,869, 1826058,583, 1831514,996), stdev = 6381,138
[info]   CI (99.9%): [1801487,092, 1850630,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1299,513 ±(99.9%) 17,623 MB/sec [Average]
[info]   (min, avg, max) = (1291,843, 1299,513, 1303,498), stdev = 4,577
[info]   CI (99.9%): [1281,890, 1317,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1120,000, 1120,000, 1120,000), stdev = 0,001
[info]   CI (99.9%): [1120,000, 1120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,032 ±(99.9%) 0,102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,032, 0,072), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353,051 ±(99.9%) 6,054 MB/sec [Average]
[info]   (min, avg, max) = (1350,852, 1353,051, 1354,901), stdev = 1,572
[info]   CI (99.9%): [1346,997, 1359,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1166,151 ±(99.9%) 12,740 B/op [Average]
[info]   (min, avg, max) = (1162,063, 1166,151, 1171,160), stdev = 3,309
[info]   CI (99.9%): [1153,412, 1178,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0,40% complete, ETA 02:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3625395,781 ops/s
[info] # Warmup Iteration   2: 4215919,002 ops/s
[info] # Warmup Iteration   3: 4346637,731 ops/s
[info] # Warmup Iteration   4: 4323991,210 ops/s
[info] # Warmup Iteration   5: 4340888,150 ops/s
[info] Iteration   1: 4326610,567 ops/s
[info]                  ·gc.alloc.rate:                   285,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4347803,016 ops/s
[info]                  ·gc.alloc.rate:      287,339 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4256405,084 ops/s
[info]                  ·gc.alloc.rate:                   281,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189,171 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4336112,283 ops/s
[info]                  ·gc.alloc.rate:                   286,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185,685 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4331596,114 ops/s
[info]                  ·gc.alloc.rate:      286,231 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4319705,413 ±(99.9%) 139564,758 ops/s [Average]
[info]   (min, avg, max) = (4256405,084, 4319705,413, 4347803,016), stdev = 36244,524
[info]   CI (99.9%): [4180140,655, 4459270,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   285,448 ±(99.9%) 9,255 MB/sec [Average]
[info]   (min, avg, max) = (281,258, 285,448, 287,339), stdev = 2,403
[info]   CI (99.9%): [276,194, 294,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306,947 ±(99.9%) 1078,962 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,947, 511,594), stdev = 280,203
[info]   CI (99.9%): [≈ 0, 1385,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   112,191 ±(99.9%) 394,401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 112,191, 189,171), stdev = 102,425
[info]   CI (99.9%): [≈ 0, 506,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0,60% complete, ETA 02:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62611,711 ops/s
[info] # Warmup Iteration   2: 192670,399 ops/s
[info] # Warmup Iteration   3: 194752,731 ops/s
[info] # Warmup Iteration   4: 194035,973 ops/s
[info] # Warmup Iteration   5: 195209,505 ops/s
[info] Iteration   1: 194190,565 ops/s
[info]                  ·gc.alloc.rate:                   1626,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16435,538 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 195659,770 ops/s
[info]                  ·gc.alloc.rate:                   1639,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10888,172 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 194962,527 ops/s
[info]                  ·gc.alloc.rate:                   1633,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16403,661 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 194435,696 ops/s
[info]                  ·gc.alloc.rate:                   1628,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10977,595 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 194339,577 ops/s
[info]                  ·gc.alloc.rate:                   1628,067 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10988,468 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   194717,627 ±(99.9%) 2316,644 ops/s [Average]
[info]   (min, avg, max) = (194190,565, 194717,627, 195659,770), stdev = 601,625
[info]   CI (99.9%): [192400,983, 197034,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1631,211 ±(99.9%) 19,453 MB/sec [Average]
[info]   (min, avg, max) = (1626,763, 1631,211, 1639,127), stdev = 5,052
[info]   CI (99.9%): [1611,758, 1650,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13184,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13184,002, 13184,002, 13184,002), stdev = 0,001
[info]   CI (99.9%): [13184,002, 13184,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,370 ±(99.9%) 0,959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,370, 0,672), stdev = 0,249
[info]   CI (99.9%): [≈ 0, 1,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625,393 ±(99.9%) 1422,402 MB/sec [Average]
[info]   (min, avg, max) = (1353,693, 1625,393, 2032,108), stdev = 369,393
[info]   CI (99.9%): [202,991, 3047,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13138,687 ±(99.9%) 11533,926 B/op [Average]
[info]   (min, avg, max) = (10888,172, 13138,687, 16435,538), stdev = 2995,324
[info]   CI (99.9%): [1604,761, 24672,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0,80% complete, ETA 02:10:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 280351,106 ops/s
[info] # Warmup Iteration   2: 632971,884 ops/s
[info] # Warmup Iteration   3: 631456,327 ops/s
[info] # Warmup Iteration   4: 616666,937 ops/s
[info] # Warmup Iteration   5: 638095,801 ops/s
[info] Iteration   1: 640814,131 ops/s
[info]                  ·gc.alloc.rate:                   1911,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3296,565 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 640832,132 ops/s
[info]                  ·gc.alloc.rate:                   1912,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4951,608 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 632672,100 ops/s
[info]                  ·gc.alloc.rate:                   1888,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019,194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5022,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 640360,172 ops/s
[info]                  ·gc.alloc.rate:                   1910,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4970,594 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 639529,667 ops/s
[info]                  ·gc.alloc.rate:                   1908,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4985,163 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   638841,641 ±(99.9%) 13435,289 ops/s [Average]
[info]   (min, avg, max) = (632672,100, 638841,641, 640832,132), stdev = 3489,102
[info]   CI (99.9%): [625406,351, 652276,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1906,307 ±(99.9%) 39,463 MB/sec [Average]
[info]   (min, avg, max) = (1888,111, 1906,307, 1912,041), stdev = 10,248
[info]   CI (99.9%): [1866,844, 1945,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4696,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4696,001, 4696,001, 4696,001), stdev = 0,001
[info]   CI (99.9%): [4696,001, 4696,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,123 ±(99.9%) 0,330 B/op [Average]
[info]   (min, avg, max) = (0,051, 0,123, 0,256), stdev = 0,086
[info]   CI (99.9%): [≈ 0, 0,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1885,252 ±(99.9%) 1169,459 MB/sec [Average]
[info]   (min, avg, max) = (1342,012, 1885,252, 2026,360), stdev = 303,705
[info]   CI (99.9%): [715,793, 3054,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4645,190 ±(99.9%) 2904,719 B/op [Average]
[info]   (min, avg, max) = (3296,565, 4645,190, 5022,022), stdev = 754,346
[info]   CI (99.9%): [1740,472, 7549,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1,00% complete, ETA 02:10:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6f4166c4/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 896278,163 ops/s
[info] # Warmup Iteration   2: 2289003,344 ops/s
[info] # Warmup Iteration   3: 2313873,015 ops/s
[info] # Warmup Iteration   4: 2309568,706 ops/s
[info] # Warmup Iteration   5: 2322253,779 ops/s
[info] Iteration   1: 2324072,815 ops/s
[info]                  ·gc.alloc.rate:                   826,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 456,265 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2319185,894 ops/s
[info]                  ·gc.alloc.rate:                   825,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 915,456 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2313461,795 ops/s
[info]                  ·gc.alloc.rate:                   823,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459,262 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2320728,798 ops/s
[info]                  ·gc.alloc.rate:                   825,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 457,834 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2323090,189 ops/s
[info]                  ·gc.alloc.rate:                   826,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 457,606 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2320107,898 ±(99.9%) 16110,806 ops/s [Average]
[info]   (min, avg, max) = (2313461,795, 2320107,898, 2324072,815), stdev = 4183,925
[info]   CI (99.9%): [2303997,092, 2336218,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   825,504 ±(99.9%) 5,537 MB/sec [Average]
[info]   (min, avg, max) = (823,180, 825,504, 826,911), stdev = 1,438
[info]   CI (99.9%): [819,967, 831,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   560,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (560,000, 560,000, 560,000), stdev = 0,001
[info]   CI (99.9%): [560,000, 560,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,008 ±(99.9%) 0,030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,014), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809,673 ±(99.9%) 1161,278 MB/sec [Average]
[info]   (min, avg, max) = (673,734, 809,673, 1349,155), stdev = 301,580
[info]   CI (99.9%): [≈ 0, 1970,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   549,285 ±(99.9%) 788,222 B/op [Average]
[info]   (min, avg, max) = (456,265, 549,285, 915,456), stdev = 204,699
[info]   CI (99.9%): [≈ 0, 1337,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1,20% complete, ETA 02:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12872309,433 ops/s
[info] # Warmup Iteration   2: 16858422,659 ops/s
[info] # Warmup Iteration   3: 17865933,365 ops/s
[info] # Warmup Iteration   4: 17863179,837 ops/s
[info] # Warmup Iteration   5: 17970785,653 ops/s
[info] Iteration   1: 17944643,337 ops/s
[info]                  ·gc.alloc.rate:                   912,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18000141,623 ops/s
[info]                  ·gc.alloc.rate:                   915,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58,771 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 17896037,673 ops/s
[info]                  ·gc.alloc.rate:                   909,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 17803203,861 ops/s
[info]                  ·gc.alloc.rate:                   904,923 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118,716 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 17847173,525 ops/s
[info]                  ·gc.alloc.rate:                   907,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59,210 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   17898240,004 ±(99.9%) 299396,624 ops/s [Average]
[info]   (min, avg, max) = (17803203,861, 17898240,004, 18000141,623), stdev = 77752,352
[info]   CI (99.9%): [17598843,380, 18197636,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   909,798 ±(99.9%) 15,420 MB/sec [Average]
[info]   (min, avg, max) = (904,923, 909,798, 915,103), stdev = 4,004
[info]   CI (99.9%): [894,379, 925,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,003 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940,963 ±(99.9%) 1419,707 MB/sec [Average]
[info]   (min, avg, max) = (671,417, 940,963, 1346,826), stdev = 368,693
[info]   CI (99.9%): [≈ 0, 2360,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   82,775 ±(99.9%) 125,311 B/op [Average]
[info]   (min, avg, max) = (58,771, 82,775, 118,716), stdev = 32,543
[info]   CI (99.9%): [≈ 0, 208,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1,41% complete, ETA 02:09:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14082889,798 ops/s
[info] # Warmup Iteration   2: 9572142,989 ops/s
[info] # Warmup Iteration   3: 7560904,311 ops/s
[info] # Warmup Iteration   4: 9510501,598 ops/s
[info] # Warmup Iteration   5: 9511542,215 ops/s
[info] Iteration   1: 9518748,823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9528905,657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9513778,684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9516604,679 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9503899,831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   9516387,535 ±(99.9%) 34713,244 ops/s [Average]
[info]   (min, avg, max) = (9503899,831, 9516387,535, 9528905,657), stdev = 9014,919
[info]   CI (99.9%): [9481674,291, 9551100,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1,61% complete, ETA 02:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113586,473 ops/s
[info] # Warmup Iteration   2: 336041,105 ops/s
[info] # Warmup Iteration   3: 337559,150 ops/s
[info] # Warmup Iteration   4: 342060,367 ops/s
[info] # Warmup Iteration   5: 341518,887 ops/s
[info] Iteration   1: 343272,567 ops/s
[info]                  ·gc.alloc.rate:                   1120,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6188,825 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 343558,250 ops/s
[info]                  ·gc.alloc.rate:                   1121,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3092,870 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 340183,297 ops/s
[info]                  ·gc.alloc.rate:                   1110,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6252,640 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 342330,885 ops/s
[info]                  ·gc.alloc.rate:                   1117,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6219,613 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 341293,871 ops/s
[info]                  ·gc.alloc.rate:                   1113,718 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677,087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3122,444 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   342127,774 ±(99.9%) 5402,733 ops/s [Average]
[info]   (min, avg, max) = (340183,297, 342127,774, 343558,250), stdev = 1403,073
[info]   CI (99.9%): [336725,041, 347530,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1116,488 ±(99.9%) 17,601 MB/sec [Average]
[info]   (min, avg, max) = (1110,190, 1116,488, 1121,173), stdev = 4,571
[info]   CI (99.9%): [1098,887, 1134,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5136,001, 5136,001, 5136,001), stdev = 0,001
[info]   CI (99.9%): [5136,001, 5136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,134 ±(99.9%) 0,620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,134, 0,385), stdev = 0,161
[info]   CI (99.9%): [≈ 0, 0,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1081,301 ±(99.9%) 1424,256 MB/sec [Average]
[info]   (min, avg, max) = (675,164, 1081,301, 1352,853), stdev = 369,875
[info]   CI (99.9%): [≈ 0, 2505,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4975,278 ±(99.9%) 6565,651 B/op [Average]
[info]   (min, avg, max) = (3092,870, 4975,278, 6252,640), stdev = 1705,079
[info]   CI (99.9%): [≈ 0, 11540,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1,81% complete, ETA 02:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1229279,419 ops/s
[info] # Warmup Iteration   2: 1713225,126 ops/s
[info] # Warmup Iteration   3: 1765446,324 ops/s
[info] # Warmup Iteration   4: 1768622,348 ops/s
[info] # Warmup Iteration   5: 1766258,748 ops/s
[info] Iteration   1: 1754617,810 ops/s
[info]                  ·gc.alloc.rate:                   2711,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2695,522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2417,986 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1770357,841 ops/s
[info]                  ·gc.alloc.rate:                   2736,094 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702,344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2402,001 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1769304,775 ops/s
[info]                  ·gc.alloc.rate:                   2734,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2407,978 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1758933,266 ops/s
[info]                  ·gc.alloc.rate:                   2717,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2426,327 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1762524,624 ops/s
[info]                  ·gc.alloc.rate:                   2723,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715,690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2425,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1763147,663 ±(99.9%) 25888,558 ops/s [Average]
[info]   (min, avg, max) = (1754617,810, 1763147,663, 1770357,841), stdev = 6723,176
[info]   CI (99.9%): [1737259,105, 1789036,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2724,549 ±(99.9%) 40,750 MB/sec [Average]
[info]   (min, avg, max) = (2711,144, 2724,549, 2736,094), stdev = 10,583
[info]   CI (99.9%): [2683,799, 2765,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2432,000, 2432,000, 2432,000), stdev = 0,001
[info]   CI (99.9%): [2432,000, 2432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,052 ±(99.9%) 0,059 B/op [Average]
[info]   (min, avg, max) = (0,037, 0,052, 0,074), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2706,438 ±(99.9%) 30,349 MB/sec [Average]
[info]   (min, avg, max) = (2695,522, 2706,438, 2715,690), stdev = 7,882
[info]   CI (99.9%): [2676,089, 2736,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2415,859 ±(99.9%) 40,927 B/op [Average]
[info]   (min, avg, max) = (2402,001, 2415,859, 2426,327), stdev = 10,629
[info]   CI (99.9%): [2374,932, 2456,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2,01% complete, ETA 02:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 781765,830 ops/s
[info] # Warmup Iteration   2: 10767246,286 ops/s
[info] # Warmup Iteration   3: 10702474,241 ops/s
[info] # Warmup Iteration   4: 10794372,512 ops/s
[info] # Warmup Iteration   5: 10804613,248 ops/s
[info] Iteration   1: 10732814,270 ops/s
[info]                  ·gc.alloc.rate:                   1309,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197,119 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10266627,665 ops/s
[info]                  ·gc.alloc.rate:                   1252,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206,075 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 10778534,258 ops/s
[info]                  ·gc.alloc.rate:                   1315,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196,277 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 10825376,557 ops/s
[info]                  ·gc.alloc.rate:                   1320,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195,634 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10836834,445 ops/s
[info]                  ·gc.alloc.rate:                   1322,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195,616 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10688037,439 ±(99.9%) 920906,712 ops/s [Average]
[info]   (min, avg, max) = (10266627,665, 10688037,439, 10836834,445), stdev = 239156,549
[info]   CI (99.9%): [9767130,727, 11608944,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1303,968 ±(99.9%) 112,236 MB/sec [Average]
[info]   (min, avg, max) = (1252,623, 1303,968, 1322,098), stdev = 29,147
[info]   CI (99.9%): [1191,732, 1416,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,000, 192,000, 192,000), stdev = 0,001
[info]   CI (99.9%): [192,000, 192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,104), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,009 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,016), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1345,154 ±(99.9%) 4,645 MB/sec [Average]
[info]   (min, avg, max) = (1344,237, 1345,154, 1346,998), stdev = 1,206
[info]   CI (99.9%): [1340,509, 1349,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   198,144 ±(99.9%) 17,234 B/op [Average]
[info]   (min, avg, max) = (195,616, 198,144, 206,075), stdev = 4,476
[info]   CI (99.9%): [180,910, 215,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2,21% complete, ETA 02:08:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1380418,947 ops/s
[info] # Warmup Iteration   2: 2827161,182 ops/s
[info] # Warmup Iteration   3: 2852566,684 ops/s
[info] # Warmup Iteration   4: 2850552,310 ops/s
[info] # Warmup Iteration   5: 2838534,492 ops/s
[info] Iteration   1: 2838458,609 ops/s
[info]                  ·gc.alloc.rate:                   1990,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1125,989 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2835215,591 ops/s
[info]                  ·gc.alloc.rate:                   1988,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1128,494 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2853551,526 ops/s
[info]                  ·gc.alloc.rate:                   2001,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1122,759 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2861536,865 ops/s
[info]                  ·gc.alloc.rate:                   2007,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1120,358 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2849132,790 ops/s
[info]                  ·gc.alloc.rate:                   1998,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1125,971 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2847579,076 ±(99.9%) 41693,013 ops/s [Average]
[info]   (min, avg, max) = (2835215,591, 2847579,076, 2861536,865), stdev = 10827,543
[info]   CI (99.9%): [2805886,064, 2889272,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1997,413 ±(99.9%) 29,302 MB/sec [Average]
[info]   (min, avg, max) = (1988,801, 1997,413, 2007,239), stdev = 7,610
[info]   CI (99.9%): [1968,110, 2026,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1104,000, 1104,000, 1104,000), stdev = 0,001
[info]   CI (99.9%): [1104,000, 1104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,071, 0,083), stdev = 0,011
[info]   CI (99.9%): [0,027, 0,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,039 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (0,034, 0,039, 0,046), stdev = 0,006
[info]   CI (99.9%): [0,014, 0,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2034,873 ±(99.9%) 11,706 MB/sec [Average]
[info]   (min, avg, max) = (2030,644, 2034,873, 2038,043), stdev = 3,040
[info]   CI (99.9%): [2023,167, 2046,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1124,714 ±(99.9%) 12,222 B/op [Average]
[info]   (min, avg, max) = (1120,358, 1124,714, 1128,494), stdev = 3,174
[info]   CI (99.9%): [1112,493, 1136,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2,41% complete, ETA 02:08:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10631467,996 ops/s
[info] # Warmup Iteration   2: 11487901,062 ops/s
[info] # Warmup Iteration   3: 11588214,802 ops/s
[info] # Warmup Iteration   4: 11593681,984 ops/s
[info] # Warmup Iteration   5: 11616892,836 ops/s
[info] Iteration   1: 11573157,347 ops/s
[info]                  ·gc.alloc.rate:                   1470,612 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182,798 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11618206,911 ops/s
[info]                  ·gc.alloc.rate:                   1476,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182,105 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11584646,307 ops/s
[info]                  ·gc.alloc.rate:                   1472,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182,708 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11590009,697 ops/s
[info]                  ·gc.alloc.rate:                   1472,866 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274,306 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11464557,090 ops/s
[info]                  ·gc.alloc.rate:                   1456,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185,126 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11566115,470 ±(99.9%) 227738,301 ops/s [Average]
[info]   (min, avg, max) = (11464557,090, 11566115,470, 11618206,911), stdev = 59142,914
[info]   CI (99.9%): [11338377,169, 11793853,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1469,791 ±(99.9%) 28,990 MB/sec [Average]
[info]   (min, avg, max) = (1456,888, 1469,791, 1476,479), stdev = 7,529
[info]   CI (99.9%): [1440,801, 1498,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (200,000, 200,000, 200,000), stdev = 0,001
[info]   CI (99.9%): [200,000, 200,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,006 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,006, 0,009), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1480,387 ±(99.9%) 1161,744 MB/sec [Average]
[info]   (min, avg, max) = (1344,122, 1480,387, 2020,077), stdev = 301,701
[info]   CI (99.9%): [318,643, 2642,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   201,408 ±(99.9%) 156,980 B/op [Average]
[info]   (min, avg, max) = (182,105, 201,408, 274,306), stdev = 40,767
[info]   CI (99.9%): [44,429, 358,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2,61% complete, ETA 02:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253025,466 ops/s
[info] # Warmup Iteration   2: 712464,769 ops/s
[info] # Warmup Iteration   3: 714583,511 ops/s
[info] # Warmup Iteration   4: 721510,705 ops/s
[info] # Warmup Iteration   5: 718471,434 ops/s
[info] Iteration   1: 711902,551 ops/s
[info]                  ·gc.alloc.rate:                   1881,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4487,765 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 719810,817 ops/s
[info]                  ·gc.alloc.rate:                   1902,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4443,242 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 716570,134 ops/s
[info]                  ·gc.alloc.rate:                   1894,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2978,647 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 716025,530 ops/s
[info]                  ·gc.alloc.rate:                   1892,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4474,305 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 717606,529 ops/s
[info]                  ·gc.alloc.rate:                   1896,650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4468,901 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   716383,112 ±(99.9%) 11140,975 ops/s [Average]
[info]   (min, avg, max) = (711902,551, 716383,112, 719810,817), stdev = 2893,276
[info]   CI (99.9%): [705242,137, 727524,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1893,545 ±(99.9%) 29,461 MB/sec [Average]
[info]   (min, avg, max) = (1881,684, 1893,545, 1902,631), stdev = 7,651
[info]   CI (99.9%): [1864,084, 1923,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4160,001, 4160,001, 4160,001), stdev = 0,001
[info]   CI (99.9%): [4160,001, 4160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,110 ±(99.9%) 0,097 B/op [Average]
[info]   (min, avg, max) = (0,091, 0,110, 0,138), stdev = 0,025
[info]   CI (99.9%): [0,013, 0,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898,291 ±(99.9%) 1166,820 MB/sec [Average]
[info]   (min, avg, max) = (1356,258, 1898,291, 2037,486), stdev = 303,019
[info]   CI (99.9%): [731,471, 3065,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4170,572 ±(99.9%) 2566,461 B/op [Average]
[info]   (min, avg, max) = (2978,647, 4170,572, 4487,765), stdev = 666,502
[info]   CI (99.9%): [1604,111, 6737,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2,81% complete, ETA 02:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1340475,192 ops/s
[info] # Warmup Iteration   2: 2199253,784 ops/s
[info] # Warmup Iteration   3: 2191698,592 ops/s
[info] # Warmup Iteration   4: 2225125,441 ops/s
[info] # Warmup Iteration   5: 2186816,202 ops/s
[info] Iteration   1: 2221344,511 ops/s
[info]                  ·gc.alloc.rate:                   1896,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013,834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1426,816 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2229556,456 ops/s
[info]                  ·gc.alloc.rate:                   1904,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1423,414 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2226666,846 ops/s
[info]                  ·gc.alloc.rate:                   1901,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 951,494 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2223646,734 ops/s
[info]                  ·gc.alloc.rate:                   1898,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1431,379 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2223462,809 ops/s
[info]                  ·gc.alloc.rate:                   1898,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1433,795 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2224935,471 ±(99.9%) 12339,455 ops/s [Average]
[info]   (min, avg, max) = (2221344,511, 2224935,471, 2229556,456), stdev = 3204,517
[info]   CI (99.9%): [2212596,016, 2237274,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1900,092 ±(99.9%) 10,809 MB/sec [Average]
[info]   (min, avg, max) = (1896,945, 1900,092, 1904,130), stdev = 2,807
[info]   CI (99.9%): [1889,284, 1910,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1344,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1344,000, 1344,000, 1344,000), stdev = 0,001
[info]   CI (99.9%): [1344,000, 1344,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,047 ±(99.9%) 0,074 B/op [Average]
[info]   (min, avg, max) = (0,015, 0,047, 0,059), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1884,965 ±(99.9%) 1159,720 MB/sec [Average]
[info]   (min, avg, max) = (1346,271, 1884,965, 2025,771), stdev = 301,175
[info]   CI (99.9%): [725,245, 3044,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1333,380 ±(99.9%) 822,183 B/op [Average]
[info]   (min, avg, max) = (951,494, 1333,380, 1433,795), stdev = 213,518
[info]   CI (99.9%): [511,196, 2155,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3,01% complete, ETA 02:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1761044,628 ops/s
[info] # Warmup Iteration   2: 20042217,783 ops/s
[info] # Warmup Iteration   3: 21125638,668 ops/s
[info] # Warmup Iteration   4: 21100157,062 ops/s
[info] # Warmup Iteration   5: 21114070,614 ops/s
[info] Iteration   1: 21171412,648 ops/s
[info]                  ·gc.alloc.rate:                   645,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 21172776,965 ops/s
[info]                  ·gc.alloc.rate:                   645,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 21111658,702 ops/s
[info]                  ·gc.alloc.rate:                   643,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,105 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 21175117,693 ops/s
[info]                  ·gc.alloc.rate:                   645,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,956 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21116223,836 ops/s
[info]                  ·gc.alloc.rate:                   644,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,095 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   21149437,969 ±(99.9%) 125034,730 ops/s [Average]
[info]   (min, avg, max) = (21111658,702, 21149437,969, 21175117,693), stdev = 32471,122
[info]   CI (99.9%): [21024403,239, 21274472,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   645,068 ±(99.9%) 3,909 MB/sec [Average]
[info]   (min, avg, max) = (643,888, 645,068, 645,846), stdev = 1,015
[info]   CI (99.9%): [641,159, 648,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,544 ±(99.9%) 4,461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,544, 2,615), stdev = 1,158
[info]   CI (99.9%): [≈ 0, 5,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,040 ±(99.9%) 0,332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,040, 0,194), stdev = 0,086
[info]   CI (99.9%): [≈ 0, 0,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672,701 ±(99.9%) 2,973 MB/sec [Average]
[info]   (min, avg, max) = (672,125, 672,701, 673,610), stdev = 0,772
[info]   CI (99.9%): [669,729, 675,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   50,056 ±(99.9%) 0,228 B/op [Average]
[info]   (min, avg, max) = (49,956, 50,056, 50,105), stdev = 0,059
[info]   CI (99.9%): [49,828, 50,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3,21% complete, ETA 02:07:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6f4166c4/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3048209,098 ops/s
[info] # Warmup Iteration   2: 5988914,117 ops/s
[info] # Warmup Iteration   3: 6001899,120 ops/s
[info] # Warmup Iteration   4: 6010965,320 ops/s
[info] # Warmup Iteration   5: 6001548,604 ops/s
[info] Iteration   1: 5974129,189 ops/s
[info]                  ·gc.alloc.rate:                   1639,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5834497,920 ops/s
[info]                  ·gc.alloc.rate:                   1601,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 547,523 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5999626,244 ops/s
[info]                  ·gc.alloc.rate:                   1646,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 355,435 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5970690,680 ops/s
[info]                  ·gc.alloc.rate:                   1639,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 357,322 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5944953,019 ops/s
[info]                  ·gc.alloc.rate:                   1632,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538,728 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   5944779,411 ±(99.9%) 248828,895 ops/s [Average]
[info]   (min, avg, max) = (5834497,920, 5944779,411, 5999626,244), stdev = 64620,074
[info]   CI (99.9%): [5695950,516, 6193608,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1631,954 ±(99.9%) 68,313 MB/sec [Average]
[info]   (min, avg, max) = (1601,639, 1631,954, 1646,892), stdev = 17,741
[info]   CI (99.9%): [1563,641, 1700,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (432,000, 432,000, 432,000), stdev = 0,001
[info]   CI (99.9%): [432,000, 432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,017 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,017, 0,028), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1625,559 ±(99.9%) 1430,855 MB/sec [Average]
[info]   (min, avg, max) = (1351,675, 1625,559, 2035,268), stdev = 371,588
[info]   CI (99.9%): [194,704, 3056,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   431,016 ±(99.9%) 394,271 B/op [Average]
[info]   (min, avg, max) = (355,435, 431,016, 547,523), stdev = 102,391
[info]   CI (99.9%): [36,746, 825,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3,41% complete, ETA 02:07:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16350630,062 ops/s
[info] # Warmup Iteration   2: 27186074,553 ops/s
[info] # Warmup Iteration   3: 27415743,962 ops/s
[info] # Warmup Iteration   4: 27458176,369 ops/s
[info] # Warmup Iteration   5: 27692086,255 ops/s
[info] Iteration   1: 27695115,550 ops/s
[info]                  ·gc.alloc.rate:                   844,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38,345 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 23720305,115 ops/s
[info]                  ·gc.alloc.rate:                   723,725 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,597 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 27708853,982 ops/s
[info]                  ·gc.alloc.rate:                   845,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38,178 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23058228,793 ops/s
[info]                  ·gc.alloc.rate:                   703,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45,833 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 27574331,858 ops/s
[info]                  ·gc.alloc.rate:                   840,963 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76,646 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   25951367,060 ±(99.9%) 9053379,024 ops/s [Average]
[info]   (min, avg, max) = (23058228,793, 25951367,060, 27708853,982), stdev = 2351133,782
[info]   CI (99.9%): [16897988,036, 35004746,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   791,544 ±(99.9%) 275,891 MB/sec [Average]
[info]   (min, avg, max) = (703,234, 791,544, 845,208), stdev = 71,648
[info]   CI (99.9%): [515,652, 1067,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,001 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806,743 ±(99.9%) 1154,013 MB/sec [Average]
[info]   (min, avg, max) = (671,480, 806,743, 1342,846), stdev = 299,693
[info]   CI (99.9%): [≈ 0, 1960,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48,720 ±(99.9%) 61,609 B/op [Average]
[info]   (min, avg, max) = (38,178, 48,720, 76,646), stdev = 16,000
[info]   CI (99.9%): [≈ 0, 110,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3,61% complete, ETA 02:07:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18116034,376 ops/s
[info] # Warmup Iteration   2: 25419502,432 ops/s
[info] # Warmup Iteration   3: 24798251,541 ops/s
[info] # Warmup Iteration   4: 24912259,874 ops/s
[info] # Warmup Iteration   5: 24915533,144 ops/s
[info] Iteration   1: 24921182,169 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 24911530,759 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 24863117,717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 24873881,455 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 24842535,879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   24882449,596 ±(99.9%) 127510,481 ops/s [Average]
[info]   (min, avg, max) = (24842535,879, 24882449,596, 24921182,169), stdev = 33114,067
[info]   CI (99.9%): [24754939,115, 25009960,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3,82% complete, ETA 02:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 555224,410 ops/s
[info] # Warmup Iteration   2: 1425195,017 ops/s
[info] # Warmup Iteration   3: 1432041,170 ops/s
[info] # Warmup Iteration   4: 1427128,615 ops/s
[info] # Warmup Iteration   5: 1428745,517 ops/s
[info] Iteration   1: 1422674,578 ops/s
[info]                  ·gc.alloc.rate:                   2155,000 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2247,573 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1429722,602 ops/s
[info]                  ·gc.alloc.rate:                   2165,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2238,878 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1438839,367 ops/s
[info]                  ·gc.alloc.rate:                   2179,560 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714,602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2969,228 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1435226,208 ops/s
[info]                  ·gc.alloc.rate:                   2173,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2235,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1435831,605 ops/s
[info]                  ·gc.alloc.rate:                   2174,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2235,734 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1432458,872 ±(99.9%) 24578,134 ops/s [Average]
[info]   (min, avg, max) = (1422674,578, 1432458,872, 1438839,367), stdev = 6382,863
[info]   CI (99.9%): [1407880,738, 1457037,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2169,850 ±(99.9%) 37,131 MB/sec [Average]
[info]   (min, avg, max) = (2155,000, 2169,850, 2179,560), stdev = 9,643
[info]   CI (99.9%): [2132,718, 2206,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2384,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2384,000, 2384,000, 2384,000), stdev = 0,001
[info]   CI (99.9%): [2384,000, 2384,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,073 ±(99.9%) 0,114 B/op [Average]
[info]   (min, avg, max) = (0,046, 0,073, 0,114), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2171,646 ±(99.9%) 1168,818 MB/sec [Average]
[info]   (min, avg, max) = (2031,678, 2171,646, 2714,602), stdev = 303,538
[info]   CI (99.9%): [1002,828, 3340,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2385,335 ±(99.9%) 1257,018 B/op [Average]
[info]   (min, avg, max) = (2235,260, 2385,335, 2969,228), stdev = 326,444
[info]   CI (99.9%): [1128,317, 3642,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4,02% complete, ETA 02:06:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348842,969 ops/s
[info] # Warmup Iteration   2: 407725,325 ops/s
[info] # Warmup Iteration   3: 410074,667 ops/s
[info] # Warmup Iteration   4: 409777,926 ops/s
[info] # Warmup Iteration   5: 412063,637 ops/s
[info] Iteration   1: 412034,195 ops/s
[info]                  ·gc.alloc.rate:                   2268,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2690,868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10279,034 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 413236,583 ops/s
[info]                  ·gc.alloc.rate:                   2274,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7702,637 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 366023,591 ops/s
[info]                  ·gc.alloc.rate:                   2015,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8711,734 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 358405,837 ops/s
[info]                  ·gc.alloc.rate:                   1973,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8908,722 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 410436,106 ops/s
[info]                  ·gc.alloc.rate:                   2259,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7792,007 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   392027,262 ±(99.9%) 105376,678 ops/s [Average]
[info]   (min, avg, max) = (358405,837, 392027,262, 413236,583), stdev = 27365,989
[info]   CI (99.9%): [286650,585, 497403,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2158,171 ±(99.9%) 579,862 MB/sec [Average]
[info]   (min, avg, max) = (1973,204, 2158,171, 2274,912), stdev = 150,588
[info]   CI (99.9%): [1578,310, 2738,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8664,001, 8664,001, 8664,001), stdev = 0,001
[info]   CI (99.9%): [8664,001, 8664,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,067, 0,083), stdev = 0,009
[info]   CI (99.9%): [0,031, 0,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,268 ±(99.9%) 0,128 B/op [Average]
[info]   (min, avg, max) = (0,238, 0,268, 0,319), stdev = 0,033
[info]   CI (99.9%): [0,139, 0,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2160,126 ±(99.9%) 1142,545 MB/sec [Average]
[info]   (min, avg, max) = (2022,486, 2160,126, 2690,868), stdev = 296,715
[info]   CI (99.9%): [1017,581, 3302,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8678,827 ±(99.9%) 4017,421 B/op [Average]
[info]   (min, avg, max) = (7702,637, 8678,827, 10279,034), stdev = 1043,311
[info]   CI (99.9%): [4661,406, 12696,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,22% complete, ETA 02:06:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300575,862 ops/s
[info] # Warmup Iteration   2: 513032,719 ops/s
[info] # Warmup Iteration   3: 515472,251 ops/s
[info] # Warmup Iteration   4: 512382,239 ops/s
[info] # Warmup Iteration   5: 514550,314 ops/s
[info] Iteration   1: 514866,366 ops/s
[info]                  ·gc.alloc.rate:                   701,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2059,641 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 514328,024 ops/s
[info]                  ·gc.alloc.rate:                   700,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2063,969 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 513723,987 ops/s
[info]                  ·gc.alloc.rate:                   699,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2066,299 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 513097,155 ops/s
[info]                  ·gc.alloc.rate:                   698,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2070,815 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 494829,588 ops/s
[info]                  ·gc.alloc.rate:                   674,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2147,328 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   510169,024 ±(99.9%) 33117,347 ops/s [Average]
[info]   (min, avg, max) = (494829,588, 510169,024, 514866,366), stdev = 8600,470
[info]   CI (99.9%): [477051,677, 543286,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   694,994 ±(99.9%) 45,142 MB/sec [Average]
[info]   (min, avg, max) = (674,083, 694,994, 701,344), stdev = 11,723
[info]   CI (99.9%): [649,852, 740,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2144,001, 2144,001, 2144,001), stdev = 0,001
[info]   CI (99.9%): [2144,001, 2144,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,051 ±(99.9%) 0,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,051, 0,127), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,608 ±(99.9%) 2,190 MB/sec [Average]
[info]   (min, avg, max) = (673,748, 674,608, 675,129), stdev = 0,569
[info]   CI (99.9%): [672,418, 676,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2081,610 ±(99.9%) 142,312 B/op [Average]
[info]   (min, avg, max) = (2059,641, 2081,610, 2147,328), stdev = 36,958
[info]   CI (99.9%): [1939,298, 2223,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,42% complete, ETA 02:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1137450,162 ops/s
[info] # Warmup Iteration   2: 1222546,010 ops/s
[info] # Warmup Iteration   3: 1223869,513 ops/s
[info] # Warmup Iteration   4: 1224000,825 ops/s
[info] # Warmup Iteration   5: 1228060,965 ops/s
[info] Iteration   1: 1227811,700 ops/s
[info]                  ·gc.alloc.rate:                   817,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 864,993 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1228987,468 ops/s
[info]                  ·gc.alloc.rate:                   818,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861,637 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1226459,318 ops/s
[info]                  ·gc.alloc.rate:                   816,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1724,910 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1221352,943 ops/s
[info]                  ·gc.alloc.rate:                   813,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 865,228 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1121275,136 ops/s
[info]                  ·gc.alloc.rate:                   746,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 942,439 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1205177,313 ±(99.9%) 180953,523 ops/s [Average]
[info]   (min, avg, max) = (1121275,136, 1205177,313, 1228987,468), stdev = 46993,055
[info]   CI (99.9%): [1024223,789, 1386130,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   802,532 ±(99.9%) 120,507 MB/sec [Average]
[info]   (min, avg, max) = (746,657, 802,532, 818,467), stdev = 31,295
[info]   CI (99.9%): [682,025, 923,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,037 ±(99.9%) 0,213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,134), stdev = 0,055
[info]   CI (99.9%): [≈ 0, 0,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806,967 ±(99.9%) 1156,567 MB/sec [Average]
[info]   (min, avg, max) = (671,449, 806,967, 1344,256), stdev = 300,357
[info]   CI (99.9%): [≈ 0, 1963,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1051,841 ±(99.9%) 1454,739 B/op [Average]
[info]   (min, avg, max) = (861,637, 1051,841, 1724,910), stdev = 377,791
[info]   CI (99.9%): [≈ 0, 2506,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4,62% complete, ETA 02:05:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86233,300 ops/s
[info] # Warmup Iteration   2: 125560,890 ops/s
[info] # Warmup Iteration   3: 126428,936 ops/s
[info] # Warmup Iteration   4: 125641,501 ops/s
[info] # Warmup Iteration   5: 126312,843 ops/s
[info] Iteration   1: 125873,033 ops/s
[info]                  ·gc.alloc.rate:                   4357,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4079,835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50996,274 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 126359,373 ops/s
[info]                  ·gc.alloc.rate:                   4373,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4765,058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59342,556 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 125967,818 ops/s
[info]                  ·gc.alloc.rate:                   4360,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4085,394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51040,236 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 125992,818 ops/s
[info]                  ·gc.alloc.rate:                   4361,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4770,218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59581,775 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 125944,741 ops/s
[info]                  ·gc.alloc.rate:                   4358,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51092,390 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   126027,557 ±(99.9%) 734,690 ops/s [Average]
[info]   (min, avg, max) = (125873,033, 126027,557, 126359,373), stdev = 190,797
[info]   CI (99.9%): [125292,866, 126762,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4362,414 ±(99.9%) 25,292 MB/sec [Average]
[info]   (min, avg, max) = (4357,903, 4362,414, 4373,965), stdev = 6,568
[info]   CI (99.9%): [4337,122, 4387,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54472,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54472,003, 54472,003, 54472,003), stdev = 0,001
[info]   CI (99.9%): [54472,003, 54472,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,832 ±(99.9%) 1,095 B/op [Average]
[info]   (min, avg, max) = (0,520, 0,832, 1,041), stdev = 0,284
[info]   CI (99.9%): [≈ 0, 1,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   4357,811 ±(99.9%) 1440,666 MB/sec [Average]
[info]   (min, avg, max) = (4079,835, 4357,811, 4770,218), stdev = 374,136
[info]   CI (99.9%): [2917,145, 5798,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54410,646 ±(99.9%) 17760,272 B/op [Average]
[info]   (min, avg, max) = (50996,274, 54410,646, 59581,775), stdev = 4612,286
[info]   CI (99.9%): [36650,374, 72170,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 0,837
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4,82% complete, ETA 02:05:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617955,925 ops/s
[info] # Warmup Iteration   2: 681172,963 ops/s
[info] # Warmup Iteration   3: 679458,218 ops/s
[info] # Warmup Iteration   4: 683799,396 ops/s
[info] # Warmup Iteration   5: 679691,422 ops/s
[info] Iteration   1: 685454,024 ops/s
[info]                  ·gc.alloc.rate:                   2097,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4631,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 687767,910 ops/s
[info]                  ·gc.alloc.rate:                   2104,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2695,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6167,072 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 681631,267 ops/s
[info]                  ·gc.alloc.rate:                   2086,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4675,032 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 681983,131 ops/s
[info]                  ·gc.alloc.rate:                   2086,889 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4680,985 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 684987,682 ops/s
[info]                  ·gc.alloc.rate:                   2096,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4667,888 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   684364,803 ±(99.9%) 9873,748 ops/s [Average]
[info]   (min, avg, max) = (681631,267, 684364,803, 687767,910), stdev = 2564,181
[info]   CI (99.9%): [674491,055, 694238,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2094,178 ±(99.9%) 30,004 MB/sec [Average]
[info]   (min, avg, max) = (2086,014, 2094,178, 2104,678), stdev = 7,792
[info]   CI (99.9%): [2064,174, 2124,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4816,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,001, 4816,001, 4816,001), stdev = 0,001
[info]   CI (99.9%): [4816,001, 4816,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,067 ±(99.9%) 0,165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,096), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2159,353 ±(99.9%) 1153,480 MB/sec [Average]
[info]   (min, avg, max) = (2016,647, 2159,353, 2695,120), stdev = 299,555
[info]   CI (99.9%): [1005,873, 3312,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4964,405 ±(99.9%) 2589,913 B/op [Average]
[info]   (min, avg, max) = (4631,048, 4964,405, 6167,072), stdev = 672,592
[info]   CI (99.9%): [2374,492, 7554,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5,02% complete, ETA 02:05:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292713,585 ops/s
[info] # Warmup Iteration   2: 350342,924 ops/s
[info] # Warmup Iteration   3: 351516,214 ops/s
[info] # Warmup Iteration   4: 352160,596 ops/s
[info] # Warmup Iteration   5: 352638,740 ops/s
[info] Iteration   1: 352438,913 ops/s
[info]                  ·gc.alloc.rate:                   539,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2284,427 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 353613,487 ops/s
[info]                  ·gc.alloc.rate:                   541,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3000,489 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 354009,454 ops/s
[info]                  ·gc.alloc.rate:      541,671 MB/sec
[info]                  ·gc.alloc.rate.norm: 2408,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 352291,748 ops/s
[info]                  ·gc.alloc.rate:                   539,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3011,516 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 353092,189 ops/s
[info]                  ·gc.alloc.rate:                   540,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2995,872 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   353089,158 ±(99.9%) 2843,067 ops/s [Average]
[info]   (min, avg, max) = (352291,748, 353089,158, 354009,454), stdev = 738,335
[info]   CI (99.9%): [350246,091, 355932,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   540,250 ±(99.9%) 4,455 MB/sec [Average]
[info]   (min, avg, max) = (539,032, 540,250, 541,671), stdev = 1,157
[info]   CI (99.9%): [535,795, 544,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2408,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2408,001, 2408,001, 2408,001), stdev = 0,001
[info]   CI (99.9%): [2408,001, 2408,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,707 ±(99.9%) 5,939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,707, 3,466), stdev = 1,542
[info]   CI (99.9%): [≈ 0, 6,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,147 ±(99.9%) 26,430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,147, 15,424), stdev = 6,864
[info]   CI (99.9%): [≈ 0, 29,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   506,408 ±(99.9%) 1123,050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,408, 674,232), stdev = 291,653
[info]   CI (99.9%): [≈ 0, 1629,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2258,461 ±(99.9%) 5006,871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2258,461, 3011,516), stdev = 1300,269
[info]   CI (99.9%): [≈ 0, 7265,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,22% complete, ETA 02:05:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461858,398 ops/s
[info] # Warmup Iteration   2: 666190,415 ops/s
[info] # Warmup Iteration   3: 664457,560 ops/s
[info] # Warmup Iteration   4: 673364,744 ops/s
[info] # Warmup Iteration   5: 673959,457 ops/s
[info] Iteration   1: 670274,244 ops/s
[info]                  ·gc.alloc.rate:                   493,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201,174 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 672023,178 ops/s
[info]                  ·gc.alloc.rate:                   495,354 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1578,067 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 678936,483 ops/s
[info]                  ·gc.alloc.rate:      500,453 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 676930,622 ops/s
[info]                  ·gc.alloc.rate:                   498,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1566,525 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 674383,557 ops/s
[info]                  ·gc.alloc.rate:                   497,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1574,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   674509,617 ±(99.9%) 13558,842 ops/s [Average]
[info]   (min, avg, max) = (670274,244, 674509,617, 678936,483), stdev = 3521,188
[info]   CI (99.9%): [660950,774, 688068,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   497,151 ±(99.9%) 10,063 MB/sec [Average]
[info]   (min, avg, max) = (493,987, 497,151, 500,453), stdev = 2,613
[info]   CI (99.9%): [487,087, 507,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,001, 1160,001, 1160,001), stdev = 0,001
[info]   CI (99.9%): [1160,001, 1160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,079 ±(99.9%) 0,505 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,312), stdev = 0,131
[info]   CI (99.9%): [≈ 0, 0,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,185 ±(99.9%) 1,183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,185, 0,731), stdev = 0,307
[info]   CI (99.9%): [≈ 0, 1,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506,720 ±(99.9%) 1123,906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,720, 674,423), stdev = 291,875
[info]   CI (99.9%): [≈ 0, 1630,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1183,955 ±(99.9%) 2622,874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1183,955, 1578,067), stdev = 681,152
[info]   CI (99.9%): [≈ 0, 3806,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,42% complete, ETA 02:05:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2786684,323 ops/s
[info] # Warmup Iteration   2: 2987359,591 ops/s
[info] # Warmup Iteration   3: 2995199,447 ops/s
[info] # Warmup Iteration   4: 3025462,475 ops/s
[info] # Warmup Iteration   5: 2627129,924 ops/s
[info] Iteration   1: 3019087,822 ops/s
[info]                  ·gc.alloc.rate:                   1396,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3027050,561 ops/s
[info]                  ·gc.alloc.rate:                   1400,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 698,413 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3024754,749 ops/s
[info]                  ·gc.alloc.rate:                   1399,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699,230 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3033541,875 ops/s
[info]                  ·gc.alloc.rate:                   1403,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 697,926 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3018322,010 ops/s
[info]                  ·gc.alloc.rate:                   1396,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 702,336 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   3024551,403 ±(99.9%) 24029,668 ops/s [Average]
[info]   (min, avg, max) = (3018322,010, 3024551,403, 3033541,875), stdev = 6240,428
[info]   CI (99.9%): [3000521,736, 3048581,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1399,095 ±(99.9%) 11,213 MB/sec [Average]
[info]   (min, avg, max) = (1396,283, 1399,095, 1403,312), stdev = 2,912
[info]   CI (99.9%): [1387,882, 1410,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,024 ±(99.9%) 0,054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,024, 0,033), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344,486 ±(99.9%) 6,630 MB/sec [Average]
[info]   (min, avg, max) = (1342,813, 1344,486, 1347,060), stdev = 1,722
[info]   CI (99.9%): [1337,856, 1351,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   699,587 ±(99.9%) 6,675 B/op [Average]
[info]   (min, avg, max) = (697,926, 699,587, 702,336), stdev = 1,734
[info]   CI (99.9%): [692,912, 706,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5,62% complete, ETA 02:04:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2903927,669 ops/s
[info] # Warmup Iteration   2: 3037788,392 ops/s
[info] # Warmup Iteration   3: 3028548,268 ops/s
[info] # Warmup Iteration   4: 3026903,733 ops/s
[info] # Warmup Iteration   5: 3029057,329 ops/s
[info] Iteration   1: 3032106,590 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3029804,876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3008994,392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3022316,254 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3022474,742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3023139,371 ±(99.9%) 34764,707 ops/s [Average]
[info]   (min, avg, max) = (3008994,392, 3023139,371, 3032106,590), stdev = 9028,284
[info]   CI (99.9%): [2988374,664, 3057904,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5,82% complete, ETA 02:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 365299,559 ops/s
[info] # Warmup Iteration   2: 446104,989 ops/s
[info] # Warmup Iteration   3: 441067,626 ops/s
[info] # Warmup Iteration   4: 443872,708 ops/s
[info] # Warmup Iteration   5: 378251,577 ops/s
[info] Iteration   1: 444406,207 ops/s
[info]                  ·gc.alloc.rate:      639,290 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 389579,208 ops/s
[info]                  ·gc.alloc.rate:                   560,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2720,729 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 444715,103 ops/s
[info]                  ·gc.alloc.rate:                   639,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2383,379 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 443311,660 ops/s
[info]                  ·gc.alloc.rate:                   637,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2381,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 444458,268 ops/s
[info]                  ·gc.alloc.rate:                   639,364 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2375,300 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   433294,089 ±(99.9%) 94122,454 ops/s [Average]
[info]   (min, avg, max) = (389579,208, 433294,089, 444715,103), stdev = 24443,302
[info]   CI (99.9%): [339171,635, 527416,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   623,304 ±(99.9%) 135,371 MB/sec [Average]
[info]   (min, avg, max) = (560,432, 623,304, 639,727), stdev = 35,156
[info]   CI (99.9%): [487,933, 758,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,807 ±(99.9%) 6,816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,807, 3,974), stdev = 1,770
[info]   CI (99.9%): [≈ 0, 7,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3,255 ±(99.9%) 27,548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,255, 16,052), stdev = 7,154
[info]   CI (99.9%): [≈ 0, 30,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   537,701 ±(99.9%) 1157,454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,701, 673,490), stdev = 300,587
[info]   CI (99.9%): [≈ 0, 1695,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1972,150 ±(99.9%) 4283,062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1972,150, 2720,729), stdev = 1112,298
[info]   CI (99.9%): [≈ 0, 6255,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6,02% complete, ETA 02:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188501,460 ops/s
[info] # Warmup Iteration   2: 196897,920 ops/s
[info] # Warmup Iteration   3: 197895,490 ops/s
[info] # Warmup Iteration   4: 199942,168 ops/s
[info] # Warmup Iteration   5: 199704,148 ops/s
[info] Iteration   1: 199233,959 ops/s
[info]                  ·gc.alloc.rate:                   508,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4041,100 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 200742,801 ops/s
[info]                  ·gc.alloc.rate:      512,304 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 200062,754 ops/s
[info]                  ·gc.alloc.rate:                   510,495 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5308,198 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 199890,970 ops/s
[info]                  ·gc.alloc.rate:                   510,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5312,738 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 200598,391 ops/s
[info]                  ·gc.alloc.rate:                   511,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5278,628 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   200105,775 ±(99.9%) 2323,608 ops/s [Average]
[info]   (min, avg, max) = (199233,959, 200105,775, 200742,801), stdev = 603,434
[info]   CI (99.9%): [197782,167, 202429,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   510,615 ±(99.9%) 6,056 MB/sec [Average]
[info]   (min, avg, max) = (508,349, 510,615, 512,304), stdev = 1,573
[info]   CI (99.9%): [504,560, 516,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,672 ±(99.9%) 5,673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,672, 3,307), stdev = 1,473
[info]   CI (99.9%): [≈ 0, 6,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5,285 ±(99.9%) 44,627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,285, 26,016), stdev = 11,590
[info]   CI (99.9%): [≈ 0, 49,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   506,767 ±(99.9%) 1124,034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,767, 674,753), stdev = 291,908
[info]   CI (99.9%): [≈ 0, 1630,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3988,133 ±(99.9%) 8837,739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3988,133, 5312,738), stdev = 2295,133
[info]   CI (99.9%): [≈ 0, 12825,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6,22% complete, ETA 02:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19766,278 ops/s
[info] # Warmup Iteration   2: 23170,504 ops/s
[info] # Warmup Iteration   3: 23175,682 ops/s
[info] # Warmup Iteration   4: 23290,698 ops/s
[info] # Warmup Iteration   5: 23209,605 ops/s
[info] Iteration   1: 23177,379 ops/s
[info]                  ·gc.alloc.rate:                   1450,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91184,455 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 23403,503 ops/s
[info]                  ·gc.alloc.rate:                   1464,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90311,839 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 23267,429 ops/s
[info]                  ·gc.alloc.rate:                   1455,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90921,943 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23379,993 ops/s
[info]                  ·gc.alloc.rate:                   1463,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90572,288 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21619,116 ops/s
[info]                  ·gc.alloc.rate:                   1352,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98049,421 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   22969,484 ±(99.9%) 2927,740 ops/s [Average]
[info]   (min, avg, max) = (21619,116, 22969,484, 23403,503), stdev = 760,325
[info]   CI (99.9%): [20041,744, 25897,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1437,332 ±(99.9%) 183,239 MB/sec [Average]
[info]   (min, avg, max) = (1352,843, 1437,332, 1464,640), stdev = 47,586
[info]   CI (99.9%): [1254,093, 1620,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480,018 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (98480,017, 98480,018, 98480,019), stdev = 0,001
[info]   CI (99.9%): [98480,015, 98480,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2,310 ±(99.9%) 8,501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,310, 4,546), stdev = 2,208
[info]   CI (99.9%): [≈ 0, 10,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1344,522 ±(99.9%) 6,707 MB/sec [Average]
[info]   (min, avg, max) = (1342,728, 1344,522, 1346,928), stdev = 1,742
[info]   CI (99.9%): [1337,815, 1351,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   92207,989 ±(99.9%) 12639,085 B/op [Average]
[info]   (min, avg, max) = (90311,839, 92207,989, 98049,421), stdev = 3282,330
[info]   CI (99.9%): [79568,904, 104847,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,43% complete, ETA 02:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23686,598 ops/s
[info] # Warmup Iteration   2: 34754,909 ops/s
[info] # Warmup Iteration   3: 34518,251 ops/s
[info] # Warmup Iteration   4: 34731,896 ops/s
[info] # Warmup Iteration   5: 35036,148 ops/s
[info] Iteration   1: 35151,707 ops/s
[info]                  ·gc.alloc.rate:                   880,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30213,257 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 32693,681 ops/s
[info]                  ·gc.alloc.rate:                   818,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32485,396 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 35211,049 ops/s
[info]                  ·gc.alloc.rate:                   882,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60379,685 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 35250,531 ops/s
[info]                  ·gc.alloc.rate:                   883,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30185,333 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 35257,345 ops/s
[info]                  ·gc.alloc.rate:                   883,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30179,341 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   34712,863 ±(99.9%) 4349,446 ops/s [Average]
[info]   (min, avg, max) = (32693,681, 34712,863, 35257,345), stdev = 1129,537
[info]   CI (99.9%): [30363,417, 39062,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   869,582 ±(99.9%) 109,030 MB/sec [Average]
[info]   (min, avg, max) = (818,960, 869,582, 883,104), stdev = 28,315
[info]   CI (99.9%): [760,552, 978,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39424,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (39424,012, 39424,012, 39424,013), stdev = 0,001
[info]   CI (99.9%): [39424,009, 39424,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,331 ±(99.9%) 6,050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,331, 3,722), stdev = 1,571
[info]   CI (99.9%): [≈ 0, 7,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810,568 ±(99.9%) 1163,138 MB/sec [Average]
[info]   (min, avg, max) = (674,823, 810,568, 1350,915), stdev = 302,063
[info]   CI (99.9%): [≈ 0, 1973,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   36688,602 ±(99.9%) 51139,952 B/op [Average]
[info]   (min, avg, max) = (30179,341, 36688,602, 60379,685), stdev = 13280,883
[info]   CI (99.9%): [≈ 0, 87828,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,63% complete, ETA 02:03:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34711,396 ops/s
[info] # Warmup Iteration   2: 38348,362 ops/s
[info] # Warmup Iteration   3: 38164,730 ops/s
[info] # Warmup Iteration   4: 38539,207 ops/s
[info] # Warmup Iteration   5: 35867,141 ops/s
[info] Iteration   1: 38404,406 ops/s
[info]                  ·gc.alloc.rate:                   572,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20963,877 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 38452,491 ops/s
[info]                  ·gc.alloc.rate:                   572,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27619,936 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38404,017 ops/s
[info]                  ·gc.alloc.rate:                   572,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27652,292 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33759,607 ops/s
[info]                  ·gc.alloc.rate:      502,940 MB/sec
[info]                  ·gc.alloc.rate.norm: 23448,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38351,478 ops/s
[info]                  ·gc.alloc.rate:                   571,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27580,438 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   37474,400 ±(99.9%) 7997,556 ops/s [Average]
[info]   (min, avg, max) = (33759,607, 37474,400, 38452,491), stdev = 2076,940
[info]   CI (99.9%): [29476,844, 45471,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   558,308 ±(99.9%) 119,203 MB/sec [Average]
[info]   (min, avg, max) = (502,940, 558,308, 572,949), stdev = 30,957
[info]   CI (99.9%): [439,105, 677,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (23448,011, 23448,011, 23448,012), stdev = 0,001
[info]   CI (99.9%): [23448,009, 23448,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,677 ±(99.9%) 5,697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,677, 3,324), stdev = 1,480
[info]   CI (99.9%): [≈ 0, 6,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27,717 ±(99.9%) 233,158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27,717, 136,025), stdev = 60,550
[info]   CI (99.9%): [≈ 0, 260,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506,645 ±(99.9%) 1123,729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,645, 674,889), stdev = 291,829
[info]   CI (99.9%): [≈ 0, 1630,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20763,309 ±(99.9%) 46051,025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20763,309, 27652,292), stdev = 11959,305
[info]   CI (99.9%): [≈ 0, 66814,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6,83% complete, ETA 02:03:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18734,741 ops/s
[info] # Warmup Iteration   2: 29786,922 ops/s
[info] # Warmup Iteration   3: 29584,937 ops/s
[info] # Warmup Iteration   4: 29624,972 ops/s
[info] # Warmup Iteration   5: 29730,939 ops/s
[info] Iteration   1: 29677,175 ops/s
[info]                  ·gc.alloc.rate:                   1572,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71741,885 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29837,808 ops/s
[info]                  ·gc.alloc.rate:                   1581,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71427,543 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 29790,792 ops/s
[info]                  ·gc.alloc.rate:                   1578,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107433,470 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 29738,001 ops/s
[info]                  ·gc.alloc.rate:                   1575,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71808,684 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29781,808 ops/s
[info]                  ·gc.alloc.rate:                   1578,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71737,819 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   29765,117 ±(99.9%) 233,360 ops/s [Average]
[info]   (min, avg, max) = (29677,175, 29765,117, 29837,808), stdev = 60,603
[info]   CI (99.9%): [29531,756, 29998,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1577,281 ±(99.9%) 12,313 MB/sec [Average]
[info]   (min, avg, max) = (1572,599, 1577,281, 1581,019), stdev = 3,198
[info]   CI (99.9%): [1564,968, 1589,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (83400,014, 83400,014, 83400,015), stdev = 0,001
[info]   CI (99.9%): [83400,012, 83400,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,979 ±(99.9%) 5,517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,979, 3,299), stdev = 1,433
[info]   CI (99.9%): [≈ 0, 7,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1490,967 ±(99.9%) 1168,123 MB/sec [Average]
[info]   (min, avg, max) = (1352,772, 1490,967, 2033,618), stdev = 303,358
[info]   CI (99.9%): [322,844, 2659,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78829,880 ±(99.9%) 61574,016 B/op [Average]
[info]   (min, avg, max) = (71427,543, 78829,880, 107433,470), stdev = 15990,576
[info]   CI (99.9%): [17255,864, 140403,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7,03% complete, ETA 02:03:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23037,036 ops/s
[info] # Warmup Iteration   2: 33625,279 ops/s
[info] # Warmup Iteration   3: 33179,780 ops/s
[info] # Warmup Iteration   4: 33430,937 ops/s
[info] # Warmup Iteration   5: 33926,147 ops/s
[info] Iteration   1: 32851,818 ops/s
[info]                  ·gc.alloc.rate:                   1834,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              87896,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013,986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96486,991 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 34074,013 ops/s
[info]                  ·gc.alloc.rate:                   1903,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              87896,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93150,347 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 34133,702 ops/s
[info]                  ·gc.alloc.rate:                   1906,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              87896,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93134,753 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 34024,695 ops/s
[info]                  ·gc.alloc.rate:                   1900,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              87896,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62374,159 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 34008,398 ops/s
[info]                  ·gc.alloc.rate:                   1899,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              87896,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93739,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   33818,525 ±(99.9%) 2089,387 ops/s [Average]
[info]   (min, avg, max) = (32851,818, 33818,525, 34133,702), stdev = 542,607
[info]   CI (99.9%): [31729,138, 35907,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1888,842 ±(99.9%) 117,114 MB/sec [Average]
[info]   (min, avg, max) = (1834,666, 1888,842, 1906,461), stdev = 30,414
[info]   CI (99.9%): [1771,728, 2005,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87896,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (87896,012, 87896,012, 87896,013), stdev = 0,001
[info]   CI (99.9%): [87896,010, 87896,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,146), stdev = 0,060
[info]   CI (99.9%): [≈ 0, 0,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,277 ±(99.9%) 10,648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,277, 6,743), stdev = 2,765
[info]   CI (99.9%): [≈ 0, 13,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1885,087 ±(99.9%) 1155,133 MB/sec [Average]
[info]   (min, avg, max) = (1348,513, 1885,087, 2025,629), stdev = 299,984
[info]   CI (99.9%): [729,954, 3040,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87777,050 ±(99.9%) 54940,611 B/op [Average]
[info]   (min, avg, max) = (62374,159, 87777,050, 96486,991), stdev = 14267,902
[info]   CI (99.9%): [32836,439, 142717,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,23% complete, ETA 02:02:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18266,714 ops/s
[info] # Warmup Iteration   2: 32322,580 ops/s
[info] # Warmup Iteration   3: 32644,095 ops/s
[info] # Warmup Iteration   4: 32584,448 ops/s
[info] # Warmup Iteration   5: 32705,906 ops/s
[info] Iteration   1: 32350,666 ops/s
[info]                  ·gc.alloc.rate:                   1741,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65849,938 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 32342,768 ops/s
[info]                  ·gc.alloc.rate:                   1741,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98883,427 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   3: 32707,484 ops/s
[info]                  ·gc.alloc.rate:                   1760,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65241,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 32384,498 ops/s
[info]                  ·gc.alloc.rate:                   1743,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98921,043 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 32627,362 ops/s
[info]                  ·gc.alloc.rate:                   1756,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98251,790 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   32482,556 ±(99.9%) 661,685 ops/s [Average]
[info]   (min, avg, max) = (32342,768, 32482,556, 32707,484), stdev = 171,838
[info]   CI (99.9%): [31820,870, 33144,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1748,614 ±(99.9%) 35,607 MB/sec [Average]
[info]   (min, avg, max) = (1741,151, 1748,614, 1760,703), stdev = 9,247
[info]   CI (99.9%): [1713,007, 1784,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84720,013 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (84720,013, 84720,013, 84720,014), stdev = 0,001
[info]   CI (99.9%): [84720,010, 84720,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3,026 ±(99.9%) 7,763 B/op [Average]
[info]   (min, avg, max) = (1,002, 3,026, 5,058), stdev = 2,016
[info]   CI (99.9%): [≈ 0, 10,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1762,846 ±(99.9%) 1434,629 MB/sec [Average]
[info]   (min, avg, max) = (1353,557, 1762,846, 2036,966), stdev = 372,569
[info]   CI (99.9%): [328,217, 3197,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   85429,544 ±(99.9%) 69906,811 B/op [Average]
[info]   (min, avg, max) = (65241,524, 85429,544, 98921,043), stdev = 18154,577
[info]   CI (99.9%): [15522,733, 155336,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,400, 10,000), stdev = 3,715
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,43% complete, ETA 02:02:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30428,076 ops/s
[info] # Warmup Iteration   2: 37441,282 ops/s
[info] # Warmup Iteration   3: 36932,165 ops/s
[info] # Warmup Iteration   4: 37455,761 ops/s
[info] # Warmup Iteration   5: 37784,412 ops/s
[info] Iteration   1: 37773,676 ops/s
[info]                  ·gc.alloc.rate:                   1877,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55990,845 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37930,173 ops/s
[info]                  ·gc.alloc.rate:                   1885,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83721,346 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37793,208 ops/s
[info]                  ·gc.alloc.rate:                   1878,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84200,636 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37814,878 ops/s
[info]                  ·gc.alloc.rate:                   1879,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84264,779 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37822,195 ops/s
[info]                  ·gc.alloc.rate:                   1880,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56235,580 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   37826,826 ±(99.9%) 234,226 ops/s [Average]
[info]   (min, avg, max) = (37773,676, 37826,826, 37930,173), stdev = 60,828
[info]   CI (99.9%): [37592,600, 38061,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1880,178 ±(99.9%) 12,226 MB/sec [Average]
[info]   (min, avg, max) = (1877,202, 1880,178, 1885,516), stdev = 3,175
[info]   CI (99.9%): [1867,952, 1892,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   78224,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (78224,011, 78224,011, 78224,012), stdev = 0,001
[info]   CI (99.9%): [78224,010, 78224,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,212 ±(99.9%) 4,467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,212, 2,591), stdev = 1,160
[info]   CI (99.9%): [≈ 0, 5,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1752,014 ±(99.9%) 1421,641 MB/sec [Average]
[info]   (min, avg, max) = (1343,656, 1752,014, 2024,756), stdev = 369,196
[info]   CI (99.9%): [330,373, 3173,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   72882,637 ±(99.9%) 58953,379 B/op [Average]
[info]   (min, avg, max) = (55990,845, 72882,637, 84264,779), stdev = 15310,005
[info]   CI (99.9%): [13929,259, 131836,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7,63% complete, ETA 02:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29906,151 ops/s
[info] # Warmup Iteration   2: 35899,194 ops/s
[info] # Warmup Iteration   3: 35752,679 ops/s
[info] # Warmup Iteration   4: 36655,686 ops/s
[info] # Warmup Iteration   5: 36755,691 ops/s
[info] Iteration   1: 36824,979 ops/s
[info]                  ·gc.alloc.rate:                   1793,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              76656,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86140,654 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37041,340 ops/s
[info]                  ·gc.alloc.rate:                   1804,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              76656,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57161,346 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 36823,971 ops/s
[info]                  ·gc.alloc.rate:                   1793,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              76656,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86363,533 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 36761,677 ops/s
[info]                  ·gc.alloc.rate:                   1790,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              76656,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86647,036 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37029,854 ops/s
[info]                  ·gc.alloc.rate:                   1803,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              76656,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57414,335 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   36896,364 ±(99.9%) 499,526 ops/s [Average]
[info]   (min, avg, max) = (36761,677, 36896,364, 37041,340), stdev = 129,725
[info]   CI (99.9%): [36396,838, 37395,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1797,096 ±(99.9%) 24,836 MB/sec [Average]
[info]   (min, avg, max) = (1790,577, 1797,096, 1804,399), stdev = 6,450
[info]   CI (99.9%): [1772,260, 1821,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   76656,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (76656,011, 76656,011, 76656,011), stdev = 0,001
[info]   CI (99.9%): [76656,011, 76656,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1,423 ±(99.9%) 5,198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,423, 3,559), stdev = 1,350
[info]   CI (99.9%): [≈ 0, 6,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1751,248 ±(99.9%) 1416,752 MB/sec [Average]
[info]   (min, avg, max) = (1345,516, 1751,248, 2023,953), stdev = 367,926
[info]   CI (99.9%): [334,496, 3168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   74745,381 ±(99.9%) 61370,572 B/op [Average]
[info]   (min, avg, max) = (57161,346, 74745,381, 86647,036), stdev = 15937,743
[info]   CI (99.9%): [13374,809, 136115,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7,83% complete, ETA 02:02:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6699,029 ops/s
[info] # Warmup Iteration   2: 9460,910 ops/s
[info] # Warmup Iteration   3: 9578,957 ops/s
[info] # Warmup Iteration   4: 9557,787 ops/s
[info] # Warmup Iteration   5: 9614,665 ops/s
[info] Iteration   1: 9583,782 ops/s
[info]                  ·gc.alloc.rate:                   1235,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219866,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9633,742 ops/s
[info]                  ·gc.alloc.rate:                   1241,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109362,690 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9554,140 ops/s
[info]                  ·gc.alloc.rate:                   1231,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220588,265 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9600,838 ops/s
[info]                  ·gc.alloc.rate:                   1237,571 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219672,523 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9588,291 ops/s
[info]                  ·gc.alloc.rate:                   1236,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220165,978 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   9592,158 ±(99.9%) 111,187 ops/s [Average]
[info]   (min, avg, max) = (9554,140, 9592,158, 9633,742), stdev = 28,875
[info]   CI (99.9%): [9480,971, 9703,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1236,507 ±(99.9%) 14,412 MB/sec [Average]
[info]   (min, avg, max) = (1231,537, 1236,507, 1241,887), stdev = 3,743
[info]   CI (99.9%): [1222,095, 1250,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202880,044 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (202880,042, 202880,044, 202880,046), stdev = 0,002
[info]   CI (99.9%): [202880,037, 202880,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4,104 ±(99.9%) 11,034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,104, 6,857), stdev = 2,865
[info]   CI (99.9%): [≈ 0, 15,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1205,755 ±(99.9%) 1154,464 MB/sec [Average]
[info]   (min, avg, max) = (669,440, 1205,755, 1341,377), stdev = 299,811
[info]   CI (99.9%): [51,291, 2360,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   197931,139 ±(99.9%) 190654,904 B/op [Average]
[info]   (min, avg, max) = (109362,690, 197931,139, 220588,265), stdev = 49512,473
[info]   CI (99.9%): [7276,235, 388586,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8,03% complete, ETA 02:01:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16045,153 ops/s
[info] # Warmup Iteration   2: 19809,722 ops/s
[info] # Warmup Iteration   3: 20038,276 ops/s
[info] # Warmup Iteration   4: 20023,520 ops/s
[info] # Warmup Iteration   5: 19787,434 ops/s
[info] Iteration   1: 18840,120 ops/s
[info]                  ·gc.alloc.rate:                   1463,772 MB/sec
[info]                  ·gc.alloc.rate.norm:              122287,159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112180,493 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19597,014 ops/s
[info]                  ·gc.alloc.rate:                   1522,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161825,540 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20115,252 ops/s
[info]                  ·gc.alloc.rate:                   1563,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105227,643 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 19954,369 ops/s
[info]                  ·gc.alloc.rate:                   1550,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106181,586 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19641,170 ops/s
[info]                  ·gc.alloc.rate:                   1526,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108001,300 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19629,585 ±(99.9%) 1892,119 ops/s [Average]
[info]   (min, avg, max) = (18840,120, 19629,585, 20115,252), stdev = 491,377
[info]   CI (99.9%): [17737,466, 21521,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1525,293 ±(99.9%) 147,363 MB/sec [Average]
[info]   (min, avg, max) = (1463,772, 1525,293, 1563,112), stdev = 38,270
[info]   CI (99.9%): [1377,930, 1672,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122287,849 ±(99.9%) 1,486 B/op [Average]
[info]   (min, avg, max) = (122287,159, 122287,849, 122288,022), stdev = 0,386
[info]   CI (99.9%): [122286,363, 122289,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,704 ±(99.9%) 8,522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,704, 5,217), stdev = 2,213
[info]   CI (99.9%): [≈ 0, 12,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479,452 ±(99.9%) 1153,285 MB/sec [Average]
[info]   (min, avg, max) = (1342,796, 1479,452, 2015,211), stdev = 299,504
[info]   CI (99.9%): [326,166, 2632,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   118683,312 ±(99.9%) 93432,525 B/op [Average]
[info]   (min, avg, max) = (105227,643, 118683,312, 161825,540), stdev = 24264,130
[info]   CI (99.9%): [25250,787, 212115,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,23% complete, ETA 02:01:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33231,896 ops/s
[info] # Warmup Iteration   2: 46448,875 ops/s
[info] # Warmup Iteration   3: 46257,845 ops/s
[info] # Warmup Iteration   4: 45928,716 ops/s
[info] # Warmup Iteration   5: 46410,982 ops/s
[info] Iteration   1: 46507,903 ops/s
[info]                  ·gc.alloc.rate:                   1146,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22856,383 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 46575,418 ops/s
[info]                  ·gc.alloc.rate:                   1147,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45672,471 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 46485,335 ops/s
[info]                  ·gc.alloc.rate:                   1145,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45804,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 46471,906 ops/s
[info]                  ·gc.alloc.rate:                   1145,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45858,987 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 46479,388 ops/s
[info]                  ·gc.alloc.rate:                   1145,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677,467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22939,292 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   46503,990 ±(99.9%) 162,229 ops/s [Average]
[info]   (min, avg, max) = (46471,906, 46503,990, 46575,418), stdev = 42,130
[info]   CI (99.9%): [46341,761, 46666,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1146,255 ±(99.9%) 3,715 MB/sec [Average]
[info]   (min, avg, max) = (1145,564, 1146,255, 1147,888), stdev = 0,965
[info]   CI (99.9%): [1142,540, 1149,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38792,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38792,009, 38792,009, 38792,009), stdev = 0,001
[info]   CI (99.9%): [38792,008, 38792,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,125), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,691 ±(99.9%) 6,250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,691, 4,229), stdev = 1,623
[info]   CI (99.9%): [≈ 0, 7,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082,317 ±(99.9%) 1426,670 MB/sec [Average]
[info]   (min, avg, max) = (675,442, 1082,317, 1354,258), stdev = 370,502
[info]   CI (99.9%): [≈ 0, 2508,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   36626,230 ±(99.9%) 48258,073 B/op [Average]
[info]   (min, avg, max) = (22856,383, 36626,230, 45858,987), stdev = 12532,468
[info]   CI (99.9%): [≈ 0, 84884,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,43% complete, ETA 02:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59833,906 ops/s
[info] # Warmup Iteration   2: 64258,960 ops/s
[info] # Warmup Iteration   3: 64468,995 ops/s
[info] # Warmup Iteration   4: 64845,731 ops/s
[info] # Warmup Iteration   5: 64900,293 ops/s
[info] Iteration   1: 64940,140 ops/s
[info]                  ·gc.alloc.rate:                   838,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16352,723 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 65066,535 ops/s
[info]                  ·gc.alloc.rate:                   840,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32548,459 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 64948,015 ops/s
[info]                  ·gc.alloc.rate:                   839,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16270,255 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 61391,578 ops/s
[info]                  ·gc.alloc.rate:                   793,477 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17213,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 65145,208 ops/s
[info]                  ·gc.alloc.rate:                   841,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16222,310 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   64298,295 ±(99.9%) 6265,602 ops/s [Average]
[info]   (min, avg, max) = (61391,578, 64298,295, 65145,208), stdev = 1627,157
[info]   CI (99.9%): [58032,693, 70563,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   830,875 ±(99.9%) 80,633 MB/sec [Average]
[info]   (min, avg, max) = (793,477, 830,875, 841,844), stdev = 20,940
[info]   CI (99.9%): [750,242, 911,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20336,006, 20336,007, 20336,007), stdev = 0,001
[info]   CI (99.9%): [20336,006, 20336,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,717 ±(99.9%) 1,777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,717, 1,067), stdev = 0,462
[info]   CI (99.9%): [≈ 0, 2,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807,019 ±(99.9%) 1159,924 MB/sec [Average]
[info]   (min, avg, max) = (671,404, 807,019, 1345,868), stdev = 301,229
[info]   CI (99.9%): [≈ 0, 1966,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19721,351 ±(99.9%) 27655,526 B/op [Average]
[info]   (min, avg, max) = (16222,310, 19721,351, 32548,459), stdev = 7182,052
[info]   CI (99.9%): [≈ 0, 47376,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8,63% complete, ETA 02:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20035,742 ops/s
[info] # Warmup Iteration   2: 35705,965 ops/s
[info] # Warmup Iteration   3: 35757,019 ops/s
[info] # Warmup Iteration   4: 35665,944 ops/s
[info] # Warmup Iteration   5: 35740,044 ops/s
[info] Iteration   1: 35735,997 ops/s
[info]                  ·gc.alloc.rate:                   2387,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710,940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119393,043 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 35887,246 ops/s
[info]                  ·gc.alloc.rate:                   2397,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89277,805 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 35816,842 ops/s
[info]                  ·gc.alloc.rate:                   2392,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717,181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119389,854 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 35658,872 ops/s
[info]                  ·gc.alloc.rate:                   2382,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89995,546 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 35717,104 ops/s
[info]                  ·gc.alloc.rate:                   2386,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721,247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119874,157 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   35763,212 ±(99.9%) 344,488 ops/s [Average]
[info]   (min, avg, max) = (35658,872, 35763,212, 35887,246), stdev = 89,463
[info]   CI (99.9%): [35418,724, 36107,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2389,475 ±(99.9%) 22,973 MB/sec [Average]
[info]   (min, avg, max) = (2382,384, 2389,475, 2397,770), stdev = 5,966
[info]   CI (99.9%): [2366,502, 2412,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105144,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (105144,011, 105144,012, 105144,013), stdev = 0,001
[info]   CI (99.9%): [105144,010, 105144,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,125), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3,665 ±(99.9%) 5,587 B/op [Average]
[info]   (min, avg, max) = (1,829, 3,665, 5,504), stdev = 1,451
[info]   CI (99.9%): [≈ 0, 9,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2444,892 ±(99.9%) 1431,955 MB/sec [Average]
[info]   (min, avg, max) = (2035,947, 2444,892, 2721,247), stdev = 371,874
[info]   CI (99.9%): [1012,937, 3876,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   107586,081 ±(99.9%) 63106,818 B/op [Average]
[info]   (min, avg, max) = (89277,805, 107586,081, 119874,157), stdev = 16388,640
[info]   CI (99.9%): [44479,263, 170692,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,84% complete, ETA 02:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23977,804 ops/s
[info] # Warmup Iteration   2: 37220,793 ops/s
[info] # Warmup Iteration   3: 37500,998 ops/s
[info] # Warmup Iteration   4: 37444,328 ops/s
[info] # Warmup Iteration   5: 37160,242 ops/s
[info] Iteration   1: 37413,525 ops/s
[info]                  ·gc.alloc.rate:                   2119,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85478,236 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37472,952 ops/s
[info]                  ·gc.alloc.rate:                   2122,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113939,160 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 37459,611 ops/s
[info]                  ·gc.alloc.rate:                   2121,863 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85578,623 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37537,083 ops/s
[info]                  ·gc.alloc.rate:                   2126,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85475,212 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37442,314 ops/s
[info]                  ·gc.alloc.rate:                   2120,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85745,748 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   37465,097 ±(99.9%) 177,010 ops/s [Average]
[info]   (min, avg, max) = (37413,525, 37465,097, 37537,083), stdev = 45,969
[info]   CI (99.9%): [37288,087, 37642,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2122,122 ±(99.9%) 10,221 MB/sec [Average]
[info]   (min, avg, max) = (2119,185, 2122,122, 2126,309), stdev = 2,654
[info]   CI (99.9%): [2111,901, 2132,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (89144,011, 89144,011, 89144,012), stdev = 0,001
[info]   CI (99.9%): [89144,010, 89144,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,749 ±(99.9%) 2,381 B/op [Average]
[info]   (min, avg, max) = (0,875, 1,749, 2,624), stdev = 0,618
[info]   CI (99.9%): [≈ 0, 4,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2172,121 ±(99.9%) 1164,003 MB/sec [Average]
[info]   (min, avg, max) = (2032,040, 2172,121, 2712,843), stdev = 302,288
[info]   CI (99.9%): [1008,118, 3336,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   91243,396 ±(99.9%) 48856,178 B/op [Average]
[info]   (min, avg, max) = (85475,212, 91243,396, 113939,160), stdev = 12687,794
[info]   CI (99.9%): [42387,218, 140099,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,04% complete, ETA 02:00:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49402,786 ops/s
[info] # Warmup Iteration   2: 53570,557 ops/s
[info] # Warmup Iteration   3: 53835,093 ops/s
[info] # Warmup Iteration   4: 53563,700 ops/s
[info] # Warmup Iteration   5: 54072,072 ops/s
[info] Iteration   1: 53855,710 ops/s
[info]                  ·gc.alloc.rate:                   2069,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58940,915 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 54116,820 ops/s
[info]                  ·gc.alloc.rate:                   2079,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58759,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 54041,065 ops/s
[info]                  ·gc.alloc.rate:                   2076,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58943,966 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 54007,943 ops/s
[info]                  ·gc.alloc.rate:                   2075,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703,513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78777,618 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 53942,619 ops/s
[info]                  ·gc.alloc.rate:                   2073,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59253,989 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   53992,832 ±(99.9%) 381,445 ops/s [Average]
[info]   (min, avg, max) = (53855,710, 53992,832, 54116,820), stdev = 99,060
[info]   CI (99.9%): [53611,386, 54374,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2074,953 ±(99.9%) 15,173 MB/sec [Average]
[info]   (min, avg, max) = (2069,408, 2074,953, 2079,881), stdev = 3,940
[info]   CI (99.9%): [2059,781, 2090,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (60480,008, 60480,008, 60480,008), stdev = 0,001
[info]   CI (99.9%): [60480,007, 60480,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,456 ±(99.9%) 2,670 B/op [Average]
[info]   (min, avg, max) = (0,607, 1,456, 2,433), stdev = 0,693
[info]   CI (99.9%): [≈ 0, 4,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2159,219 ±(99.9%) 1171,810 MB/sec [Average]
[info]   (min, avg, max) = (2016,746, 2159,219, 2703,513), stdev = 304,315
[info]   CI (99.9%): [987,409, 3331,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   62935,098 ±(99.9%) 34109,099 B/op [Average]
[info]   (min, avg, max) = (58759,002, 62935,098, 78777,618), stdev = 8858,025
[info]   CI (99.9%): [28825,998, 97044,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9,24% complete, ETA 02:00:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47872,152 ops/s
[info] # Warmup Iteration   2: 53583,790 ops/s
[info] # Warmup Iteration   3: 54163,316 ops/s
[info] # Warmup Iteration   4: 53699,221 ops/s
[info] # Warmup Iteration   5: 54180,567 ops/s
[info] Iteration   1: 54288,384 ops/s
[info]                  ·gc.alloc.rate:                   2168,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58497,775 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 54280,380 ops/s
[info]                  ·gc.alloc.rate:                   2168,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58631,946 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 54419,764 ops/s
[info]                  ·gc.alloc.rate:                   2173,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58558,193 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 54191,034 ops/s
[info]                  ·gc.alloc.rate:                   2164,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705,202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78562,915 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 54232,585 ops/s
[info]                  ·gc.alloc.rate:                   2166,088 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58988,803 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   54282,430 ±(99.9%) 332,015 ops/s [Average]
[info]   (min, avg, max) = (54191,034, 54282,430, 54419,764), stdev = 86,223
[info]   CI (99.9%): [53950,414, 54614,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2168,065 ±(99.9%) 13,635 MB/sec [Average]
[info]   (min, avg, max) = (2164,357, 2168,065, 2173,766), stdev = 3,541
[info]   CI (99.9%): [2154,430, 2181,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   62856,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (62856,007, 62856,008, 62856,008), stdev = 0,001
[info]   CI (99.9%): [62856,007, 62856,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1,449 ±(99.9%) 1,273 B/op [Average]
[info]   (min, avg, max) = (1,204, 1,449, 1,811), stdev = 0,331
[info]   CI (99.9%): [0,176, 2,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   2160,649 ±(99.9%) 1172,381 MB/sec [Average]
[info]   (min, avg, max) = (2017,734, 2160,649, 2705,202), stdev = 304,464
[info]   CI (99.9%): [988,268, 3333,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   62647,927 ±(99.9%) 34266,070 B/op [Average]
[info]   (min, avg, max) = (58497,775, 62647,927, 78562,915), stdev = 8898,790
[info]   CI (99.9%): [28381,856, 96913,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9,44% complete, ETA 02:00:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380186,212 ops/s
[info] # Warmup Iteration   2: 432038,266 ops/s
[info] # Warmup Iteration   3: 414376,347 ops/s
[info] # Warmup Iteration   4: 421198,303 ops/s
[info] # Warmup Iteration   5: 439614,122 ops/s
[info] Iteration   1: 424918,026 ops/s
[info]                  ·gc.alloc.rate:                   2148,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7473,351 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 442177,834 ops/s
[info]                  ·gc.alloc.rate:                   2236,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7197,293 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 435464,291 ops/s
[info]                  ·gc.alloc.rate:                   2202,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700,521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9759,772 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 441520,904 ops/s
[info]                  ·gc.alloc.rate:                   2232,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7231,469 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 440285,351 ops/s
[info]                  ·gc.alloc.rate:                   2226,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7263,457 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   436873,281 ±(99.9%) 27653,300 ops/s [Average]
[info]   (min, avg, max) = (424918,026, 436873,281, 442177,834), stdev = 7181,474
[info]   CI (99.9%): [409219,981, 464526,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2209,570 ±(99.9%) 140,378 MB/sec [Average]
[info]   (min, avg, max) = (2148,848, 2209,570, 2236,613), stdev = 36,456
[info]   CI (99.9%): [2069,192, 2349,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7960,001, 7960,001, 7960,001), stdev = 0,001
[info]   CI (99.9%): [7960,001, 7960,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,226 ±(99.9%) 0,218 B/op [Average]
[info]   (min, avg, max) = (0,149, 0,226, 0,308), stdev = 0,057
[info]   CI (99.9%): [0,008, 0,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2160,186 ±(99.9%) 1163,314 MB/sec [Average]
[info]   (min, avg, max) = (2017,474, 2160,186, 2700,521), stdev = 302,109
[info]   CI (99.9%): [996,872, 3323,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7785,068 ±(99.9%) 4270,854 B/op [Average]
[info]   (min, avg, max) = (7197,293, 7785,068, 9759,772), stdev = 1109,127
[info]   CI (99.9%): [3514,214, 12055,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9,64% complete, ETA 01:59:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 390794,554 ops/s
[info] # Warmup Iteration   2: 1668020,782 ops/s
[info] # Warmup Iteration   3: 1664952,753 ops/s
[info] # Warmup Iteration   4: 1612192,179 ops/s
[info] # Warmup Iteration   5: 1669432,791 ops/s
[info] Iteration   1: 1674662,639 ops/s
[info]                  ·gc.alloc.rate:                   527,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480,819 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1675619,988 ops/s
[info]                  ·gc.alloc.rate:                   528,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 632,594 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1652218,828 ops/s
[info]                  ·gc.alloc.rate:      520,676 MB/sec
[info]                  ·gc.alloc.rate.norm: 496,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1676866,284 ops/s
[info]                  ·gc.alloc.rate:                   528,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 632,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1653098,066 ops/s
[info]                  ·gc.alloc.rate:                   521,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 639,880 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1666493,161 ±(99.9%) 48738,648 ops/s [Average]
[info]   (min, avg, max) = (1652218,828, 1666493,161, 1676866,284), stdev = 12657,272
[info]   CI (99.9%): [1617754,513, 1715231,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   525,220 ±(99.9%) 15,422 MB/sec [Average]
[info]   (min, avg, max) = (520,676, 525,220, 528,478), stdev = 4,005
[info]   CI (99.9%): [509,799, 540,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (496,000, 496,000, 496,000), stdev = 0,001
[info]   CI (99.9%): [496,000, 496,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,534 ±(99.9%) 4,461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,534, 2,605), stdev = 1,158
[info]   CI (99.9%): [≈ 0, 4,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,501 ±(99.9%) 4,189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,501, 2,447), stdev = 1,088
[info]   CI (99.9%): [≈ 0, 4,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506,170 ±(99.9%) 1122,336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,170, 673,611), stdev = 291,467
[info]   CI (99.9%): [≈ 0, 1628,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   477,075 ±(99.9%) 1058,637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 477,075, 639,880), stdev = 274,925
[info]   CI (99.9%): [≈ 0, 1535,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,84% complete, ETA 01:59:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538718,856 ops/s
[info] # Warmup Iteration   2: 745693,569 ops/s
[info] # Warmup Iteration   3: 743923,457 ops/s
[info] # Warmup Iteration   4: 745690,501 ops/s
[info] # Warmup Iteration   5: 748242,451 ops/s
[info] Iteration   1: 745565,453 ops/s
[info]                  ·gc.alloc.rate:                   617,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1422,288 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 750030,676 ops/s
[info]                  ·gc.alloc.rate:                   621,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1413,917 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 747090,494 ops/s
[info]                  ·gc.alloc.rate:                   618,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1422,187 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 747819,085 ops/s
[info]                  ·gc.alloc.rate:                   619,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1420,747 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 713143,845 ops/s
[info]                  ·gc.alloc.rate:                   590,883 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1490,603 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   740729,911 ±(99.9%) 59703,334 ops/s [Average]
[info]   (min, avg, max) = (713143,845, 740729,911, 750030,676), stdev = 15504,766
[info]   CI (99.9%): [681026,576, 800433,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   613,716 ±(99.9%) 49,427 MB/sec [Average]
[info]   (min, avg, max) = (590,883, 613,716, 621,431), stdev = 12,836
[info]   CI (99.9%): [564,290, 663,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,001, 1304,001, 1304,001), stdev = 0,001
[info]   CI (99.9%): [1304,001, 1304,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,097 ±(99.9%) 0,421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,097, 0,264), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,624 ±(99.9%) 3,081 MB/sec [Average]
[info]   (min, avg, max) = (673,715, 674,624, 675,438), stdev = 0,800
[info]   CI (99.9%): [671,543, 677,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1433,949 ±(99.9%) 122,671 B/op [Average]
[info]   (min, avg, max) = (1413,917, 1433,949, 1490,603), stdev = 31,857
[info]   CI (99.9%): [1311,278, 1556,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10,04% complete, ETA 01:59:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1911340,908 ops/s
[info] # Warmup Iteration   2: 1956171,399 ops/s
[info] # Warmup Iteration   3: 1986391,847 ops/s
[info] # Warmup Iteration   4: 1980345,481 ops/s
[info] # Warmup Iteration   5: 1993398,178 ops/s
[info] Iteration   1: 1962562,881 ops/s
[info]                  ·gc.alloc.rate:                   379,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410,242 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1993833,020 ops/s
[info]                  ·gc.alloc.rate:                   385,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403,841 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1994234,838 ops/s
[info]                  ·gc.alloc.rate:                   385,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403,742 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1992412,206 ops/s
[info]                  ·gc.alloc.rate:      384,849 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1988520,626 ops/s
[info]                  ·gc.alloc.rate:                   384,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 534,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1986312,714 ±(99.9%) 51856,906 ops/s [Average]
[info]   (min, avg, max) = (1962562,881, 1986312,714, 1994234,838), stdev = 13467,074
[info]   CI (99.9%): [1934455,808, 2038169,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   383,676 ±(99.9%) 10,068 MB/sec [Average]
[info]   (min, avg, max) = (379,063, 383,676, 385,187), stdev = 2,615
[info]   CI (99.9%): [373,608, 393,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,671 ±(99.9%) 5,703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,671, 3,321), stdev = 1,481
[info]   CI (99.9%): [≈ 0, 6,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,531 ±(99.9%) 4,514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,531, 2,628), stdev = 1,172
[info]   CI (99.9%): [≈ 0, 5,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441,911 ±(99.9%) 989,405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,911, 674,792), stdev = 256,945
[info]   CI (99.9%): [≈ 0, 1431,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   350,375 ±(99.9%) 783,938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 350,375, 534,048), stdev = 203,586
[info]   CI (99.9%): [≈ 0, 1134,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,140
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10,24% complete, ETA 01:59:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77625,715 ops/s
[info] # Warmup Iteration   2: 114344,968 ops/s
[info] # Warmup Iteration   3: 114801,722 ops/s
[info] # Warmup Iteration   4: 114525,463 ops/s
[info] # Warmup Iteration   5: 114547,421 ops/s
[info] Iteration   1: 114842,031 ops/s
[info]                  ·gc.alloc.rate:                   4171,856 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4082,345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55949,248 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 115080,252 ops/s
[info]                  ·gc.alloc.rate:                   4180,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084,871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55869,330 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 115012,984 ops/s
[info]                  ·gc.alloc.rate:                   4178,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55945,018 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 113543,868 ops/s
[info]                  ·gc.alloc.rate:                   4125,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56671,799 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 114839,819 ops/s
[info]                  ·gc.alloc.rate:                   4172,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56032,381 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   114663,791 ±(99.9%) 2444,747 ops/s [Average]
[info]   (min, avg, max) = (113543,868, 114663,791, 115080,252), stdev = 634,893
[info]   CI (99.9%): [112219,043, 117108,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4165,661 ±(99.9%) 87,937 MB/sec [Average]
[info]   (min, avg, max) = (4125,367, 4165,661, 4180,408), stdev = 22,837
[info]   CI (99.9%): [4077,724, 4253,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (57176,004, 57176,004, 57176,004), stdev = 0,001
[info]   CI (99.9%): [57176,003, 57176,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,970 ±(99.9%) 1,241 B/op [Average]
[info]   (min, avg, max) = (0,577, 0,970, 1,423), stdev = 0,322
[info]   CI (99.9%): [≈ 0, 2,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   4086,693 ±(99.9%) 11,397 MB/sec [Average]
[info]   (min, avg, max) = (4082,345, 4086,693, 4088,988), stdev = 2,960
[info]   CI (99.9%): [4075,296, 4098,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56093,555 ±(99.9%) 1264,384 B/op [Average]
[info]   (min, avg, max) = (55869,330, 56093,555, 56671,799), stdev = 328,357
[info]   CI (99.9%): [54829,171, 57357,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10,44% complete, ETA 01:58:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 626723,412 ops/s
[info] # Warmup Iteration   2: 686440,481 ops/s
[info] # Warmup Iteration   3: 683529,820 ops/s
[info] # Warmup Iteration   4: 695436,706 ops/s
[info] # Warmup Iteration   5: 698118,528 ops/s
[info] Iteration   1: 692133,276 ops/s
[info]                  ·gc.alloc.rate:                   1808,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4583,532 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 700107,975 ops/s
[info]                  ·gc.alloc.rate:                   1829,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4537,572 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 693506,837 ops/s
[info]                  ·gc.alloc.rate:                   1811,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3058,250 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 695494,500 ops/s
[info]                  ·gc.alloc.rate:                   1817,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4580,188 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 697108,322 ops/s
[info]                  ·gc.alloc.rate:                   1821,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4575,562 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   695670,182 ±(99.9%) 12020,993 ops/s [Average]
[info]   (min, avg, max) = (692133,276, 695670,182, 700107,975), stdev = 3121,814
[info]   CI (99.9%): [683649,189, 707691,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1817,626 ±(99.9%) 32,072 MB/sec [Average]
[info]   (min, avg, max) = (1808,144, 1817,626, 1829,539), stdev = 8,329
[info]   CI (99.9%): [1785,554, 1849,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,000, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,104 ±(99.9%) 0,237 B/op [Average]
[info]   (min, avg, max) = (0,047, 0,104, 0,189), stdev = 0,061
[info]   CI (99.9%): [≈ 0, 0,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1886,543 ±(99.9%) 1160,198 MB/sec [Average]
[info]   (min, avg, max) = (1347,617, 1886,543, 2026,592), stdev = 301,300
[info]   CI (99.9%): [726,344, 3046,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4267,021 ±(99.9%) 2602,945 B/op [Average]
[info]   (min, avg, max) = (3058,250, 4267,021, 4583,532), stdev = 675,976
[info]   CI (99.9%): [1664,076, 6869,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10,64% complete, ETA 01:58:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329788,200 ops/s
[info] # Warmup Iteration   2: 425017,833 ops/s
[info] # Warmup Iteration   3: 417965,489 ops/s
[info] # Warmup Iteration   4: 422511,003 ops/s
[info] # Warmup Iteration   5: 428118,764 ops/s
[info] Iteration   1: 423184,976 ops/s
[info]                  ·gc.alloc.rate:                   660,364 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2506,985 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 423194,147 ops/s
[info]                  ·gc.alloc.rate:                   660,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2507,156 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 422843,600 ops/s
[info]                  ·gc.alloc.rate:                   659,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2501,574 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 423585,363 ops/s
[info]                  ·gc.alloc.rate:                   661,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2497,211 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 422516,874 ops/s
[info]                  ·gc.alloc.rate:                   659,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2498,559 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   423064,992 ±(99.9%) 1553,809 ops/s [Average]
[info]   (min, avg, max) = (422516,874, 423064,992, 423585,363), stdev = 403,519
[info]   CI (99.9%): [421511,183, 424618,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   660,228 ±(99.9%) 2,374 MB/sec [Average]
[info]   (min, avg, max) = (659,394, 660,228, 661,020), stdev = 0,617
[info]   CI (99.9%): [657,854, 662,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2456,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2456,001, 2456,001, 2456,001), stdev = 0,001
[info]   CI (99.9%): [2456,001, 2456,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,719 ±(99.9%) 6,056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,719, 3,532), stdev = 1,573
[info]   CI (99.9%): [≈ 0, 6,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2,674 ±(99.9%) 22,522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,674, 13,136), stdev = 5,849
[info]   CI (99.9%): [≈ 0, 25,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   672,674 ±(99.9%) 5,593 MB/sec [Average]
[info]   (min, avg, max) = (670,820, 672,674, 674,235), stdev = 1,452
[info]   CI (99.9%): [667,081, 678,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2502,297 ±(99.9%) 17,850 B/op [Average]
[info]   (min, avg, max) = (2497,211, 2502,297, 2507,156), stdev = 4,636
[info]   CI (99.9%): [2484,447, 2520,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10,84% complete, ETA 01:58:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328382,041 ops/s
[info] # Warmup Iteration   2: 1265328,825 ops/s
[info] # Warmup Iteration   3: 1265938,866 ops/s
[info] # Warmup Iteration   4: 1135007,460 ops/s
[info] # Warmup Iteration   5: 1232693,344 ops/s
[info] Iteration   1: 1264624,163 ops/s
[info]                  ·gc.alloc.rate:                   584,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 636,657 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1263081,622 ops/s
[info]                  ·gc.alloc.rate:                   584,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 839,120 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1265094,444 ops/s
[info]                  ·gc.alloc.rate:                   585,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837,804 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1270595,146 ops/s
[info]                  ·gc.alloc.rate:                   587,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 832,508 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1265843,014 ops/s
[info]                  ·gc.alloc.rate:                   585,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835,663 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1265847,678 ±(99.9%) 10934,387 ops/s [Average]
[info]   (min, avg, max) = (1263081,622, 1265847,678, 1270595,146), stdev = 2839,626
[info]   CI (99.9%): [1254913,291, 1276782,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   585,561 ±(99.9%) 5,055 MB/sec [Average]
[info]   (min, avg, max) = (584,297, 585,561, 587,760), stdev = 1,313
[info]   CI (99.9%): [580,506, 590,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,542 ±(99.9%) 4,461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,542, 2,614), stdev = 1,159
[info]   CI (99.9%): [≈ 0, 5,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,675 ±(99.9%) 5,558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,675, 3,257), stdev = 1,443
[info]   CI (99.9%): [≈ 0, 6,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   640,566 ±(99.9%) 277,666 MB/sec [Average]
[info]   (min, avg, max) = (511,580, 640,566, 673,483), stdev = 72,109
[info]   CI (99.9%): [362,901, 918,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   796,350 ±(99.9%) 343,888 B/op [Average]
[info]   (min, avg, max) = (636,657, 796,350, 839,120), stdev = 89,307
[info]   CI (99.9%): [452,463, 1140,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,04% complete, ETA 01:57:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 827137,875 ops/s
[info] # Warmup Iteration   2: 1138409,051 ops/s
[info] # Warmup Iteration   3: 1136651,699 ops/s
[info] # Warmup Iteration   4: 1132166,921 ops/s
[info] # Warmup Iteration   5: 1137191,815 ops/s
[info] Iteration   1: 1121441,551 ops/s
[info]                  ·gc.alloc.rate:                   792,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1893,094 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1142447,068 ops/s
[info]                  ·gc.alloc.rate:                   807,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 930,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1142119,627 ops/s
[info]                  ·gc.alloc.rate:                   806,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 931,290 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1139092,371 ops/s
[info]                  ·gc.alloc.rate:                   804,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 933,663 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1138737,449 ops/s
[info]                  ·gc.alloc.rate:                   804,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 934,902 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1136767,613 ±(99.9%) 33628,336 ops/s [Average]
[info]   (min, avg, max) = (1121441,551, 1136767,613, 1142447,068), stdev = 8733,172
[info]   CI (99.9%): [1103139,277, 1170395,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   803,164 ±(99.9%) 23,840 MB/sec [Average]
[info]   (min, avg, max) = (792,301, 803,164, 807,215), stdev = 6,191
[info]   CI (99.9%): [779,323, 827,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1112,000, 1112,000, 1112,000), stdev = 0,001
[info]   CI (99.9%): [1112,000, 1112,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,029 ±(99.9%) 0,158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,088), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810,390 ±(99.9%) 1159,035 MB/sec [Average]
[info]   (min, avg, max) = (675,157, 810,390, 1348,831), stdev = 300,998
[info]   CI (99.9%): [≈ 0, 1969,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1124,606 ±(99.9%) 1654,245 B/op [Average]
[info]   (min, avg, max) = (930,080, 1124,606, 1893,094), stdev = 429,602
[info]   CI (99.9%): [≈ 0, 2778,851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,24% complete, ETA 01:57:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1757081,507 ops/s
[info] # Warmup Iteration   2: 1837452,244 ops/s
[info] # Warmup Iteration   3: 1823730,038 ops/s
[info] # Warmup Iteration   4: 1857528,213 ops/s
[info] # Warmup Iteration   5: 1856377,725 ops/s
[info] Iteration   1: 1825367,125 ops/s
[info]                  ·gc.alloc.rate:                   844,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1161,837 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1863642,135 ops/s
[info]                  ·gc.alloc.rate:                   862,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 568,191 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1856748,125 ops/s
[info]                  ·gc.alloc.rate:                   858,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 569,124 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1861971,183 ops/s
[info]                  ·gc.alloc.rate:                   861,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567,551 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1850544,741 ops/s
[info]                  ·gc.alloc.rate:                   855,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1142,053 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   1851654,662 ±(99.9%) 59912,481 ops/s [Average]
[info]   (min, avg, max) = (1825367,125, 1851654,662, 1863642,135), stdev = 15559,081
[info]   CI (99.9%): [1791742,181, 1911567,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   856,514 ±(99.9%) 27,853 MB/sec [Average]
[info]   (min, avg, max) = (844,299, 856,514, 862,176), stdev = 7,233
[info]   CI (99.9%): [828,661, 884,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,032 ±(99.9%) 0,172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,032, 0,108), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941,211 ±(99.9%) 1419,905 MB/sec [Average]
[info]   (min, avg, max) = (671,415, 941,211, 1347,442), stdev = 368,745
[info]   CI (99.9%): [≈ 0, 2361,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   801,751 ±(99.9%) 1231,277 B/op [Average]
[info]   (min, avg, max) = (567,551, 801,751, 1161,837), stdev = 319,759
[info]   CI (99.9%): [≈ 0, 2033,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11,45% complete, ETA 01:57:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2015290,073 ops/s
[info] # Warmup Iteration   2: 2096703,430 ops/s
[info] # Warmup Iteration   3: 2100928,113 ops/s
[info] # Warmup Iteration   4: 2098838,466 ops/s
[info] # Warmup Iteration   5: 2103090,780 ops/s
[info] Iteration   1: 2104839,982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2099631,235 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2101491,585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2099109,563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2097906,034 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2100595,680 ±(99.9%) 10402,021 ops/s [Average]
[info]   (min, avg, max) = (2097906,034, 2100595,680, 2104839,982), stdev = 2701,372
[info]   CI (99.9%): [2090193,658, 2110997,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11,65% complete, ETA 01:57:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453915,364 ops/s
[info] # Warmup Iteration   2: 565155,377 ops/s
[info] # Warmup Iteration   3: 569882,656 ops/s
[info] # Warmup Iteration   4: 568320,661 ops/s
[info] # Warmup Iteration   5: 568649,774 ops/s
[info] Iteration   1: 569341,467 ops/s
[info]                  ·gc.alloc.rate:                   671,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11,258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1861,682 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 570792,824 ops/s
[info]                  ·gc.alloc.rate:                   673,174 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1857,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 570664,290 ops/s
[info]                  ·gc.alloc.rate:                   673,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1850,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 569229,660 ops/s
[info]                  ·gc.alloc.rate:                   671,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1854,671 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 569775,107 ops/s
[info]                  ·gc.alloc.rate:                   671,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1849,181 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   569960,670 ±(99.9%) 2816,359 ops/s [Average]
[info]   (min, avg, max) = (569229,660, 569960,670, 570792,824), stdev = 731,400
[info]   CI (99.9%): [567144,310, 572777,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   672,179 ±(99.9%) 3,361 MB/sec [Average]
[info]   (min, avg, max) = (671,322, 672,179, 673,174), stdev = 0,873
[info]   CI (99.9%): [668,818, 675,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1856,001, 1856,001, 1856,001), stdev = 0,001
[info]   CI (99.9%): [1856,001, 1856,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,823 ±(99.9%) 6,996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,823, 4,073), stdev = 1,817
[info]   CI (99.9%): [≈ 0, 7,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,275 ±(99.9%) 19,338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,275, 11,258), stdev = 5,022
[info]   CI (99.9%): [≈ 0, 21,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   671,643 ±(99.9%) 6,933 MB/sec [Average]
[info]   (min, avg, max) = (669,484, 671,643, 673,556), stdev = 1,801
[info]   CI (99.9%): [664,709, 678,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1854,522 ±(99.9%) 19,864 B/op [Average]
[info]   (min, avg, max) = (1849,181, 1854,522, 1861,682), stdev = 5,159
[info]   CI (99.9%): [1834,658, 1874,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11,85% complete, ETA 01:56:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198632,065 ops/s
[info] # Warmup Iteration   2: 205675,806 ops/s
[info] # Warmup Iteration   3: 207371,150 ops/s
[info] # Warmup Iteration   4: 207110,646 ops/s
[info] # Warmup Iteration   5: 208638,662 ops/s
[info] Iteration   1: 206327,701 ops/s
[info]                  ·gc.alloc.rate:                   526,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3902,113 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 208315,834 ops/s
[info]                  ·gc.alloc.rate:                   531,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5098,286 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 208255,499 ops/s
[info]                  ·gc.alloc.rate:      531,408 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 204683,221 ops/s
[info]                  ·gc.alloc.rate:                   522,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5188,232 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 207732,929 ops/s
[info]                  ·gc.alloc.rate:                   530,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5096,838 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   207063,037 ±(99.9%) 5979,192 ops/s [Average]
[info]   (min, avg, max) = (204683,221, 207063,037, 208315,834), stdev = 1552,777
[info]   CI (99.9%): [201083,845, 213042,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   528,384 ±(99.9%) 15,286 MB/sec [Average]
[info]   (min, avg, max) = (522,327, 528,384, 531,638), stdev = 3,970
[info]   CI (99.9%): [513,098, 543,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,671 ±(99.9%) 5,647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,671, 3,295), stdev = 1,467
[info]   CI (99.9%): [≈ 0, 6,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5,073 ±(99.9%) 42,659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,073, 24,890), stdev = 11,078
[info]   CI (99.9%): [≈ 0, 47,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   506,796 ±(99.9%) 1124,115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,796, 674,910), stdev = 291,929
[info]   CI (99.9%): [≈ 0, 1630,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3857,094 ±(99.9%) 8551,692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3857,094, 5188,232), stdev = 2220,847
[info]   CI (99.9%): [≈ 0, 12408,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12,05% complete, ETA 01:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134098,382 ops/s
[info] # Warmup Iteration   2: 151779,014 ops/s
[info] # Warmup Iteration   3: 138931,557 ops/s
[info] # Warmup Iteration   4: 153434,070 ops/s
[info] # Warmup Iteration   5: 153387,213 ops/s
[info] Iteration   1: 153057,746 ops/s
[info]                  ·gc.alloc.rate:                   1839,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20726,853 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 153607,037 ops/s
[info]                  ·gc.alloc.rate:                   1846,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20674,070 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 153272,064 ops/s
[info]                  ·gc.alloc.rate:                   1842,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13836,831 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 153060,457 ops/s
[info]                  ·gc.alloc.rate:                   1840,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20810,841 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 152964,098 ops/s
[info]                  ·gc.alloc.rate:                   1839,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20851,040 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   153192,280 ±(99.9%) 992,863 ops/s [Average]
[info]   (min, avg, max) = (152964,098, 153192,280, 153607,037), stdev = 257,843
[info]   CI (99.9%): [152199,418, 154185,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1841,696 ±(99.9%) 12,274 MB/sec [Average]
[info]   (min, avg, max) = (1839,006, 1841,696, 1846,837), stdev = 3,187
[info]   CI (99.9%): [1829,423, 1853,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18920,003, 18920,003, 18920,003), stdev = 0,001
[info]   CI (99.9%): [18920,002, 18920,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,513 ±(99.9%) 1,377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,513, 0,857), stdev = 0,358
[info]   CI (99.9%): [≈ 0, 1,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1886,385 ±(99.9%) 1159,843 MB/sec [Average]
[info]   (min, avg, max) = (1347,627, 1886,385, 2026,701), stdev = 301,208
[info]   CI (99.9%): [726,542, 3046,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19379,927 ±(99.9%) 11934,918 B/op [Average]
[info]   (min, avg, max) = (13836,831, 19379,927, 20851,040), stdev = 3099,460
[info]   CI (99.9%): [7445,009, 31314,845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,25% complete, ETA 01:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315271,640 ops/s
[info] # Warmup Iteration   2: 448171,377 ops/s
[info] # Warmup Iteration   3: 452663,104 ops/s
[info] # Warmup Iteration   4: 453971,738 ops/s
[info] # Warmup Iteration   5: 445140,476 ops/s
[info] Iteration   1: 453351,480 ops/s
[info]                  ·gc.alloc.rate:                   375,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1775,931 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 452127,034 ops/s
[info]                  ·gc.alloc.rate:                   374,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1780,737 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 451916,044 ops/s
[info]                  ·gc.alloc.rate:      374,429 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 452464,435 ops/s
[info]                  ·gc.alloc.rate:                   374,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2343,587 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 452713,226 ops/s
[info]                  ·gc.alloc.rate:      375,084 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   452514,444 ±(99.9%) 2153,276 ops/s [Average]
[info]   (min, avg, max) = (451916,044, 452514,444, 453351,480), stdev = 559,199
[info]   CI (99.9%): [450361,167, 454667,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   374,933 ±(99.9%) 1,728 MB/sec [Average]
[info]   (min, avg, max) = (374,429, 374,933, 375,600), stdev = 0,449
[info]   CI (99.9%): [373,206, 376,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,001, 1304,001, 1304,001), stdev = 0,001
[info]   CI (99.9%): [1304,001, 1304,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,087 ±(99.9%) 0,604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,087, 0,362), stdev = 0,157
[info]   CI (99.9%): [≈ 0, 0,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339,388 ±(99.9%) 1219,950 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,388, 673,796), stdev = 316,817
[info]   CI (99.9%): [≈ 0, 1559,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1180,051 ±(99.9%) 4242,159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1180,051, 2343,587), stdev = 1101,675
[info]   CI (99.9%): [≈ 0, 5422,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,45% complete, ETA 01:56:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 899318,461 ops/s
[info] # Warmup Iteration   2: 940231,587 ops/s
[info] # Warmup Iteration   3: 931005,680 ops/s
[info] # Warmup Iteration   4: 944770,236 ops/s
[info] # Warmup Iteration   5: 943408,865 ops/s
[info] Iteration   1: 939271,156 ops/s
[info]                  ·gc.alloc.rate:                   181,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 857,179 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 944489,972 ops/s
[info]                  ·gc.alloc.rate:      182,453 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 943444,665 ops/s
[info]                  ·gc.alloc.rate:      182,238 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 942394,509 ops/s
[info]                  ·gc.alloc.rate:                   182,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 854,345 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 945153,469 ops/s
[info]                  ·gc.alloc.rate:      182,570 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   942950,754 ±(99.9%) 8888,639 ops/s [Average]
[info]   (min, avg, max) = (939271,156, 942950,754, 945153,469), stdev = 2308,351
[info]   CI (99.9%): [934062,116, 951839,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   182,142 ±(99.9%) 1,748 MB/sec [Average]
[info]   (min, avg, max) = (181,419, 182,142, 182,570), stdev = 0,454
[info]   CI (99.9%): [180,394, 183,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204,621 ±(99.9%) 1078,908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,621, 511,564), stdev = 280,189
[info]   CI (99.9%): [≈ 0, 1283,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   342,305 ±(99.9%) 1804,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 342,305, 857,179), stdev = 468,721
[info]   CI (99.9%): [≈ 0, 2147,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12,65% complete, ETA 01:55:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64029,912 ops/s
[info] # Warmup Iteration   2: 95322,805 ops/s
[info] # Warmup Iteration   3: 96807,191 ops/s
[info] # Warmup Iteration   4: 96504,545 ops/s
[info] # Warmup Iteration   5: 96614,323 ops/s
[info] Iteration   1: 96604,144 ops/s
[info]                  ·gc.alloc.rate:                   4113,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4081,975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66499,086 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 97005,044 ops/s
[info]                  ·gc.alloc.rate:                   4130,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084,964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66273,635 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 96969,228 ops/s
[info]                  ·gc.alloc.rate:                   4129,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4086,904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66328,619 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 97304,543 ops/s
[info]                  ·gc.alloc.rate:                   4143,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66130,588 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 97219,341 ops/s
[info]                  ·gc.alloc.rate:                   4139,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66187,033 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   97020,460 ±(99.9%) 1048,263 ops/s [Average]
[info]   (min, avg, max) = (96604,144, 97020,460, 97304,543), stdev = 272,231
[info]   CI (99.9%): [95972,196, 98068,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4131,439 ±(99.9%) 44,715 MB/sec [Average]
[info]   (min, avg, max) = (4113,706, 4131,439, 4143,603), stdev = 11,612
[info]   CI (99.9%): [4086,724, 4176,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (67016,004, 67016,004, 67016,005), stdev = 0,001
[info]   CI (99.9%): [67016,004, 67016,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,146), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,351 ±(99.9%) 2,255 B/op [Average]
[info]   (min, avg, max) = (1,010, 1,351, 2,364), stdev = 0,586
[info]   CI (99.9%): [≈ 0, 3,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   4086,279 ±(99.9%) 11,082 MB/sec [Average]
[info]   (min, avg, max) = (4081,975, 4086,279, 4088,858), stdev = 2,878
[info]   CI (99.9%): [4075,197, 4097,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66283,792 ±(99.9%) 548,963 B/op [Average]
[info]   (min, avg, max) = (66130,588, 66283,792, 66499,086), stdev = 142,564
[info]   CI (99.9%): [65734,829, 66832,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12,85% complete, ETA 01:55:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243151,644 ops/s
[info] # Warmup Iteration   2: 268344,899 ops/s
[info] # Warmup Iteration   3: 272253,229 ops/s
[info] # Warmup Iteration   4: 271872,083 ops/s
[info] # Warmup Iteration   5: 274004,204 ops/s
[info] Iteration   1: 272662,852 ops/s
[info]                  ·gc.alloc.rate:                   1244,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7751,138 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 274075,801 ops/s
[info]                  ·gc.alloc.rate:                   1251,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7711,749 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 265635,243 ops/s
[info]                  ·gc.alloc.rate:                   1212,528 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7960,172 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 274608,471 ops/s
[info]                  ·gc.alloc.rate:                   1253,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3853,796 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 273953,280 ops/s
[info]                  ·gc.alloc.rate:                   1250,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7729,814 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   272187,129 ±(99.9%) 14369,506 ops/s [Average]
[info]   (min, avg, max) = (265635,243, 272187,129, 274608,471), stdev = 3731,715
[info]   CI (99.9%): [257817,623, 286556,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1242,464 ±(99.9%) 65,694 MB/sec [Average]
[info]   (min, avg, max) = (1212,528, 1242,464, 1253,491), stdev = 17,061
[info]   CI (99.9%): [1176,770, 1308,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7184,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7184,001, 7184,002, 7184,002), stdev = 0,001
[info]   CI (99.9%): [7184,001, 7184,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,218 ±(99.9%) 0,610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,218, 0,370), stdev = 0,158
[info]   CI (99.9%): [≈ 0, 0,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1209,487 ±(99.9%) 1156,075 MB/sec [Average]
[info]   (min, avg, max) = (672,424, 1209,487, 1345,567), stdev = 300,229
[info]   CI (99.9%): [53,412, 2365,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7001,334 ±(99.9%) 6786,301 B/op [Average]
[info]   (min, avg, max) = (3853,796, 7001,334, 7960,172), stdev = 1762,381
[info]   CI (99.9%): [215,032, 13787,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13,05% complete, ETA 01:55:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239635,805 ops/s
[info] # Warmup Iteration   2: 309299,649 ops/s
[info] # Warmup Iteration   3: 295419,264 ops/s
[info] # Warmup Iteration   4: 296033,421 ops/s
[info] # Warmup Iteration   5: 297230,564 ops/s
[info] Iteration   1: 297020,635 ops/s
[info]                  ·gc.alloc.rate:                   1314,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7108,918 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 297416,453 ops/s
[info]                  ·gc.alloc.rate:                   1316,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3549,775 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 295860,181 ops/s
[info]                  ·gc.alloc.rate:                   1309,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7139,678 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 274189,226 ops/s
[info]                  ·gc.alloc.rate:                   1213,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7711,833 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 295891,402 ops/s
[info]                  ·gc.alloc.rate:                   1310,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7153,392 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   292075,579 ±(99.9%) 38592,206 ops/s [Average]
[info]   (min, avg, max) = (274189,226, 292075,579, 297416,453), stdev = 10022,273
[info]   CI (99.9%): [253483,373, 330667,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1293,134 ±(99.9%) 170,784 MB/sec [Average]
[info]   (min, avg, max) = (1213,981, 1293,134, 1316,939), stdev = 44,352
[info]   CI (99.9%): [1122,350, 1463,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6968,001, 6968,001, 6968,001), stdev = 0,001
[info]   CI (99.9%): [6968,001, 6968,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,317 ±(99.9%) 0,944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,317, 0,554), stdev = 0,245
[info]   CI (99.9%): [≈ 0, 1,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1208,588 ±(99.9%) 1157,424 MB/sec [Average]
[info]   (min, avg, max) = (670,901, 1208,588, 1344,908), stdev = 300,579
[info]   CI (99.9%): [51,164, 2366,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6532,719 ±(99.9%) 6493,191 B/op [Average]
[info]   (min, avg, max) = (3549,775, 6532,719, 7711,833), stdev = 1686,261
[info]   CI (99.9%): [39,529, 13025,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,25% complete, ETA 01:55:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1149682,440 ops/s
[info] # Warmup Iteration   2: 1658282,211 ops/s
[info] # Warmup Iteration   3: 1648107,026 ops/s
[info] # Warmup Iteration   4: 1660851,225 ops/s
[info] # Warmup Iteration   5: 1655799,814 ops/s
[info] Iteration   1: 1657003,103 ops/s
[info]                  ·gc.alloc.rate:                   850,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 640,888 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1661943,974 ops/s
[info]                  ·gc.alloc.rate:                   853,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 639,041 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1652201,957 ops/s
[info]                  ·gc.alloc.rate:                   848,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1286,769 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1660192,651 ops/s
[info]                  ·gc.alloc.rate:                   852,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 640,940 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1654339,167 ops/s
[info]                  ·gc.alloc.rate:                   849,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 643,212 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1657136,170 ±(99.9%) 15479,928 ops/s [Average]
[info]   (min, avg, max) = (1652201,957, 1657136,170, 1661943,974), stdev = 4020,088
[info]   CI (99.9%): [1641656,242, 1672616,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   850,739 ±(99.9%) 7,944 MB/sec [Average]
[info]   (min, avg, max) = (848,243, 850,739, 853,230), stdev = 2,063
[info]   CI (99.9%): [842,795, 858,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (808,000, 808,000, 808,000), stdev = 0,001
[info]   CI (99.9%): [808,000, 808,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,020 ±(99.9%) 0,108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,020, 0,059), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810,507 ±(99.9%) 1163,147 MB/sec [Average]
[info]   (min, avg, max) = (674,699, 810,507, 1350,857), stdev = 302,066
[info]   CI (99.9%): [≈ 0, 1973,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   770,170 ±(99.9%) 1112,033 B/op [Average]
[info]   (min, avg, max) = (639,041, 770,170, 1286,769), stdev = 288,792
[info]   CI (99.9%): [≈ 0, 1882,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,45% complete, ETA 01:54:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1998090,071 ops/s
[info] # Warmup Iteration   2: 2086263,789 ops/s
[info] # Warmup Iteration   3: 2113164,323 ops/s
[info] # Warmup Iteration   4: 2119199,365 ops/s
[info] # Warmup Iteration   5: 2113777,078 ops/s
[info] Iteration   1: 2103454,758 ops/s
[info]                  ·gc.alloc.rate:                   566,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 382,760 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2116137,179 ops/s
[info]                  ·gc.alloc.rate:                   570,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 501,840 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2122741,281 ops/s
[info]                  ·gc.alloc.rate:                   571,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500,276 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2122411,232 ops/s
[info]                  ·gc.alloc.rate:                   571,792 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498,872 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2120682,784 ops/s
[info]                  ·gc.alloc.rate:      571,488 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2117085,447 ±(99.9%) 31044,178 ops/s [Average]
[info]   (min, avg, max) = (2103454,758, 2117085,447, 2122741,281), stdev = 8062,074
[info]   CI (99.9%): [2086041,269, 2148129,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   570,376 ±(99.9%) 8,552 MB/sec [Average]
[info]   (min, avg, max) = (566,614, 570,376, 571,881), stdev = 2,221
[info]   CI (99.9%): [561,824, 578,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,000, 424,000, 424,000), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,667 ±(99.9%) 5,610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,667, 3,273), stdev = 1,457
[info]   CI (99.9%): [≈ 0, 6,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,496 ±(99.9%) 4,172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,496, 2,434), stdev = 1,083
[info]   CI (99.9%): [≈ 0, 4,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506,758 ±(99.9%) 1124,024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,758, 674,767), stdev = 291,906
[info]   CI (99.9%): [≈ 0, 1630,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   376,750 ±(99.9%) 834,348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 376,750, 501,840), stdev = 216,678
[info]   CI (99.9%): [≈ 0, 1211,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13,65% complete, ETA 01:54:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2076011,816 ops/s
[info] # Warmup Iteration   2: 2156735,547 ops/s
[info] # Warmup Iteration   3: 2165079,336 ops/s
[info] # Warmup Iteration   4: 2095254,496 ops/s
[info] # Warmup Iteration   5: 2167701,416 ops/s
[info] Iteration   1: 2168059,536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2168075,235 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2169207,217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2169240,139 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2166764,714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2168269,368 ±(99.9%) 3930,515 ops/s [Average]
[info]   (min, avg, max) = (2166764,714, 2168269,368, 2169240,139), stdev = 1020,742
[info]   CI (99.9%): [2164338,853, 2172199,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13,86% complete, ETA 01:54:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37576,078 ops/s
[info] # Warmup Iteration   2: 50249,583 ops/s
[info] # Warmup Iteration   3: 50181,270 ops/s
[info] # Warmup Iteration   4: 50079,116 ops/s
[info] # Warmup Iteration   5: 50395,557 ops/s
[info] Iteration   1: 48351,542 ops/s
[info]                  ·gc.alloc.rate:                   2037,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011,819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65491,280 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 50871,153 ops/s
[info]                  ·gc.alloc.rate:                   2143,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62333,781 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 50321,820 ops/s
[info]                  ·gc.alloc.rate:                   2120,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63174,131 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50622,108 ops/s
[info]                  ·gc.alloc.rate:                   2134,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2699,474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83905,547 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 50757,359 ops/s
[info]                  ·gc.alloc.rate:                   2139,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62897,209 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   50184,796 ±(99.9%) 4024,683 ops/s [Average]
[info]   (min, avg, max) = (48351,542, 50184,796, 50871,153), stdev = 1045,197
[info]   CI (99.9%): [46160,114, 54209,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2115,241 ±(99.9%) 170,012 MB/sec [Average]
[info]   (min, avg, max) = (2037,768, 2115,241, 2143,581), stdev = 44,151
[info]   CI (99.9%): [1945,229, 2285,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336,008 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (66336,008, 66336,008, 66336,010), stdev = 0,001
[info]   CI (99.9%): [66336,005, 66336,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,842 ±(99.9%) 3,498 B/op [Average]
[info]   (min, avg, max) = (1,288, 1,842, 3,388), stdev = 0,909
[info]   CI (99.9%): [≈ 0, 5,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2154,835 ±(99.9%) 1172,647 MB/sec [Average]
[info]   (min, avg, max) = (2011,819, 2154,835, 2699,474), stdev = 304,533
[info]   CI (99.9%): [982,188, 3327,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67560,390 ±(99.9%) 35487,990 B/op [Average]
[info]   (min, avg, max) = (62333,781, 67560,390, 83905,547), stdev = 9216,118
[info]   CI (99.9%): [32072,400, 103048,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14,06% complete, ETA 01:54:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153637,533 ops/s
[info] # Warmup Iteration   2: 164356,434 ops/s
[info] # Warmup Iteration   3: 164098,561 ops/s
[info] # Warmup Iteration   4: 165113,903 ops/s
[info] # Warmup Iteration   5: 165232,310 ops/s
[info] Iteration   1: 165231,258 ops/s
[info]                  ·gc.alloc.rate:                   880,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6408,458 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 165493,435 ops/s
[info]                  ·gc.alloc.rate:                   881,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6398,739 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 165225,580 ops/s
[info]                  ·gc.alloc.rate:                   880,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6395,923 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 164933,832 ops/s
[info]                  ·gc.alloc.rate:                   878,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12814,721 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 163732,018 ops/s
[info]                  ·gc.alloc.rate:                   872,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6454,391 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   164923,225 ±(99.9%) 2675,109 ops/s [Average]
[info]   (min, avg, max) = (163732,018, 164923,225, 165493,435), stdev = 694,717
[info]   CI (99.9%): [162248,116, 167598,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   878,609 ±(99.9%) 14,261 MB/sec [Average]
[info]   (min, avg, max) = (872,268, 878,609, 881,724), stdev = 3,704
[info]   CI (99.9%): [864,347, 892,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8384,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8384,002, 8384,002, 8384,002), stdev = 0,001
[info]   CI (99.9%): [8384,002, 8384,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,238 ±(99.9%) 0,837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,238, 0,397), stdev = 0,217
[info]   CI (99.9%): [≈ 0, 1,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   806,350 ±(99.9%) 1155,288 MB/sec [Average]
[info]   (min, avg, max) = (671,503, 806,350, 1343,049), stdev = 300,025
[info]   CI (99.9%): [≈ 0, 1961,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7694,446 ±(99.9%) 11022,151 B/op [Average]
[info]   (min, avg, max) = (6395,923, 7694,446, 12814,721), stdev = 2862,418
[info]   CI (99.9%): [≈ 0, 18716,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14,26% complete, ETA 01:53:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212434,803 ops/s
[info] # Warmup Iteration   2: 248311,995 ops/s
[info] # Warmup Iteration   3: 249900,218 ops/s
[info] # Warmup Iteration   4: 236195,468 ops/s
[info] # Warmup Iteration   5: 249823,639 ops/s
[info] Iteration   1: 249719,152 ops/s
[info]                  ·gc.alloc.rate:                   2570,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2694,475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16983,206 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 249762,038 ops/s
[info]                  ·gc.alloc.rate:                   2571,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701,176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17017,731 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 248051,861 ops/s
[info]                  ·gc.alloc.rate:                   2553,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705,809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17166,977 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 249316,990 ops/s
[info]                  ·gc.alloc.rate:                   2566,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711,049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17113,739 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 225680,455 ops/s
[info]                  ·gc.alloc.rate:                   2323,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14198,320 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   244506,099 ±(99.9%) 40611,188 ops/s [Average]
[info]   (min, avg, max) = (225680,455, 244506,099, 249762,038), stdev = 10546,596
[info]   CI (99.9%): [203894,912, 285117,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2516,889 ±(99.9%) 417,941 MB/sec [Average]
[info]   (min, avg, max) = (2323,151, 2516,889, 2571,381), stdev = 108,538
[info]   CI (99.9%): [2098,948, 2934,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16200,002, 16200,002, 16200,002), stdev = 0,001
[info]   CI (99.9%): [16200,001, 16200,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,487 ±(99.9%) 0,662 B/op [Average]
[info]   (min, avg, max) = (0,264, 0,487, 0,726), stdev = 0,172
[info]   CI (99.9%): [≈ 0, 1,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2569,722 ±(99.9%) 1148,900 MB/sec [Average]
[info]   (min, avg, max) = (2036,101, 2569,722, 2711,049), stdev = 298,366
[info]   CI (99.9%): [1420,822, 3718,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16495,994 ±(99.9%) 4953,999 B/op [Average]
[info]   (min, avg, max) = (14198,320, 16495,994, 17166,977), stdev = 1286,538
[info]   CI (99.9%): [11541,996, 21449,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,46% complete, ETA 01:53:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270720,574 ops/s
[info] # Warmup Iteration   2: 390308,906 ops/s
[info] # Warmup Iteration   3: 391695,452 ops/s
[info] # Warmup Iteration   4: 357528,137 ops/s
[info] # Warmup Iteration   5: 391488,621 ops/s
[info] Iteration   1: 390930,008 ops/s
[info]                  ·gc.alloc.rate:                   1883,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5451,752 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 392162,809 ops/s
[info]                  ·gc.alloc.rate:                   1890,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8159,292 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 388913,812 ops/s
[info]                  ·gc.alloc.rate:                   1874,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8237,508 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 391839,746 ops/s
[info]                  ·gc.alloc.rate:                   1888,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8181,465 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 390985,684 ops/s
[info]                  ·gc.alloc.rate:                   1883,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8205,888 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   390966,412 ±(99.9%) 4874,123 ops/s [Average]
[info]   (min, avg, max) = (388913,812, 390966,412, 392162,809), stdev = 1265,794
[info]   CI (99.9%): [386092,288, 395840,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1883,931 ±(99.9%) 23,449 MB/sec [Average]
[info]   (min, avg, max) = (1874,206, 1883,931, 1890,019), stdev = 6,090
[info]   CI (99.9%): [1860,482, 1907,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7584,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7584,001, 7584,001, 7584,001), stdev = 0,001
[info]   CI (99.9%): [7584,001, 7584,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,235 ±(99.9%) 0,422 B/op [Average]
[info]   (min, avg, max) = (0,084, 0,235, 0,337), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1899,620 ±(99.9%) 1174,198 MB/sec [Average]
[info]   (min, avg, max) = (1354,143, 1899,620, 2038,119), stdev = 304,936
[info]   CI (99.9%): [725,421, 3073,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7647,181 ±(99.9%) 4727,152 B/op [Average]
[info]   (min, avg, max) = (5451,752, 7647,181, 8237,508), stdev = 1227,626
[info]   CI (99.9%): [2920,029, 12374,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,66% complete, ETA 01:53:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1348285,241 ops/s
[info] # Warmup Iteration   2: 1400776,873 ops/s
[info] # Warmup Iteration   3: 1406121,018 ops/s
[info] # Warmup Iteration   4: 1385794,355 ops/s
[info] # Warmup Iteration   5: 1378367,581 ops/s
[info] Iteration   1: 1406351,827 ops/s
[info]                  ·gc.alloc.rate:                   486,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 572,484 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1408043,755 ops/s
[info]                  ·gc.alloc.rate:                   486,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 571,847 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1397874,249 ops/s
[info]                  ·gc.alloc.rate:                   483,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 759,696 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1404353,946 ops/s
[info]                  ·gc.alloc.rate:                   485,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756,217 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1407209,350 ops/s
[info]                  ·gc.alloc.rate:      486,433 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1404766,626 ±(99.9%) 15747,027 ops/s [Average]
[info]   (min, avg, max) = (1397874,249, 1404766,626, 1408043,755), stdev = 4089,453
[info]   CI (99.9%): [1389019,598, 1420513,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   485,576 ±(99.9%) 5,488 MB/sec [Average]
[info]   (min, avg, max) = (483,187, 485,576, 486,757), stdev = 1,425
[info]   CI (99.9%): [480,088, 491,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,000), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,667 ±(99.9%) 5,655 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,667, 3,294), stdev = 1,469
[info]   CI (99.9%): [≈ 0, 6,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,751 ±(99.9%) 6,367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,751, 3,709), stdev = 1,654
[info]   CI (99.9%): [≈ 0, 7,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474,552 ±(99.9%) 1068,724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,552, 674,778), stdev = 277,544
[info]   CI (99.9%): [≈ 0, 1543,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   532,049 ±(99.9%) 1199,847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 532,049, 759,696), stdev = 311,597
[info]   CI (99.9%): [≈ 0, 1731,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14,86% complete, ETA 01:53:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48827,831 ops/s
[info] # Warmup Iteration   2: 89795,778 ops/s
[info] # Warmup Iteration   3: 90006,090 ops/s
[info] # Warmup Iteration   4: 89360,241 ops/s
[info] # Warmup Iteration   5: 90307,640 ops/s
[info] Iteration   1: 89809,968 ops/s
[info]                  ·gc.alloc.rate:                   3774,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078,738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71475,512 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 90663,164 ops/s
[info]                  ·gc.alloc.rate:                   3810,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401,528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59051,416 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 90600,081 ops/s
[info]                  ·gc.alloc.rate:                   3807,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084,997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70960,447 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 90095,758 ops/s
[info]                  ·gc.alloc.rate:                   3786,571 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4086,793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71388,299 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 89865,718 ops/s
[info]                  ·gc.alloc.rate:                   3776,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3407,270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59670,315 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   90206,938 ±(99.9%) 1551,147 ops/s [Average]
[info]   (min, avg, max) = (89809,968, 90206,938, 90663,164), stdev = 402,828
[info]   CI (99.9%): [88655,791, 91758,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3791,161 ±(99.9%) 64,829 MB/sec [Average]
[info]   (min, avg, max) = (3774,496, 3791,161, 3810,081), stdev = 16,836
[info]   CI (99.9%): [3726,332, 3855,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66144,005, 66144,005, 66144,005), stdev = 0,001
[info]   CI (99.9%): [66144,004, 66144,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,236 ±(99.9%) 1,605 B/op [Average]
[info]   (min, avg, max) = (0,723, 1,236, 1,824), stdev = 0,417
[info]   CI (99.9%): [≈ 0, 2,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3811,865 ±(99.9%) 1432,369 MB/sec [Average]
[info]   (min, avg, max) = (3401,528, 3811,865, 4086,793), stdev = 371,982
[info]   CI (99.9%): [2379,496, 5244,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66509,198 ±(99.9%) 25152,720 B/op [Average]
[info]   (min, avg, max) = (59051,416, 66509,198, 71475,512), stdev = 6532,082
[info]   CI (99.9%): [41356,477, 91661,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15,06% complete, ETA 01:52:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228957,084 ops/s
[info] # Warmup Iteration   2: 261258,066 ops/s
[info] # Warmup Iteration   3: 263663,060 ops/s
[info] # Warmup Iteration   4: 263362,046 ops/s
[info] # Warmup Iteration   5: 262178,366 ops/s
[info] Iteration   1: 261085,196 ops/s
[info]                  ·gc.alloc.rate:                   2765,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697,698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16261,910 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 263305,976 ops/s
[info]                  ·gc.alloc.rate:                   2789,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703,946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16159,780 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 261526,366 ops/s
[info]                  ·gc.alloc.rate:                   2770,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20383,388 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 256730,361 ops/s
[info]                  ·gc.alloc.rate:                   2719,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16640,952 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 260924,597 ops/s
[info]                  ·gc.alloc.rate:                   2764,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718,011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16392,915 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   260714,499 ±(99.9%) 9319,393 ops/s [Average]
[info]   (min, avg, max) = (256730,361, 260714,499, 263305,976), stdev = 2420,217
[info]   CI (99.9%): [251395,106, 270033,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2761,930 ±(99.9%) 99,376 MB/sec [Average]
[info]   (min, avg, max) = (2719,479, 2761,930, 2789,654), stdev = 25,808
[info]   CI (99.9%): [2662,553, 2861,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   16672,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16672,002, 16672,002, 16672,002), stdev = 0,001
[info]   CI (99.9%): [16672,001, 16672,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,326 ±(99.9%) 0,424 B/op [Average]
[info]   (min, avg, max) = (0,251, 0,326, 0,498), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2844,264 ±(99.9%) 1169,236 MB/sec [Average]
[info]   (min, avg, max) = (2697,698, 2844,264, 3387,250), stdev = 303,647
[info]   CI (99.9%): [1675,028, 4013,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   17167,789 ±(99.9%) 6956,453 B/op [Average]
[info]   (min, avg, max) = (16159,780, 17167,789, 20383,388), stdev = 1806,569
[info]   CI (99.9%): [10211,336, 24124,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15,26% complete, ETA 01:52:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200358,023 ops/s
[info] # Warmup Iteration   2: 243905,506 ops/s
[info] # Warmup Iteration   3: 251451,266 ops/s
[info] # Warmup Iteration   4: 252958,841 ops/s
[info] # Warmup Iteration   5: 252815,233 ops/s
[info] Iteration   1: 250239,448 ops/s
[info]                  ·gc.alloc.rate:                   2124,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12679,910 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 254017,344 ops/s
[info]                  ·gc.alloc.rate:                   2156,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693,360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16684,846 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 253187,582 ops/s
[info]                  ·gc.alloc.rate:                   2149,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12578,970 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 253082,197 ops/s
[info]                  ·gc.alloc.rate:                   2148,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12611,362 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 252321,625 ops/s
[info]                  ·gc.alloc.rate:                   2142,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12666,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   252569,639 ±(99.9%) 5523,936 ops/s [Average]
[info]   (min, avg, max) = (250239,448, 252569,639, 254017,344), stdev = 1434,549
[info]   CI (99.9%): [247045,703, 258093,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2144,191 ±(99.9%) 47,369 MB/sec [Average]
[info]   (min, avg, max) = (2124,187, 2144,191, 2156,645), stdev = 12,301
[info]   CI (99.9%): [2096,822, 2191,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13360,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13360,002, 13360,002, 13360,002), stdev = 0,001
[info]   CI (99.9%): [13360,001, 13360,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,125), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,467 ±(99.9%) 0,831 B/op [Average]
[info]   (min, avg, max) = (0,259, 0,467, 0,774), stdev = 0,216
[info]   CI (99.9%): [≈ 0, 1,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2158,450 ±(99.9%) 1151,637 MB/sec [Average]
[info]   (min, avg, max) = (2016,055, 2158,450, 2693,360), stdev = 299,077
[info]   CI (99.9%): [1006,813, 3310,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13444,269 ±(99.9%) 6977,362 B/op [Average]
[info]   (min, avg, max) = (12578,970, 13444,269, 16684,846), stdev = 1811,999
[info]   CI (99.9%): [6466,908, 20421,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,46% complete, ETA 01:52:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 938021,752 ops/s
[info] # Warmup Iteration   2: 1316648,357 ops/s
[info] # Warmup Iteration   3: 1308685,125 ops/s
[info] # Warmup Iteration   4: 1313626,972 ops/s
[info] # Warmup Iteration   5: 1312955,593 ops/s
[info] Iteration   1: 1317034,659 ops/s
[info]                  ·gc.alloc.rate:                   769,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 805,129 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1319397,740 ops/s
[info]                  ·gc.alloc.rate:                   771,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 805,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1313490,236 ops/s
[info]                  ·gc.alloc.rate:                   767,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1618,629 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1313962,607 ops/s
[info]                  ·gc.alloc.rate:                   768,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 809,406 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1310809,702 ops/s
[info]                  ·gc.alloc.rate:                   766,212 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 811,765 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1314938,989 ±(99.9%) 12825,522 ops/s [Average]
[info]   (min, avg, max) = (1310809,702, 1314938,989, 1319397,740), stdev = 3330,747
[info]   CI (99.9%): [1302113,466, 1327764,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   768,668 ±(99.9%) 7,606 MB/sec [Average]
[info]   (min, avg, max) = (766,212, 768,668, 771,344), stdev = 1,975
[info]   CI (99.9%): [761,062, 776,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,040 ±(99.9%) 0,161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,040, 0,100), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810,335 ±(99.9%) 1163,582 MB/sec [Average]
[info]   (min, avg, max) = (673,724, 810,335, 1350,886), stdev = 302,179
[info]   CI (99.9%): [≈ 0, 1973,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   970,054 ±(99.9%) 1396,146 B/op [Average]
[info]   (min, avg, max) = (805,129, 970,054, 1618,629), stdev = 362,575
[info]   CI (99.9%): [≈ 0, 2366,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,66% complete, ETA 01:51:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2549261,681 ops/s
[info] # Warmup Iteration   2: 2675996,046 ops/s
[info] # Warmup Iteration   3: 2665234,347 ops/s
[info] # Warmup Iteration   4: 2697575,040 ops/s
[info] # Warmup Iteration   5: 2679524,681 ops/s
[info] Iteration   1: 2701277,054 ops/s
[info]                  ·gc.alloc.rate:                   919,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 391,968 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2708416,199 ops/s
[info]                  ·gc.alloc.rate:                   922,542 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 781,163 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2634024,022 ops/s
[info]                  ·gc.alloc.rate:                   897,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 401,184 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2697669,679 ops/s
[info]                  ·gc.alloc.rate:                   918,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 391,713 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2699954,019 ops/s
[info]                  ·gc.alloc.rate:                   919,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 782,966 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2688268,194 ±(99.9%) 117784,224 ops/s [Average]
[info]   (min, avg, max) = (2634024,022, 2688268,194, 2708416,199), stdev = 30588,189
[info]   CI (99.9%): [2570483,971, 2806052,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   915,557 ±(99.9%) 40,157 MB/sec [Average]
[info]   (min, avg, max) = (897,078, 915,557, 922,542), stdev = 10,429
[info]   CI (99.9%): [875,400, 955,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,024 ±(99.9%) 0,109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,024, 0,060), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940,660 ±(99.9%) 1417,359 MB/sec [Average]
[info]   (min, avg, max) = (671,414, 940,660, 1344,507), stdev = 368,084
[info]   CI (99.9%): [≈ 0, 2358,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   549,799 ±(99.9%) 816,583 B/op [Average]
[info]   (min, avg, max) = (391,713, 549,799, 782,966), stdev = 212,064
[info]   CI (99.9%): [≈ 0, 1366,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15,86% complete, ETA 01:51:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2960831,637 ops/s
[info] # Warmup Iteration   2: 3096679,120 ops/s
[info] # Warmup Iteration   3: 3050609,140 ops/s
[info] # Warmup Iteration   4: 3049918,107 ops/s
[info] # Warmup Iteration   5: 3054176,833 ops/s
[info] Iteration   1: 3059156,842 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3052536,442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3045151,179 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2895337,121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3045625,766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3019561,470 ±(99.9%) 268311,503 ops/s [Average]
[info]   (min, avg, max) = (2895337,121, 3019561,470, 3059156,842), stdev = 69679,645
[info]   CI (99.9%): [2751249,967, 3287872,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16,06% complete, ETA 01:51:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240449,463 ops/s
[info] # Warmup Iteration   2: 361223,781 ops/s
[info] # Warmup Iteration   3: 360979,582 ops/s
[info] # Warmup Iteration   4: 362735,685 ops/s
[info] # Warmup Iteration   5: 364070,093 ops/s
[info] Iteration   1: 362457,896 ops/s
[info]                  ·gc.alloc.rate:                   2966,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394,121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14739,101 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 363385,952 ops/s
[info]                  ·gc.alloc.rate:                   2973,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718,595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11774,426 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 364159,744 ops/s
[info]                  ·gc.alloc.rate:                   2980,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720,873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11758,835 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 363706,146 ops/s
[info]                  ·gc.alloc.rate:                   2976,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14727,936 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 363149,261 ops/s
[info]                  ·gc.alloc.rate:                   2971,863 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11801,604 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   363371,800 ±(99.9%) 2448,710 ops/s [Average]
[info]   (min, avg, max) = (362457,896, 363371,800, 364159,744), stdev = 635,922
[info]   CI (99.9%): [360923,090, 365820,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2973,697 ±(99.9%) 20,532 MB/sec [Average]
[info]   (min, avg, max) = (2966,008, 2973,697, 2980,299), stdev = 5,332
[info]   CI (99.9%): [2953,166, 2994,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12880,001, 12880,001, 12880,001), stdev = 0,001
[info]   CI (99.9%): [12880,001, 12880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,096, 0,146), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,415 ±(99.9%) 0,580 B/op [Average]
[info]   (min, avg, max) = (0,270, 0,415, 0,631), stdev = 0,151
[info]   CI (99.9%): [≈ 0, 0,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2992,025 ±(99.9%) 1429,974 MB/sec [Average]
[info]   (min, avg, max) = (2718,595, 2992,025, 3403,498), stdev = 371,360
[info]   CI (99.9%): [1562,051, 4422,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12960,381 ±(99.9%) 6233,127 B/op [Average]
[info]   (min, avg, max) = (11758,835, 12960,381, 14739,101), stdev = 1618,723
[info]   CI (99.9%): [6727,253, 19193,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16,27% complete, ETA 01:51:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86261,682 ops/s
[info] # Warmup Iteration   2: 89389,473 ops/s
[info] # Warmup Iteration   3: 89472,422 ops/s
[info] # Warmup Iteration   4: 89729,935 ops/s
[info] # Warmup Iteration   5: 88579,269 ops/s
[info] Iteration   1: 89327,014 ops/s
[info]                  ·gc.alloc.rate:                   662,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11889,362 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 89804,203 ops/s
[info]                  ·gc.alloc.rate:                   666,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11826,089 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 90454,335 ops/s
[info]                  ·gc.alloc.rate:                   671,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11705,962 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 90321,047 ops/s
[info]                  ·gc.alloc.rate:                   670,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11722,417 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 90160,064 ops/s
[info]                  ·gc.alloc.rate:                   669,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11720,610 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   90013,333 ±(99.9%) 1749,258 ops/s [Average]
[info]   (min, avg, max) = (89327,014, 90013,333, 90454,335), stdev = 454,277
[info]   CI (99.9%): [88264,074, 91762,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   668,040 ±(99.9%) 12,887 MB/sec [Average]
[info]   (min, avg, max) = (662,945, 668,040, 671,225), stdev = 3,347
[info]   CI (99.9%): [655,153, 680,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11680,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11680,005, 11680,005, 11680,005), stdev = 0,001
[info]   CI (99.9%): [11680,003, 11680,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,680 ±(99.9%) 5,678 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,680, 3,318), stdev = 1,475
[info]   CI (99.9%): [≈ 0, 6,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11,981 ±(99.9%) 100,039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,981, 58,451), stdev = 25,980
[info]   CI (99.9%): [≈ 0, 112,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   673,335 ±(99.9%) 5,734 MB/sec [Average]
[info]   (min, avg, max) = (671,458, 673,335, 674,893), stdev = 1,489
[info]   CI (99.9%): [667,600, 679,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11772,888 ±(99.9%) 311,379 B/op [Average]
[info]   (min, avg, max) = (11705,962, 11772,888, 11889,362), stdev = 80,864
[info]   CI (99.9%): [11461,509, 12084,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16,47% complete, ETA 01:50:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23995,265 ops/s
[info] # Warmup Iteration   2: 30188,990 ops/s
[info] # Warmup Iteration   3: 30309,642 ops/s
[info] # Warmup Iteration   4: 30174,676 ops/s
[info] # Warmup Iteration   5: 30338,980 ops/s
[info] Iteration   1: 30478,918 ops/s
[info]                  ·gc.alloc.rate:                   1785,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69338,709 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30573,016 ops/s
[info]                  ·gc.alloc.rate:                   1791,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103835,703 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 30588,969 ops/s
[info]                  ·gc.alloc.rate:                   1792,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103921,892 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30549,843 ops/s
[info]                  ·gc.alloc.rate:                   1789,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69490,980 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30444,948 ops/s
[info]                  ·gc.alloc.rate:                   1783,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104733,634 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   30527,139 ±(99.9%) 239,884 ops/s [Average]
[info]   (min, avg, max) = (30444,948, 30527,139, 30588,969), stdev = 62,297
[info]   CI (99.9%): [30287,255, 30767,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1788,216 ±(99.9%) 14,598 MB/sec [Average]
[info]   (min, avg, max) = (1783,443, 1788,216, 1792,017), stdev = 3,791
[info]   CI (99.9%): [1773,618, 1802,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (92192,013, 92192,014, 92192,014), stdev = 0,001
[info]   CI (99.9%): [92192,012, 92192,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,716 ±(99.9%) 4,707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,716, 3,215), stdev = 1,222
[info]   CI (99.9%): [≈ 0, 6,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1750,956 ±(99.9%) 1424,593 MB/sec [Average]
[info]   (min, avg, max) = (1342,523, 1750,956, 2026,059), stdev = 369,962
[info]   CI (99.9%): [326,364, 3175,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   90264,184 ±(99.9%) 73301,071 B/op [Average]
[info]   (min, avg, max) = (69338,709, 90264,184, 104733,634), stdev = 19036,055
[info]   CI (99.9%): [16963,113, 163565,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16,67% complete, ETA 01:50:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19769,511 ops/s
[info] # Warmup Iteration   2: 107694,465 ops/s
[info] # Warmup Iteration   3: 106211,212 ops/s
[info] # Warmup Iteration   4: 107754,802 ops/s
[info] # Warmup Iteration   5: 109041,775 ops/s
[info] Iteration   1: 109188,868 ops/s
[info]                  ·gc.alloc.rate:                   983,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9687,523 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 108348,191 ops/s
[info]                  ·gc.alloc.rate:                   976,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19525,222 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 107897,518 ops/s
[info]                  ·gc.alloc.rate:                   972,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9804,407 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 109016,627 ops/s
[info]                  ·gc.alloc.rate:                   982,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19407,210 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 109128,138 ops/s
[info]                  ·gc.alloc.rate:                   983,010 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9693,737 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   108715,868 ±(99.9%) 2185,927 ops/s [Average]
[info]   (min, avg, max) = (107897,518, 108715,868, 109188,868), stdev = 567,678
[info]   CI (99.9%): [106529,941, 110901,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   979,375 ±(99.9%) 19,400 MB/sec [Average]
[info]   (min, avg, max) = (972,017, 979,375, 983,522), stdev = 5,038
[info]   CI (99.9%): [959,975, 998,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14176,004, 14176,004, 14176,004), stdev = 0,001
[info]   CI (99.9%): [14176,003, 14176,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,423 ±(99.9%) 3,036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,423, 1,814), stdev = 0,789
[info]   CI (99.9%): [≈ 0, 3,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   941,138 ±(99.9%) 1418,073 MB/sec [Average]
[info]   (min, avg, max) = (672,114, 941,138, 1344,641), stdev = 368,269
[info]   CI (99.9%): [≈ 0, 2359,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   13623,620 ±(99.9%) 20538,958 B/op [Average]
[info]   (min, avg, max) = (9687,523, 13623,620, 19525,222), stdev = 5333,902
[info]   CI (99.9%): [≈ 0, 34162,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16,87% complete, ETA 01:50:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45487,583 ops/s
[info] # Warmup Iteration   2: 66681,431 ops/s
[info] # Warmup Iteration   3: 67143,667 ops/s
[info] # Warmup Iteration   4: 67254,173 ops/s
[info] # Warmup Iteration   5: 67526,823 ops/s
[info] Iteration   1: 67607,327 ops/s
[info]                  ·gc.alloc.rate:                   1115,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15723,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 65893,425 ops/s
[info]                  ·gc.alloc.rate:                   1087,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32280,276 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 67584,687 ops/s
[info]                  ·gc.alloc.rate:                   1115,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15743,919 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 67786,458 ops/s
[info]                  ·gc.alloc.rate:                   1118,869 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31425,885 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 67534,264 ops/s
[info]                  ·gc.alloc.rate:                   1114,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31573,702 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   67281,232 ±(99.9%) 3009,734 ops/s [Average]
[info]   (min, avg, max) = (65893,425, 67281,232, 67786,458), stdev = 781,618
[info]   CI (99.9%): [64271,498, 70290,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1110,492 ±(99.9%) 49,636 MB/sec [Average]
[info]   (min, avg, max) = (1087,607, 1110,492, 1118,869), stdev = 12,890
[info]   CI (99.9%): [1060,856, 1160,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25976,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25976,006, 25976,007, 25976,007), stdev = 0,001
[info]   CI (99.9%): [25976,006, 25976,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,683 ±(99.9%) 2,515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,683, 1,455), stdev = 0,653
[info]   CI (99.9%): [≈ 0, 3,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082,314 ±(99.9%) 1429,201 MB/sec [Average]
[info]   (min, avg, max) = (675,356, 1082,314, 1354,929), stdev = 371,159
[info]   CI (99.9%): [≈ 0, 2511,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25349,368 ±(99.9%) 33824,043 B/op [Average]
[info]   (min, avg, max) = (15723,058, 25349,368, 32280,276), stdev = 8783,997
[info]   CI (99.9%): [≈ 0, 59173,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,07% complete, ETA 01:50:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134736,307 ops/s
[info] # Warmup Iteration   2: 145520,126 ops/s
[info] # Warmup Iteration   3: 147037,423 ops/s
[info] # Warmup Iteration   4: 147610,368 ops/s
[info] # Warmup Iteration   5: 147195,002 ops/s
[info] Iteration   1: 147341,760 ops/s
[info]                  ·gc.alloc.rate:                   949,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7179,152 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 147926,733 ops/s
[info]                  ·gc.alloc.rate:                   953,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14295,800 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 147218,888 ops/s
[info]                  ·gc.alloc.rate:                   948,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7178,418 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 147582,922 ops/s
[info]                  ·gc.alloc.rate:                   951,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14320,461 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 147647,585 ops/s
[info]                  ·gc.alloc.rate:                   951,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7160,775 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   147543,578 ±(99.9%) 1063,864 ops/s [Average]
[info]   (min, avg, max) = (147218,888, 147543,578, 147926,733), stdev = 276,282
[info]   CI (99.9%): [146479,714, 148607,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   950,947 ±(99.9%) 7,223 MB/sec [Average]
[info]   (min, avg, max) = (948,828, 950,947, 953,566), stdev = 1,876
[info]   CI (99.9%): [943,725, 958,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10144,003, 10144,003, 10144,003), stdev = 0,001
[info]   CI (99.9%): [10144,002, 10144,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,222 ±(99.9%) 1,208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,222, 0,666), stdev = 0,314
[info]   CI (99.9%): [≈ 0, 1,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940,382 ±(99.9%) 1416,584 MB/sec [Average]
[info]   (min, avg, max) = (671,439, 940,382, 1343,847), stdev = 367,882
[info]   CI (99.9%): [≈ 0, 2356,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10026,921 ±(99.9%) 15049,118 B/op [Average]
[info]   (min, avg, max) = (7160,775, 10026,921, 14320,461), stdev = 3908,208
[info]   CI (99.9%): [≈ 0, 25076,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17,27% complete, ETA 01:49:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22860,449 ops/s
[info] # Warmup Iteration   2: 39103,008 ops/s
[info] # Warmup Iteration   3: 39588,063 ops/s
[info] # Warmup Iteration   4: 39510,616 ops/s
[info] # Warmup Iteration   5: 39902,902 ops/s
[info] Iteration   1: 39857,046 ops/s
[info]                  ·gc.alloc.rate:                   2082,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80275,271 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 39843,647 ops/s
[info]                  ·gc.alloc.rate:                   2081,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80388,458 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 39973,278 ops/s
[info]                  ·gc.alloc.rate:                   2088,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80199,725 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 39991,300 ops/s
[info]                  ·gc.alloc.rate:                   2089,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80216,064 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 39997,212 ops/s
[info]                  ·gc.alloc.rate:                   2090,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80260,467 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   39932,497 ±(99.9%) 291,330 ops/s [Average]
[info]   (min, avg, max) = (39843,647, 39932,497, 39997,212), stdev = 75,657
[info]   CI (99.9%): [39641,167, 40223,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2086,763 ±(99.9%) 15,674 MB/sec [Average]
[info]   (min, avg, max) = (2081,984, 2086,763, 2090,225), stdev = 4,070
[info]   CI (99.9%): [2071,089, 2102,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82248,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82248,010, 82248,011, 82248,011), stdev = 0,001
[info]   CI (99.9%): [82248,009, 82248,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,125), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,969 ±(99.9%) 7,287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,969, 4,932), stdev = 1,892
[info]   CI (99.9%): [≈ 0, 9,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2036,524 ±(99.9%) 10,610 MB/sec [Average]
[info]   (min, avg, max) = (2032,742, 2036,524, 2039,714), stdev = 2,755
[info]   CI (99.9%): [2025,915, 2047,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80267,997 ±(99.9%) 285,433 B/op [Average]
[info]   (min, avg, max) = (80199,725, 80267,997, 80388,458), stdev = 74,126
[info]   CI (99.9%): [79982,564, 80553,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17,47% complete, ETA 01:49:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65112,578 ops/s
[info] # Warmup Iteration   2: 73093,859 ops/s
[info] # Warmup Iteration   3: 73870,048 ops/s
[info] # Warmup Iteration   4: 73460,497 ops/s
[info] # Warmup Iteration   5: 74093,075 ops/s
[info] Iteration   1: 73883,560 ops/s
[info]                  ·gc.alloc.rate:                   1329,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28605,267 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 71725,908 ops/s
[info]                  ·gc.alloc.rate:                   1290,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29476,719 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 73364,824 ops/s
[info]                  ·gc.alloc.rate:                   1319,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28829,803 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 74094,193 ops/s
[info]                  ·gc.alloc.rate:                   1333,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28564,730 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 74304,908 ops/s
[info]                  ·gc.alloc.rate:                   1336,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28522,362 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   73474,679 ±(99.9%) 3997,318 ops/s [Average]
[info]   (min, avg, max) = (71725,908, 73474,679, 74304,908), stdev = 1038,091
[info]   CI (99.9%): [69477,361, 77471,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1321,906 ±(99.9%) 71,922 MB/sec [Average]
[info]   (min, avg, max) = (1290,508, 1321,906, 1336,875), stdev = 18,678
[info]   CI (99.9%): [1249,984, 1393,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28312,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28312,006, 28312,006, 28312,006), stdev = 0,001
[info]   CI (99.9%): [28312,005, 28312,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,710 ±(99.9%) 2,274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,710, 1,326), stdev = 0,590
[info]   CI (99.9%): [≈ 0, 2,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1344,472 ±(99.9%) 5,978 MB/sec [Average]
[info]   (min, avg, max) = (1342,859, 1344,472, 1346,808), stdev = 1,553
[info]   CI (99.9%): [1338,493, 1350,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   28799,776 ±(99.9%) 1527,198 B/op [Average]
[info]   (min, avg, max) = (28522,362, 28799,776, 29476,719), stdev = 396,608
[info]   CI (99.9%): [27272,578, 30326,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 5,000), stdev = 1,949
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17,67% complete, ETA 01:49:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32345,492 ops/s
[info] # Warmup Iteration   2: 41358,571 ops/s
[info] # Warmup Iteration   3: 43831,028 ops/s
[info] # Warmup Iteration   4: 41877,100 ops/s
[info] # Warmup Iteration   5: 41344,937 ops/s
[info] Iteration   1: 40248,791 ops/s
[info]                  ·gc.alloc.rate:                   528,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20003,636 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 42279,094 ops/s
[info]                  ·gc.alloc.rate:      555,632 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41998,810 ops/s
[info]                  ·gc.alloc.rate:                   551,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132,892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25260,877 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 41417,811 ops/s
[info]                  ·gc.alloc.rate:                   544,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25615,771 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 42110,258 ops/s
[info]                  ·gc.alloc.rate:                   553,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25120,214 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   41610,953 ±(99.9%) 3186,358 ops/s [Average]
[info]   (min, avg, max) = (40248,791, 41610,953, 42279,094), stdev = 827,487
[info]   CI (99.9%): [38424,594, 44797,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   546,780 ±(99.9%) 42,005 MB/sec [Average]
[info]   (min, avg, max) = (528,818, 546,780, 555,632), stdev = 10,909
[info]   CI (99.9%): [504,775, 588,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20680,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20680,010, 20680,010, 20680,010), stdev = 0,001
[info]   CI (99.9%): [20680,009, 20680,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,722 ±(99.9%) 6,081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,722, 3,546), stdev = 1,579
[info]   CI (99.9%): [≈ 0, 6,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27,053 ±(99.9%) 227,861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27,053, 132,892), stdev = 59,175
[info]   CI (99.9%): [≈ 0, 254,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   506,384 ±(99.9%) 1122,982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,384, 674,163), stdev = 291,635
[info]   CI (99.9%): [≈ 0, 1629,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19200,099 ±(99.9%) 42279,610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19200,099, 25615,771), stdev = 10979,881
[info]   CI (99.9%): [≈ 0, 61479,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,87% complete, ETA 01:49:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30740,763 ops/s
[info] # Warmup Iteration   2: 45987,332 ops/s
[info] # Warmup Iteration   3: 45721,750 ops/s
[info] # Warmup Iteration   4: 45965,951 ops/s
[info] # Warmup Iteration   5: 46048,443 ops/s
[info] Iteration   1: 45855,083 ops/s
[info]                  ·gc.alloc.rate:                   414,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17557,424 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45520,098 ops/s
[info]                  ·gc.alloc.rate:                   411,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17688,933 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45925,000 ops/s
[info]                  ·gc.alloc.rate:                   414,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23089,399 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45824,326 ops/s
[info]                  ·gc.alloc.rate:      413,956 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45829,625 ops/s
[info]                  ·gc.alloc.rate:                   413,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23137,249 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   45790,826 ±(99.9%) 602,883 ops/s [Average]
[info]   (min, avg, max) = (45520,098, 45790,826, 45925,000), stdev = 156,567
[info]   CI (99.9%): [45187,943, 46393,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   413,628 ±(99.9%) 5,397 MB/sec [Average]
[info]   (min, avg, max) = (411,201, 413,628, 414,827), stdev = 1,402
[info]   CI (99.9%): [408,231, 419,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14216,009, 14216,009, 14216,009), stdev = 0,001
[info]   CI (99.9%): [14216,009, 14216,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,858 ±(99.9%) 3,582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,858, 2,140), stdev = 0,930
[info]   CI (99.9%): [≈ 0, 4,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   474,143 ±(99.9%) 1067,330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,143, 673,792), stdev = 277,182
[info]   CI (99.9%): [≈ 0, 1541,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16294,601 ±(99.9%) 36633,975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16294,601, 23137,249), stdev = 9513,727
[info]   CI (99.9%): [≈ 0, 52928,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,07% complete, ETA 01:48:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44221,826 ops/s
[info] # Warmup Iteration   2: 49302,794 ops/s
[info] # Warmup Iteration   3: 50007,747 ops/s
[info] # Warmup Iteration   4: 49361,284 ops/s
[info] # Warmup Iteration   5: 49429,731 ops/s
[info] Iteration   1: 49914,118 ops/s
[info]                  ·gc.alloc.rate:                   438,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16130,000 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 50040,896 ops/s
[info]                  ·gc.alloc.rate:                   439,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16090,359 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 50295,743 ops/s
[info]                  ·gc.alloc.rate:      442,036 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49570,920 ops/s
[info]                  ·gc.alloc.rate:                   435,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21423,680 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 50132,925 ops/s
[info]                  ·gc.alloc.rate:                   440,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21182,720 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   49990,920 ±(99.9%) 1050,807 ops/s [Average]
[info]   (min, avg, max) = (49570,920, 49990,920, 50295,743), stdev = 272,891
[info]   CI (99.9%): [48940,114, 51041,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   439,367 ±(99.9%) 9,261 MB/sec [Average]
[info]   (min, avg, max) = (435,664, 439,367, 442,036), stdev = 2,405
[info]   CI (99.9%): [430,106, 448,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13832,008, 13832,008, 13832,008), stdev = 0,001
[info]   CI (99.9%): [13832,008, 13832,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,677 ±(99.9%) 5,616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,677, 3,286), stdev = 1,459
[info]   CI (99.9%): [≈ 0, 6,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21,499 ±(99.9%) 178,333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21,499, 104,332), stdev = 46,312
[info]   CI (99.9%): [≈ 0, 199,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474,553 ±(99.9%) 1068,729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,553, 674,778), stdev = 277,545
[info]   CI (99.9%): [≈ 0, 1543,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14965,352 ±(99.9%) 33731,590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14965,352, 21423,680), stdev = 8759,987
[info]   CI (99.9%): [≈ 0, 48696,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18,27% complete, ETA 01:48:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44432,346 ops/s
[info] # Warmup Iteration   2: 49880,003 ops/s
[info] # Warmup Iteration   3: 49740,636 ops/s
[info] # Warmup Iteration   4: 49938,436 ops/s
[info] # Warmup Iteration   5: 50007,231 ops/s
[info] Iteration   1: 49525,759 ops/s
[info]                  ·gc.alloc.rate:                   378,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16256,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 49980,756 ops/s
[info]                  ·gc.alloc.rate:                   382,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16109,994 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 50010,612 ops/s
[info]                  ·gc.alloc.rate:                   382,353 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16098,400 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 50042,062 ops/s
[info]                  ·gc.alloc.rate:      382,595 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 50043,602 ops/s
[info]                  ·gc.alloc.rate:                   382,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104,552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21220,383 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   49920,558 ±(99.9%) 855,638 ops/s [Average]
[info]   (min, avg, max) = (49525,759, 49920,558, 50043,602), stdev = 222,207
[info]   CI (99.9%): [49064,920, 50776,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   381,659 ±(99.9%) 6,626 MB/sec [Average]
[info]   (min, avg, max) = (378,602, 381,659, 382,619), stdev = 1,721
[info]   CI (99.9%): [375,033, 388,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12032,008, 12032,008, 12032,009), stdev = 0,001
[info]   CI (99.9%): [12032,007, 12032,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,671 ±(99.9%) 5,713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,671, 3,325), stdev = 1,484
[info]   CI (99.9%): [≈ 0, 6,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   21,094 ±(99.9%) 179,654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21,094, 104,552), stdev = 46,656
[info]   CI (99.9%): [≈ 0, 200,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   441,907 ±(99.9%) 989,411 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,907, 674,811), stdev = 256,947
[info]   CI (99.9%): [≈ 0, 1431,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   13936,957 ±(99.9%) 31167,566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13936,957, 21220,383), stdev = 8094,118
[info]   CI (99.9%): [≈ 0, 45104,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18,47% complete, ETA 01:48:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30965,841 ops/s
[info] # Warmup Iteration   2: 34450,562 ops/s
[info] # Warmup Iteration   3: 35082,528 ops/s
[info] # Warmup Iteration   4: 34993,654 ops/s
[info] # Warmup Iteration   5: 34977,168 ops/s
[info] Iteration   1: 35033,390 ops/s
[info]                  ·gc.alloc.rate:                   523,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22981,176 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 35145,674 ops/s
[info]                  ·gc.alloc.rate:      525,298 MB/sec
[info]                  ·gc.alloc.rate.norm: 23520,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34972,917 ops/s
[info]                  ·gc.alloc.rate:                   522,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30363,533 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 34935,884 ops/s
[info]                  ·gc.alloc.rate:                   522,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30397,421 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 35093,998 ops/s
[info]                  ·gc.alloc.rate:                   524,477 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30141,108 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   35036,373 ±(99.9%) 330,128 ops/s [Average]
[info]   (min, avg, max) = (34935,884, 35036,373, 35145,674), stdev = 85,733
[info]   CI (99.9%): [34706,245, 35366,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   523,600 ±(99.9%) 5,054 MB/sec [Average]
[info]   (min, avg, max) = (522,105, 523,600, 525,298), stdev = 1,313
[info]   CI (99.9%): [518,545, 528,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   23520,013 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23520,013, 23520,013, 23520,013), stdev = 0,001
[info]   CI (99.9%): [23520,012, 23520,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,674 ±(99.9%) 5,713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,674, 3,328), stdev = 1,484
[info]   CI (99.9%): [≈ 0, 6,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30,330 ±(99.9%) 257,130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30,330, 149,779), stdev = 66,776
[info]   CI (99.9%): [≈ 0, 287,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   506,616 ±(99.9%) 1123,623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,616, 674,772), stdev = 291,801
[info]   CI (99.9%): [≈ 0, 1630,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   22776,648 ±(99.9%) 50526,032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22776,648, 30397,421), stdev = 13121,450
[info]   CI (99.9%): [≈ 0, 73302,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18,67% complete, ETA 01:48:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19626,791 ops/s
[info] # Warmup Iteration   2: 22842,500 ops/s
[info] # Warmup Iteration   3: 22993,182 ops/s
[info] # Warmup Iteration   4: 22959,218 ops/s
[info] # Warmup Iteration   5: 23034,407 ops/s
[info] Iteration   1: 23120,993 ops/s
[info]                  ·gc.alloc.rate:                   867,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91677,289 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 23182,362 ops/s
[info]                  ·gc.alloc.rate:                   869,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45629,585 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 23148,049 ops/s
[info]                  ·gc.alloc.rate:                   868,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45649,331 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 22847,506 ops/s
[info]                  ·gc.alloc.rate:                   857,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46252,608 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23124,372 ops/s
[info]                  ·gc.alloc.rate:                   867,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91393,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   23084,657 ±(99.9%) 519,134 ops/s [Average]
[info]   (min, avg, max) = (22847,506, 23084,657, 23182,362), stdev = 134,817
[info]   CI (99.9%): [22565,523, 23603,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   865,996 ±(99.9%) 19,545 MB/sec [Average]
[info]   (min, avg, max) = (857,087, 865,996, 869,766), stdev = 5,076
[info]   CI (99.9%): [846,451, 885,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040,018 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (59040,018, 59040,018, 59040,019), stdev = 0,001
[info]   CI (99.9%): [59040,016, 59040,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,714 ±(99.9%) 9,863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,714, 5,736), stdev = 2,561
[info]   CI (99.9%): [≈ 0, 11,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   940,928 ±(99.9%) 1419,626 MB/sec [Average]
[info]   (min, avg, max) = (671,412, 940,928, 1346,746), stdev = 368,672
[info]   CI (99.9%): [≈ 0, 2360,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   64120,442 ±(99.9%) 96372,837 B/op [Average]
[info]   (min, avg, max) = (45629,585, 64120,442, 91677,289), stdev = 25027,720
[info]   CI (99.9%): [≈ 0, 160493,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,88% complete, ETA 01:47:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15252,090 ops/s
[info] # Warmup Iteration   2: 22238,168 ops/s
[info] # Warmup Iteration   3: 22379,634 ops/s
[info] # Warmup Iteration   4: 22489,286 ops/s
[info] # Warmup Iteration   5: 22516,064 ops/s
[info] Iteration   1: 22617,493 ops/s
[info]                  ·gc.alloc.rate:                   641,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              44655,836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46887,168 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 22629,252 ops/s
[info]                  ·gc.alloc.rate:                   642,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46864,379 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 22556,536 ops/s
[info]                  ·gc.alloc.rate:                   639,946 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47104,817 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 21606,271 ops/s
[info]                  ·gc.alloc.rate:                   613,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49177,778 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 22591,229 ops/s
[info]                  ·gc.alloc.rate:                   640,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47055,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   22400,156 ±(99.9%) 1712,279 ops/s [Average]
[info]   (min, avg, max) = (21606,271, 22400,156, 22629,252), stdev = 444,673
[info]   CI (99.9%): [20687,877, 24112,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   635,547 ±(99.9%) 48,619 MB/sec [Average]
[info]   (min, avg, max) = (613,008, 635,547, 642,065), stdev = 12,626
[info]   CI (99.9%): [586,928, 684,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44649,582 ±(99.9%) 13,462 B/op [Average]
[info]   (min, avg, max) = (44648,018, 44649,582, 44655,836), stdev = 3,496
[info]   CI (99.9%): [44636,120, 44663,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,146), stdev = 0,067
[info]   CI (99.9%): [≈ 0, 0,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3,768 ±(99.9%) 17,908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,768, 10,140), stdev = 4,651
[info]   CI (99.9%): [≈ 0, 21,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,727 ±(99.9%) 3,014 MB/sec [Average]
[info]   (min, avg, max) = (673,829, 674,727, 675,508), stdev = 0,783
[info]   CI (99.9%): [671,713, 677,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   47417,840 ±(99.9%) 3809,466 B/op [Average]
[info]   (min, avg, max) = (46864,379, 47417,840, 49177,778), stdev = 989,306
[info]   CI (99.9%): [43608,373, 51227,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,08% complete, ETA 01:47:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80717,967 ops/s
[info] # Warmup Iteration   2: 84474,090 ops/s
[info] # Warmup Iteration   3: 83115,972 ops/s
[info] # Warmup Iteration   4: 73153,697 ops/s
[info] # Warmup Iteration   5: 77296,052 ops/s
[info] Iteration   1: 77214,375 ops/s
[info]                  ·gc.alloc.rate:      200,958 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 84260,893 ops/s
[info]                  ·gc.alloc.rate:      219,312 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 84014,730 ops/s
[info]                  ·gc.alloc.rate:                   218,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9583,900 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 84032,385 ops/s
[info]                  ·gc.alloc.rate:      218,715 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 83821,991 ops/s
[info]                  ·gc.alloc.rate:                   218,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9605,735 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   82668,875 ±(99.9%) 11756,492 ops/s [Average]
[info]   (min, avg, max) = (77214,375, 82668,875, 84260,893), stdev = 3053,124
[info]   CI (99.9%): [70912,383, 94425,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   215,161 ±(99.9%) 30,614 MB/sec [Average]
[info]   (min, avg, max) = (200,958, 215,161, 219,312), stdev = 7,950
[info]   CI (99.9%): [184,547, 245,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,005, 4096,005, 4096,005), stdev = 0,001
[info]   CI (99.9%): [4096,004, 4096,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,013 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,066), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,247 ±(99.9%) 2,123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,247, 1,233), stdev = 0,551
[info]   CI (99.9%): [≈ 0, 2,369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204,649 ±(99.9%) 1079,054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,649, 511,623), stdev = 280,227
[info]   CI (99.9%): [≈ 0, 1283,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3837,927 ±(99.9%) 20236,303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3837,927, 9605,735), stdev = 5255,304
[info]   CI (99.9%): [≈ 0, 24074,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19,28% complete, ETA 01:47:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12862,985 ops/s
[info] # Warmup Iteration   2: 18607,363 ops/s
[info] # Warmup Iteration   3: 18698,962 ops/s
[info] # Warmup Iteration   4: 17151,810 ops/s
[info] # Warmup Iteration   5: 18633,913 ops/s
[info] Iteration   1: 18659,294 ops/s
[info]                  ·gc.alloc.rate:                   1209,830 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113992,751 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18547,096 ops/s
[info]                  ·gc.alloc.rate:                   1202,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114806,353 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17701,948 ops/s
[info]                  ·gc.alloc.rate:                   1147,821 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60165,653 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18709,181 ops/s
[info]                  ·gc.alloc.rate:                   1213,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113906,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18757,285 ops/s
[info]                  ·gc.alloc.rate:                   1216,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113732,660 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   18474,961 ±(99.9%) 1690,885 ops/s [Average]
[info]   (min, avg, max) = (17701,948, 18474,961, 18757,285), stdev = 439,117
[info]   CI (99.9%): [16784,076, 20165,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1197,925 ±(99.9%) 109,623 MB/sec [Average]
[info]   (min, avg, max) = (1147,821, 1197,925, 1216,248), stdev = 28,469
[info]   CI (99.9%): [1088,302, 1307,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102048,024 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (102048,022, 102048,024, 102048,027), stdev = 0,002
[info]   CI (99.9%): [102048,015, 102048,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,805 ±(99.9%) 17,627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,805, 10,534), stdev = 4,578
[info]   CI (99.9%): [≈ 0, 20,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1218,146 ±(99.9%) 1165,445 MB/sec [Average]
[info]   (min, avg, max) = (676,734, 1218,146, 1355,510), stdev = 302,662
[info]   CI (99.9%): [52,701, 2383,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   103320,728 ±(99.9%) 92908,171 B/op [Average]
[info]   (min, avg, max) = (60165,653, 103320,728, 114806,353), stdev = 24127,957
[info]   CI (99.9%): [10412,557, 196228,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19,48% complete, ETA 01:46:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16726,001 ops/s
[info] # Warmup Iteration   2: 18419,502 ops/s
[info] # Warmup Iteration   3: 18644,149 ops/s
[info] # Warmup Iteration   4: 18698,783 ops/s
[info] # Warmup Iteration   5: 18668,484 ops/s
[info] Iteration   1: 17786,733 ops/s
[info]                  ·gc.alloc.rate:                   613,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              54280,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59763,704 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18745,261 ops/s
[info]                  ·gc.alloc.rate:                   646,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56706,990 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18736,787 ops/s
[info]                  ·gc.alloc.rate:                   645,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56569,388 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 17861,454 ops/s
[info]                  ·gc.alloc.rate:      615,692 MB/sec
[info]                  ·gc.alloc.rate.norm: 54256,023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18619,029 ops/s
[info]                  ·gc.alloc.rate:                   641,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56921,732 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   18349,853 ±(99.9%) 1860,861 ops/s [Average]
[info]   (min, avg, max) = (17786,733, 18349,853, 18745,261), stdev = 483,260
[info]   CI (99.9%): [16488,992, 20210,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   632,636 ±(99.9%) 64,012 MB/sec [Average]
[info]   (min, avg, max) = (613,400, 632,636, 646,239), stdev = 16,624
[info]   CI (99.9%): [568,624, 696,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   54260,978 ±(99.9%) 41,033 B/op [Average]
[info]   (min, avg, max) = (54256,022, 54260,978, 54280,031), stdev = 10,656
[info]   CI (99.9%): [54219,945, 54302,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,610 ±(99.9%) 5,121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,610, 2,989), stdev = 1,330
[info]   CI (99.9%): [≈ 0, 5,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   53,945 ±(99.9%) 453,279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53,945, 264,481), stdev = 117,715
[info]   CI (99.9%): [≈ 0, 507,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   539,544 ±(99.9%) 1161,415 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,544, 675,422), stdev = 301,616
[info]   CI (99.9%): [≈ 0, 1700,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   45992,363 ±(99.9%) 99132,117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45992,363, 59763,704), stdev = 25744,296
[info]   CI (99.9%): [≈ 0, 145124,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19,68% complete, ETA 01:46:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58183,221 ops/s
[info] # Warmup Iteration   2: 75267,314 ops/s
[info] # Warmup Iteration   3: 75188,032 ops/s
[info] # Warmup Iteration   4: 75816,688 ops/s
[info] # Warmup Iteration   5: 75726,613 ops/s
[info] Iteration   1: 75299,284 ops/s
[info]                  ·gc.alloc.rate:                   993,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28094,937 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 76026,542 ops/s
[info]                  ·gc.alloc.rate:                   1003,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13886,871 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 75808,972 ops/s
[info]                  ·gc.alloc.rate:                   1000,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27852,130 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 75614,137 ops/s
[info]                  ·gc.alloc.rate:                   998,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13961,234 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 75278,183 ops/s
[info]                  ·gc.alloc.rate:                   993,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28060,249 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   75605,423 ±(99.9%) 1247,240 ops/s [Average]
[info]   (min, avg, max) = (75278,183, 75605,423, 76026,542), stdev = 323,904
[info]   CI (99.9%): [74358,183, 76852,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   998,101 ±(99.9%) 16,771 MB/sec [Average]
[info]   (min, avg, max) = (993,837, 998,101, 1003,793), stdev = 4,355
[info]   CI (99.9%): [981,330, 1014,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20776,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20776,005, 20776,006, 20776,006), stdev = 0,001
[info]   CI (99.9%): [20776,005, 20776,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,433 ±(99.9%) 2,358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,433, 1,296), stdev = 0,612
[info]   CI (99.9%): [≈ 0, 2,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1073,928 ±(99.9%) 1416,794 MB/sec [Average]
[info]   (min, avg, max) = (670,804, 1073,928, 1343,963), stdev = 367,937
[info]   CI (99.9%): [≈ 0, 2490,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22371,084 ±(99.9%) 29694,832 B/op [Average]
[info]   (min, avg, max) = (13886,871, 22371,084, 28094,937), stdev = 7711,654
[info]   CI (99.9%): [≈ 0, 52065,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,88% complete, ETA 01:46:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70573,726 ops/s
[info] # Warmup Iteration   2: 100919,892 ops/s
[info] # Warmup Iteration   3: 101428,805 ops/s
[info] # Warmup Iteration   4: 101293,296 ops/s
[info] # Warmup Iteration   5: 100363,711 ops/s
[info] Iteration   1: 96194,536 ops/s
[info]                  ·gc.alloc.rate:                   1140,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22112,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 101334,053 ops/s
[info]                  ·gc.alloc.rate:                   1201,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21002,765 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 101256,589 ops/s
[info]                  ·gc.alloc.rate:                   1200,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10519,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 101430,570 ops/s
[info]                  ·gc.alloc.rate:                   1202,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21012,449 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 101367,405 ops/s
[info]                  ·gc.alloc.rate:                   1201,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21046,398 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   100316,630 ±(99.9%) 8876,407 ops/s [Average]
[info]   (min, avg, max) = (96194,536, 100316,630, 101430,570), stdev = 2305,175
[info]   CI (99.9%): [91440,223, 109193,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1189,588 ±(99.9%) 105,461 MB/sec [Average]
[info]   (min, avg, max) = (1140,614, 1189,588, 1202,827), stdev = 27,388
[info]   CI (99.9%): [1084,126, 1295,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18664,004, 18664,004, 18664,005), stdev = 0,001
[info]   CI (99.9%): [18664,004, 18664,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,528 ±(99.9%) 1,482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,528, 1,022), stdev = 0,385
[info]   CI (99.9%): [≈ 0, 2,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218,013 ±(99.9%) 1165,208 MB/sec [Average]
[info]   (min, avg, max) = (676,712, 1218,013, 1355,429), stdev = 302,601
[info]   CI (99.9%): [52,805, 2383,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19138,564 ±(99.9%) 18643,210 B/op [Average]
[info]   (min, avg, max) = (10519,098, 19138,564, 22112,108), stdev = 4841,582
[info]   CI (99.9%): [495,354, 37781,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20,08% complete, ETA 01:46:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220542,790 ops/s
[info] # Warmup Iteration   2: 230539,728 ops/s
[info] # Warmup Iteration   3: 226070,535 ops/s
[info] # Warmup Iteration   4: 227552,425 ops/s
[info] # Warmup Iteration   5: 225519,697 ops/s
[info] Iteration   1: 225684,699 ops/s
[info]                  ·gc.alloc.rate:                   357,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3567,549 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 226066,242 ops/s
[info]                  ·gc.alloc.rate:                   358,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3561,774 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 226324,290 ops/s
[info]                  ·gc.alloc.rate:      358,926 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 225180,289 ops/s
[info]                  ·gc.alloc.rate:                   357,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3575,437 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 226637,031 ops/s
[info]                  ·gc.alloc.rate:      359,463 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   225978,510 ±(99.9%) 2181,988 ops/s [Average]
[info]   (min, avg, max) = (225180,289, 225978,510, 226637,031), stdev = 566,655
[info]   CI (99.9%): [223796,522, 228160,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   358,399 ±(99.9%) 3,496 MB/sec [Average]
[info]   (min, avg, max) = (357,132, 358,399, 359,463), stdev = 0,908
[info]   CI (99.9%): [354,903, 361,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2496,002, 2496,002, 2496,002), stdev = 0,001
[info]   CI (99.9%): [2496,001, 2496,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,005 ±(99.9%) 0,046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,027), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,038 ±(99.9%) 0,323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,038, 0,188), stdev = 0,084
[info]   CI (99.9%): [≈ 0, 0,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306,962 ±(99.9%) 1079,014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,962, 511,682), stdev = 280,216
[info]   CI (99.9%): [≈ 0, 1385,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2140,952 ±(99.9%) 7525,771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2140,952, 3575,437), stdev = 1954,419
[info]   CI (99.9%): [≈ 0, 9666,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20,28% complete, ETA 01:45:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261843,253 ops/s
[info] # Warmup Iteration   2: 278281,148 ops/s
[info] # Warmup Iteration   3: 279585,651 ops/s
[info] # Warmup Iteration   4: 280305,984 ops/s
[info] # Warmup Iteration   5: 279498,185 ops/s
[info] Iteration   1: 279641,659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 279946,824 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 279394,969 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 279155,716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 278509,906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   279329,815 ±(99.9%) 2095,643 ops/s [Average]
[info]   (min, avg, max) = (278509,906, 279329,815, 279946,824), stdev = 544,232
[info]   CI (99.9%): [277234,173, 281425,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20,48% complete, ETA 01:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61739,390 ops/s
[info] # Warmup Iteration   2: 79233,431 ops/s
[info] # Warmup Iteration   3: 79443,996 ops/s
[info] # Warmup Iteration   4: 80126,243 ops/s
[info] # Warmup Iteration   5: 75486,187 ops/s
[info] Iteration   1: 80162,269 ops/s
[info]                  ·gc.alloc.rate:                   1248,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26285,672 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 80274,117 ops/s
[info]                  ·gc.alloc.rate:                   1250,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26251,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 80247,035 ops/s
[info]                  ·gc.alloc.rate:                   1250,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13135,286 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 80275,044 ops/s
[info]                  ·gc.alloc.rate:                   1250,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26274,798 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 80230,444 ops/s
[info]                  ·gc.alloc.rate:                   1250,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26315,664 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   80237,782 ±(99.9%) 178,032 ops/s [Average]
[info]   (min, avg, max) = (80162,269, 80237,782, 80275,044), stdev = 46,234
[info]   CI (99.9%): [80059,750, 80415,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1250,148 ±(99.9%) 3,019 MB/sec [Average]
[info]   (min, avg, max) = (1248,861, 1250,148, 1250,789), stdev = 0,784
[info]   CI (99.9%): [1247,129, 1253,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24520,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24520,005, 24520,005, 24520,005), stdev = 0,001
[info]   CI (99.9%): [24520,004, 24520,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,572 ±(99.9%) 1,406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,572, 0,817), stdev = 0,365
[info]   CI (99.9%): [≈ 0, 1,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1205,905 ±(99.9%) 1154,058 MB/sec [Average]
[info]   (min, avg, max) = (669,780, 1205,905, 1341,592), stdev = 299,705
[info]   CI (99.9%): [51,847, 2359,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23652,543 ±(99.9%) 22639,364 B/op [Average]
[info]   (min, avg, max) = (13135,286, 23652,543, 26315,664), stdev = 5879,371
[info]   CI (99.9%): [1013,180, 46291,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20,68% complete, ETA 01:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18480,569 ops/s
[info] # Warmup Iteration   2: 19972,006 ops/s
[info] # Warmup Iteration   3: 20037,546 ops/s
[info] # Warmup Iteration   4: 19837,872 ops/s
[info] # Warmup Iteration   5: 20019,506 ops/s
[info] Iteration   1: 19766,458 ops/s
[info]                  ·gc.alloc.rate:                   380,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40729,636 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 19949,607 ops/s
[info]                  ·gc.alloc.rate:                   384,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40356,120 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 19943,991 ops/s
[info]                  ·gc.alloc.rate:                   383,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40368,257 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 20010,777 ops/s
[info]                  ·gc.alloc.rate:      385,167 MB/sec
[info]                  ·gc.alloc.rate.norm: 30296,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19991,457 ops/s
[info]                  ·gc.alloc.rate:                   384,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53170,779 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   19932,458 ±(99.9%) 373,323 ops/s [Average]
[info]   (min, avg, max) = (19766,458, 19932,458, 20010,777), stdev = 96,951
[info]   CI (99.9%): [19559,135, 20305,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   383,678 ±(99.9%) 7,213 MB/sec [Average]
[info]   (min, avg, max) = (380,467, 383,678, 385,167), stdev = 1,873
[info]   CI (99.9%): [376,465, 390,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   30296,022 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (30296,020, 30296,022, 30296,028), stdev = 0,003
[info]   CI (99.9%): [30296,010, 30296,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,605 ±(99.9%) 5,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,605, 3,020), stdev = 1,350
[info]   CI (99.9%): [≈ 0, 5,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   47,609 ±(99.9%) 409,353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47,609, 237,777), stdev = 106,308
[info]   CI (99.9%): [≈ 0, 456,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   441,993 ±(99.9%) 989,887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,993, 675,404), stdev = 257,071
[info]   CI (99.9%): [≈ 0, 1431,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   34924,958 ±(99.9%) 78099,849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34924,958, 53170,779), stdev = 20282,283
[info]   CI (99.9%): [≈ 0, 113024,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20,88% complete, ETA 01:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23060,392 ops/s
[info] # Warmup Iteration   2: 30707,906 ops/s
[info] # Warmup Iteration   3: 30602,944 ops/s
[info] # Warmup Iteration   4: 30027,907 ops/s
[info] # Warmup Iteration   5: 30657,521 ops/s
[info] Iteration   1: 30726,413 ops/s
[info]                  ·gc.alloc.rate:                   639,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34527,198 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 30861,268 ops/s
[info]                  ·gc.alloc.rate:                   641,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34378,427 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 30757,854 ops/s
[info]                  ·gc.alloc.rate:      639,822 MB/sec
[info]                  ·gc.alloc.rate.norm: 32736,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30727,334 ops/s
[info]                  ·gc.alloc.rate:                   639,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34424,845 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30794,359 ops/s
[info]                  ·gc.alloc.rate:                   640,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34349,962 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   30773,446 ±(99.9%) 217,242 ops/s [Average]
[info]   (min, avg, max) = (30726,413, 30773,446, 30861,268), stdev = 56,417
[info]   CI (99.9%): [30556,203, 30990,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   640,111 ±(99.9%) 4,561 MB/sec [Average]
[info]   (min, avg, max) = (639,072, 640,111, 641,943), stdev = 1,184
[info]   CI (99.9%): [635,551, 644,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (32736,013, 32736,014, 32736,015), stdev = 0,001
[info]   CI (99.9%): [32736,010, 32736,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,724 ±(99.9%) 6,103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,724, 3,560), stdev = 1,585
[info]   CI (99.9%): [≈ 0, 6,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37,106 ±(99.9%) 312,632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37,106, 182,334), stdev = 81,190
[info]   CI (99.9%): [≈ 0, 349,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   538,493 ±(99.9%) 1159,152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,493, 674,151), stdev = 301,028
[info]   CI (99.9%): [≈ 0, 1697,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27536,087 ±(99.9%) 59274,070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27536,087, 34527,198), stdev = 15393,288
[info]   CI (99.9%): [≈ 0, 86810,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,08% complete, ETA 01:44:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72038,649 ops/s
[info] # Warmup Iteration   2: 104355,624 ops/s
[info] # Warmup Iteration   3: 104211,984 ops/s
[info] # Warmup Iteration   4: 104304,509 ops/s
[info] # Warmup Iteration   5: 105190,423 ops/s
[info] Iteration   1: 99872,364 ops/s
[info]                  ·gc.alloc.rate:                   1310,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21298,396 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 105156,324 ops/s
[info]                  ·gc.alloc.rate:                   1380,088 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20247,745 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 105103,542 ops/s
[info]                  ·gc.alloc.rate:                   1379,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20277,516 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 104939,647 ops/s
[info]                  ·gc.alloc.rate:                   1377,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20324,570 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 104121,095 ops/s
[info]                  ·gc.alloc.rate:                   1366,586 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20499,705 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   103838,594 ±(99.9%) 8687,365 ops/s [Average]
[info]   (min, avg, max) = (99872,364, 103838,594, 105156,324), stdev = 2256,081
[info]   CI (99.9%): [95151,229, 112525,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1362,853 ±(99.9%) 114,214 MB/sec [Average]
[info]   (min, avg, max) = (1310,703, 1362,853, 1380,088), stdev = 29,661
[info]   CI (99.9%): [1248,640, 1477,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20656,004, 20656,004, 20656,004), stdev = 0,001
[info]   CI (99.9%): [20656,004, 20656,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,503 ±(99.9%) 1,061 B/op [Average]
[info]   (min, avg, max) = (0,312, 0,503, 0,935), stdev = 0,276
[info]   CI (99.9%): [≈ 0, 1,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354,007 ±(99.9%) 7,345 MB/sec [Average]
[info]   (min, avg, max) = (1351,465, 1354,007, 1356,245), stdev = 1,908
[info]   CI (99.9%): [1346,661, 1361,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20529,587 ±(99.9%) 1697,089 B/op [Average]
[info]   (min, avg, max) = (20247,745, 20529,587, 21298,396), stdev = 440,729
[info]   CI (99.9%): [18832,497, 22226,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,29% complete, ETA 01:44:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121850,317 ops/s
[info] # Warmup Iteration   2: 136133,239 ops/s
[info] # Warmup Iteration   3: 130990,053 ops/s
[info] # Warmup Iteration   4: 129701,673 ops/s
[info] # Warmup Iteration   5: 137628,698 ops/s
[info] Iteration   1: 135791,548 ops/s
[info]                  ·gc.alloc.rate:                   530,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5929,087 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 138093,779 ops/s
[info]                  ·gc.alloc.rate:      539,126 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 137858,220 ops/s
[info]                  ·gc.alloc.rate:                   538,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7703,296 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 137985,806 ops/s
[info]                  ·gc.alloc.rate:                   538,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7696,319 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 138505,753 ops/s
[info]                  ·gc.alloc.rate:                   540,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7637,430 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   137647,021 ±(99.9%) 4101,964 ops/s [Average]
[info]   (min, avg, max) = (135791,548, 137647,021, 138505,753), stdev = 1065,267
[info]   CI (99.9%): [133545,058, 141748,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   537,375 ±(99.9%) 16,151 MB/sec [Average]
[info]   (min, avg, max) = (530,072, 537,375, 540,767), stdev = 4,194
[info]   CI (99.9%): [521,224, 553,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6144,003, 6144,003, 6144,003), stdev = 0,001
[info]   CI (99.9%): [6144,002, 6144,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,682 ±(99.9%) 5,653 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,682, 3,308), stdev = 1,468
[info]   CI (99.9%): [≈ 0, 6,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7,789 ±(99.9%) 64,531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,789, 37,765), stdev = 16,758
[info]   CI (99.9%): [≈ 0, 72,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506,670 ±(99.9%) 1123,768 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,670, 674,812), stdev = 291,839
[info]   CI (99.9%): [≈ 0, 1630,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5793,226 ±(99.9%) 12807,537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5793,226, 7703,296), stdev = 3326,077
[info]   CI (99.9%): [≈ 0, 18600,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21,49% complete, ETA 01:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13431,752 ops/s
[info] # Warmup Iteration   2: 24789,063 ops/s
[info] # Warmup Iteration   3: 24727,076 ops/s
[info] # Warmup Iteration   4: 23611,735 ops/s
[info] # Warmup Iteration   5: 25034,580 ops/s
[info] Iteration   1: 24708,413 ops/s
[info]                  ·gc.alloc.rate:                   1364,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86066,052 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 25066,017 ops/s
[info]                  ·gc.alloc.rate:                   1384,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84906,633 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 24994,613 ops/s
[info]                  ·gc.alloc.rate:                   1380,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85221,440 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 25080,139 ops/s
[info]                  ·gc.alloc.rate:                   1385,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85002,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 25047,116 ops/s
[info]                  ·gc.alloc.rate:                   1383,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85173,519 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   24979,260 ±(99.9%) 596,233 ops/s [Average]
[info]   (min, avg, max) = (24708,413, 24979,260, 25080,139), stdev = 154,840
[info]   CI (99.9%): [24383,026, 25575,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1379,541 ±(99.9%) 33,039 MB/sec [Average]
[info]   (min, avg, max) = (1364,515, 1379,541, 1385,165), stdev = 8,580
[info]   CI (99.9%): [1346,502, 1412,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86920,017 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (86920,016, 86920,017, 86920,019), stdev = 0,001
[info]   CI (99.9%): [86920,013, 86920,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,309 ±(99.9%) 5,042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,309, 2,621), stdev = 1,309
[info]   CI (99.9%): [≈ 0, 6,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353,380 ±(99.9%) 6,524 MB/sec [Average]
[info]   (min, avg, max) = (1351,109, 1353,380, 1355,294), stdev = 1,694
[info]   CI (99.9%): [1346,857, 1359,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85273,961 ±(99.9%) 1774,077 B/op [Average]
[info]   (min, avg, max) = (84906,633, 85273,961, 86066,052), stdev = 460,722
[info]   CI (99.9%): [83499,885, 87048,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21,69% complete, ETA 01:44:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25098,884 ops/s
[info] # Warmup Iteration   2: 29586,751 ops/s
[info] # Warmup Iteration   3: 29258,800 ops/s
[info] # Warmup Iteration   4: 29413,053 ops/s
[info] # Warmup Iteration   5: 29477,049 ops/s
[info] Iteration   1: 29555,109 ops/s
[info]                  ·gc.alloc.rate:                   564,067 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27240,347 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 29638,423 ops/s
[info]                  ·gc.alloc.rate:                   565,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35833,333 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 29559,446 ops/s
[info]                  ·gc.alloc.rate:                   564,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35926,655 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 29667,198 ops/s
[info]                  ·gc.alloc.rate:      566,286 MB/sec
[info]                  ·gc.alloc.rate.norm: 30040,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 29580,722 ops/s
[info]                  ·gc.alloc.rate:                   564,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35759,394 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   29600,180 ±(99.9%) 192,755 ops/s [Average]
[info]   (min, avg, max) = (29555,109, 29600,180, 29667,198), stdev = 50,058
[info]   CI (99.9%): [29407,424, 29792,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   565,012 ±(99.9%) 3,759 MB/sec [Average]
[info]   (min, avg, max) = (564,067, 565,012, 566,286), stdev = 0,976
[info]   CI (99.9%): [561,254, 568,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30040,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (30040,014, 30040,014, 30040,015), stdev = 0,001
[info]   CI (99.9%): [30040,012, 30040,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,692 ±(99.9%) 5,780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,692, 3,377), stdev = 1,501
[info]   CI (99.9%): [≈ 0, 6,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   36,747 ±(99.9%) 306,892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36,747, 179,303), stdev = 79,699
[info]   CI (99.9%): [≈ 0, 343,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   506,680 ±(99.9%) 1123,814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,680, 674,904), stdev = 291,851
[info]   CI (99.9%): [≈ 0, 1630,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26951,946 ±(99.9%) 59762,135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26951,946, 35926,655), stdev = 15520,037
[info]   CI (99.9%): [≈ 0, 86714,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21,89% complete, ETA 01:43:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156095,149 ops/s
[info] # Warmup Iteration   2: 195948,147 ops/s
[info] # Warmup Iteration   3: 198354,734 ops/s
[info] # Warmup Iteration   4: 193444,659 ops/s
[info] # Warmup Iteration   5: 197003,792 ops/s
[info] Iteration   1: 196754,569 ops/s
[info]                  ·gc.alloc.rate:                   684,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28,461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5392,670 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 197603,425 ops/s
[info]                  ·gc.alloc.rate:                   687,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5369,531 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 196672,006 ops/s
[info]                  ·gc.alloc.rate:                   683,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5378,953 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 197057,694 ops/s
[info]                  ·gc.alloc.rate:                   685,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5368,091 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 197379,026 ops/s
[info]                  ·gc.alloc.rate:                   686,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5348,685 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   197093,344 ±(99.9%) 1534,667 ops/s [Average]
[info]   (min, avg, max) = (196672,006, 197093,344, 197603,425), stdev = 398,548
[info]   CI (99.9%): [195558,677, 198628,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   685,271 ±(99.9%) 5,460 MB/sec [Average]
[info]   (min, avg, max) = (683,836, 685,271, 687,133), stdev = 1,418
[info]   CI (99.9%): [679,811, 690,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,728 ±(99.9%) 6,092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,728, 3,558), stdev = 1,582
[info]   CI (99.9%): [≈ 0, 6,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5,825 ±(99.9%) 48,733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,825, 28,461), stdev = 12,656
[info]   CI (99.9%): [≈ 0, 54,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   672,694 ±(99.9%) 5,695 MB/sec [Average]
[info]   (min, avg, max) = (670,795, 672,694, 674,265), stdev = 1,479
[info]   CI (99.9%): [666,998, 678,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5371,586 ±(99.9%) 62,081 B/op [Average]
[info]   (min, avg, max) = (5348,685, 5371,586, 5392,670), stdev = 16,122
[info]   CI (99.9%): [5309,505, 5433,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,09% complete, ETA 01:43:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225003,363 ops/s
[info] # Warmup Iteration   2: 313954,325 ops/s
[info] # Warmup Iteration   3: 315193,128 ops/s
[info] # Warmup Iteration   4: 314189,905 ops/s
[info] # Warmup Iteration   5: 313886,911 ops/s
[info] Iteration   1: 314306,708 ops/s
[info]                  ·gc.alloc.rate:      317,890 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 314455,742 ops/s
[info]                  ·gc.alloc.rate:                   318,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2560,381 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 313712,433 ops/s
[info]                  ·gc.alloc.rate:      317,331 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 313867,851 ops/s
[info]                  ·gc.alloc.rate:                   317,497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2565,217 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 314433,919 ops/s
[info]                  ·gc.alloc.rate:      318,058 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   314155,331 ±(99.9%) 1319,339 ops/s [Average]
[info]   (min, avg, max) = (313712,433, 314155,331, 314455,742), stdev = 342,628
[info]   CI (99.9%): [312835,992, 315474,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   317,761 ±(99.9%) 1,263 MB/sec [Average]
[info]   (min, avg, max) = (317,331, 317,761, 318,058), stdev = 0,328
[info]   CI (99.9%): [316,497, 319,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,021 ±(99.9%) 0,179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204,613 ±(99.9%) 1078,864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,613, 511,587), stdev = 280,177
[info]   CI (99.9%): [≈ 0, 1283,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1025,120 ±(99.9%) 5405,164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1025,120, 2565,217), stdev = 1403,704
[info]   CI (99.9%): [≈ 0, 6430,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,29% complete, ETA 01:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562736,684 ops/s
[info] # Warmup Iteration   2: 579600,060 ops/s
[info] # Warmup Iteration   3: 579383,575 ops/s
[info] # Warmup Iteration   4: 588594,072 ops/s
[info] # Warmup Iteration   5: 591861,480 ops/s
[info] Iteration   1: 593109,508 ops/s
[info]                  ·gc.alloc.rate:                   455,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1357,465 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 593247,253 ops/s
[info]                  ·gc.alloc.rate:                   455,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1357,259 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 590959,230 ops/s
[info]                  ·gc.alloc.rate:      453,608 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 588104,330 ops/s
[info]                  ·gc.alloc.rate:                   451,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1805,769 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 590440,938 ops/s
[info]                  ·gc.alloc.rate:                   453,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1798,620 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   591172,252 ±(99.9%) 8179,998 ops/s [Average]
[info]   (min, avg, max) = (588104,330, 591172,252, 593247,253), stdev = 2124,319
[info]   CI (99.9%): [582992,254, 599352,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   453,767 ±(99.9%) 6,288 MB/sec [Average]
[info]   (min, avg, max) = (451,407, 453,767, 455,388), stdev = 1,633
[info]   CI (99.9%): [447,480, 460,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,682 ±(99.9%) 5,625 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,682, 3,295), stdev = 1,461
[info]   CI (99.9%): [≈ 0, 6,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,825 ±(99.9%) 15,055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,825, 8,818), stdev = 3,910
[info]   CI (99.9%): [≈ 0, 16,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474,556 ±(99.9%) 1068,741 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,556, 674,792), stdev = 277,549
[info]   CI (99.9%): [≈ 0, 1543,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1263,822 ±(99.9%) 2852,117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1263,822, 1805,769), stdev = 740,686
[info]   CI (99.9%): [≈ 0, 4115,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22,49% complete, ETA 01:42:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 609603,750 ops/s
[info] # Warmup Iteration   2: 636640,405 ops/s
[info] # Warmup Iteration   3: 633472,038 ops/s
[info] # Warmup Iteration   4: 633436,198 ops/s
[info] # Warmup Iteration   5: 634777,429 ops/s
[info] Iteration   1: 633532,035 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 632274,380 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 633806,487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 632154,053 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 632002,269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   632753,845 ±(99.9%) 3260,644 ops/s [Average]
[info]   (min, avg, max) = (632002,269, 632753,845, 633806,487), stdev = 846,779
[info]   CI (99.9%): [629493,201, 636014,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22,69% complete, ETA 01:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215004,454 ops/s
[info] # Warmup Iteration   2: 326109,522 ops/s
[info] # Warmup Iteration   3: 327077,332 ops/s
[info] # Warmup Iteration   4: 324545,070 ops/s
[info] # Warmup Iteration   5: 328342,485 ops/s
[info] Iteration   1: 325710,041 ops/s
[info]                  ·gc.alloc.rate:                   897,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3260,425 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 318326,523 ops/s
[info]                  ·gc.alloc.rate:                   877,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6675,367 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 324806,947 ops/s
[info]                  ·gc.alloc.rate:                   894,916 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3272,675 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 323125,599 ops/s
[info]                  ·gc.alloc.rate:                   890,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3291,430 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 327761,192 ops/s
[info]                  ·gc.alloc.rate:                   902,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6492,909 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   323946,060 ±(99.9%) 13703,686 ops/s [Average]
[info]   (min, avg, max) = (318326,523, 323946,060, 327761,192), stdev = 3558,804
[info]   CI (99.9%): [310242,374, 337649,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   892,496 ±(99.9%) 37,655 MB/sec [Average]
[info]   (min, avg, max) = (877,031, 892,496, 902,955), stdev = 9,779
[info]   CI (99.9%): [854,841, 930,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4336,001, 4336,001, 4336,001), stdev = 0,001
[info]   CI (99.9%): [4336,001, 4336,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,202 ±(99.9%) 0,726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,202, 0,400), stdev = 0,188
[info]   CI (99.9%): [≈ 0, 0,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   945,661 ±(99.9%) 1425,407 MB/sec [Average]
[info]   (min, avg, max) = (674,724, 945,661, 1352,123), stdev = 370,174
[info]   CI (99.9%): [≈ 0, 2371,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4598,561 ±(99.9%) 6984,130 B/op [Average]
[info]   (min, avg, max) = (3260,425, 4598,561, 6675,367), stdev = 1813,756
[info]   CI (99.9%): [≈ 0, 11582,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22,89% complete, ETA 01:42:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46036,103 ops/s
[info] # Warmup Iteration   2: 49279,339 ops/s
[info] # Warmup Iteration   3: 48785,491 ops/s
[info] # Warmup Iteration   4: 49149,260 ops/s
[info] # Warmup Iteration   5: 48945,678 ops/s
[info] Iteration   1: 46053,290 ops/s
[info]                  ·gc.alloc.rate:      213,481 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48905,272 ops/s
[info]                  ·gc.alloc.rate:                   226,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16462,710 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 48802,873 ops/s
[info]                  ·gc.alloc.rate:      226,244 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48970,996 ops/s
[info]                  ·gc.alloc.rate:                   227,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16441,199 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 48972,598 ops/s
[info]                  ·gc.alloc.rate:      227,023 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   48341,006 ±(99.9%) 4931,666 ops/s [Average]
[info]   (min, avg, max) = (46053,290, 48341,006, 48972,598), stdev = 1280,738
[info]   CI (99.9%): [43409,340, 53272,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   224,098 ±(99.9%) 22,885 MB/sec [Average]
[info]   (min, avg, max) = (213,481, 224,098, 227,023), stdev = 5,943
[info]   CI (99.9%): [201,213, 246,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7296,008, 7296,009, 7296,009), stdev = 0,001
[info]   CI (99.9%): [7296,007, 7296,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,002 ±(99.9%) 0,018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,010), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,067 ±(99.9%) 0,578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,335), stdev = 0,150
[info]   CI (99.9%): [≈ 0, 0,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   204,630 ±(99.9%) 1078,955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,630, 511,589), stdev = 280,201
[info]   CI (99.9%): [≈ 0, 1283,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6580,782 ±(99.9%) 34698,575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6580,782, 16462,710), stdev = 9011,110
[info]   CI (99.9%): [≈ 0, 41279,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23,09% complete, ETA 01:42:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35264,789 ops/s
[info] # Warmup Iteration   2: 41565,342 ops/s
[info] # Warmup Iteration   3: 41790,047 ops/s
[info] # Warmup Iteration   4: 42054,232 ops/s
[info] # Warmup Iteration   5: 42110,408 ops/s
[info] Iteration   1: 42230,256 ops/s
[info]                  ·gc.alloc.rate:                   1883,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50075,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 42292,068 ops/s
[info]                  ·gc.alloc.rate:                   1886,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75091,300 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 42292,552 ops/s
[info]                  ·gc.alloc.rate:                   1886,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75225,871 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 42154,264 ops/s
[info]                  ·gc.alloc.rate:                   1880,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75592,874 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42323,644 ops/s
[info]                  ·gc.alloc.rate:                   1887,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75413,154 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   42258,557 ±(99.9%) 259,689 ops/s [Average]
[info]   (min, avg, max) = (42154,264, 42258,557, 42323,644), stdev = 67,440
[info]   CI (99.9%): [41998,868, 42518,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1884,923 ±(99.9%) 12,062 MB/sec [Average]
[info]   (min, avg, max) = (1880,146, 1884,923, 1887,786), stdev = 3,132
[info]   CI (99.9%): [1872,862, 1896,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200,010 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (70200,010, 70200,010, 70200,011), stdev = 0,001
[info]   CI (99.9%): [70200,008, 70200,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2,171 ±(99.9%) 4,909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,171, 3,109), stdev = 1,275
[info]   CI (99.9%): [≈ 0, 7,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1887,168 ±(99.9%) 1170,429 MB/sec [Average]
[info]   (min, avg, max) = (1343,472, 1887,168, 2027,975), stdev = 303,957
[info]   CI (99.9%): [716,738, 3057,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   70279,687 ±(99.9%) 43497,728 B/op [Average]
[info]   (min, avg, max) = (50075,239, 70279,687, 75592,874), stdev = 11296,222
[info]   CI (99.9%): [26781,960, 113777,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23,29% complete, ETA 01:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63165,353 ops/s
[info] # Warmup Iteration   2: 336314,755 ops/s
[info] # Warmup Iteration   3: 335775,132 ops/s
[info] # Warmup Iteration   4: 335043,364 ops/s
[info] # Warmup Iteration   5: 337111,246 ops/s
[info] Iteration   1: 337467,505 ops/s
[info]                  ·gc.alloc.rate:      349,937 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 337019,791 ops/s
[info]                  ·gc.alloc.rate:                   349,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2388,960 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 336414,717 ops/s
[info]                  ·gc.alloc.rate:                   348,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2393,305 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 336441,741 ops/s
[info]                  ·gc.alloc.rate:      348,910 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 336231,408 ops/s
[info]                  ·gc.alloc.rate:                   348,669 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3152,229 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   336715,032 ±(99.9%) 1980,240 ops/s [Average]
[info]   (min, avg, max) = (336231,408, 336715,032, 337467,505), stdev = 514,262
[info]   CI (99.9%): [334734,792, 338695,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   349,177 ±(99.9%) 2,023 MB/sec [Average]
[info]   (min, avg, max) = (348,669, 349,177, 349,937), stdev = 0,525
[info]   CI (99.9%): [347,154, 351,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,533 ±(99.9%) 4,526 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,533, 2,635), stdev = 1,175
[info]   CI (99.9%): [≈ 0, 5,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2,493 ±(99.9%) 21,184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,493, 12,333), stdev = 5,501
[info]   CI (99.9%): [≈ 0, 23,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339,335 ±(99.9%) 1219,645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,335, 673,458), stdev = 316,738
[info]   CI (99.9%): [≈ 0, 1558,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1586,899 ±(99.9%) 5705,046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1586,899, 3152,229), stdev = 1481,582
[info]   CI (99.9%): [≈ 0, 7291,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,49% complete, ETA 01:41:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81195,885 ops/s
[info] # Warmup Iteration   2: 113278,838 ops/s
[info] # Warmup Iteration   3: 114210,523 ops/s
[info] # Warmup Iteration   4: 114131,436 ops/s
[info] # Warmup Iteration   5: 114443,224 ops/s
[info] Iteration   1: 114727,102 ops/s
[info]                  ·gc.alloc.rate:                   1265,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9265,606 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 114643,543 ops/s
[info]                  ·gc.alloc.rate:                   1264,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18564,370 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 114866,106 ops/s
[info]                  ·gc.alloc.rate:                   1267,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18544,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 114753,451 ops/s
[info]                  ·gc.alloc.rate:                   1265,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18581,989 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 114495,600 ops/s
[info]                  ·gc.alloc.rate:                   1262,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18632,846 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   114697,160 ±(99.9%) 531,156 ops/s [Average]
[info]   (min, avg, max) = (114495,600, 114697,160, 114866,106), stdev = 137,939
[info]   CI (99.9%): [114166,005, 115228,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1265,171 ±(99.9%) 5,940 MB/sec [Average]
[info]   (min, avg, max) = (1262,957, 1265,171, 1267,115), stdev = 1,542
[info]   CI (99.9%): [1259,231, 1271,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17360,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17360,004, 17360,004, 17360,004), stdev = 0,001
[info]   CI (99.9%): [17360,003, 17360,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,457 ±(99.9%) 1,669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,457, 0,858), stdev = 0,433
[info]   CI (99.9%): [≈ 0, 2,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218,339 ±(99.9%) 1168,763 MB/sec [Average]
[info]   (min, avg, max) = (675,384, 1218,339, 1355,557), stdev = 303,524
[info]   CI (99.9%): [49,576, 2387,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16717,764 ±(99.9%) 16041,833 B/op [Average]
[info]   (min, avg, max) = (9265,606, 16717,764, 18632,846), stdev = 4166,013
[info]   CI (99.9%): [675,931, 32759,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,69% complete, ETA 01:41:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 450675,186 ops/s
[info] # Warmup Iteration   2: 461309,060 ops/s
[info] # Warmup Iteration   3: 472169,960 ops/s
[info] # Warmup Iteration   4: 468454,310 ops/s
[info] # Warmup Iteration   5: 469949,649 ops/s
[info] Iteration   1: 469136,584 ops/s
[info]                  ·gc.alloc.rate:      305,239 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 469243,779 ops/s
[info]                  ·gc.alloc.rate:                   305,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1715,959 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 470964,033 ops/s
[info]                  ·gc.alloc.rate:      306,447 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 458734,443 ops/s
[info]                  ·gc.alloc.rate:                   298,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1755,210 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 465510,692 ops/s
[info]                  ·gc.alloc.rate:                   302,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1729,684 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   466717,906 ±(99.9%) 18810,373 ops/s [Average]
[info]   (min, avg, max) = (458734,443, 466717,906, 470964,033), stdev = 4884,994
[info]   CI (99.9%): [447907,533, 485528,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   303,680 ±(99.9%) 12,235 MB/sec [Average]
[info]   (min, avg, max) = (298,484, 303,680, 306,447), stdev = 3,177
[info]   CI (99.9%): [291,445, 315,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,005 ±(99.9%) 0,027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,014), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,017 ±(99.9%) 0,092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,047), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306,984 ±(99.9%) 1079,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,984, 511,656), stdev = 280,236
[info]   CI (99.9%): [≈ 0, 1386,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1040,171 ±(99.9%) 3656,749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1040,171, 1755,210), stdev = 949,646
[info]   CI (99.9%): [≈ 0, 4696,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23,90% complete, ETA 01:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28155,529 ops/s
[info] # Warmup Iteration   2: 45578,214 ops/s
[info] # Warmup Iteration   3: 46019,994 ops/s
[info] # Warmup Iteration   4: 46015,111 ops/s
[info] # Warmup Iteration   5: 45996,195 ops/s
[info] Iteration   1: 45916,833 ops/s
[info]                  ·gc.alloc.rate:                   2450,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69749,813 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 46151,981 ops/s
[info]                  ·gc.alloc.rate:                   2463,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716,481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92636,329 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 46063,028 ops/s
[info]                  ·gc.alloc.rate:                   2459,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69663,826 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 46032,310 ops/s
[info]                  ·gc.alloc.rate:                   2457,538 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720,572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93008,370 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 45967,250 ops/s
[info]                  ·gc.alloc.rate:                   2454,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722,506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93206,249 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   46026,280 ±(99.9%) 347,896 ops/s [Average]
[info]   (min, avg, max) = (45916,833, 46026,280, 46151,981), stdev = 90,347
[info]   CI (99.9%): [45678,384, 46374,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2457,080 ±(99.9%) 18,704 MB/sec [Average]
[info]   (min, avg, max) = (2450,985, 2457,080, 2463,698), stdev = 4,857
[info]   CI (99.9%): [2438,375, 2475,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84016,009, 84016,009, 84016,010), stdev = 0,001
[info]   CI (99.9%): [84016,007, 84016,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,083, 0,104), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,848 ±(99.9%) 4,753 B/op [Average]
[info]   (min, avg, max) = (0,712, 2,848, 3,567), stdev = 1,234
[info]   CI (99.9%): [≈ 0, 7,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2446,678 ±(99.9%) 1440,410 MB/sec [Average]
[info]   (min, avg, max) = (2034,800, 2446,678, 2722,506), stdev = 374,070
[info]   CI (99.9%): [1006,268, 3887,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83652,917 ±(99.9%) 49028,969 B/op [Average]
[info]   (min, avg, max) = (69663,826, 83652,917, 93206,249), stdev = 12732,667
[info]   CI (99.9%): [34623,949, 132681,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24,10% complete, ETA 01:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78361,153 ops/s
[info] # Warmup Iteration   2: 87590,583 ops/s
[info] # Warmup Iteration   3: 88098,648 ops/s
[info] # Warmup Iteration   4: 88463,550 ops/s
[info] # Warmup Iteration   5: 88030,845 ops/s
[info] Iteration   1: 88029,443 ops/s
[info]                  ·gc.alloc.rate:                   1609,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24014,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 88094,800 ops/s
[info]                  ·gc.alloc.rate:                   1611,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36018,469 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 88184,064 ops/s
[info]                  ·gc.alloc.rate:                   1612,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24013,645 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 88464,305 ops/s
[info]                  ·gc.alloc.rate:                   1617,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23975,104 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87823,980 ops/s
[info]                  ·gc.alloc.rate:                   1606,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36269,958 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   88119,318 ±(99.9%) 901,230 ops/s [Average]
[info]   (min, avg, max) = (87823,980, 88119,318, 88464,305), stdev = 234,047
[info]   CI (99.9%): [87218,088, 89020,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1611,660 ±(99.9%) 16,641 MB/sec [Average]
[info]   (min, avg, max) = (1606,194, 1611,660, 1617,935), stdev = 4,322
[info]   CI (99.9%): [1595,019, 1628,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28784,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28784,005, 28784,005, 28784,005), stdev = 0,001
[info]   CI (99.9%): [28784,004, 28784,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,743 ±(99.9%) 1,011 B/op [Average]
[info]   (min, avg, max) = (0,373, 0,743, 1,116), stdev = 0,263
[info]   CI (99.9%): [≈ 0, 1,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1615,331 ±(99.9%) 1423,126 MB/sec [Average]
[info]   (min, avg, max) = (1343,008, 1615,331, 2023,923), stdev = 369,581
[info]   CI (99.9%): [192,206, 3038,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   28858,282 ±(99.9%) 25613,436 B/op [Average]
[info]   (min, avg, max) = (23975,104, 28858,282, 36269,958), stdev = 6651,728
[info]   CI (99.9%): [3244,847, 54471,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24,30% complete, ETA 01:40:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74281,170 ops/s
[info] # Warmup Iteration   2: 91017,884 ops/s
[info] # Warmup Iteration   3: 89279,313 ops/s
[info] # Warmup Iteration   4: 89205,317 ops/s
[info] # Warmup Iteration   5: 88757,873 ops/s
[info] Iteration   1: 89203,489 ops/s
[info]                  ·gc.alloc.rate:                   545,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9025,670 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 89317,569 ops/s
[info]                  ·gc.alloc.rate:                   546,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11878,955 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 89567,893 ops/s
[info]                  ·gc.alloc.rate:      547,734 MB/sec
[info]                  ·gc.alloc.rate.norm: 9624,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 89075,148 ops/s
[info]                  ·gc.alloc.rate:                   544,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11910,822 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 89008,566 ops/s
[info]                  ·gc.alloc.rate:                   544,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11872,939 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   89234,533 ±(99.9%) 851,184 ops/s [Average]
[info]   (min, avg, max) = (89008,566, 89234,533, 89567,893), stdev = 221,050
[info]   CI (99.9%): [88383,349, 90085,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   545,696 ±(99.9%) 5,199 MB/sec [Average]
[info]   (min, avg, max) = (544,321, 545,696, 547,734), stdev = 1,350
[info]   CI (99.9%): [540,497, 550,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9624,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9624,005, 9624,005, 9624,005), stdev = 0,001
[info]   CI (99.9%): [9624,004, 9624,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,725 ±(99.9%) 6,107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,725, 3,562), stdev = 1,586
[info]   CI (99.9%): [≈ 0, 6,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12,771 ±(99.9%) 107,591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,771, 62,750), stdev = 27,941
[info]   CI (99.9%): [≈ 0, 120,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   506,292 ±(99.9%) 1122,735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,292, 674,226), stdev = 291,571
[info]   CI (99.9%): [≈ 0, 1629,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8937,677 ±(99.9%) 19822,055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8937,677, 11910,822), stdev = 5147,725
[info]   CI (99.9%): [≈ 0, 28759,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24,50% complete, ETA 01:40:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21420,727 ops/s
[info] # Warmup Iteration   2: 124611,551 ops/s
[info] # Warmup Iteration   3: 125921,450 ops/s
[info] # Warmup Iteration   4: 125845,016 ops/s
[info] # Warmup Iteration   5: 125926,036 ops/s
[info] Iteration   1: 125948,974 ops/s
[info]                  ·gc.alloc.rate:                   385,376 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6392,792 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 127222,872 ops/s
[info]                  ·gc.alloc.rate:      389,372 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 126161,305 ops/s
[info]                  ·gc.alloc.rate:                   386,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6381,748 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 126200,748 ops/s
[info]                  ·gc.alloc.rate:                   386,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8398,444 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 126541,339 ops/s
[info]                  ·gc.alloc.rate:      387,248 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   126415,048 ±(99.9%) 1921,530 ops/s [Average]
[info]   (min, avg, max) = (125948,974, 126415,048, 127222,872), stdev = 499,015
[info]   CI (99.9%): [124493,518, 128336,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   386,860 ±(99.9%) 5,987 MB/sec [Average]
[info]   (min, avg, max) = (385,376, 386,860, 389,372), stdev = 1,555
[info]   CI (99.9%): [380,874, 392,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,003), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,520 ±(99.9%) 4,453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,520, 2,589), stdev = 1,157
[info]   CI (99.9%): [≈ 0, 4,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6,480 ±(99.9%) 55,533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,480, 32,278), stdev = 14,422
[info]   CI (99.9%): [≈ 0, 62,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339,334 ±(99.9%) 1219,669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,334, 673,512), stdev = 316,744
[info]   CI (99.9%): [≈ 0, 1559,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   4234,597 ±(99.9%) 15217,268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4234,597, 8398,444), stdev = 3951,876
[info]   CI (99.9%): [≈ 0, 19451,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,70% complete, ETA 01:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75962,081 ops/s
[info] # Warmup Iteration   2: 108618,834 ops/s
[info] # Warmup Iteration   3: 108929,856 ops/s
[info] # Warmup Iteration   4: 109164,765 ops/s
[info] # Warmup Iteration   5: 109200,536 ops/s
[info] Iteration   1: 109407,227 ops/s
[info]                  ·gc.alloc.rate:                   361,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7358,899 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 109417,870 ops/s
[info]                  ·gc.alloc.rate:      361,564 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 107394,881 ops/s
[info]                  ·gc.alloc.rate:                   354,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7497,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 109022,946 ops/s
[info]                  ·gc.alloc.rate:      360,245 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 109183,678 ops/s
[info]                  ·gc.alloc.rate:                   360,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9711,971 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   108885,320 ±(99.9%) 3270,421 ops/s [Average]
[info]   (min, avg, max) = (107394,881, 108885,320, 109417,870), stdev = 849,318
[info]   CI (99.9%): [105614,899, 112155,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   359,770 ±(99.9%) 10,808 MB/sec [Average]
[info]   (min, avg, max) = (354,842, 359,770, 361,564), stdev = 2,807
[info]   CI (99.9%): [348,963, 370,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5200,004, 5200,004, 5200,004), stdev = 0,001
[info]   CI (99.9%): [5200,003, 5200,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,017 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,240 ±(99.9%) 2,067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,240, 1,200), stdev = 0,537
[info]   CI (99.9%): [≈ 0, 2,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339,375 ±(99.9%) 1219,905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,375, 673,776), stdev = 316,805
[info]   CI (99.9%): [≈ 0, 1559,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4913,590 ±(99.9%) 17642,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4913,590, 9711,971), stdev = 4581,625
[info]   CI (99.9%): [≈ 0, 22555,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,90% complete, ETA 01:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120930,529 ops/s
[info] # Warmup Iteration   2: 126248,624 ops/s
[info] # Warmup Iteration   3: 126693,768 ops/s
[info] # Warmup Iteration   4: 125943,710 ops/s
[info] # Warmup Iteration   5: 126820,422 ops/s
[info] Iteration   1: 125542,472 ops/s
[info]                  ·gc.alloc.rate:                   384,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6413,156 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 126765,225 ops/s
[info]                  ·gc.alloc.rate:                   387,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6351,848 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 115186,365 ops/s
[info]                  ·gc.alloc.rate:                   352,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6989,718 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 126059,162 ops/s
[info]                  ·gc.alloc.rate:      385,762 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 126323,348 ops/s
[info]                  ·gc.alloc.rate:                   386,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8406,999 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   123975,314 ±(99.9%) 18995,514 ops/s [Average]
[info]   (min, avg, max) = (115186,365, 123975,314, 126765,225), stdev = 4933,075
[info]   CI (99.9%): [104979,800, 142970,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   379,376 ±(99.9%) 58,162 MB/sec [Average]
[info]   (min, avg, max) = (352,469, 379,376, 387,944), stdev = 15,104
[info]   CI (99.9%): [321,214, 437,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,004), stdev = 0,001
[info]   CI (99.9%): [4816,002, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,664 ±(99.9%) 5,669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,664, 3,298), stdev = 1,472
[info]   CI (99.9%): [≈ 0, 6,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8,283 ±(99.9%) 70,613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,283, 41,086), stdev = 18,338
[info]   CI (99.9%): [≈ 0, 78,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441,912 ±(99.9%) 989,423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,912, 674,821), stdev = 256,950
[info]   CI (99.9%): [≈ 0, 1431,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5632,344 ±(99.9%) 12535,580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5632,344, 8406,999), stdev = 3255,450
[info]   CI (99.9%): [≈ 0, 18167,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25,10% complete, ETA 01:39:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119945,374 ops/s
[info] # Warmup Iteration   2: 126008,219 ops/s
[info] # Warmup Iteration   3: 126986,971 ops/s
[info] # Warmup Iteration   4: 124542,975 ops/s
[info] # Warmup Iteration   5: 124483,210 ops/s
[info] Iteration   1: 124860,140 ops/s
[info]                  ·gc.alloc.rate:                   283,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6448,280 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 126262,597 ops/s
[info]                  ·gc.alloc.rate:                   286,933 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6377,401 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 126125,486 ops/s
[info]                  ·gc.alloc.rate:      286,606 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 126079,585 ops/s
[info]                  ·gc.alloc.rate:                   286,475 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6386,100 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 126548,744 ops/s
[info]                  ·gc.alloc.rate:      287,578 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   125975,311 ±(99.9%) 2501,726 ops/s [Average]
[info]   (min, avg, max) = (124860,140, 125975,311, 126548,744), stdev = 649,690
[info]   CI (99.9%): [123473,584, 128477,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   286,256 ±(99.9%) 5,764 MB/sec [Average]
[info]   (min, avg, max) = (283,690, 286,256, 287,578), stdev = 1,497
[info]   CI (99.9%): [280,492, 292,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3576,003, 3576,003, 3576,003), stdev = 0,001
[info]   CI (99.9%): [3576,003, 3576,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,010 ±(99.9%) 0,074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,044), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0,131 ±(99.9%) 0,925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,131, 0,553), stdev = 0,240
[info]   CI (99.9%): [≈ 0, 1,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306,972 ±(99.9%) 1079,048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,972, 511,713), stdev = 280,225
[info]   CI (99.9%): [≈ 0, 1386,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   3842,356 ±(99.9%) 13506,834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3842,356, 6448,280), stdev = 3507,682
[info]   CI (99.9%): [≈ 0, 17349,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25,30% complete, ETA 01:39:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7784,029 ops/s
[info] # Warmup Iteration   2: 11143,875 ops/s
[info] # Warmup Iteration   3: 11219,164 ops/s
[info] # Warmup Iteration   4: 11332,991 ops/s
[info] # Warmup Iteration   5: 11249,391 ops/s
[info] Iteration   1: 11290,378 ops/s
[info]                  ·gc.alloc.rate:                   1857,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280851,992 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10887,571 ops/s
[info]                  ·gc.alloc.rate:                   1790,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194405,413 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11310,554 ops/s
[info]                  ·gc.alloc.rate:                   1860,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019,560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281004,281 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 11046,145 ops/s
[info]                  ·gc.alloc.rate:                   1816,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288360,773 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11158,052 ops/s
[info]                  ·gc.alloc.rate:                   1835,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 285842,889 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   11138,540 ±(99.9%) 679,468 ops/s [Average]
[info]   (min, avg, max) = (10887,571, 11138,540, 11310,554), stdev = 176,456
[info]   CI (99.9%): [10459,072, 11818,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1831,998 ±(99.9%) 112,177 MB/sec [Average]
[info]   (min, avg, max) = (1790,541, 1831,998, 1860,382), stdev = 29,132
[info]   CI (99.9%): [1719,821, 1944,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258856,038 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (258856,036, 258856,038, 258856,046), stdev = 0,004
[info]   CI (99.9%): [258856,022, 258856,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7,006 ±(99.9%) 16,931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,006, 11,585), stdev = 4,397
[info]   CI (99.9%): [≈ 0, 23,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1885,914 ±(99.9%) 1165,070 MB/sec [Average]
[info]   (min, avg, max) = (1344,727, 1885,914, 2026,595), stdev = 302,565
[info]   CI (99.9%): [720,843, 3050,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   266093,069 ±(99.9%) 154808,291 B/op [Average]
[info]   (min, avg, max) = (194405,413, 266093,069, 288360,773), stdev = 40203,222
[info]   CI (99.9%): [111284,778, 420901,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,50% complete, ETA 01:38:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6372,963 ops/s
[info] # Warmup Iteration   2: 11633,712 ops/s
[info] # Warmup Iteration   3: 11630,812 ops/s
[info] # Warmup Iteration   4: 11618,172 ops/s
[info] # Warmup Iteration   5: 11618,351 ops/s
[info] Iteration   1: 11598,674 ops/s
[info]                  ·gc.alloc.rate:                   1794,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              243488,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 275565,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11694,410 ops/s
[info]                  ·gc.alloc.rate:                   1809,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182382,480 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11536,121 ops/s
[info]                  ·gc.alloc.rate:                   1785,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277454,663 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 11672,632 ops/s
[info]                  ·gc.alloc.rate:                   1806,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274582,145 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11708,106 ops/s
[info]                  ·gc.alloc.rate:                   1811,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              243509,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358,410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182612,138 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   11641,989 ±(99.9%) 279,952 ops/s [Average]
[info]   (min, avg, max) = (11536,121, 11641,989, 11708,106), stdev = 72,703
[info]   CI (99.9%): [11362,037, 11921,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1801,309 ±(99.9%) 43,337 MB/sec [Average]
[info]   (min, avg, max) = (1785,049, 1801,309, 1811,408), stdev = 11,254
[info]   CI (99.9%): [1757,972, 1844,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243506,739 ±(99.9%) 39,741 B/op [Average]
[info]   (min, avg, max) = (243488,430, 243506,739, 243512,168), stdev = 10,321
[info]   CI (99.9%): [243466,998, 243546,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3,386 ±(99.9%) 14,224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,386, 8,519), stdev = 3,694
[info]   CI (99.9%): [≈ 0, 17,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1762,983 ±(99.9%) 1427,542 MB/sec [Average]
[info]   (min, avg, max) = (1355,347, 1762,983, 2036,542), stdev = 370,728
[info]   CI (99.9%): [335,441, 3190,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   238519,339 ±(99.9%) 196965,689 B/op [Average]
[info]   (min, avg, max) = (182382,480, 238519,339, 277454,663), stdev = 51151,364
[info]   CI (99.9%): [41553,649, 435485,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,70% complete, ETA 01:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197540,947 ops/s
[info] # Warmup Iteration   2: 209562,723 ops/s
[info] # Warmup Iteration   3: 209395,881 ops/s
[info] # Warmup Iteration   4: 208098,862 ops/s
[info] # Warmup Iteration   5: 209589,337 ops/s
[info] Iteration   1: 208852,018 ops/s
[info]                  ·gc.alloc.rate:                   543,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3855,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 208647,618 ops/s
[info]                  ·gc.alloc.rate:                   543,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5094,760 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 209705,531 ops/s
[info]                  ·gc.alloc.rate:      545,776 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 208609,890 ops/s
[info]                  ·gc.alloc.rate:                   542,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5095,688 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 209038,961 ops/s
[info]                  ·gc.alloc.rate:                   544,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5070,115 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   208970,803 ±(99.9%) 1714,820 ops/s [Average]
[info]   (min, avg, max) = (208609,890, 208970,803, 209705,531), stdev = 445,333
[info]   CI (99.9%): [207255,983, 210685,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   543,864 ±(99.9%) 4,470 MB/sec [Average]
[info]   (min, avg, max) = (542,952, 543,864, 545,776), stdev = 1,161
[info]   CI (99.9%): [539,395, 548,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,002, 4096,002, 4096,002), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,606 ±(99.9%) 5,042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,606, 2,947), stdev = 1,309
[info]   CI (99.9%): [≈ 0, 5,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4,572 ±(99.9%) 38,030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,572, 22,233), stdev = 9,876
[info]   CI (99.9%): [≈ 0, 42,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   507,177 ±(99.9%) 1125,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,177, 675,466), stdev = 292,205
[info]   CI (99.9%): [≈ 0, 1632,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3823,113 ±(99.9%) 8482,077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3823,113, 5095,688), stdev = 2202,769
[info]   CI (99.9%): [≈ 0, 12305,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25,90% complete, ETA 01:38:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3578,374 ops/s
[info] # Warmup Iteration   2: 6429,188 ops/s
[info] # Warmup Iteration   3: 6633,479 ops/s
[info] # Warmup Iteration   4: 6600,914 ops/s
[info] # Warmup Iteration   5: 6612,459 ops/s
[info] Iteration   1: 6614,211 ops/s
[info]                  ·gc.alloc.rate:                   1756,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 322053,572 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6624,102 ops/s
[info]                  ·gc.alloc.rate:                   1759,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024,066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483057,200 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6567,511 ops/s
[info]                  ·gc.alloc.rate:                   1744,528 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325026,640 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6598,146 ops/s
[info]                  ·gc.alloc.rate:                   1752,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024,062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485601,901 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6578,539 ops/s
[info]                  ·gc.alloc.rate:                   1747,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              418026,247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487635,647 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6596,502 ±(99.9%) 91,148 ops/s [Average]
[info]   (min, avg, max) = (6567,511, 6596,502, 6624,102), stdev = 23,671
[info]   CI (99.9%): [6505,353, 6687,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1752,132 ±(99.9%) 23,897 MB/sec [Average]
[info]   (min, avg, max) = (1744,528, 1752,132, 1759,394), stdev = 6,206
[info]   CI (99.9%): [1728,235, 1776,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418024,502 ±(99.9%) 3,756 B/op [Average]
[info]   (min, avg, max) = (418024,062, 418024,502, 418026,247), stdev = 0,976
[info]   CI (99.9%): [418020,745, 418028,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7,934 ±(99.9%) 25,509 B/op [Average]
[info]   (min, avg, max) = (4,953, 7,934, 19,784), stdev = 6,625
[info]   CI (99.9%): [≈ 0, 33,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1763,454 ±(99.9%) 1436,110 MB/sec [Average]
[info]   (min, avg, max) = (1353,397, 1763,454, 2038,378), stdev = 372,953
[info]   CI (99.9%): [327,344, 3199,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   420674,992 ±(99.9%) 341523,922 B/op [Average]
[info]   (min, avg, max) = (322053,572, 420674,992, 487635,647), stdev = 88692,678
[info]   CI (99.9%): [79151,070, 762198,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26,10% complete, ETA 01:38:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8254,113 ops/s
[info] # Warmup Iteration   2: 10733,672 ops/s
[info] # Warmup Iteration   3: 10828,722 ops/s
[info] # Warmup Iteration   4: 10834,087 ops/s
[info] # Warmup Iteration   5: 10925,875 ops/s
[info] Iteration   1: 9970,278 ops/s
[info]                  ·gc.alloc.rate:                   1603,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              253152,325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 318473,549 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10907,403 ops/s
[info]                  ·gc.alloc.rate:                   1754,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194259,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10870,374 ops/s
[info]                  ·gc.alloc.rate:                   1748,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 292642,681 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 10829,520 ops/s
[info]                  ·gc.alloc.rate:                   1742,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 294234,375 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 10824,714 ops/s
[info]                  ·gc.alloc.rate:                   1741,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196486,951 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   10680,458 ±(99.9%) 1534,177 ops/s [Average]
[info]   (min, avg, max) = (9970,278, 10680,458, 10907,403), stdev = 398,421
[info]   CI (99.9%): [9146,280, 12214,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1718,170 ±(99.9%) 247,470 MB/sec [Average]
[info]   (min, avg, max) = (1603,618, 1718,170, 1754,859), stdev = 64,267
[info]   CI (99.9%): [1470,700, 1965,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   253171,298 ±(99.9%) 40,840 B/op [Average]
[info]   (min, avg, max) = (253152,325, 253171,298, 253176,047), stdev = 10,606
[info]   CI (99.9%): [253130,457, 253212,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6,142 ±(99.9%) 24,699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,142, 15,126), stdev = 6,414
[info]   CI (99.9%): [≈ 0, 30,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1752,290 ±(99.9%) 1417,620 MB/sec [Average]
[info]   (min, avg, max) = (1346,483, 1752,290, 2024,695), stdev = 368,151
[info]   CI (99.9%): [334,670, 3169,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   259219,323 ±(99.9%) 227883,829 B/op [Average]
[info]   (min, avg, max) = (194259,061, 259219,323, 318473,549), stdev = 59180,707
[info]   CI (99.9%): [31335,494, 487103,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26,31% complete, ETA 01:37:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20998,757 ops/s
[info] # Warmup Iteration   2: 29286,150 ops/s
[info] # Warmup Iteration   3: 29411,235 ops/s
[info] # Warmup Iteration   4: 29166,947 ops/s
[info] # Warmup Iteration   5: 28981,100 ops/s
[info] Iteration   1: 29299,185 ops/s
[info]                  ·gc.alloc.rate:                   1518,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72061,423 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29116,277 ops/s
[info]                  ·gc.alloc.rate:                   1509,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72550,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29347,594 ops/s
[info]                  ·gc.alloc.rate:                   1521,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108108,168 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 29421,191 ops/s
[info]                  ·gc.alloc.rate:                   1524,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71974,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29236,113 ops/s
[info]                  ·gc.alloc.rate:                   1515,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72503,528 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   29284,072 ±(99.9%) 445,413 ops/s [Average]
[info]   (min, avg, max) = (29116,277, 29284,072, 29421,191), stdev = 115,672
[info]   CI (99.9%): [28838,658, 29729,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1517,802 ±(99.9%) 23,185 MB/sec [Average]
[info]   (min, avg, max) = (1509,093, 1517,802, 1524,987), stdev = 6,021
[info]   CI (99.9%): [1494,617, 1540,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81568,014, 81568,015, 81568,015), stdev = 0,001
[info]   CI (99.9%): [81568,012, 81568,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,128 ±(99.9%) 7,690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,128, 5,581), stdev = 1,997
[info]   CI (99.9%): [≈ 0, 10,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478,475 ±(99.9%) 1157,254 MB/sec [Average]
[info]   (min, avg, max) = (1341,475, 1478,475, 2016,073), stdev = 300,535
[info]   CI (99.9%): [321,221, 2635,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   79439,476 ±(99.9%) 61719,453 B/op [Average]
[info]   (min, avg, max) = (71974,023, 79439,476, 108108,168), stdev = 16028,346
[info]   CI (99.9%): [17720,024, 141158,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,51% complete, ETA 01:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22150,881 ops/s
[info] # Warmup Iteration   2: 34385,147 ops/s
[info] # Warmup Iteration   3: 34542,282 ops/s
[info] # Warmup Iteration   4: 34379,001 ops/s
[info] # Warmup Iteration   5: 34488,331 ops/s
[info] Iteration   1: 34481,826 ops/s
[info]                  ·gc.alloc.rate:                   1685,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92635,868 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 34597,446 ops/s
[info]                  ·gc.alloc.rate:                   1691,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61636,378 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34468,437 ops/s
[info]                  ·gc.alloc.rate:                   1685,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92896,206 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 34583,857 ops/s
[info]                  ·gc.alloc.rate:                   1690,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61763,858 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 34359,299 ops/s
[info]                  ·gc.alloc.rate:                   1679,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93336,262 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   34498,173 ±(99.9%) 373,504 ops/s [Average]
[info]   (min, avg, max) = (34359,299, 34498,173, 34597,446), stdev = 96,998
[info]   CI (99.9%): [34124,669, 34871,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1686,545 ±(99.9%) 18,463 MB/sec [Average]
[info]   (min, avg, max) = (1679,728, 1686,545, 1691,618), stdev = 4,795
[info]   CI (99.9%): [1668,082, 1705,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76944,012, 76944,012, 76944,013), stdev = 0,001
[info]   CI (99.9%): [76944,010, 76944,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,711 ±(99.9%) 4,779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,711, 2,861), stdev = 1,241
[info]   CI (99.9%): [≈ 0, 6,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1762,724 ±(99.9%) 1429,429 MB/sec [Average]
[info]   (min, avg, max) = (1355,079, 1762,724, 2037,579), stdev = 371,218
[info]   CI (99.9%): [333,295, 3192,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80453,714 ±(99.9%) 65928,810 B/op [Average]
[info]   (min, avg, max) = (61636,378, 80453,714, 93336,262), stdev = 17121,502
[info]   CI (99.9%): [14524,905, 146382,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,71% complete, ETA 01:37:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 372085,888 ops/s
[info] # Warmup Iteration   2: 380194,821 ops/s
[info] # Warmup Iteration   3: 393804,185 ops/s
[info] # Warmup Iteration   4: 395513,542 ops/s
[info] # Warmup Iteration   5: 396998,281 ops/s
[info] Iteration   1: 334569,944 ops/s
[info]                  ·gc.alloc.rate:                   739,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6345,567 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 374454,501 ops/s
[info]                  ·gc.alloc.rate:                   828,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2830,803 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 397190,322 ops/s
[info]                  ·gc.alloc.rate:                   878,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2665,923 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 396646,430 ops/s
[info]                  ·gc.alloc.rate:                   877,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2669,457 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 397127,254 ops/s
[info]                  ·gc.alloc.rate:                   878,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5332,422 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   379997,690 ±(99.9%) 104759,387 ops/s [Average]
[info]   (min, avg, max) = (334569,944, 379997,690, 397190,322), stdev = 27205,680
[info]   CI (99.9%): [275238,303, 484757,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   840,276 ±(99.9%) 231,699 MB/sec [Average]
[info]   (min, avg, max) = (739,763, 840,276, 878,297), stdev = 60,172
[info]   CI (99.9%): [608,577, 1071,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3480,001, 3480,001, 3480,001), stdev = 0,001
[info]   CI (99.9%): [3480,001, 3480,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,141 ±(99.9%) 0,527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,141, 0,294), stdev = 0,137
[info]   CI (99.9%): [≈ 0, 0,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   942,750 ±(99.9%) 1421,898 MB/sec [Average]
[info]   (min, avg, max) = (672,766, 942,750, 1348,912), stdev = 369,262
[info]   CI (99.9%): [≈ 0, 2364,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3968,835 ±(99.9%) 6721,913 B/op [Average]
[info]   (min, avg, max) = (2665,923, 3968,835, 6345,567), stdev = 1745,659
[info]   CI (99.9%): [≈ 0, 10690,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26,91% complete, ETA 01:37:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 426167,955 ops/s
[info] # Warmup Iteration   2: 447599,552 ops/s
[info] # Warmup Iteration   3: 455015,005 ops/s
[info] # Warmup Iteration   4: 454967,067 ops/s
[info] # Warmup Iteration   5: 455608,048 ops/s
[info] Iteration   1: 456007,033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 455576,613 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 456007,019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 454505,138 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 455042,260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   455427,613 ±(99.9%) 2505,210 ops/s [Average]
[info]   (min, avg, max) = (454505,138, 455427,613, 456007,033), stdev = 650,595
[info]   CI (99.9%): [452922,402, 457932,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27,11% complete, ETA 01:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23341,681 ops/s
[info] # Warmup Iteration   2: 30618,321 ops/s
[info] # Warmup Iteration   3: 30647,675 ops/s
[info] # Warmup Iteration   4: 30473,282 ops/s
[info] # Warmup Iteration   5: 30761,560 ops/s
[info] Iteration   1: 30473,866 ops/s
[info]                  ·gc.alloc.rate:                   1603,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69163,152 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30807,801 ops/s
[info]                  ·gc.alloc.rate:                   1621,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68471,210 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 30673,265 ops/s
[info]                  ·gc.alloc.rate:                   1614,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012,632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103268,331 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 30763,949 ops/s
[info]                  ·gc.alloc.rate:                   1619,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68762,434 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30741,412 ops/s
[info]                  ·gc.alloc.rate:                   1617,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019,716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103408,349 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   30692,059 ±(99.9%) 505,600 ops/s [Average]
[info]   (min, avg, max) = (30473,866, 30692,059, 30807,801), stdev = 131,303
[info]   CI (99.9%): [30186,458, 31197,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1615,172 ±(99.9%) 26,758 MB/sec [Average]
[info]   (min, avg, max) = (1603,634, 1615,172, 1621,323), stdev = 6,949
[info]   CI (99.9%): [1588,414, 1641,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82824,013, 82824,013, 82824,014), stdev = 0,001
[info]   CI (99.9%): [82824,012, 82824,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,067 ±(99.9%) 5,037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,067, 3,204), stdev = 1,308
[info]   CI (99.9%): [≈ 0, 6,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1611,202 ±(99.9%) 1423,586 MB/sec [Average]
[info]   (min, avg, max) = (1339,134, 1611,202, 2019,716), stdev = 369,701
[info]   CI (99.9%): [187,615, 3034,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82614,695 ±(99.9%) 72852,922 B/op [Average]
[info]   (min, avg, max) = (68471,210, 82614,695, 103408,349), stdev = 18919,672
[info]   CI (99.9%): [9761,773, 155467,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27,31% complete, ETA 01:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10402,649 ops/s
[info] # Warmup Iteration   2: 11721,168 ops/s
[info] # Warmup Iteration   3: 11801,977 ops/s
[info] # Warmup Iteration   4: 11856,415 ops/s
[info] # Warmup Iteration   5: 11843,081 ops/s
[info] Iteration   1: 11820,459 ops/s
[info]                  ·gc.alloc.rate:                   661,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              88018,851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89923,551 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11813,089 ops/s
[info]                  ·gc.alloc.rate:                   660,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89984,433 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11779,867 ops/s
[info]                  ·gc.alloc.rate:                   658,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89969,476 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 11752,054 ops/s
[info]                  ·gc.alloc.rate:                   657,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90183,780 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11723,226 ops/s
[info]                  ·gc.alloc.rate:                   655,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90309,692 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   11777,739 ±(99.9%) 157,717 ops/s [Average]
[info]   (min, avg, max) = (11723,226, 11777,739, 11820,459), stdev = 40,959
[info]   CI (99.9%): [11620,022, 11935,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   658,667 ±(99.9%) 8,690 MB/sec [Average]
[info]   (min, avg, max) = (655,673, 658,667, 661,013), stdev = 2,257
[info]   CI (99.9%): [649,977, 667,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88016,600 ±(99.9%) 4,845 B/op [Average]
[info]   (min, avg, max) = (88016,035, 88016,600, 88018,851), stdev = 1,258
[info]   CI (99.9%): [88011,755, 88021,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,623 ±(99.9%) 5,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,623, 3,009), stdev = 1,334
[info]   CI (99.9%): [≈ 0, 5,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   82,926 ±(99.9%) 684,222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82,926, 400,723), stdev = 177,690
[info]   CI (99.9%): [≈ 0, 767,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   674,062 ±(99.9%) 4,687 MB/sec [Average]
[info]   (min, avg, max) = (672,759, 674,062, 675,407), stdev = 1,217
[info]   CI (99.9%): [669,375, 678,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   90074,186 ±(99.9%) 636,186 B/op [Average]
[info]   (min, avg, max) = (89923,551, 90074,186, 90309,692), stdev = 165,216
[info]   CI (99.9%): [89438,000, 90710,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27,51% complete, ETA 01:36:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92988,853 ops/s
[info] # Warmup Iteration   2: 108843,882 ops/s
[info] # Warmup Iteration   3: 108822,680 ops/s
[info] # Warmup Iteration   4: 109812,080 ops/s
[info] # Warmup Iteration   5: 109682,310 ops/s
[info] Iteration   1: 109292,090 ops/s
[info]                  ·gc.alloc.rate:                   1780,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29017,330 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 109896,800 ops/s
[info]                  ·gc.alloc.rate:                   1790,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19259,793 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 109484,712 ops/s
[info]                  ·gc.alloc.rate:                   1783,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29041,732 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 109264,763 ops/s
[info]                  ·gc.alloc.rate:                   1780,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29152,696 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 104484,604 ops/s
[info]                  ·gc.alloc.rate:                   1702,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20348,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   108484,594 ±(99.9%) 8665,060 ops/s [Average]
[info]   (min, avg, max) = (104484,604, 108484,594, 109896,800), stdev = 2250,289
[info]   CI (99.9%): [99819,533, 117149,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1767,332 ±(99.9%) 140,903 MB/sec [Average]
[info]   (min, avg, max) = (1702,277, 1767,332, 1790,164), stdev = 36,592
[info]   CI (99.9%): [1626,429, 1908,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25640,004, 25640,004, 25640,004), stdev = 0,001
[info]   CI (99.9%): [25640,003, 25640,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,847 ±(99.9%) 0,981 B/op [Average]
[info]   (min, avg, max) = (0,596, 0,847, 1,199), stdev = 0,255
[info]   CI (99.9%): [≈ 0, 1,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1750,985 ±(99.9%) 1417,219 MB/sec [Average]
[info]   (min, avg, max) = (1344,703, 1750,985, 2023,981), stdev = 368,047
[info]   CI (99.9%): [333,766, 3168,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25363,995 ±(99.9%) 19600,883 B/op [Average]
[info]   (min, avg, max) = (19259,793, 25363,995, 29152,696), stdev = 5090,287
[info]   CI (99.9%): [5763,112, 44964,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27,71% complete, ETA 01:36:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97957,098 ops/s
[info] # Warmup Iteration   2: 515914,730 ops/s
[info] # Warmup Iteration   3: 514437,771 ops/s
[info] # Warmup Iteration   4: 514318,915 ops/s
[info] # Warmup Iteration   5: 518876,343 ops/s
[info] Iteration   1: 519350,779 ops/s
[info]                  ·gc.alloc.rate:                   538,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1550,240 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 520482,021 ops/s
[info]                  ·gc.alloc.rate:                   539,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2036,504 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 513754,317 ops/s
[info]                  ·gc.alloc.rate:                   532,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2063,041 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 518479,302 ops/s
[info]                  ·gc.alloc.rate:      537,666 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 519156,090 ops/s
[info]                  ·gc.alloc.rate:                   538,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2037,532 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   518244,502 ±(99.9%) 10055,680 ops/s [Average]
[info]   (min, avg, max) = (513754,317, 518244,502, 520482,021), stdev = 2611,428
[info]   CI (99.9%): [508188,822, 528300,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   537,427 ±(99.9%) 10,447 MB/sec [Average]
[info]   (min, avg, max) = (532,769, 537,427, 539,778), stdev = 2,713
[info]   CI (99.9%): [526,981, 547,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,531 ±(99.9%) 4,483 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,531, 2,614), stdev = 1,164
[info]   CI (99.9%): [≈ 0, 5,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1,606 ±(99.9%) 13,555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,606, 7,902), stdev = 3,520
[info]   CI (99.9%): [≈ 0, 15,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506,155 ±(99.9%) 1122,324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,155, 673,567), stdev = 291,464
[info]   CI (99.9%): [≈ 0, 1628,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1537,464 ±(99.9%) 3411,299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1537,464, 2063,041), stdev = 885,903
[info]   CI (99.9%): [≈ 0, 4948,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27,91% complete, ETA 01:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208253,532 ops/s
[info] # Warmup Iteration   2: 306962,156 ops/s
[info] # Warmup Iteration   3: 317570,743 ops/s
[info] # Warmup Iteration   4: 320131,206 ops/s
[info] # Warmup Iteration   5: 320232,549 ops/s
[info] Iteration   1: 316456,200 ops/s
[info]                  ·gc.alloc.rate:                   447,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2544,364 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 319317,145 ops/s
[info]                  ·gc.alloc.rate:      451,263 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 315535,898 ops/s
[info]                  ·gc.alloc.rate:                   445,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3360,874 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 319271,944 ops/s
[info]                  ·gc.alloc.rate:                   451,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3321,510 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 319394,681 ops/s
[info]                  ·gc.alloc.rate:      451,363 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   317995,174 ±(99.9%) 7140,024 ops/s [Average]
[info]   (min, avg, max) = (315535,898, 317995,174, 319394,681), stdev = 1854,242
[info]   CI (99.9%): [310855,149, 325135,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   449,391 ±(99.9%) 10,134 MB/sec [Average]
[info]   (min, avg, max) = (445,911, 449,391, 451,363), stdev = 2,632
[info]   CI (99.9%): [439,257, 459,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2224,001, 2224,001, 2224,001), stdev = 0,001
[info]   CI (99.9%): [2224,001, 2224,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,145 ±(99.9%) 1,043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,145, 0,623), stdev = 0,271
[info]   CI (99.9%): [≈ 0, 1,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   371,873 ±(99.9%) 1331,841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371,873, 673,900), stdev = 345,875
[info]   CI (99.9%): [≈ 0, 1703,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1845,350 ±(99.9%) 6606,721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1845,350, 3360,874), stdev = 1715,744
[info]   CI (99.9%): [≈ 0, 8452,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28,11% complete, ETA 01:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 666619,297 ops/s
[info] # Warmup Iteration   2: 688285,304 ops/s
[info] # Warmup Iteration   3: 690685,255 ops/s
[info] # Warmup Iteration   4: 702337,063 ops/s
[info] # Warmup Iteration   5: 700719,874 ops/s
[info] Iteration   1: 700815,001 ops/s
[info]                  ·gc.alloc.rate:                   455,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1148,883 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 702384,362 ops/s
[info]                  ·gc.alloc.rate:                   457,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1146,368 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 704882,121 ops/s
[info]                  ·gc.alloc.rate:      458,619 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 700123,433 ops/s
[info]                  ·gc.alloc.rate:                   455,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1516,826 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 699531,595 ops/s
[info]                  ·gc.alloc.rate:                   455,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1518,120 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   701547,303 ±(99.9%) 8269,572 ops/s [Average]
[info]   (min, avg, max) = (699531,595, 701547,303, 704882,121), stdev = 2147,581
[info]   CI (99.9%): [693277,731, 709816,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   456,459 ±(99.9%) 5,395 MB/sec [Average]
[info]   (min, avg, max) = (455,159, 456,459, 458,619), stdev = 1,401
[info]   CI (99.9%): [451,064, 461,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,682 ±(99.9%) 5,567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,682, 3,268), stdev = 1,446
[info]   CI (99.9%): [≈ 0, 6,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,534 ±(99.9%) 12,514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,534, 7,345), stdev = 3,250
[info]   CI (99.9%): [≈ 0, 14,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474,554 ±(99.9%) 1068,741 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,554, 674,790), stdev = 277,549
[info]   CI (99.9%): [≈ 0, 1543,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1066,040 ±(99.9%) 2402,676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1066,040, 1518,120), stdev = 623,967
[info]   CI (99.9%): [≈ 0, 3468,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28,31% complete, ETA 01:35:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56652,300 ops/s
[info] # Warmup Iteration   2: 83130,318 ops/s
[info] # Warmup Iteration   3: 83626,489 ops/s
[info] # Warmup Iteration   4: 83626,270 ops/s
[info] # Warmup Iteration   5: 83704,022 ops/s
[info] Iteration   1: 82660,626 ops/s
[info]                  ·gc.alloc.rate:                   3619,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64735,369 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 82880,038 ops/s
[info]                  ·gc.alloc.rate:                   3628,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083,186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77545,794 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 84146,696 ops/s
[info]                  ·gc.alloc.rate:                   3684,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63669,372 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 83138,506 ops/s
[info]                  ·gc.alloc.rate:                   3641,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087,623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77371,538 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 83525,202 ops/s
[info]                  ·gc.alloc.rate:                   3657,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3407,111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64200,068 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   83270,214 ±(99.9%) 2257,165 ops/s [Average]
[info]   (min, avg, max) = (82660,626, 83270,214, 84146,696), stdev = 586,179
[info]   CI (99.9%): [81013,049, 85527,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3646,525 ±(99.9%) 98,997 MB/sec [Average]
[info]   (min, avg, max) = (3619,944, 3646,525, 3684,971), stdev = 25,709
[info]   CI (99.9%): [3547,529, 3745,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68920,005, 68920,005, 68920,005), stdev = 0,001
[info]   CI (99.9%): [68920,004, 68920,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,096 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,096, 0,146), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,810 ±(99.9%) 2,760 B/op [Average]
[info]   (min, avg, max) = (1,182, 1,810, 2,767), stdev = 0,717
[info]   CI (99.9%): [≈ 0, 4,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3676,461 ±(99.9%) 1437,539 MB/sec [Average]
[info]   (min, avg, max) = (3400,151, 3676,461, 4087,623), stdev = 373,324
[info]   CI (99.9%): [2238,922, 5114,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69504,428 ±(99.9%) 27998,910 B/op [Average]
[info]   (min, avg, max) = (63669,372, 69504,428, 77545,794), stdev = 7271,228
[info]   CI (99.9%): [41505,518, 97503,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28,51% complete, ETA 01:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193410,019 ops/s
[info] # Warmup Iteration   2: 214085,780 ops/s
[info] # Warmup Iteration   3: 215737,696 ops/s
[info] # Warmup Iteration   4: 214540,380 ops/s
[info] # Warmup Iteration   5: 217301,591 ops/s
[info] Iteration   1: 216554,811 ops/s
[info]                  ·gc.alloc.rate:                   1644,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9761,704 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 214413,262 ops/s
[info]                  ·gc.alloc.rate:                   1628,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14803,765 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 215849,289 ops/s
[info]                  ·gc.alloc.rate:                   1639,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9815,753 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 216194,580 ops/s
[info]                  ·gc.alloc.rate:                   1641,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14719,264 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 215838,864 ops/s
[info]                  ·gc.alloc.rate:                   1639,102 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9840,403 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   215770,161 ±(99.9%) 3132,993 ops/s [Average]
[info]   (min, avg, max) = (214413,262, 215770,161, 216554,811), stdev = 813,628
[info]   CI (99.9%): [212637,168, 218903,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1638,615 ±(99.9%) 23,363 MB/sec [Average]
[info]   (min, avg, max) = (1628,482, 1638,615, 1644,385), stdev = 6,067
[info]   CI (99.9%): [1615,252, 1661,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   11952,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11952,002, 11952,002, 11952,002), stdev = 0,001
[info]   CI (99.9%): [11952,002, 11952,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,243 ±(99.9%) 0,670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,243, 0,458), stdev = 0,174
[info]   CI (99.9%): [≈ 0, 0,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1615,572 ±(99.9%) 1420,027 MB/sec [Average]
[info]   (min, avg, max) = (1343,039, 1615,572, 2022,028), stdev = 368,777
[info]   CI (99.9%): [195,545, 3035,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11788,178 ±(99.9%) 10452,905 B/op [Average]
[info]   (min, avg, max) = (9761,704, 11788,178, 14803,765), stdev = 2714,586
[info]   CI (99.9%): [1335,273, 22241,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28,71% complete, ETA 01:34:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192395,430 ops/s
[info] # Warmup Iteration   2: 233409,037 ops/s
[info] # Warmup Iteration   3: 235185,249 ops/s
[info] # Warmup Iteration   4: 236790,762 ops/s
[info] # Warmup Iteration   5: 237459,830 ops/s
[info] Iteration   1: 236466,127 ops/s
[info]                  ·gc.alloc.rate:                   1405,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8928,730 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 237453,717 ops/s
[info]                  ·gc.alloc.rate:                   1411,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8894,544 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 236778,552 ops/s
[info]                  ·gc.alloc.rate:                   1406,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8925,822 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 234369,719 ops/s
[info]                  ·gc.alloc.rate:                   1392,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13542,148 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 237007,125 ops/s
[info]                  ·gc.alloc.rate:                   1408,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8939,467 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   236415,048 ±(99.9%) 4615,757 ops/s [Average]
[info]   (min, avg, max) = (234369,719, 236415,048, 237453,717), stdev = 1198,697
[info]   CI (99.9%): [231799,292, 241030,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1404,857 ±(99.9%) 27,597 MB/sec [Average]
[info]   (min, avg, max) = (1392,688, 1404,857, 1411,204), stdev = 7,167
[info]   CI (99.9%): [1377,260, 1432,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9352,002, 9352,002, 9352,002), stdev = 0,001
[info]   CI (99.9%): [9352,002, 9352,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,250 ±(99.9%) 0,698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,250, 0,419), stdev = 0,181
[info]   CI (99.9%): [≈ 0, 0,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477,882 ±(99.9%) 1159,822 MB/sec [Average]
[info]   (min, avg, max) = (1341,420, 1477,882, 2016,679), stdev = 301,202
[info]   CI (99.9%): [318,060, 2637,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9846,142 ±(99.9%) 7956,192 B/op [Average]
[info]   (min, avg, max) = (8894,544, 9846,142, 13542,148), stdev = 2066,198
[info]   CI (99.9%): [1889,950, 17802,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28,92% complete, ETA 01:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208898,052 ops/s
[info] # Warmup Iteration   2: 1097408,204 ops/s
[info] # Warmup Iteration   3: 1080397,856 ops/s
[info] # Warmup Iteration   4: 1068540,929 ops/s
[info] # Warmup Iteration   5: 1075928,672 ops/s
[info] Iteration   1: 1084860,945 ops/s
[info]                  ·gc.alloc.rate:      590,065 MB/sec
[info]                  ·gc.alloc.rate.norm: 856,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1077308,404 ops/s
[info]                  ·gc.alloc.rate:                   585,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 983,856 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1077321,260 ops/s
[info]                  ·gc.alloc.rate:                   585,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 983,858 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1063079,831 ops/s
[info]                  ·gc.alloc.rate:                   578,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 995,082 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1074860,346 ops/s
[info]                  ·gc.alloc.rate:                   584,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 984,183 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1075486,157 ±(99.9%) 30373,954 ops/s [Average]
[info]   (min, avg, max) = (1063079,831, 1075486,157, 1084860,945), stdev = 7888,019
[info]   CI (99.9%): [1045112,204, 1105860,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   584,964 ±(99.9%) 16,509 MB/sec [Average]
[info]   (min, avg, max) = (578,224, 584,964, 590,065), stdev = 4,287
[info]   CI (99.9%): [568,455, 601,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,524 ±(99.9%) 4,466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,524, 2,599), stdev = 1,160
[info]   CI (99.9%): [≈ 0, 4,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,765 ±(99.9%) 6,524 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,765, 3,796), stdev = 1,694
[info]   CI (99.9%): [≈ 0, 7,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   538,259 ±(99.9%) 1158,645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,259, 673,487), stdev = 300,896
[info]   CI (99.9%): [≈ 0, 1696,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   789,396 ±(99.9%) 1699,335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 789,396, 995,082), stdev = 441,312
[info]   CI (99.9%): [≈ 0, 2488,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,12% complete, ETA 01:34:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630198,211 ops/s
[info] # Warmup Iteration   2: 877986,253 ops/s
[info] # Warmup Iteration   3: 876133,819 ops/s
[info] # Warmup Iteration   4: 874736,147 ops/s
[info] # Warmup Iteration   5: 874086,723 ops/s
[info] Iteration   1: 873509,865 ops/s
[info]                  ·gc.alloc.rate:                   688,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1213,938 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 874224,686 ops/s
[info]                  ·gc.alloc.rate:                   688,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1215,435 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 873352,970 ops/s
[info]                  ·gc.alloc.rate:                   688,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1216,583 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 876428,666 ops/s
[info]                  ·gc.alloc.rate:                   690,573 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1213,504 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 878206,858 ops/s
[info]                  ·gc.alloc.rate:                   691,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1211,112 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   875144,609 ±(99.9%) 8112,619 ops/s [Average]
[info]   (min, avg, max) = (873352,970, 875144,609, 878206,858), stdev = 2106,821
[info]   CI (99.9%): [867031,990, 883257,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   689,510 ±(99.9%) 6,538 MB/sec [Average]
[info]   (min, avg, max) = (688,104, 689,510, 691,965), stdev = 1,698
[info]   CI (99.9%): [682,972, 696,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1240,000, 1240,000, 1240,001), stdev = 0,001
[info]   CI (99.9%): [1240,000, 1240,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,037 ±(99.9%) 0,204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,112), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   675,114 ±(99.9%) 3,343 MB/sec [Average]
[info]   (min, avg, max) = (673,704, 675,114, 675,844), stdev = 0,868
[info]   CI (99.9%): [671,771, 678,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1214,115 ±(99.9%) 7,998 B/op [Average]
[info]   (min, avg, max) = (1211,112, 1214,115, 1216,583), stdev = 2,077
[info]   CI (99.9%): [1206,116, 1222,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,32% complete, ETA 01:33:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1210363,477 ops/s
[info] # Warmup Iteration   2: 1246626,349 ops/s
[info] # Warmup Iteration   3: 1253808,119 ops/s
[info] # Warmup Iteration   4: 1269558,818 ops/s
[info] # Warmup Iteration   5: 1273368,271 ops/s
[info] Iteration   1: 1264317,477 ops/s
[info]                  ·gc.alloc.rate:                   687,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 839,945 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1254280,004 ops/s
[info]                  ·gc.alloc.rate:                   682,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 846,739 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1254778,489 ops/s
[info]                  ·gc.alloc.rate:                   682,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 843,841 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1263590,387 ops/s
[info]                  ·gc.alloc.rate:                   687,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837,988 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1270499,246 ops/s
[info]                  ·gc.alloc.rate:                   691,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 831,768 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1261493,120 ±(99.9%) 26580,682 ops/s [Average]
[info]   (min, avg, max) = (1254280,004, 1261493,120, 1270499,246), stdev = 6902,919
[info]   CI (99.9%): [1234912,438, 1288073,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   686,113 ±(99.9%) 14,418 MB/sec [Average]
[info]   (min, avg, max) = (682,261, 686,113, 691,021), stdev = 3,744
[info]   CI (99.9%): [671,695, 700,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,674 ±(99.9%) 5,584 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,674, 3,268), stdev = 1,450
[info]   CI (99.9%): [≈ 0, 6,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,840 ±(99.9%) 6,951 B/op [Average]
[info]   (min, avg, max) = (0,026, 0,840, 4,069), stdev = 1,805
[info]   CI (99.9%): [≈ 0, 7,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673,314 ±(99.9%) 5,596 MB/sec [Average]
[info]   (min, avg, max) = (671,458, 673,314, 674,879), stdev = 1,453
[info]   CI (99.9%): [667,718, 678,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   840,056 ±(99.9%) 22,118 B/op [Average]
[info]   (min, avg, max) = (831,768, 840,056, 846,739), stdev = 5,744
[info]   CI (99.9%): [817,938, 862,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29,52% complete, ETA 01:33:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1170387,117 ops/s
[info] # Warmup Iteration   2: 1216549,490 ops/s
[info] # Warmup Iteration   3: 1219619,813 ops/s
[info] # Warmup Iteration   4: 1218584,601 ops/s
[info] # Warmup Iteration   5: 1218235,420 ops/s
[info] Iteration   1: 1219875,088 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1220031,991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1219955,871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1215723,901 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1218304,606 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1218778,291 ±(99.9%) 7130,218 ops/s [Average]
[info]   (min, avg, max) = (1215723,901, 1218778,291, 1220031,991), stdev = 1851,695
[info]   CI (99.9%): [1211648,074, 1225908,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29,72% complete, ETA 01:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26988,604 ops/s
[info] # Warmup Iteration   2: 37331,159 ops/s
[info] # Warmup Iteration   3: 37721,590 ops/s
[info] # Warmup Iteration   4: 37743,002 ops/s
[info] # Warmup Iteration   5: 37866,708 ops/s
[info] Iteration   1: 37673,689 ops/s
[info]                  ·gc.alloc.rate:                   2037,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010,667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83991,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37836,701 ops/s
[info]                  ·gc.alloc.rate:                   2046,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2686,734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111751,678 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 37097,772 ops/s
[info]                  ·gc.alloc.rate:                   2006,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57111,305 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37512,977 ops/s
[info]                  ·gc.alloc.rate:                   2029,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696,933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113145,833 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37819,460 ops/s
[info]                  ·gc.alloc.rate:                   2045,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84390,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   37588,120 ±(99.9%) 1169,101 ops/s [Average]
[info]   (min, avg, max) = (37097,772, 37588,120, 37836,701), stdev = 303,612
[info]   CI (99.9%): [36419,019, 38757,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2033,178 ±(99.9%) 63,331 MB/sec [Average]
[info]   (min, avg, max) = (2006,604, 2033,178, 2046,648), stdev = 16,447
[info]   CI (99.9%): [1969,847, 2096,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85128,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (85128,011, 85128,011, 85128,012), stdev = 0,001
[info]   CI (99.9%): [85128,009, 85128,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,911 ±(99.9%) 4,958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,911, 3,465), stdev = 1,287
[info]   CI (99.9%): [≈ 0, 6,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2153,692 ±(99.9%) 2167,638 MB/sec [Average]
[info]   (min, avg, max) = (1346,205, 2153,692, 2696,933), stdev = 562,929
[info]   CI (99.9%): [≈ 0, 4321,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   90078,017 ±(99.9%) 89441,056 B/op [Average]
[info]   (min, avg, max) = (57111,305, 90078,017, 113145,833), stdev = 23227,558
[info]   CI (99.9%): [636,961, 179519,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 0,837
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29,92% complete, ETA 01:33:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138535,110 ops/s
[info] # Warmup Iteration   2: 147148,879 ops/s
[info] # Warmup Iteration   3: 147001,270 ops/s
[info] # Warmup Iteration   4: 147316,134 ops/s
[info] # Warmup Iteration   5: 148142,334 ops/s
[info] Iteration   1: 148146,848 ops/s
[info]                  ·gc.alloc.rate:                   1289,806 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7133,170 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 146199,047 ops/s
[info]                  ·gc.alloc.rate:                   1272,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14455,798 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 148067,956 ops/s
[info]                  ·gc.alloc.rate:                   1289,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14280,356 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 148439,778 ops/s
[info]                  ·gc.alloc.rate:                   1292,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14251,447 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 148058,065 ops/s
[info]                  ·gc.alloc.rate:                   1289,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14302,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   147782,339 ±(99.9%) 3459,964 ops/s [Average]
[info]   (min, avg, max) = (146199,047, 147782,339, 148439,778), stdev = 898,542
[info]   CI (99.9%): [144322,375, 151242,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1286,767 ±(99.9%) 30,152 MB/sec [Average]
[info]   (min, avg, max) = (1272,979, 1286,767, 1292,569), stdev = 7,830
[info]   CI (99.9%): [1256,616, 1316,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   13704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13704,003, 13704,003, 13704,003), stdev = 0,001
[info]   CI (99.9%): [13704,002, 13704,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,399 ±(99.9%) 0,934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,399, 0,664), stdev = 0,243
[info]   CI (99.9%): [≈ 0, 1,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1209,473 ±(99.9%) 1158,322 MB/sec [Average]
[info]   (min, avg, max) = (671,366, 1209,473, 1345,532), stdev = 300,812
[info]   CI (99.9%): [51,151, 2367,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   12884,589 ±(99.9%) 12384,106 B/op [Average]
[info]   (min, avg, max) = (7133,170, 12884,589, 14455,798), stdev = 3216,113
[info]   CI (99.9%): [500,483, 25268,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30,12% complete, ETA 01:32:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99289,650 ops/s
[info] # Warmup Iteration   2: 134033,984 ops/s
[info] # Warmup Iteration   3: 134247,773 ops/s
[info] # Warmup Iteration   4: 135241,432 ops/s
[info] # Warmup Iteration   5: 135278,549 ops/s
[info] Iteration   1: 133333,205 ops/s
[info]                  ·gc.alloc.rate:                   1645,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15840,574 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 134981,308 ops/s
[info]                  ·gc.alloc.rate:                   1666,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23491,812 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 135011,823 ops/s
[info]                  ·gc.alloc.rate:                   1666,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15677,159 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 134981,412 ops/s
[info]                  ·gc.alloc.rate:                   1666,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23555,739 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 135059,534 ops/s
[info]                  ·gc.alloc.rate:                   1666,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15718,161 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   134673,456 ±(99.9%) 2887,618 ops/s [Average]
[info]   (min, avg, max) = (133333,205, 134673,456, 135059,534), stdev = 749,905
[info]   CI (99.9%): [131785,838, 137561,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1662,200 ±(99.9%) 35,718 MB/sec [Average]
[info]   (min, avg, max) = (1645,617, 1662,200, 1666,807), stdev = 9,276
[info]   CI (99.9%): [1626,483, 1697,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19424,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19424,003, 19424,003, 19424,003), stdev = 0,001
[info]   CI (99.9%): [19424,003, 19424,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,487 ±(99.9%) 0,943 B/op [Average]
[info]   (min, avg, max) = (0,243, 0,487, 0,737), stdev = 0,245
[info]   CI (99.9%): [≈ 0, 1,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614,252 ±(99.9%) 1418,296 MB/sec [Average]
[info]   (min, avg, max) = (1342,026, 1614,252, 2020,395), stdev = 368,327
[info]   CI (99.9%): [195,956, 3032,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18856,689 ±(99.9%) 16407,331 B/op [Average]
[info]   (min, avg, max) = (15677,159, 18856,689, 23555,739), stdev = 4260,932
[info]   CI (99.9%): [2449,358, 35264,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,32% complete, ETA 01:32:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137196,709 ops/s
[info] # Warmup Iteration   2: 210376,358 ops/s
[info] # Warmup Iteration   3: 211385,130 ops/s
[info] # Warmup Iteration   4: 212036,493 ops/s
[info] # Warmup Iteration   5: 211999,541 ops/s
[info] Iteration   1: 212058,608 ops/s
[info]                  ·gc.alloc.rate:                   1127,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5012,876 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 212187,003 ops/s
[info]                  ·gc.alloc.rate:                   1128,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10025,591 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 211566,678 ops/s
[info]                  ·gc.alloc.rate:                   1124,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10063,975 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 211405,488 ops/s
[info]                  ·gc.alloc.rate:                   1124,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5038,417 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 211044,614 ops/s
[info]                  ·gc.alloc.rate:                   1122,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10098,653 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   211652,478 ±(99.9%) 1814,837 ops/s [Average]
[info]   (min, avg, max) = (211044,614, 211652,478, 212187,003), stdev = 471,308
[info]   CI (99.9%): [209837,641, 213467,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1125,363 ±(99.9%) 9,618 MB/sec [Average]
[info]   (min, avg, max) = (1122,168, 1125,363, 1128,348), stdev = 2,498
[info]   CI (99.9%): [1115,745, 1134,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8368,002, 8368,002, 8368,002), stdev = 0,001
[info]   CI (99.9%): [8368,002, 8368,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,310 ±(99.9%) 1,115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,310, 0,619), stdev = 0,290
[info]   CI (99.9%): [≈ 0, 1,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082,225 ±(99.9%) 1427,680 MB/sec [Average]
[info]   (min, avg, max) = (675,340, 1082,225, 1354,253), stdev = 370,764
[info]   CI (99.9%): [≈ 0, 2509,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8047,902 ±(99.9%) 10624,178 B/op [Average]
[info]   (min, avg, max) = (5012,876, 8047,902, 10098,653), stdev = 2759,065
[info]   CI (99.9%): [≈ 0, 18672,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,52% complete, ETA 01:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279655,693 ops/s
[info] # Warmup Iteration   2: 295017,717 ops/s
[info] # Warmup Iteration   3: 297607,445 ops/s
[info] # Warmup Iteration   4: 292084,245 ops/s
[info] # Warmup Iteration   5: 296961,144 ops/s
[info] Iteration   1: 296213,474 ops/s
[info]                  ·gc.alloc.rate:                   770,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3585,196 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 297357,157 ops/s
[info]                  ·gc.alloc.rate:                   773,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3561,068 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 297243,780 ops/s
[info]                  ·gc.alloc.rate:                   773,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3562,266 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 295951,699 ops/s
[info]                  ·gc.alloc.rate:                   770,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3574,248 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 296461,469 ops/s
[info]                  ·gc.alloc.rate:                   771,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3568,161 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   296645,516 ±(99.9%) 2409,552 ops/s [Average]
[info]   (min, avg, max) = (295951,699, 296645,516, 297357,157), stdev = 625,753
[info]   CI (99.9%): [294235,964, 299055,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   771,996 ±(99.9%) 6,442 MB/sec [Average]
[info]   (min, avg, max) = (770,167, 771,996, 773,910), stdev = 1,673
[info]   CI (99.9%): [765,553, 778,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,002), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,111 ±(99.9%) 0,426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,111, 0,221), stdev = 0,111
[info]   CI (99.9%): [≈ 0, 0,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672,890 ±(99.9%) 4,063 MB/sec [Average]
[info]   (min, avg, max) = (672,062, 672,890, 674,663), stdev = 1,055
[info]   CI (99.9%): [668,827, 676,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3570,188 ±(99.9%) 38,107 B/op [Average]
[info]   (min, avg, max) = (3561,068, 3570,188, 3585,196), stdev = 9,896
[info]   CI (99.9%): [3532,081, 3608,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30,72% complete, ETA 01:32:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44319,376 ops/s
[info] # Warmup Iteration   2: 76348,110 ops/s
[info] # Warmup Iteration   3: 78347,902 ops/s
[info] # Warmup Iteration   4: 78247,908 ops/s
[info] # Warmup Iteration   5: 78179,414 ops/s
[info] Iteration   1: 78069,356 ops/s
[info]                  ·gc.alloc.rate:                   3296,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395,905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68459,249 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 78320,698 ops/s
[info]                  ·gc.alloc.rate:                   3307,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68324,570 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 78509,236 ops/s
[info]                  ·gc.alloc.rate:                   3314,942 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402,760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68208,316 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 77726,297 ops/s
[info]                  ·gc.alloc.rate:                   3281,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55136,391 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 78054,538 ops/s
[info]                  ·gc.alloc.rate:                   3295,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405,136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68657,801 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   78136,025 ±(99.9%) 1142,857 ops/s [Average]
[info]   (min, avg, max) = (77726,297, 78136,025, 78509,236), stdev = 296,796
[info]   CI (99.9%): [76993,168, 79278,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3299,112 ±(99.9%) 48,306 MB/sec [Average]
[info]   (min, avg, max) = (3281,936, 3299,112, 3314,942), stdev = 12,545
[info]   CI (99.9%): [3250,806, 3347,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66448,005, 66448,006, 66448,006), stdev = 0,001
[info]   CI (99.9%): [66448,004, 66448,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,092 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,167), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,843 ±(99.9%) 4,204 B/op [Average]
[info]   (min, avg, max) = (0,839, 1,843, 3,358), stdev = 1,092
[info]   CI (99.9%): [≈ 0, 6,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3265,488 ±(99.9%) 1167,296 MB/sec [Average]
[info]   (min, avg, max) = (2723,243, 3265,488, 3405,136), stdev = 303,143
[info]   CI (99.9%): [2098,192, 4432,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65757,265 ±(99.9%) 22871,294 B/op [Average]
[info]   (min, avg, max) = (55136,391, 65757,265, 68657,801), stdev = 5939,602
[info]   CI (99.9%): [42885,971, 88628,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30,92% complete, ETA 01:31:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145846,354 ops/s
[info] # Warmup Iteration   2: 161815,757 ops/s
[info] # Warmup Iteration   3: 148206,725 ops/s
[info] # Warmup Iteration   4: 165297,533 ops/s
[info] # Warmup Iteration   5: 149076,314 ops/s
[info] Iteration   1: 164270,192 ops/s
[info]                  ·gc.alloc.rate:                   1852,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19304,622 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 165323,905 ops/s
[info]                  ·gc.alloc.rate:                   1865,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19208,800 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 165080,951 ops/s
[info]                  ·gc.alloc.rate:                   1862,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12840,561 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 165299,208 ops/s
[info]                  ·gc.alloc.rate:                   1864,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19270,328 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 163585,446 ops/s
[info]                  ·gc.alloc.rate:                   1845,183 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19498,182 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   164711,941 ±(99.9%) 2932,362 ops/s [Average]
[info]   (min, avg, max) = (163585,446, 164711,941, 165323,905), stdev = 761,525
[info]   CI (99.9%): [161779,578, 167644,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1857,904 ±(99.9%) 33,417 MB/sec [Average]
[info]   (min, avg, max) = (1845,183, 1857,904, 1865,048), stdev = 8,678
[info]   CI (99.9%): [1824,487, 1891,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17752,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17752,002, 17752,003, 17752,003), stdev = 0,001
[info]   CI (99.9%): [17752,002, 17752,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,477 ±(99.9%) 0,868 B/op [Average]
[info]   (min, avg, max) = (0,198, 0,477, 0,793), stdev = 0,225
[info]   CI (99.9%): [≈ 0, 1,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1886,080 ±(99.9%) 1160,757 MB/sec [Average]
[info]   (min, avg, max) = (1346,905, 1886,080, 2026,685), stdev = 301,445
[info]   CI (99.9%): [725,323, 3046,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   18024,499 ±(99.9%) 11166,589 B/op [Average]
[info]   (min, avg, max) = (12840,561, 18024,499, 19498,182), stdev = 2899,928
[info]   CI (99.9%): [6857,910, 29191,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31,12% complete, ETA 01:31:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161100,779 ops/s
[info] # Warmup Iteration   2: 197223,255 ops/s
[info] # Warmup Iteration   3: 186918,896 ops/s
[info] # Warmup Iteration   4: 193136,645 ops/s
[info] # Warmup Iteration   5: 194784,319 ops/s
[info] Iteration   1: 194937,800 ops/s
[info]                  ·gc.alloc.rate:                   677,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5442,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 195379,112 ops/s
[info]                  ·gc.alloc.rate:                   679,398 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5430,506 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 195326,367 ops/s
[info]                  ·gc.alloc.rate:                   679,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5415,378 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 194876,530 ops/s
[info]                  ·gc.alloc.rate:                   677,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5427,908 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 194717,746 ops/s
[info]                  ·gc.alloc.rate:                   677,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5421,682 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   195047,511 ±(99.9%) 1118,901 ops/s [Average]
[info]   (min, avg, max) = (194717,746, 195047,511, 195379,112), stdev = 290,575
[info]   CI (99.9%): [193928,610, 196166,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   678,180 ±(99.9%) 4,014 MB/sec [Average]
[info]   (min, avg, max) = (677,037, 678,180, 679,398), stdev = 1,042
[info]   CI (99.9%): [674,167, 682,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,721 ±(99.9%) 6,076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,721, 3,544), stdev = 1,578
[info]   CI (99.9%): [≈ 0, 6,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5,823 ±(99.9%) 49,058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,823, 28,612), stdev = 12,740
[info]   CI (99.9%): [≈ 0, 54,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   672,672 ±(99.9%) 5,587 MB/sec [Average]
[info]   (min, avg, max) = (670,811, 672,672, 674,246), stdev = 1,451
[info]   CI (99.9%): [667,086, 678,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5427,563 ±(99.9%) 38,999 B/op [Average]
[info]   (min, avg, max) = (5415,378, 5427,563, 5442,343), stdev = 10,128
[info]   CI (99.9%): [5388,565, 5466,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,33% complete, ETA 01:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 394823,341 ops/s
[info] # Warmup Iteration   2: 572457,230 ops/s
[info] # Warmup Iteration   3: 569077,340 ops/s
[info] # Warmup Iteration   4: 573257,909 ops/s
[info] # Warmup Iteration   5: 569431,671 ops/s
[info] Iteration   1: 571588,731 ops/s
[info]                  ·gc.alloc.rate:                   578,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1855,210 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 571945,093 ops/s
[info]                  ·gc.alloc.rate:                   578,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1854,175 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 571097,106 ops/s
[info]                  ·gc.alloc.rate:      577,686 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 571924,519 ops/s
[info]                  ·gc.alloc.rate:                   578,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1856,782 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 570940,582 ops/s
[info]                  ·gc.alloc.rate:                   577,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1860,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   571499,206 ±(99.9%) 1786,992 ops/s [Average]
[info]   (min, avg, max) = (570940,582, 571499,206, 571945,093), stdev = 464,076
[info]   CI (99.9%): [569712,215, 573286,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   578,096 ±(99.9%) 1,901 MB/sec [Average]
[info]   (min, avg, max) = (577,540, 578,096, 578,637), stdev = 0,494
[info]   CI (99.9%): [576,195, 579,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,208), stdev = 0,091
[info]   CI (99.9%): [≈ 0, 0,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,126 ±(99.9%) 0,967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,126, 0,573), stdev = 0,251
[info]   CI (99.9%): [≈ 0, 1,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539,423 ±(99.9%) 1161,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,423, 674,774), stdev = 301,547
[info]   CI (99.9%): [≈ 0, 1700,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1485,239 ±(99.9%) 3197,100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1485,239, 1860,027), stdev = 830,277
[info]   CI (99.9%): [≈ 0, 4682,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,53% complete, ETA 01:31:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562431,193 ops/s
[info] # Warmup Iteration   2: 576720,096 ops/s
[info] # Warmup Iteration   3: 593067,380 ops/s
[info] # Warmup Iteration   4: 593300,065 ops/s
[info] # Warmup Iteration   5: 594267,346 ops/s
[info] Iteration   1: 593918,345 ops/s
[info]                  ·gc.alloc.rate:                   455,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1355,611 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 594540,567 ops/s
[info]                  ·gc.alloc.rate:                   456,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1354,310 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 595693,210 ops/s
[info]                  ·gc.alloc.rate:      457,237 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 586436,065 ops/s
[info]                  ·gc.alloc.rate:                   450,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1810,870 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 585761,475 ops/s
[info]                  ·gc.alloc.rate:                   449,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1812,997 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   591269,933 ±(99.9%) 18364,978 ops/s [Average]
[info]   (min, avg, max) = (585761,475, 591269,933, 595693,210), stdev = 4769,326
[info]   CI (99.9%): [572904,955, 609634,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   453,846 ±(99.9%) 14,098 MB/sec [Average]
[info]   (min, avg, max) = (449,616, 453,846, 457,237), stdev = 3,661
[info]   CI (99.9%): [439,748, 467,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,679 ±(99.9%) 5,639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,679, 3,298), stdev = 1,464
[info]   CI (99.9%): [≈ 0, 6,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,821 ±(99.9%) 15,133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,821, 8,850), stdev = 3,930
[info]   CI (99.9%): [≈ 0, 16,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474,560 ±(99.9%) 1068,748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,560, 674,795), stdev = 277,551
[info]   CI (99.9%): [≈ 0, 1543,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1266,758 ±(99.9%) 2865,220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1266,758, 1812,997), stdev = 744,088
[info]   CI (99.9%): [≈ 0, 4131,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31,73% complete, ETA 01:30:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597805,539 ops/s
[info] # Warmup Iteration   2: 621303,174 ops/s
[info] # Warmup Iteration   3: 621540,418 ops/s
[info] # Warmup Iteration   4: 615220,946 ops/s
[info] # Warmup Iteration   5: 607102,037 ops/s
[info] Iteration   1: 622181,975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 620108,253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 621099,057 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 620500,893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 620313,241 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   620840,684 ±(99.9%) 3219,336 ops/s [Average]
[info]   (min, avg, max) = (620108,253, 620840,684, 622181,975), stdev = 836,051
[info]   CI (99.9%): [617621,348, 624060,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31,93% complete, ETA 01:30:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216527,726 ops/s
[info] # Warmup Iteration   2: 334250,494 ops/s
[info] # Warmup Iteration   3: 336261,056 ops/s
[info] # Warmup Iteration   4: 334649,487 ops/s
[info] # Warmup Iteration   5: 337456,478 ops/s
[info] Iteration   1: 336056,051 ops/s
[info]                  ·gc.alloc.rate:                   925,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6320,162 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 338080,064 ops/s
[info]                  ·gc.alloc.rate:                   931,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3144,249 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 336617,485 ops/s
[info]                  ·gc.alloc.rate:                   927,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3157,846 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 336116,635 ops/s
[info]                  ·gc.alloc.rate:                   926,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6331,416 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 335257,872 ops/s
[info]                  ·gc.alloc.rate:                   923,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3175,428 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   336425,621 ±(99.9%) 4024,653 ops/s [Average]
[info]   (min, avg, max) = (335257,872, 336425,621, 338080,064), stdev = 1045,190
[info]   CI (99.9%): [332400,968, 340450,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   926,853 ±(99.9%) 11,063 MB/sec [Average]
[info]   (min, avg, max) = (923,579, 926,853, 931,362), stdev = 2,873
[info]   CI (99.9%): [915,790, 937,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4336,001, 4336,001, 4336,001), stdev = 0,001
[info]   CI (99.9%): [4336,001, 4336,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,117 ±(99.9%) 0,671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,390), stdev = 0,174
[info]   CI (99.9%): [≈ 0, 0,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   945,784 ±(99.9%) 1423,948 MB/sec [Average]
[info]   (min, avg, max) = (675,377, 945,784, 1352,236), stdev = 369,795
[info]   CI (99.9%): [≈ 0, 2369,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4425,820 ±(99.9%) 6678,811 B/op [Average]
[info]   (min, avg, max) = (3144,249, 4425,820, 6331,416), stdev = 1734,466
[info]   CI (99.9%): [≈ 0, 11104,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32,13% complete, ETA 01:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45055,096 ops/s
[info] # Warmup Iteration   2: 48195,742 ops/s
[info] # Warmup Iteration   3: 47552,358 ops/s
[info] # Warmup Iteration   4: 48298,487 ops/s
[info] # Warmup Iteration   5: 48030,622 ops/s
[info] Iteration   1: 48225,767 ops/s
[info]                  ·gc.alloc.rate:      223,544 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47989,270 ops/s
[info]                  ·gc.alloc.rate:                   222,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16776,866 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 48068,208 ops/s
[info]                  ·gc.alloc.rate:      222,829 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47985,147 ops/s
[info]                  ·gc.alloc.rate:                   222,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16777,915 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 48067,415 ops/s
[info]                  ·gc.alloc.rate:      222,829 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   48067,161 ±(99.9%) 375,069 ops/s [Average]
[info]   (min, avg, max) = (47985,147, 48067,161, 48225,767), stdev = 97,404
[info]   CI (99.9%): [47692,092, 48442,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   222,824 ±(99.9%) 1,705 MB/sec [Average]
[info]   (min, avg, max) = (222,449, 222,824, 223,544), stdev = 0,443
[info]   CI (99.9%): [221,119, 224,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7296,008, 7296,009, 7296,009), stdev = 0,001
[info]   CI (99.9%): [7296,007, 7296,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,002 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,012), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   204,621 ±(99.9%) 1078,907 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,621, 511,560), stdev = 280,189
[info]   CI (99.9%): [≈ 0, 1283,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6710,956 ±(99.9%) 35384,936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6710,956, 16777,915), stdev = 9189,355
[info]   CI (99.9%): [≈ 0, 42095,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32,33% complete, ETA 01:29:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8695,118 ops/s
[info] # Warmup Iteration   2: 11465,532 ops/s
[info] # Warmup Iteration   3: 11380,796 ops/s
[info] # Warmup Iteration   4: 11530,413 ops/s
[info] # Warmup Iteration   5: 10723,059 ops/s
[info] Iteration   1: 11474,685 ops/s
[info]                  ·gc.alloc.rate:                   1467,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013,852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276234,326 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11523,294 ops/s
[info]                  ·gc.alloc.rate:                   1474,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183405,276 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11501,298 ops/s
[info]                  ·gc.alloc.rate:                   1471,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183922,327 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11508,396 ops/s
[info]                  ·gc.alloc.rate:                   1471,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184008,646 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11391,896 ops/s
[info]                  ·gc.alloc.rate:                   1456,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186065,877 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11479,914 ±(99.9%) 201,238 ops/s [Average]
[info]   (min, avg, max) = (11391,896, 11479,914, 11523,294), stdev = 52,261
[info]   CI (99.9%): [11278,676, 11681,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1468,254 ±(99.9%) 26,002 MB/sec [Average]
[info]   (min, avg, max) = (1456,955, 1468,254, 1474,024), stdev = 6,753
[info]   CI (99.9%): [1442,253, 1494,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280,047 ±(99.9%) 0,088 B/op [Average]
[info]   (min, avg, max) = (201280,035, 201280,047, 201280,088), stdev = 0,023
[info]   CI (99.9%): [201279,959, 201280,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5,125 ±(99.9%) 16,254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,125, 11,387), stdev = 4,221
[info]   CI (99.9%): [≈ 0, 21,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1478,707 ±(99.9%) 1151,952 MB/sec [Average]
[info]   (min, avg, max) = (1343,123, 1478,707, 2013,852), stdev = 299,158
[info]   CI (99.9%): [326,755, 2630,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   202727,290 ±(99.9%) 158277,877 B/op [Average]
[info]   (min, avg, max) = (183405,276, 202727,290, 276234,326), stdev = 41104,262
[info]   CI (99.9%): [44449,413, 361005,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,53% complete, ETA 01:29:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7894,839 ops/s
[info] # Warmup Iteration   2: 12834,933 ops/s
[info] # Warmup Iteration   3: 12909,025 ops/s
[info] # Warmup Iteration   4: 12355,402 ops/s
[info] # Warmup Iteration   5: 12862,880 ops/s
[info] Iteration   1: 12800,189 ops/s
[info]                  ·gc.alloc.rate:                   1517,429 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166245,648 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12874,391 ops/s
[info]                  ·gc.alloc.rate:                   1526,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248280,518 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 12968,696 ops/s
[info]                  ·gc.alloc.rate:                   1537,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164456,358 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 12966,228 ops/s
[info]                  ·gc.alloc.rate:                   1537,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164602,987 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12810,410 ops/s
[info]                  ·gc.alloc.rate:                   1518,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              186577,116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166742,652 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12883,983 ±(99.9%) 313,225 ops/s [Average]
[info]   (min, avg, max) = (12800,189, 12883,983, 12968,696), stdev = 81,343
[info]   CI (99.9%): [12570,758, 13197,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1527,453 ±(99.9%) 37,083 MB/sec [Average]
[info]   (min, avg, max) = (1517,429, 1527,453, 1537,435), stdev = 9,630
[info]   CI (99.9%): [1490,370, 1564,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576,250 ±(99.9%) 1,865 B/op [Average]
[info]   (min, avg, max) = (186576,031, 186576,250, 186577,116), stdev = 0,484
[info]   CI (99.9%): [186574,386, 186578,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4,577 ±(99.9%) 12,723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,577, 7,634), stdev = 3,304
[info]   CI (99.9%): [≈ 0, 17,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1490,395 ±(99.9%) 1164,265 MB/sec [Average]
[info]   (min, avg, max) = (1352,082, 1490,395, 2031,254), stdev = 302,356
[info]   CI (99.9%): [326,130, 2654,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   182065,632 ±(99.9%) 142584,452 B/op [Average]
[info]   (min, avg, max) = (164456,358, 182065,632, 248280,518), stdev = 37028,729
[info]   CI (99.9%): [39481,181, 324650,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,73% complete, ETA 01:29:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214963,851 ops/s
[info] # Warmup Iteration   2: 226476,490 ops/s
[info] # Warmup Iteration   3: 226783,694 ops/s
[info] # Warmup Iteration   4: 228161,720 ops/s
[info] # Warmup Iteration   5: 228395,283 ops/s
[info] Iteration   1: 227233,006 ops/s
[info]                  ·gc.alloc.rate:                   1478,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9319,158 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 228342,787 ops/s
[info]                  ·gc.alloc.rate:                   1485,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9274,720 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 227174,162 ops/s
[info]                  ·gc.alloc.rate:                   1478,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13998,826 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 227168,092 ops/s
[info]                  ·gc.alloc.rate:                   1478,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9340,283 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 225483,328 ops/s
[info]                  ·gc.alloc.rate:                   1467,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9419,531 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   227080,275 ±(99.9%) 3938,227 ops/s [Average]
[info]   (min, avg, max) = (225483,328, 227080,275, 228342,787), stdev = 1022,745
[info]   CI (99.9%): [223142,048, 231018,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1477,494 ±(99.9%) 25,779 MB/sec [Average]
[info]   (min, avg, max) = (1467,096, 1477,494, 1485,843), stdev = 6,695
[info]   CI (99.9%): [1451,716, 1503,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10240,002, 10240,002, 10240,002), stdev = 0,001
[info]   CI (99.9%): [10240,002, 10240,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,346 ±(99.9%) 0,842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,346, 0,577), stdev = 0,219
[info]   CI (99.9%): [≈ 0, 1,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1481,925 ±(99.9%) 1159,764 MB/sec [Average]
[info]   (min, avg, max) = (1345,414, 1481,925, 2020,696), stdev = 301,187
[info]   CI (99.9%): [322,161, 2641,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10270,504 ±(99.9%) 8028,038 B/op [Average]
[info]   (min, avg, max) = (9274,720, 10270,504, 13998,826), stdev = 2084,856
[info]   CI (99.9%): [2242,466, 18298,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32,93% complete, ETA 01:29:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5936,324 ops/s
[info] # Warmup Iteration   2: 9360,679 ops/s
[info] # Warmup Iteration   3: 9504,663 ops/s
[info] # Warmup Iteration   4: 9568,311 ops/s
[info] # Warmup Iteration   5: 9568,078 ops/s
[info] Iteration   1: 9505,258 ops/s
[info]                  ·gc.alloc.rate:                   1770,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336254,546 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 9510,777 ops/s
[info]                  ·gc.alloc.rate:                   1771,361 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096,278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224309,068 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9532,449 ops/s
[info]                  ·gc.alloc.rate:                   1775,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335962,211 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9520,271 ops/s
[info]                  ·gc.alloc.rate:                   1773,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224403,853 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9498,619 ops/s
[info]                  ·gc.alloc.rate:                   1768,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337605,935 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9513,475 ±(99.9%) 51,001 ops/s [Average]
[info]   (min, avg, max) = (9498,619, 9513,475, 9532,449), stdev = 13,245
[info]   CI (99.9%): [9462,473, 9564,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1771,788 ±(99.9%) 9,415 MB/sec [Average]
[info]   (min, avg, max) = (1768,969, 1771,788, 1775,211), stdev = 2,445
[info]   CI (99.9%): [1762,373, 1781,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096,091 ±(99.9%) 0,404 B/op [Average]
[info]   (min, avg, max) = (293096,043, 293096,091, 293096,278), stdev = 0,105
[info]   CI (99.9%): [293095,687, 293096,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11,016 ±(99.9%) 14,493 B/op [Average]
[info]   (min, avg, max) = (6,889, 11,016, 13,785), stdev = 3,764
[info]   CI (99.9%): [≈ 0, 25,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1763,319 ±(99.9%) 1429,710 MB/sec [Average]
[info]   (min, avg, max) = (1355,638, 1763,319, 2037,607), stdev = 371,291
[info]   CI (99.9%): [333,609, 3193,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   291707,122 ±(99.9%) 236759,142 B/op [Average]
[info]   (min, avg, max) = (224309,068, 291707,122, 337605,935), stdev = 61485,597
[info]   CI (99.9%): [54947,981, 528466,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33,13% complete, ETA 01:28:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9358,469 ops/s
[info] # Warmup Iteration   2: 11750,165 ops/s
[info] # Warmup Iteration   3: 11724,915 ops/s
[info] # Warmup Iteration   4: 11816,005 ops/s
[info] # Warmup Iteration   5: 11835,541 ops/s
[info] Iteration   1: 11823,788 ops/s
[info]                  ·gc.alloc.rate:                   1396,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              185957,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179018,683 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11858,502 ops/s
[info]                  ·gc.alloc.rate:                   1401,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178505,476 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11863,070 ops/s
[info]                  ·gc.alloc.rate:                   1401,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178547,767 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 11862,703 ops/s
[info]                  ·gc.alloc.rate:                   1401,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178680,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11680,814 ops/s
[info]                  ·gc.alloc.rate:                   1380,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              185955,664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181643,087 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   11817,775 ±(99.9%) 301,505 ops/s [Average]
[info]   (min, avg, max) = (11680,814, 11817,775, 11863,070), stdev = 78,300
[info]   CI (99.9%): [11516,270, 12119,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1396,364 ±(99.9%) 35,602 MB/sec [Average]
[info]   (min, avg, max) = (1380,215, 1396,364, 1401,655), stdev = 9,246
[info]   CI (99.9%): [1360,763, 1431,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   185963,553 ±(99.9%) 23,858 B/op [Average]
[info]   (min, avg, max) = (185955,664, 185963,553, 185968,046), stdev = 6,196
[info]   CI (99.9%): [185939,696, 185987,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3,340 ±(99.9%) 17,614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,340, 8,414), stdev = 4,574
[info]   CI (99.9%): [≈ 0, 20,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1346,119 ±(99.9%) 5,292 MB/sec [Average]
[info]   (min, avg, max) = (1344,823, 1346,119, 1348,206), stdev = 1,374
[info]   CI (99.9%): [1340,827, 1351,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   179279,066 ±(99.9%) 5147,538 B/op [Average]
[info]   (min, avg, max) = (178505,476, 179279,066, 181643,087), stdev = 1336,799
[info]   CI (99.9%): [174131,528, 184426,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33,33% complete, ETA 01:28:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18180,037 ops/s
[info] # Warmup Iteration   2: 24141,941 ops/s
[info] # Warmup Iteration   3: 23911,977 ops/s
[info] # Warmup Iteration   4: 23910,824 ops/s
[info] # Warmup Iteration   5: 24115,239 ops/s
[info] Iteration   1: 24324,713 ops/s
[info]                  ·gc.alloc.rate:                   1021,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86971,902 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 24218,180 ops/s
[info]                  ·gc.alloc.rate:                   1016,893 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43591,464 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 24100,106 ops/s
[info]                  ·gc.alloc.rate:                   1011,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87606,076 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 24177,363 ops/s
[info]                  ·gc.alloc.rate:                   1015,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43663,567 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 24155,245 ops/s
[info]                  ·gc.alloc.rate:                   1014,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87450,049 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   24195,121 ±(99.9%) 323,654 ops/s [Average]
[info]   (min, avg, max) = (24100,106, 24195,121, 24324,713), stdev = 84,052
[info]   CI (99.9%): [23871,467, 24518,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1015,882 ±(99.9%) 13,257 MB/sec [Average]
[info]   (min, avg, max) = (1011,937, 1015,882, 1021,144), stdev = 3,443
[info]   CI (99.9%): [1002,625, 1029,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080,018 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (66080,017, 66080,018, 66080,020), stdev = 0,001
[info]   CI (99.9%): [66080,014, 66080,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2,169 ±(99.9%) 10,850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,169, 6,797), stdev = 2,818
[info]   CI (99.9%): [≈ 0, 13,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1073,890 ±(99.9%) 1416,885 MB/sec [Average]
[info]   (min, avg, max) = (670,801, 1073,890, 1343,989), stdev = 367,961
[info]   CI (99.9%): [≈ 0, 2490,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69856,611 ±(99.9%) 92203,411 B/op [Average]
[info]   (min, avg, max) = (43591,464, 69856,611, 87606,076), stdev = 23944,933
[info]   CI (99.9%): [≈ 0, 162060,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,53% complete, ETA 01:28:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19383,549 ops/s
[info] # Warmup Iteration   2: 28542,880 ops/s
[info] # Warmup Iteration   3: 29031,550 ops/s
[info] # Warmup Iteration   4: 29099,060 ops/s
[info] # Warmup Iteration   5: 29081,798 ops/s
[info] Iteration   1: 28934,677 ops/s
[info]                  ·gc.alloc.rate:                   1113,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36755,592 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29081,787 ops/s
[info]                  ·gc.alloc.rate:                   1118,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73155,208 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29095,841 ops/s
[info]                  ·gc.alloc.rate:                   1119,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36570,272 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 28929,272 ops/s
[info]                  ·gc.alloc.rate:                   1113,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73635,141 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 28977,147 ops/s
[info]                  ·gc.alloc.rate:                   1114,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73580,473 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   29003,745 ±(99.9%) 308,029 ops/s [Average]
[info]   (min, avg, max) = (28929,272, 29003,745, 29095,841), stdev = 79,994
[info]   CI (99.9%): [28695,716, 29311,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1115,817 ±(99.9%) 11,735 MB/sec [Average]
[info]   (min, avg, max) = (1113,038, 1115,817, 1119,420), stdev = 3,047
[info]   CI (99.9%): [1104,082, 1127,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (60552,014, 60552,015, 60552,015), stdev = 0,001
[info]   CI (99.9%): [60552,013, 60552,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,581 ±(99.9%) 6,589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,581, 3,391), stdev = 1,711
[info]   CI (99.9%): [≈ 0, 8,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082,296 ±(99.9%) 1428,639 MB/sec [Average]
[info]   (min, avg, max) = (675,676, 1082,296, 1354,687), stdev = 371,013
[info]   CI (99.9%): [≈ 0, 2510,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58739,337 ±(99.9%) 77605,381 B/op [Average]
[info]   (min, avg, max) = (36570,272, 58739,337, 73635,141), stdev = 20153,871
[info]   CI (99.9%): [≈ 0, 136344,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,73% complete, ETA 01:28:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 705893,642 ops/s
[info] # Warmup Iteration   2: 761399,365 ops/s
[info] # Warmup Iteration   3: 765642,916 ops/s
[info] # Warmup Iteration   4: 769822,812 ops/s
[info] # Warmup Iteration   5: 769876,936 ops/s
[info] Iteration   1: 771972,890 ops/s
[info]                  ·gc.alloc.rate:                   1392,942 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2743,157 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 773883,855 ops/s
[info]                  ·gc.alloc.rate:                   1396,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2736,618 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 771913,642 ops/s
[info]                  ·gc.alloc.rate:                   1392,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2744,686 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 773024,195 ops/s
[info]                  ·gc.alloc.rate:                   1394,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2742,876 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 770052,161 ops/s
[info]                  ·gc.alloc.rate:                   1389,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4133,391 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   772169,349 ±(99.9%) 5532,332 ops/s [Average]
[info]   (min, avg, max) = (770052,161, 772169,349, 773883,855), stdev = 1436,729
[info]   CI (99.9%): [766637,017, 777701,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1393,431 ±(99.9%) 9,934 MB/sec [Average]
[info]   (min, avg, max) = (1389,697, 1393,431, 1396,574), stdev = 2,580
[info]   CI (99.9%): [1383,497, 1403,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2840,001, 2840,001, 2840,001), stdev = 0,001
[info]   CI (99.9%): [2840,000, 2840,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,110 ±(99.9%) 0,248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,110, 0,170), stdev = 0,064
[info]   CI (99.9%): [≈ 0, 0,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1481,451 ±(99.9%) 1164,850 MB/sec [Average]
[info]   (min, avg, max) = (1345,443, 1481,451, 2022,592), stdev = 302,508
[info]   CI (99.9%): [316,601, 2646,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3020,146 ±(99.9%) 2396,375 B/op [Average]
[info]   (min, avg, max) = (2736,618, 3020,146, 4133,391), stdev = 622,331
[info]   CI (99.9%): [623,771, 5416,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33,94% complete, ETA 01:27:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 898096,663 ops/s
[info] # Warmup Iteration   2: 973229,188 ops/s
[info] # Warmup Iteration   3: 980616,185 ops/s
[info] # Warmup Iteration   4: 980045,654 ops/s
[info] # Warmup Iteration   5: 979814,037 ops/s
[info] Iteration   1: 979881,412 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 981788,635 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 980235,115 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 977562,222 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 977786,446 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   979450,766 ±(99.9%) 6834,988 ops/s [Average]
[info]   (min, avg, max) = (977562,222, 979450,766, 981788,635), stdev = 1775,025
[info]   CI (99.9%): [972615,778, 986285,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34,14% complete, ETA 01:27:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20779,365 ops/s
[info] # Warmup Iteration   2: 26165,883 ops/s
[info] # Warmup Iteration   3: 26645,636 ops/s
[info] # Warmup Iteration   4: 26800,931 ops/s
[info] # Warmup Iteration   5: 25558,790 ops/s
[info] Iteration   1: 26675,605 ops/s
[info]                  ·gc.alloc.rate:                   1125,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79069,594 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 24043,452 ops/s
[info]                  ·gc.alloc.rate:                   1014,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43825,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 26515,176 ops/s
[info]                  ·gc.alloc.rate:                   1119,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79470,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 26684,274 ops/s
[info]                  ·gc.alloc.rate:                   1126,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78967,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 26632,254 ops/s
[info]                  ·gc.alloc.rate:                   1123,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39597,127 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   26110,152 ±(99.9%) 4456,293 ops/s [Average]
[info]   (min, avg, max) = (24043,452, 26110,152, 26684,274), stdev = 1157,285
[info]   CI (99.9%): [21653,860, 30566,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1101,865 ±(99.9%) 188,107 MB/sec [Average]
[info]   (min, avg, max) = (1014,623, 1101,865, 1126,052), stdev = 48,851
[info]   CI (99.9%): [913,759, 1289,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (66416,015, 66416,016, 66416,017), stdev = 0,001
[info]   CI (99.9%): [66416,013, 66416,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,480 ±(99.9%) 7,819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,480, 4,942), stdev = 2,031
[info]   CI (99.9%): [≈ 0, 9,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071,520 ±(99.9%) 1412,139 MB/sec [Average]
[info]   (min, avg, max) = (669,507, 1071,520, 1340,196), stdev = 366,728
[info]   CI (99.9%): [≈ 0, 2483,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64185,937 ±(99.9%) 79214,856 B/op [Average]
[info]   (min, avg, max) = (39597,127, 64185,937, 79470,524), stdev = 20571,847
[info]   CI (99.9%): [≈ 0, 143400,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34,34% complete, ETA 01:27:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13829,551 ops/s
[info] # Warmup Iteration   2: 15052,400 ops/s
[info] # Warmup Iteration   3: 15014,579 ops/s
[info] # Warmup Iteration   4: 15092,650 ops/s
[info] # Warmup Iteration   5: 15029,147 ops/s
[info] Iteration   1: 15077,944 ops/s
[info]                  ·gc.alloc.rate:      606,489 MB/sec
[info]                  ·gc.alloc.rate.norm: 63312,027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15079,716 ops/s
[info]                  ·gc.alloc.rate:                   606,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310,531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70493,673 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 15044,769 ops/s
[info]                  ·gc.alloc.rate:                   605,267 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70648,243 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15065,799 ops/s
[info]                  ·gc.alloc.rate:                   606,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70345,742 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 15046,296 ops/s
[info]                  ·gc.alloc.rate:                   605,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70434,545 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   15062,905 ±(99.9%) 64,490 ops/s [Average]
[info]   (min, avg, max) = (15044,769, 15062,905, 15079,716), stdev = 16,748
[info]   CI (99.9%): [14998,415, 15127,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   605,964 ±(99.9%) 2,520 MB/sec [Average]
[info]   (min, avg, max) = (605,267, 605,964, 606,696), stdev = 0,655
[info]   CI (99.9%): [603,444, 608,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   63312,029 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (63312,027, 63312,029, 63312,036), stdev = 0,004
[info]   CI (99.9%): [63312,013, 63312,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,616 ±(99.9%) 5,081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,616, 2,976), stdev = 1,319
[info]   CI (99.9%): [≈ 0, 5,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   64,283 ±(99.9%) 530,178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64,283, 310,531), stdev = 137,686
[info]   CI (99.9%): [≈ 0, 594,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   539,542 ±(99.9%) 1161,413 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,542, 675,514), stdev = 301,615
[info]   CI (99.9%): [≈ 0, 1700,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   56384,441 ±(99.9%) 121372,502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56384,441, 70648,243), stdev = 31520,053
[info]   CI (99.9%): [≈ 0, 177756,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34,54% complete, ETA 01:27:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22436,031 ops/s
[info] # Warmup Iteration   2: 29760,324 ops/s
[info] # Warmup Iteration   3: 29602,029 ops/s
[info] # Warmup Iteration   4: 29985,758 ops/s
[info] # Warmup Iteration   5: 29918,477 ops/s
[info] Iteration   1: 29867,096 ops/s
[info]                  ·gc.alloc.rate:                   1621,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70763,874 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30001,988 ops/s
[info]                  ·gc.alloc.rate:                   1628,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70482,814 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29727,067 ops/s
[info]                  ·gc.alloc.rate:                   1613,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106818,346 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 29936,106 ops/s
[info]                  ·gc.alloc.rate:                   1625,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70808,559 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29957,134 ops/s
[info]                  ·gc.alloc.rate:                   1626,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106323,773 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   29897,878 ±(99.9%) 412,646 ops/s [Average]
[info]   (min, avg, max) = (29727,067, 29897,878, 30001,988), stdev = 107,163
[info]   CI (99.9%): [29485,233, 30310,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1623,142 ±(99.9%) 22,440 MB/sec [Average]
[info]   (min, avg, max) = (1613,949, 1623,142, 1628,940), stdev = 5,828
[info]   CI (99.9%): [1600,702, 1645,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85440,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (85440,014, 85440,014, 85440,015), stdev = 0,001
[info]   CI (99.9%): [85440,012, 85440,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2,196 ±(99.9%) 7,918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,196, 4,408), stdev = 2,056
[info]   CI (99.9%): [≈ 0, 10,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1615,016 ±(99.9%) 1426,409 MB/sec [Average]
[info]   (min, avg, max) = (1342,805, 1615,016, 2023,810), stdev = 370,434
[info]   CI (99.9%): [188,607, 3041,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   85039,473 ±(99.9%) 75691,082 B/op [Average]
[info]   (min, avg, max) = (70482,814, 85039,473, 106818,346), stdev = 19656,734
[info]   CI (99.9%): [9348,391, 160730,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,74% complete, ETA 01:26:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22528,485 ops/s
[info] # Warmup Iteration   2: 34889,910 ops/s
[info] # Warmup Iteration   3: 35041,796 ops/s
[info] # Warmup Iteration   4: 35104,396 ops/s
[info] # Warmup Iteration   5: 35099,685 ops/s
[info] Iteration   1: 35061,060 ops/s
[info]                  ·gc.alloc.rate:                   1600,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60742,597 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 35188,796 ops/s
[info]                  ·gc.alloc.rate:                   1606,587 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90872,217 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 35130,331 ops/s
[info]                  ·gc.alloc.rate:                   1604,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60755,876 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 35181,320 ops/s
[info]                  ·gc.alloc.rate:                   1606,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60699,347 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 34753,576 ops/s
[info]                  ·gc.alloc.rate:                   1586,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92225,099 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   35063,017 ±(99.9%) 694,465 ops/s [Average]
[info]   (min, avg, max) = (34753,576, 35063,017, 35188,796), stdev = 180,350
[info]   CI (99.9%): [34368,552, 35757,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1600,919 ±(99.9%) 31,728 MB/sec [Average]
[info]   (min, avg, max) = (1586,794, 1600,919, 1606,587), stdev = 8,240
[info]   CI (99.9%): [1569,191, 1632,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71856,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (71856,012, 71856,012, 71856,013), stdev = 0,001
[info]   CI (99.9%): [71856,010, 71856,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,681 ±(99.9%) 5,320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,681, 3,724), stdev = 1,382
[info]   CI (99.9%): [≈ 0, 7,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1626,958 ±(99.9%) 1431,473 MB/sec [Average]
[info]   (min, avg, max) = (1353,180, 1626,958, 2036,604), stdev = 371,749
[info]   CI (99.9%): [195,485, 3058,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   73059,027 ±(99.9%) 65019,799 B/op [Average]
[info]   (min, avg, max) = (60699,347, 73059,027, 92225,099), stdev = 16885,435
[info]   CI (99.9%): [8039,228, 138078,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,94% complete, ETA 01:26:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 377663,907 ops/s
[info] # Warmup Iteration   2: 403511,827 ops/s
[info] # Warmup Iteration   3: 404425,079 ops/s
[info] # Warmup Iteration   4: 410938,885 ops/s
[info] # Warmup Iteration   5: 410350,210 ops/s
[info] Iteration   1: 411252,611 ops/s
[info]                  ·gc.alloc.rate:                   1070,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2577,199 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 410894,209 ops/s
[info]                  ·gc.alloc.rate:                   1069,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5153,786 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 411389,825 ops/s
[info]                  ·gc.alloc.rate:                   1070,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5147,686 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 410017,937 ops/s
[info]                  ·gc.alloc.rate:                   1067,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2582,448 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 410450,510 ops/s
[info]                  ·gc.alloc.rate:                   1068,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5162,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   410801,019 ±(99.9%) 2191,307 ops/s [Average]
[info]   (min, avg, max) = (410017,937, 410801,019, 411389,825), stdev = 569,076
[info]   CI (99.9%): [408609,711, 412992,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1069,096 ±(99.9%) 5,550 MB/sec [Average]
[info]   (min, avg, max) = (1067,081, 1069,096, 1070,645), stdev = 1,441
[info]   CI (99.9%): [1063,546, 1074,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,112 ±(99.9%) 0,598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,112, 0,319), stdev = 0,155
[info]   CI (99.9%): [≈ 0, 0,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1076,700 ±(99.9%) 1418,921 MB/sec [Average]
[info]   (min, avg, max) = (672,774, 1076,700, 1346,294), stdev = 368,489
[info]   CI (99.9%): [≈ 0, 2495,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4124,657 ±(99.9%) 5430,348 B/op [Average]
[info]   (min, avg, max) = (2577,199, 4124,657, 5162,165), stdev = 1410,244
[info]   CI (99.9%): [≈ 0, 9555,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35,14% complete, ETA 01:26:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12131,762 ops/s
[info] # Warmup Iteration   2: 20125,242 ops/s
[info] # Warmup Iteration   3: 20190,718 ops/s
[info] # Warmup Iteration   4: 19822,665 ops/s
[info] # Warmup Iteration   5: 20004,059 ops/s
[info] Iteration   1: 20118,041 ops/s
[info]                  ·gc.alloc.rate:                   2071,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159034,635 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20256,320 ops/s
[info]                  ·gc.alloc.rate:                   2085,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158114,496 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20236,176 ops/s
[info]                  ·gc.alloc.rate:                   2083,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158426,157 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 20174,189 ops/s
[info]                  ·gc.alloc.rate:                   2076,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159001,118 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 20146,227 ops/s
[info]                  ·gc.alloc.rate:                   2073,933 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2040,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159386,050 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   20186,191 ±(99.9%) 226,191 ops/s [Average]
[info]   (min, avg, max) = (20118,041, 20186,191, 20256,320), stdev = 58,741
[info]   CI (99.9%): [19960,000, 20412,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2078,136 ±(99.9%) 23,469 MB/sec [Average]
[info]   (min, avg, max) = (2071,051, 2078,136, 2085,358), stdev = 6,095
[info]   CI (99.9%): [2054,667, 2101,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162024,022 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (162024,020, 162024,022, 162024,025), stdev = 0,002
[info]   CI (99.9%): [162024,014, 162024,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4,545 ±(99.9%) 6,834 B/op [Average]
[info]   (min, avg, max) = (1,619, 4,545, 6,469), stdev = 1,775
[info]   CI (99.9%): [≈ 0, 11,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2036,674 ±(99.9%) 10,921 MB/sec [Average]
[info]   (min, avg, max) = (2032,839, 2036,674, 2040,167), stdev = 2,836
[info]   CI (99.9%): [2025,752, 2047,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   158792,491 ±(99.9%) 1971,317 B/op [Average]
[info]   (min, avg, max) = (158114,496, 158792,491, 159386,050), stdev = 511,945
[info]   CI (99.9%): [156821,174, 160763,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35,34% complete, ETA 01:25:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26469,714 ops/s
[info] # Warmup Iteration   2: 32805,655 ops/s
[info] # Warmup Iteration   3: 33063,111 ops/s
[info] # Warmup Iteration   4: 33213,713 ops/s
[info] # Warmup Iteration   5: 33052,639 ops/s
[info] Iteration   1: 33189,183 ops/s
[info]                  ·gc.alloc.rate:                   1607,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63773,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33002,886 ops/s
[info]                  ·gc.alloc.rate:                   1599,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64185,889 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33124,261 ops/s
[info]                  ·gc.alloc.rate:                   1604,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96002,635 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 32428,881 ops/s
[info]                  ·gc.alloc.rate:                   1570,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65467,300 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33142,642 ops/s
[info]                  ·gc.alloc.rate:                   1605,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64112,680 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   32977,570 ±(99.9%) 1210,426 ops/s [Average]
[info]   (min, avg, max) = (32428,881, 32977,570, 33189,183), stdev = 314,344
[info]   CI (99.9%): [31767,144, 34187,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1597,675 ±(99.9%) 58,825 MB/sec [Average]
[info]   (min, avg, max) = (1570,966, 1597,675, 1607,763), stdev = 15,277
[info]   CI (99.9%): [1538,849, 1656,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   76248,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76248,012, 76248,013, 76248,013), stdev = 0,001
[info]   CI (99.9%): [76248,011, 76248,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2,389 ±(99.9%) 6,990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,389, 4,041), stdev = 1,815
[info]   CI (99.9%): [≈ 0, 9,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1482,104 ±(99.9%) 1159,570 MB/sec [Average]
[info]   (min, avg, max) = (1344,717, 1482,104, 2020,780), stdev = 301,137
[info]   CI (99.9%): [322,534, 2641,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   70708,317 ±(99.9%) 54504,392 B/op [Average]
[info]   (min, avg, max) = (63773,080, 70708,317, 96002,635), stdev = 14154,618
[info]   CI (99.9%): [16203,925, 125212,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35,54% complete, ETA 01:25:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45968,841 ops/s
[info] # Warmup Iteration   2: 58659,437 ops/s
[info] # Warmup Iteration   3: 59649,077 ops/s
[info] # Warmup Iteration   4: 59146,150 ops/s
[info] # Warmup Iteration   5: 59204,449 ops/s
[info] Iteration   1: 59083,180 ops/s
[info]                  ·gc.alloc.rate:                   1433,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35734,408 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 59183,347 ops/s
[info]                  ·gc.alloc.rate:                   1435,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013,413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53534,205 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 59191,176 ops/s
[info]                  ·gc.alloc.rate:                   1435,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35722,356 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 59246,540 ops/s
[info]                  ·gc.alloc.rate:                   1437,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35725,796 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 59297,474 ops/s
[info]                  ·gc.alloc.rate:                   1438,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35732,242 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   59200,343 ±(99.9%) 308,464 ops/s [Average]
[info]   (min, avg, max) = (59083,180, 59200,343, 59297,474), stdev = 80,107
[info]   CI (99.9%): [58891,879, 59508,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1436,097 ±(99.9%) 7,826 MB/sec [Average]
[info]   (min, avg, max) = (1433,073, 1436,097, 1438,511), stdev = 2,032
[info]   CI (99.9%): [1428,271, 1443,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38176,007, 38176,007, 38176,007), stdev = 0,001
[info]   CI (99.9%): [38176,006, 38176,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,550 ±(99.9%) 2,336 B/op [Average]
[info]   (min, avg, max) = (1,105, 1,550, 2,214), stdev = 0,607
[info]   CI (99.9%): [≈ 0, 3,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477,967 ±(99.9%) 1152,610 MB/sec [Average]
[info]   (min, avg, max) = (1341,419, 1477,967, 2013,413), stdev = 299,329
[info]   CI (99.9%): [325,357, 2630,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   39289,802 ±(99.9%) 30662,159 B/op [Average]
[info]   (min, avg, max) = (35722,356, 39289,802, 53534,205), stdev = 7962,865
[info]   CI (99.9%): [8627,643, 69951,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,74% complete, ETA 01:25:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106403,451 ops/s
[info] # Warmup Iteration   2: 145264,501 ops/s
[info] # Warmup Iteration   3: 146130,627 ops/s
[info] # Warmup Iteration   4: 146709,244 ops/s
[info] # Warmup Iteration   5: 146900,398 ops/s
[info] Iteration   1: 146496,573 ops/s
[info]                  ·gc.alloc.rate:                   1241,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7259,664 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 146988,672 ops/s
[info]                  ·gc.alloc.rate:                   1245,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14477,873 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 146896,063 ops/s
[info]                  ·gc.alloc.rate:                   1244,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14501,803 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 131911,602 ops/s
[info]                  ·gc.alloc.rate:                   1117,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16165,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 147111,758 ops/s
[info]                  ·gc.alloc.rate:                   1246,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14509,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   143880,934 ±(99.9%) 25780,180 ops/s [Average]
[info]   (min, avg, max) = (131911,602, 143880,934, 147111,758), stdev = 6695,031
[info]   CI (99.9%): [118100,754, 169661,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1219,110 ±(99.9%) 218,373 MB/sec [Average]
[info]   (min, avg, max) = (1117,721, 1219,110, 1246,445), stdev = 56,711
[info]   CI (99.9%): [1000,737, 1437,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13336,003, 13336,003, 13336,004), stdev = 0,001
[info]   CI (99.9%): [13336,002, 13336,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,377 ±(99.9%) 1,693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,377, 0,993), stdev = 0,440
[info]   CI (99.9%): [≈ 0, 2,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218,432 ±(99.9%) 1168,242 MB/sec [Average]
[info]   (min, avg, max) = (675,720, 1218,432, 1356,080), stdev = 303,389
[info]   CI (99.9%): [50,190, 2386,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13382,687 ±(99.9%) 13470,866 B/op [Average]
[info]   (min, avg, max) = (7259,664, 13382,687, 16165,073), stdev = 3498,341
[info]   CI (99.9%): [≈ 0, 26853,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,94% complete, ETA 01:25:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1037154,382 ops/s
[info] # Warmup Iteration   2: 1130549,377 ops/s
[info] # Warmup Iteration   3: 1135155,069 ops/s
[info] # Warmup Iteration   4: 1143476,521 ops/s
[info] # Warmup Iteration   5: 1144281,034 ops/s
[info] Iteration   1: 1142111,601 ops/s
[info]                  ·gc.alloc.rate:                   1224,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1854,174 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1145600,582 ops/s
[info]                  ·gc.alloc.rate:                   1228,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1848,667 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1143982,816 ops/s
[info]                  ·gc.alloc.rate:                   1226,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 925,559 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1142473,789 ops/s
[info]                  ·gc.alloc.rate:                   1225,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1854,500 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1142315,553 ops/s
[info]                  ·gc.alloc.rate:                   1225,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1856,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1143296,868 ±(99.9%) 5718,861 ops/s [Average]
[info]   (min, avg, max) = (1142111,601, 1143296,868, 1145600,582), stdev = 1485,170
[info]   CI (99.9%): [1137578,007, 1149015,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1226,246 ±(99.9%) 6,513 MB/sec [Average]
[info]   (min, avg, max) = (1224,797, 1226,246, 1228,881), stdev = 1,691
[info]   CI (99.9%): [1219,733, 1232,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1688,000, 1688,000, 1688,000), stdev = 0,001
[info]   CI (99.9%): [1688,000, 1688,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,057 ±(99.9%) 0,207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,057, 0,115), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1211,493 ±(99.9%) 1159,632 MB/sec [Average]
[info]   (min, avg, max) = (672,776, 1211,493, 1347,276), stdev = 301,153
[info]   CI (99.9%): [51,861, 2371,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1667,807 ±(99.9%) 1597,781 B/op [Average]
[info]   (min, avg, max) = (925,559, 1667,807, 1856,133), stdev = 414,939
[info]   CI (99.9%): [70,026, 3265,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36,14% complete, ETA 01:24:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 904523,175 ops/s
[info] # Warmup Iteration   2: 970709,956 ops/s
[info] # Warmup Iteration   3: 961099,737 ops/s
[info] # Warmup Iteration   4: 963513,251 ops/s
[info] # Warmup Iteration   5: 963594,111 ops/s
[info] Iteration   1: 961544,766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 959897,642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 961282,696 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 959431,339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 959747,926 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   960380,874 ±(99.9%) 3705,272 ops/s [Average]
[info]   (min, avg, max) = (959431,339, 960380,874, 961544,766), stdev = 962,247
[info]   CI (99.9%): [956675,602, 964086,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36,35% complete, ETA 01:24:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52960,140 ops/s
[info] # Warmup Iteration   2: 66021,108 ops/s
[info] # Warmup Iteration   3: 66294,460 ops/s
[info] # Warmup Iteration   4: 67151,184 ops/s
[info] # Warmup Iteration   5: 67143,760 ops/s
[info] Iteration   1: 66961,594 ops/s
[info]                  ·gc.alloc.rate:                   1556,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008,065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47190,928 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 67133,150 ops/s
[info]                  ·gc.alloc.rate:                   1560,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31421,049 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 67050,385 ops/s
[info]                  ·gc.alloc.rate:                   1558,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31488,393 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 67124,234 ops/s
[info]                  ·gc.alloc.rate:                   1560,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31492,263 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 66552,839 ops/s
[info]                  ·gc.alloc.rate:                   1547,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47729,134 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   66964,440 ±(99.9%) 924,970 ops/s [Average]
[info]   (min, avg, max) = (66552,839, 66964,440, 67133,150), stdev = 240,212
[info]   CI (99.9%): [66039,470, 67889,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1556,653 ±(99.9%) 21,415 MB/sec [Average]
[info]   (min, avg, max) = (1547,108, 1556,653, 1560,550), stdev = 5,561
[info]   CI (99.9%): [1535,237, 1578,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36584,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (36584,006, 36584,006, 36584,007), stdev = 0,001
[info]   CI (99.9%): [36584,005, 36584,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,685 ±(99.9%) 2,149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,685, 1,466), stdev = 0,558
[info]   CI (99.9%): [≈ 0, 2,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1610,289 ±(99.9%) 1416,527 MB/sec [Average]
[info]   (min, avg, max) = (1340,316, 1610,289, 2018,426), stdev = 367,867
[info]   CI (99.9%): [193,762, 3026,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37864,353 ±(99.9%) 33738,293 B/op [Average]
[info]   (min, avg, max) = (31421,049, 37864,353, 47729,134), stdev = 8761,727
[info]   CI (99.9%): [4126,061, 71602,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36,55% complete, ETA 01:24:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25531,512 ops/s
[info] # Warmup Iteration   2: 29426,498 ops/s
[info] # Warmup Iteration   3: 29441,437 ops/s
[info] # Warmup Iteration   4: 29348,014 ops/s
[info] # Warmup Iteration   5: 29485,501 ops/s
[info] Iteration   1: 29471,420 ops/s
[info]                  ·gc.alloc.rate:                   423,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27318,894 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29584,422 ops/s
[info]                  ·gc.alloc.rate:      424,734 MB/sec
[info]                  ·gc.alloc.rate.norm: 22592,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 29541,110 ops/s
[info]                  ·gc.alloc.rate:                   424,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27252,331 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 29563,842 ops/s
[info]                  ·gc.alloc.rate:                   424,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35954,824 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 29424,580 ops/s
[info]                  ·gc.alloc.rate:      422,366 MB/sec
[info]                  ·gc.alloc.rate.norm: 22592,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   29517,075 ±(99.9%) 257,880 ops/s [Average]
[info]   (min, avg, max) = (29424,580, 29517,075, 29584,422), stdev = 66,971
[info]   CI (99.9%): [29259,196, 29774,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   423,710 ±(99.9%) 3,808 MB/sec [Average]
[info]   (min, avg, max) = (422,366, 423,710, 424,734), stdev = 0,989
[info]   CI (99.9%): [419,902, 427,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   22592,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (22592,014, 22592,014, 22592,016), stdev = 0,001
[info]   CI (99.9%): [22592,011, 22592,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,601 ±(99.9%) 5,120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,601, 2,980), stdev = 1,330
[info]   CI (99.9%): [≈ 0, 5,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   32,009 ±(99.9%) 272,557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32,009, 158,623), stdev = 70,782
[info]   CI (99.9%): [≈ 0, 304,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   339,689 ±(99.9%) 1221,529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,689, 675,398), stdev = 317,227
[info]   CI (99.9%): [≈ 0, 1561,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   18105,210 ±(99.9%) 65085,217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18105,210, 35954,824), stdev = 16902,424
[info]   CI (99.9%): [≈ 0, 83190,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36,75% complete, ETA 01:24:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14930,991 ops/s
[info] # Warmup Iteration   2: 18916,064 ops/s
[info] # Warmup Iteration   3: 18728,949 ops/s
[info] # Warmup Iteration   4: 19001,086 ops/s
[info] # Warmup Iteration   5: 18845,783 ops/s
[info] Iteration   1: 18907,468 ops/s
[info]                  ·gc.alloc.rate:                   1662,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              138432,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111788,959 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18954,974 ops/s
[info]                  ·gc.alloc.rate:                   1667,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              138431,184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167369,500 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18986,491 ops/s
[info]                  ·gc.alloc.rate:                   1670,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              138432,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111527,144 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18978,960 ops/s
[info]                  ·gc.alloc.rate:                   1669,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              138432,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167609,770 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18986,293 ops/s
[info]                  ·gc.alloc.rate:                   1669,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              138432,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111864,303 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18962,837 ±(99.9%) 129,115 ops/s [Average]
[info]   (min, avg, max) = (18907,468, 18962,837, 18986,491), stdev = 33,531
[info]   CI (99.9%): [18833,722, 19091,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1667,870 ±(99.9%) 11,759 MB/sec [Average]
[info]   (min, avg, max) = (1662,810, 1667,870, 1670,052), stdev = 3,054
[info]   CI (99.9%): [1656,110, 1679,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138431,856 ±(99.9%) 1,447 B/op [Average]
[info]   (min, avg, max) = (138431,184, 138431,856, 138432,027), stdev = 0,376
[info]   CI (99.9%): [138430,409, 138433,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,803 ±(99.9%) 8,682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,803, 5,199), stdev = 2,255
[info]   CI (99.9%): [≈ 0, 12,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614,921 ±(99.9%) 1418,484 MB/sec [Average]
[info]   (min, avg, max) = (1342,780, 1614,921, 2021,164), stdev = 368,376
[info]   CI (99.9%): [196,437, 3033,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   134031,935 ±(99.9%) 117609,971 B/op [Average]
[info]   (min, avg, max) = (111527,144, 134031,935, 167609,770), stdev = 30542,936
[info]   CI (99.9%): [16421,965, 251641,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36,95% complete, ETA 01:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12243,655 ops/s
[info] # Warmup Iteration   2: 18861,303 ops/s
[info] # Warmup Iteration   3: 19082,346 ops/s
[info] # Warmup Iteration   4: 19057,451 ops/s
[info] # Warmup Iteration   5: 19080,752 ops/s
[info] Iteration   1: 19043,209 ops/s
[info]                  ·gc.alloc.rate:                   1538,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167688,481 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18937,019 ops/s
[info]                  ·gc.alloc.rate:                   1530,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              127156,444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112553,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 19061,960 ops/s
[info]                  ·gc.alloc.rate:                   1540,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111913,367 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 19088,091 ops/s
[info]                  ·gc.alloc.rate:                   1542,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111843,347 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19002,610 ops/s
[info]                  ·gc.alloc.rate:                   1535,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168611,771 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   19026,578 ±(99.9%) 227,054 ops/s [Average]
[info]   (min, avg, max) = (18937,019, 19026,578, 19088,091), stdev = 58,965
[info]   CI (99.9%): [18799,524, 19253,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1537,320 ±(99.9%) 18,269 MB/sec [Average]
[info]   (min, avg, max) = (1530,096, 1537,320, 1542,207), stdev = 4,744
[info]   CI (99.9%): [1519,051, 1555,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127159,307 ±(99.9%) 53,723 B/op [Average]
[info]   (min, avg, max) = (127152,021, 127159,307, 127184,029), stdev = 13,952
[info]   CI (99.9%): [127105,584, 127213,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3,793 ±(99.9%) 9,878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,793, 6,920), stdev = 2,565
[info]   CI (99.9%): [≈ 0, 13,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1626,267 ±(99.9%) 1427,861 MB/sec [Average]
[info]   (min, avg, max) = (1354,371, 1626,267, 2035,963), stdev = 370,811
[info]   CI (99.9%): [198,406, 3054,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   134522,006 ±(99.9%) 118219,061 B/op [Average]
[info]   (min, avg, max) = (111843,347, 134522,006, 168611,771), stdev = 30701,115
[info]   CI (99.9%): [16302,945, 252741,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,15% complete, ETA 01:23:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 435874,076 ops/s
[info] # Warmup Iteration   2: 464571,724 ops/s
[info] # Warmup Iteration   3: 431841,997 ops/s
[info] # Warmup Iteration   4: 415394,809 ops/s
[info] # Warmup Iteration   5: 466552,811 ops/s
[info] Iteration   1: 467824,365 ops/s
[info]                  ·gc.alloc.rate:                   1217,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2263,460 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 421157,493 ops/s
[info]                  ·gc.alloc.rate:                   1096,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5028,771 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 464056,204 ops/s
[info]                  ·gc.alloc.rate:                   1207,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4563,662 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 451681,896 ops/s
[info]                  ·gc.alloc.rate:                   1175,850 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4690,925 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 463120,922 ops/s
[info]                  ·gc.alloc.rate:                   1205,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2288,696 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   453568,176 ±(99.9%) 73528,724 ops/s [Average]
[info]   (min, avg, max) = (421157,493, 453568,176, 467824,365), stdev = 19095,176
[info]   CI (99.9%): [380039,452, 527096,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1180,584 ±(99.9%) 191,123 MB/sec [Average]
[info]   (min, avg, max) = (1096,277, 1180,584, 1217,504), stdev = 49,634
[info]   CI (99.9%): [989,461, 1371,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,073 ±(99.9%) 0,395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,073, 0,212), stdev = 0,103
[info]   CI (99.9%): [≈ 0, 0,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1076,931 ±(99.9%) 1419,231 MB/sec [Average]
[info]   (min, avg, max) = (672,796, 1076,931, 1346,637), stdev = 368,570
[info]   CI (99.9%): [≈ 0, 2496,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3767,103 ±(99.9%) 5281,979 B/op [Average]
[info]   (min, avg, max) = (2263,460, 3767,103, 5028,771), stdev = 1371,713
[info]   CI (99.9%): [≈ 0, 9049,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37,35% complete, ETA 01:23:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8501,962 ops/s
[info] # Warmup Iteration   2: 14140,138 ops/s
[info] # Warmup Iteration   3: 14245,831 ops/s
[info] # Warmup Iteration   4: 14286,337 ops/s
[info] # Warmup Iteration   5: 14225,798 ops/s
[info] Iteration   1: 14422,411 ops/s
[info]                  ·gc.alloc.rate:                   1991,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221678,575 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 14399,706 ops/s
[info]                  ·gc.alloc.rate:                   1988,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222375,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 14362,496 ops/s
[info]                  ·gc.alloc.rate:                   1983,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223078,760 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 14211,928 ops/s
[info]                  ·gc.alloc.rate:                   1962,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225706,427 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 14343,665 ops/s
[info]                  ·gc.alloc.rate:                   1980,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223776,116 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   14348,041 ±(99.9%) 316,100 ops/s [Average]
[info]   (min, avg, max) = (14211,928, 14348,041, 14422,411), stdev = 82,090
[info]   CI (99.9%): [14031,941, 14664,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1981,332 ±(99.9%) 43,549 MB/sec [Average]
[info]   (min, avg, max) = (1962,572, 1981,332, 1991,545), stdev = 11,310
[info]   CI (99.9%): [1937,782, 2024,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320,032 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (217320,028, 217320,032, 217320,036), stdev = 0,003
[info]   CI (99.9%): [217320,021, 217320,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5,471 ±(99.9%) 14,629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,471, 9,100), stdev = 3,799
[info]   CI (99.9%): [≈ 0, 20,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2035,999 ±(99.9%) 12,199 MB/sec [Average]
[info]   (min, avg, max) = (2031,487, 2035,999, 2039,585), stdev = 3,168
[info]   CI (99.9%): [2023,799, 2048,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   223323,090 ±(99.9%) 5949,039 B/op [Average]
[info]   (min, avg, max) = (221678,575, 223323,090, 225706,427), stdev = 1544,947
[info]   CI (99.9%): [217374,051, 229272,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37,55% complete, ETA 01:23:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15564,240 ops/s
[info] # Warmup Iteration   2: 18337,639 ops/s
[info] # Warmup Iteration   3: 18470,039 ops/s
[info] # Warmup Iteration   4: 18532,600 ops/s
[info] # Warmup Iteration   5: 18459,684 ops/s
[info] Iteration   1: 18535,861 ops/s
[info]                  ·gc.alloc.rate:                   1548,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              131504,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114246,145 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18498,305 ops/s
[info]                  ·gc.alloc.rate:                   1545,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              131482,164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171749,517 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18525,372 ops/s
[info]                  ·gc.alloc.rate:                   1547,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114420,975 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 18511,647 ops/s
[info]                  ·gc.alloc.rate:                   1546,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114614,561 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18513,619 ops/s
[info]                  ·gc.alloc.rate:                   1546,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172110,744 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   18516,961 ±(99.9%) 54,978 ops/s [Average]
[info]   (min, avg, max) = (18498,305, 18516,961, 18535,861), stdev = 14,278
[info]   CI (99.9%): [18461,983, 18571,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1547,044 ±(99.9%) 5,101 MB/sec [Average]
[info]   (min, avg, max) = (1545,446, 1547,044, 1548,941), stdev = 1,325
[info]   CI (99.9%): [1541,942, 1552,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   131485,252 ±(99.9%) 40,577 B/op [Average]
[info]   (min, avg, max) = (131480,022, 131485,252, 131504,029), stdev = 10,538
[info]   CI (99.9%): [131444,675, 131525,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3,184 ±(99.9%) 7,457 B/op [Average]
[info]   (min, avg, max) = (1,768, 3,184, 5,309), stdev = 1,937
[info]   CI (99.9%): [≈ 0, 10,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1616,803 ±(99.9%) 1423,199 MB/sec [Average]
[info]   (min, avg, max) = (1345,666, 1616,803, 2024,595), stdev = 369,600
[info]   CI (99.9%): [193,605, 3040,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   137428,388 ±(99.9%) 121280,520 B/op [Average]
[info]   (min, avg, max) = (114246,145, 137428,388, 172110,744), stdev = 31496,166
[info]   CI (99.9%): [16147,868, 258708,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37,75% complete, ETA 01:22:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29811,786 ops/s
[info] # Warmup Iteration   2: 42635,598 ops/s
[info] # Warmup Iteration   3: 43121,202 ops/s
[info] # Warmup Iteration   4: 43167,262 ops/s
[info] # Warmup Iteration   5: 41559,465 ops/s
[info] Iteration   1: 43311,241 ops/s
[info]                  ·gc.alloc.rate:                   1346,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48748,461 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 43054,992 ops/s
[info]                  ·gc.alloc.rate:                   1338,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49042,801 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 43231,390 ops/s
[info]                  ·gc.alloc.rate:                   1344,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48862,900 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 43339,215 ops/s
[info]                  ·gc.alloc.rate:                   1347,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48764,226 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 42408,972 ops/s
[info]                  ·gc.alloc.rate:                   1318,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49908,648 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   43069,162 ±(99.9%) 1483,748 ops/s [Average]
[info]   (min, avg, max) = (42408,972, 43069,162, 43339,215), stdev = 385,325
[info]   CI (99.9%): [41585,414, 44552,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1339,038 ±(99.9%) 46,061 MB/sec [Average]
[info]   (min, avg, max) = (1318,506, 1339,038, 1347,443), stdev = 11,962
[info]   CI (99.9%): [1292,977, 1385,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48928,009, 48928,010, 48928,010), stdev = 0,001
[info]   CI (99.9%): [48928,008, 48928,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,819 ±(99.9%) 4,422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,819, 3,024), stdev = 1,148
[info]   CI (99.9%): [≈ 0, 6,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1342,703 ±(99.9%) 5,217 MB/sec [Average]
[info]   (min, avg, max) = (1341,494, 1342,703, 1344,932), stdev = 1,355
[info]   CI (99.9%): [1337,486, 1347,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   49065,407 ±(99.9%) 1870,379 B/op [Average]
[info]   (min, avg, max) = (48748,461, 49065,407, 49908,648), stdev = 485,732
[info]   CI (99.9%): [47195,028, 50935,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,95% complete, ETA 01:22:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34827,009 ops/s
[info] # Warmup Iteration   2: 51025,066 ops/s
[info] # Warmup Iteration   3: 51216,207 ops/s
[info] # Warmup Iteration   4: 51103,666 ops/s
[info] # Warmup Iteration   5: 50960,017 ops/s
[info] Iteration   1: 51077,681 ops/s
[info]                  ·gc.alloc.rate:                   1354,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41655,281 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 51378,728 ops/s
[info]                  ·gc.alloc.rate:                   1363,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41442,708 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 49643,955 ops/s
[info]                  ·gc.alloc.rate:                   1317,028 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42930,462 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50682,684 ops/s
[info]                  ·gc.alloc.rate:                   1344,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42093,626 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 51100,819 ops/s
[info]                  ·gc.alloc.rate:                   1355,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41782,598 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   50776,774 ±(99.9%) 2618,743 ops/s [Average]
[info]   (min, avg, max) = (49643,955, 50776,774, 51378,728), stdev = 680,079
[info]   CI (99.9%): [48158,031, 53395,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1347,156 ±(99.9%) 69,424 MB/sec [Average]
[info]   (min, avg, max) = (1317,028, 1347,156, 1363,020), stdev = 18,029
[info]   CI (99.9%): [1277,731, 1416,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (41752,008, 41752,008, 41752,009), stdev = 0,001
[info]   CI (99.9%): [41752,007, 41752,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,427 ±(99.9%) 3,760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,427, 2,640), stdev = 0,976
[info]   CI (99.9%): [≈ 0, 5,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354,343 ±(99.9%) 8,047 MB/sec [Average]
[info]   (min, avg, max) = (1351,783, 1354,343, 1356,847), stdev = 2,090
[info]   CI (99.9%): [1346,296, 1362,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41980,935 ±(99.9%) 2236,506 B/op [Average]
[info]   (min, avg, max) = (41442,708, 41980,935, 42930,462), stdev = 580,813
[info]   CI (99.9%): [39744,429, 44217,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,15% complete, ETA 01:22:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1268271,835 ops/s
[info] # Warmup Iteration   2: 1339833,310 ops/s
[info] # Warmup Iteration   3: 1335314,837 ops/s
[info] # Warmup Iteration   4: 1338843,301 ops/s
[info] # Warmup Iteration   5: 1339875,083 ops/s
[info] Iteration   1: 1344563,412 ops/s
[info]                  ·gc.alloc.rate:                   1223,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1574,966 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1349510,668 ops/s
[info]                  ·gc.alloc.rate:                   1228,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1569,305 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1349562,734 ops/s
[info]                  ·gc.alloc.rate:                   1227,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 784,522 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1347738,497 ops/s
[info]                  ·gc.alloc.rate:                   1226,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1572,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1348446,621 ops/s
[info]                  ·gc.alloc.rate:                   1226,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1572,435 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1347964,386 ±(99.9%) 7890,510 ops/s [Average]
[info]   (min, avg, max) = (1344563,412, 1347964,386, 1349562,734), stdev = 2049,140
[info]   CI (99.9%): [1340073,876, 1355854,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1226,468 ±(99.9%) 7,525 MB/sec [Average]
[info]   (min, avg, max) = (1223,269, 1226,468, 1228,044), stdev = 1,954
[info]   CI (99.9%): [1218,942, 1233,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1432,000, 1432,000, 1432,000), stdev = 0,001
[info]   CI (99.9%): [1432,000, 1432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,058 ±(99.9%) 0,142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,097), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1211,452 ±(99.9%) 1159,616 MB/sec [Average]
[info]   (min, avg, max) = (672,742, 1211,452, 1347,242), stdev = 301,148
[info]   CI (99.9%): [51,836, 2371,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1414,663 ±(99.9%) 1356,448 B/op [Average]
[info]   (min, avg, max) = (784,522, 1414,663, 1574,966), stdev = 352,265
[info]   CI (99.9%): [58,215, 2771,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38,35% complete, ETA 01:21:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1250583,058 ops/s
[info] # Warmup Iteration   2: 1557498,793 ops/s
[info] # Warmup Iteration   3: 1556732,407 ops/s
[info] # Warmup Iteration   4: 1555829,193 ops/s
[info] # Warmup Iteration   5: 1539469,573 ops/s
[info] Iteration   1: 1556853,624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1551690,782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1553728,700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1476290,097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1556760,065 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1539064,654 ±(99.9%) 135385,505 ops/s [Average]
[info]   (min, avg, max) = (1476290,097, 1539064,654, 1556853,624), stdev = 35159,186
[info]   CI (99.9%): [1403679,148, 1674450,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38,55% complete, ETA 01:21:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30816,856 ops/s
[info] # Warmup Iteration   2: 38586,001 ops/s
[info] # Warmup Iteration   3: 39414,153 ops/s
[info] # Warmup Iteration   4: 39059,899 ops/s
[info] # Warmup Iteration   5: 39729,806 ops/s
[info] Iteration   1: 39544,383 ops/s
[info]                  ·gc.alloc.rate:                   1196,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26644,557 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 39649,099 ops/s
[info]                  ·gc.alloc.rate:                   1199,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53148,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 39471,980 ops/s
[info]                  ·gc.alloc.rate:                   1194,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53395,523 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 39654,597 ops/s
[info]                  ·gc.alloc.rate:                   1199,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53190,170 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 39557,998 ops/s
[info]                  ·gc.alloc.rate:                   1196,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26672,860 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   39575,612 ±(99.9%) 296,174 ops/s [Average]
[info]   (min, avg, max) = (39471,980, 39575,612, 39654,597), stdev = 76,915
[info]   CI (99.9%): [39279,437, 39871,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1197,389 ±(99.9%) 8,948 MB/sec [Average]
[info]   (min, avg, max) = (1194,295, 1197,389, 1199,794), stdev = 2,324
[info]   CI (99.9%): [1188,441, 1206,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47616,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (47616,010, 47616,010, 47616,011), stdev = 0,001
[info]   CI (99.9%): [47616,009, 47616,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,159 ±(99.9%) 3,642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,159, 2,490), stdev = 0,946
[info]   CI (99.9%): [≈ 0, 4,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071,677 ±(99.9%) 1412,124 MB/sec [Average]
[info]   (min, avg, max) = (669,447, 1071,677, 1340,247), stdev = 366,724
[info]   CI (99.9%): [≈ 0, 2483,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   42610,226 ±(99.9%) 56073,001 B/op [Average]
[info]   (min, avg, max) = (26644,557, 42610,226, 53395,523), stdev = 14561,980
[info]   CI (99.9%): [≈ 0, 98683,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38,76% complete, ETA 01:21:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26319,312 ops/s
[info] # Warmup Iteration   2: 28415,614 ops/s
[info] # Warmup Iteration   3: 28582,722 ops/s
[info] # Warmup Iteration   4: 28554,094 ops/s
[info] # Warmup Iteration   5: 28573,986 ops/s
[info] Iteration   1: 28375,762 ops/s
[info]                  ·gc.alloc.rate:                   398,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28372,842 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 28613,021 ops/s
[info]                  ·gc.alloc.rate:                   401,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28139,855 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 28219,420 ops/s
[info]                  ·gc.alloc.rate:                   395,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28529,648 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 27434,825 ops/s
[info]                  ·gc.alloc.rate:      384,904 MB/sec
[info]                  ·gc.alloc.rate.norm: 22080,015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28532,490 ops/s
[info]                  ·gc.alloc.rate:                   400,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37254,943 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   28235,104 ±(99.9%) 1818,116 ops/s [Average]
[info]   (min, avg, max) = (27434,825, 28235,104, 28613,021), stdev = 472,159
[info]   CI (99.9%): [26416,987, 30053,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   396,131 ±(99.9%) 25,524 MB/sec [Average]
[info]   (min, avg, max) = (384,904, 396,131, 401,465), stdev = 6,628
[info]   CI (99.9%): [370,607, 421,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   22080,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (22080,014, 22080,015, 22080,015), stdev = 0,001
[info]   CI (99.9%): [22080,013, 22080,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,599 ±(99.9%) 5,094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,599, 2,965), stdev = 1,323
[info]   CI (99.9%): [≈ 0, 5,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   33,016 ±(99.9%) 280,991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33,016, 163,548), stdev = 72,972
[info]   CI (99.9%): [≈ 0, 314,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   442,031 ±(99.9%) 989,965 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 442,031, 675,453), stdev = 257,091
[info]   CI (99.9%): [≈ 0, 1431,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   24459,457 ±(99.9%) 54708,147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24459,457, 37254,943), stdev = 14207,532
[info]   CI (99.9%): [≈ 0, 79167,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,095
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38,96% complete, ETA 01:21:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76421,253 ops/s
[info] # Warmup Iteration   2: 86831,455 ops/s
[info] # Warmup Iteration   3: 86781,626 ops/s
[info] # Warmup Iteration   4: 87242,901 ops/s
[info] # Warmup Iteration   5: 87131,328 ops/s
[info] Iteration   1: 87366,803 ops/s
[info]                  ·gc.alloc.rate:                   1497,290 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24190,985 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 87305,098 ops/s
[info]                  ·gc.alloc.rate:                   1496,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24209,824 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 87118,284 ops/s
[info]                  ·gc.alloc.rate:                   1493,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36437,468 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 87433,404 ops/s
[info]                  ·gc.alloc.rate:                   1498,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24231,849 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87080,943 ops/s
[info]                  ·gc.alloc.rate:                   1492,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24359,592 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   87260,906 ±(99.9%) 595,453 ops/s [Average]
[info]   (min, avg, max) = (87080,943, 87260,906, 87433,404), stdev = 154,637
[info]   CI (99.9%): [86665,453, 87856,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1495,661 ±(99.9%) 9,852 MB/sec [Average]
[info]   (min, avg, max) = (1492,681, 1495,661, 1498,602), stdev = 2,559
[info]   CI (99.9%): [1485,809, 1505,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26976,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (26976,005, 26976,005, 26976,005), stdev = 0,001
[info]   CI (99.9%): [26976,004, 26976,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,451 ±(99.9%) 3,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,451, 1,880), stdev = 0,815
[info]   CI (99.9%): [≈ 0, 3,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479,364 ±(99.9%) 1157,528 MB/sec [Average]
[info]   (min, avg, max) = (1342,709, 1479,364, 2017,091), stdev = 300,606
[info]   CI (99.9%): [321,836, 2636,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26685,944 ±(99.9%) 20992,431 B/op [Average]
[info]   (min, avg, max) = (24190,985, 26685,944, 36437,468), stdev = 5451,668
[info]   CI (99.9%): [5693,513, 47678,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39,16% complete, ETA 01:20:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90669,195 ops/s
[info] # Warmup Iteration   2: 367196,866 ops/s
[info] # Warmup Iteration   3: 370060,315 ops/s
[info] # Warmup Iteration   4: 370575,954 ops/s
[info] # Warmup Iteration   5: 368786,389 ops/s
[info] Iteration   1: 371798,516 ops/s
[info]                  ·gc.alloc.rate:                   744,615 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2850,679 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 372525,210 ops/s
[info]                  ·gc.alloc.rate:                   746,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2839,709 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 371954,679 ops/s
[info]                  ·gc.alloc.rate:                   744,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2843,862 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 371349,692 ops/s
[info]                  ·gc.alloc.rate:                   743,772 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2848,494 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 370664,653 ops/s
[info]                  ·gc.alloc.rate:                   742,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2853,718 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   371658,550 ±(99.9%) 2682,774 ops/s [Average]
[info]   (min, avg, max) = (370664,653, 371658,550, 372525,210), stdev = 696,708
[info]   CI (99.9%): [368975,776, 374341,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   744,380 ±(99.9%) 5,482 MB/sec [Average]
[info]   (min, avg, max) = (742,362, 744,380, 746,189), stdev = 1,424
[info]   CI (99.9%): [738,898, 749,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3152,001, 3152,001, 3152,001), stdev = 0,001
[info]   CI (99.9%): [3152,001, 3152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,070 ±(99.9%) 0,284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,070, 0,176), stdev = 0,074
[info]   CI (99.9%): [≈ 0, 0,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672,418 ±(99.9%) 2,193 MB/sec [Average]
[info]   (min, avg, max) = (672,110, 672,418, 673,432), stdev = 0,570
[info]   CI (99.9%): [670,224, 674,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2847,292 ±(99.9%) 21,394 B/op [Average]
[info]   (min, avg, max) = (2839,709, 2847,292, 2853,718), stdev = 5,556
[info]   CI (99.9%): [2825,898, 2868,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,36% complete, ETA 01:20:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210760,019 ops/s
[info] # Warmup Iteration   2: 290461,867 ops/s
[info] # Warmup Iteration   3: 291539,996 ops/s
[info] # Warmup Iteration   4: 262207,304 ops/s
[info] # Warmup Iteration   5: 291224,844 ops/s
[info] Iteration   1: 291236,579 ops/s
[info]                  ·gc.alloc.rate:                   639,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3640,964 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 292026,821 ops/s
[info]                  ·gc.alloc.rate:                   641,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3631,440 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 290798,149 ops/s
[info]                  ·gc.alloc.rate:                   638,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3651,867 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 291988,994 ops/s
[info]                  ·gc.alloc.rate:                   641,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3636,962 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 290643,439 ops/s
[info]                  ·gc.alloc.rate:                   638,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3657,383 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   291338,797 ±(99.9%) 2497,287 ops/s [Average]
[info]   (min, avg, max) = (290643,439, 291338,797, 292026,821), stdev = 648,538
[info]   CI (99.9%): [288841,509, 293836,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   639,748 ±(99.9%) 5,626 MB/sec [Average]
[info]   (min, avg, max) = (638,219, 639,748, 641,334), stdev = 1,461
[info]   CI (99.9%): [634,122, 645,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3456,001, 3456,001, 3456,002), stdev = 0,001
[info]   CI (99.9%): [3456,001, 3456,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,146), stdev = 0,061
[info]   CI (99.9%): [≈ 0, 0,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,225 ±(99.9%) 1,263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,225, 0,787), stdev = 0,328
[info]   CI (99.9%): [≈ 0, 1,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,494 ±(99.9%) 2,746 MB/sec [Average]
[info]   (min, avg, max) = (673,661, 674,494, 675,409), stdev = 0,713
[info]   CI (99.9%): [671,749, 677,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3643,723 ±(99.9%) 41,164 B/op [Average]
[info]   (min, avg, max) = (3631,440, 3643,723, 3657,383), stdev = 10,690
[info]   CI (99.9%): [3602,559, 3684,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,56% complete, ETA 01:20:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 485426,617 ops/s
[info] # Warmup Iteration   2: 516179,335 ops/s
[info] # Warmup Iteration   3: 514275,077 ops/s
[info] # Warmup Iteration   4: 513772,951 ops/s
[info] # Warmup Iteration   5: 514235,829 ops/s
[info] Iteration   1: 500350,733 ops/s
[info]                  ·gc.alloc.rate:                   630,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2122,462 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 468854,367 ops/s
[info]                  ·gc.alloc.rate:                   591,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2265,294 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 465767,116 ops/s
[info]                  ·gc.alloc.rate:                   587,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2273,377 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 469658,777 ops/s
[info]                  ·gc.alloc.rate:      592,064 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 465867,281 ops/s
[info]                  ·gc.alloc.rate:                   587,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2272,826 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   474099,655 ±(99.9%) 56904,803 ops/s [Average]
[info]   (min, avg, max) = (465767,116, 474099,655, 500350,733), stdev = 14777,997
[info]   CI (99.9%): [417194,852, 531004,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   597,668 ±(99.9%) 71,597 MB/sec [Average]
[info]   (min, avg, max) = (587,164, 597,668, 630,695), stdev = 18,594
[info]   CI (99.9%): [526,071, 669,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1984,001, 1984,001, 1984,001), stdev = 0,001
[info]   CI (99.9%): [1984,001, 1984,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,662 ±(99.9%) 5,659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,662, 3,291), stdev = 1,470
[info]   CI (99.9%): [≈ 0, 6,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2,085 ±(99.9%) 17,801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,085, 10,354), stdev = 4,623
[info]   CI (99.9%): [≈ 0, 19,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539,048 ±(99.9%) 1160,348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,048, 674,917), stdev = 301,339
[info]   CI (99.9%): [≈ 0, 1699,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1786,792 ±(99.9%) 3854,136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1786,792, 2273,377), stdev = 1000,907
[info]   CI (99.9%): [≈ 0, 5640,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39,76% complete, ETA 01:20:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53686,185 ops/s
[info] # Warmup Iteration   2: 79038,597 ops/s
[info] # Warmup Iteration   3: 78468,417 ops/s
[info] # Warmup Iteration   4: 79221,509 ops/s
[info] # Warmup Iteration   5: 79568,261 ops/s
[info] Iteration   1: 79255,172 ops/s
[info]                  ·gc.alloc.rate:                   3536,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4072,092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80857,081 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 79658,709 ops/s
[info]                  ·gc.alloc.rate:                   3555,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399,203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67149,928 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 78161,646 ops/s
[info]                  ·gc.alloc.rate:                   3488,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68497,648 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 78916,205 ops/s
[info]                  ·gc.alloc.rate:                   3521,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67880,604 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 79095,538 ops/s
[info]                  ·gc.alloc.rate:                   3529,725 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67742,845 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   79017,454 ±(99.9%) 2123,513 ops/s [Average]
[info]   (min, avg, max) = (78161,646, 79017,454, 79658,709), stdev = 551,470
[info]   CI (99.9%): [76893,941, 81140,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3526,344 ±(99.9%) 95,090 MB/sec [Average]
[info]   (min, avg, max) = (3488,157, 3526,344, 3555,221), stdev = 24,695
[info]   CI (99.9%): [3431,253, 3621,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70232,005, 70232,005, 70232,006), stdev = 0,001
[info]   CI (99.9%): [70232,005, 70232,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,079 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,079, 0,125), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,576 ±(99.9%) 3,064 B/op [Average]
[info]   (min, avg, max) = (0,413, 1,576, 2,468), stdev = 0,796
[info]   CI (99.9%): [≈ 0, 4,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3536,330 ±(99.9%) 1153,294 MB/sec [Average]
[info]   (min, avg, max) = (3399,203, 3536,330, 4072,092), stdev = 299,507
[info]   CI (99.9%): [2383,036, 4689,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   70425,621 ±(99.9%) 22530,134 B/op [Average]
[info]   (min, avg, max) = (67149,928, 70425,621, 80857,081), stdev = 5851,004
[info]   CI (99.9%): [47895,487, 92955,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39,96% complete, ETA 01:19:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137089,661 ops/s
[info] # Warmup Iteration   2: 168585,822 ops/s
[info] # Warmup Iteration   3: 167408,960 ops/s
[info] # Warmup Iteration   4: 168128,075 ops/s
[info] # Warmup Iteration   5: 168153,410 ops/s
[info] Iteration   1: 166873,631 ops/s
[info]                  ·gc.alloc.rate:                   1177,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6326,525 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 167472,401 ops/s
[info]                  ·gc.alloc.rate:                   1181,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12607,125 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 165575,691 ops/s
[info]                  ·gc.alloc.rate:                   1168,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12754,928 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 168411,522 ops/s
[info]                  ·gc.alloc.rate:                   1188,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12549,298 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 170098,739 ops/s
[info]                  ·gc.alloc.rate:                   1200,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6215,587 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   167686,397 ±(99.9%) 6530,975 ops/s [Average]
[info]   (min, avg, max) = (165575,691, 167686,397, 170098,739), stdev = 1696,073
[info]   CI (99.9%): [161155,422, 174217,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1183,121 ±(99.9%) 46,103 MB/sec [Average]
[info]   (min, avg, max) = (1168,266, 1183,121, 1200,170), stdev = 11,973
[info]   CI (99.9%): [1137,018, 1229,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11104,002, 11104,003, 11104,003), stdev = 0,001
[info]   CI (99.9%): [11104,002, 11104,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,314 ±(99.9%) 1,158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,314, 0,791), stdev = 0,301
[info]   CI (99.9%): [≈ 0, 1,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1073,802 ±(99.9%) 1414,868 MB/sec [Average]
[info]   (min, avg, max) = (670,782, 1073,802, 1342,894), stdev = 367,437
[info]   CI (99.9%): [≈ 0, 2488,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10090,693 ±(99.9%) 13430,514 B/op [Average]
[info]   (min, avg, max) = (6215,587, 10090,693, 12754,928), stdev = 3487,862
[info]   CI (99.9%): [≈ 0, 23521,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40,16% complete, ETA 01:19:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212193,236 ops/s
[info] # Warmup Iteration   2: 800380,416 ops/s
[info] # Warmup Iteration   3: 752754,063 ops/s
[info] # Warmup Iteration   4: 753616,408 ops/s
[info] # Warmup Iteration   5: 753675,307 ops/s
[info] Iteration   1: 752806,899 ops/s
[info]                  ·gc.alloc.rate:                   589,364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1408,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 756012,938 ops/s
[info]                  ·gc.alloc.rate:      591,868 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 741350,456 ops/s
[info]                  ·gc.alloc.rate:                   580,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1429,736 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 754132,850 ops/s
[info]                  ·gc.alloc.rate:                   590,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1402,719 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 753579,177 ops/s
[info]                  ·gc.alloc.rate:                   589,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1403,798 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   751576,464 ±(99.9%) 22478,783 ops/s [Average]
[info]   (min, avg, max) = (741350,456, 751576,464, 756012,938), stdev = 5837,668
[info]   CI (99.9%): [729097,681, 774055,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   588,393 ±(99.9%) 17,644 MB/sec [Average]
[info]   (min, avg, max) = (580,365, 588,393, 591,868), stdev = 4,582
[info]   CI (99.9%): [570,749, 606,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,001, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,540 ±(99.9%) 4,512 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,540, 2,635), stdev = 1,172
[info]   CI (99.9%): [≈ 0, 5,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1,128 ±(99.9%) 9,432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,128, 5,509), stdev = 2,449
[info]   CI (99.9%): [≈ 0, 10,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   538,305 ±(99.9%) 1158,744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,305, 673,560), stdev = 300,922
[info]   CI (99.9%): [≈ 0, 1697,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1128,851 ±(99.9%) 2430,303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1128,851, 1429,736), stdev = 631,142
[info]   CI (99.9%): [≈ 0, 3559,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,36% complete, ETA 01:19:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 392779,291 ops/s
[info] # Warmup Iteration   2: 537158,857 ops/s
[info] # Warmup Iteration   3: 525251,390 ops/s
[info] # Warmup Iteration   4: 536978,075 ops/s
[info] # Warmup Iteration   5: 538426,362 ops/s
[info] Iteration   1: 536469,514 ops/s
[info]                  ·gc.alloc.rate:      550,944 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 534565,573 ops/s
[info]                  ·gc.alloc.rate:                   548,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1983,766 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 538015,139 ops/s
[info]                  ·gc.alloc.rate:                   552,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1970,971 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 537883,445 ops/s
[info]                  ·gc.alloc.rate:                   552,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1974,319 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 538388,693 ops/s
[info]                  ·gc.alloc.rate:                   552,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1972,494 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   537064,473 ±(99.9%) 6065,993 ops/s [Average]
[info]   (min, avg, max) = (534565,573, 537064,473, 538388,693), stdev = 1575,319
[info]   CI (99.9%): [530998,480, 543130,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   551,486 ±(99.9%) 6,096 MB/sec [Average]
[info]   (min, avg, max) = (548,950, 551,486, 552,816), stdev = 1,583
[info]   CI (99.9%): [545,389, 557,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1616,001, 1616,001, 1616,001), stdev = 0,001
[info]   CI (99.9%): [1616,001, 1616,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,086 ±(99.9%) 0,490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,086, 0,306), stdev = 0,127
[info]   CI (99.9%): [≈ 0, 0,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539,434 ±(99.9%) 1161,175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,434, 674,769), stdev = 301,553
[info]   CI (99.9%): [≈ 0, 1700,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1580,310 ±(99.9%) 3401,791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1580,310, 1983,766), stdev = 883,434
[info]   CI (99.9%): [≈ 0, 4982,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,56% complete, ETA 01:19:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 662159,139 ops/s
[info] # Warmup Iteration   2: 700208,023 ops/s
[info] # Warmup Iteration   3: 644517,267 ops/s
[info] # Warmup Iteration   4: 646958,122 ops/s
[info] # Warmup Iteration   5: 651413,150 ops/s
[info] Iteration   1: 648190,495 ops/s
[info]                  ·gc.alloc.rate:                   507,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1242,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 651316,226 ops/s
[info]                  ·gc.alloc.rate:      509,921 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 649985,068 ops/s
[info]                  ·gc.alloc.rate:                   508,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1633,821 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 649809,324 ops/s
[info]                  ·gc.alloc.rate:                   508,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1634,263 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 649219,209 ops/s
[info]                  ·gc.alloc.rate:                   508,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1630,912 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   649704,065 ±(99.9%) 4396,773 ops/s [Average]
[info]   (min, avg, max) = (648190,495, 649704,065, 651316,226), stdev = 1141,828
[info]   CI (99.9%): [645307,292, 654100,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   508,600 ±(99.9%) 3,596 MB/sec [Average]
[info]   (min, avg, max) = (507,349, 508,600, 509,921), stdev = 0,934
[info]   CI (99.9%): [505,004, 512,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,001, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,673 ±(99.9%) 5,652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,673, 3,298), stdev = 1,468
[info]   CI (99.9%): [≈ 0, 6,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,630 ±(99.9%) 13,685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,630, 7,987), stdev = 3,554
[info]   CI (99.9%): [≈ 0, 15,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506,769 ±(99.9%) 1124,050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,769, 674,767), stdev = 291,912
[info]   CI (99.9%): [≈ 0, 1630,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1228,219 ±(99.9%) 2722,994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1228,219, 1634,263), stdev = 707,153
[info]   CI (99.9%): [≈ 0, 3951,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40,76% complete, ETA 01:18:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 717774,309 ops/s
[info] # Warmup Iteration   2: 750704,922 ops/s
[info] # Warmup Iteration   3: 781708,880 ops/s
[info] # Warmup Iteration   4: 783476,320 ops/s
[info] # Warmup Iteration   5: 785045,134 ops/s
[info] Iteration   1: 783765,151 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 785378,735 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 784100,729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 782019,555 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 782057,971 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   783464,428 ±(99.9%) 5521,905 ops/s [Average]
[info]   (min, avg, max) = (782019,555, 783464,428, 785378,735), stdev = 1434,021
[info]   CI (99.9%): [777942,524, 788986,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40,96% complete, ETA 01:18:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25348,643 ops/s
[info] # Warmup Iteration   2: 32813,689 ops/s
[info] # Warmup Iteration   3: 33375,162 ops/s
[info] # Warmup Iteration   4: 33564,633 ops/s
[info] # Warmup Iteration   5: 33570,066 ops/s
[info] Iteration   1: 33622,405 ops/s
[info]                  ·gc.alloc.rate:                   1724,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009,115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94041,013 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33678,933 ops/s
[info]                  ·gc.alloc.rate:                   1727,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62666,137 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33634,038 ops/s
[info]                  ·gc.alloc.rate:                   1724,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94241,239 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33195,950 ops/s
[info]                  ·gc.alloc.rate:                   1702,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63757,716 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33496,343 ops/s
[info]                  ·gc.alloc.rate:                   1717,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94939,568 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   33525,534 ±(99.9%) 755,958 ops/s [Average]
[info]   (min, avg, max) = (33195,950, 33525,534, 33678,933), stdev = 196,320
[info]   CI (99.9%): [32769,576, 34281,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1719,245 ±(99.9%) 38,737 MB/sec [Average]
[info]   (min, avg, max) = (1702,370, 1719,245, 1727,224), stdev = 10,060
[info]   CI (99.9%): [1680,509, 1757,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80704,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80704,012, 80704,012, 80704,012), stdev = 0,001
[info]   CI (99.9%): [80704,012, 80704,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,538 ±(99.9%) 5,681 B/op [Average]
[info]   (min, avg, max) = (0,973, 2,538, 3,898), stdev = 1,475
[info]   CI (99.9%): [≈ 0, 8,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1745,990 ±(99.9%) 1416,518 MB/sec [Average]
[info]   (min, avg, max) = (1341,178, 1745,990, 2020,747), stdev = 367,865
[info]   CI (99.9%): [329,472, 3162,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81929,135 ±(99.9%) 65822,939 B/op [Average]
[info]   (min, avg, max) = (62666,137, 81929,135, 94939,568), stdev = 17094,008
[info]   CI (99.9%): [16106,196, 147752,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41,16% complete, ETA 01:18:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6941,335 ops/s
[info] # Warmup Iteration   2: 9242,618 ops/s
[info] # Warmup Iteration   3: 9200,059 ops/s
[info] # Warmup Iteration   4: 9158,912 ops/s
[info] # Warmup Iteration   5: 9273,131 ops/s
[info] Iteration   1: 9156,081 ops/s
[info]                  ·gc.alloc.rate:                   1391,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              239200,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230803,496 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9208,637 ops/s
[info]                  ·gc.alloc.rate:                   1399,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              239202,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229500,512 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9172,496 ops/s
[info]                  ·gc.alloc.rate:                   1394,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              239224,079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230515,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9284,072 ops/s
[info]                  ·gc.alloc.rate:                   1411,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              239224,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227985,671 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9181,732 ops/s
[info]                  ·gc.alloc.rate:                   1395,680 MB/sec
[info]                  ·gc.alloc.rate.norm:              239224,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230746,091 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   9200,603 ±(99.9%) 194,065 ops/s [Average]
[info]   (min, avg, max) = (9156,081, 9200,603, 9284,072), stdev = 50,398
[info]   CI (99.9%): [9006,538, 9394,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1398,587 ±(99.9%) 29,323 MB/sec [Average]
[info]   (min, avg, max) = (1391,975, 1398,587, 1411,210), stdev = 7,615
[info]   CI (99.9%): [1369,264, 1427,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   239214,845 ±(99.9%) 48,645 B/op [Average]
[info]   (min, avg, max) = (239200,048, 239214,845, 239224,079), stdev = 12,633
[info]   CI (99.9%): [239166,200, 239263,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4,261 ±(99.9%) 14,862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,261, 10,586), stdev = 3,860
[info]   CI (99.9%): [≈ 0, 19,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1344,157 ±(99.9%) 5,298 MB/sec [Average]
[info]   (min, avg, max) = (1343,058, 1344,157, 1346,218), stdev = 1,376
[info]   CI (99.9%): [1338,859, 1349,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   229910,212 ±(99.9%) 4610,525 B/op [Average]
[info]   (min, avg, max) = (227985,671, 229910,212, 230803,496), stdev = 1197,339
[info]   CI (99.9%): [225299,687, 234520,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,37% complete, ETA 01:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5186,849 ops/s
[info] # Warmup Iteration   2: 9072,751 ops/s
[info] # Warmup Iteration   3: 9209,654 ops/s
[info] # Warmup Iteration   4: 9207,783 ops/s
[info] # Warmup Iteration   5: 9165,527 ops/s
[info] Iteration   1: 9172,725 ops/s
[info]                  ·gc.alloc.rate:                   1322,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231943,868 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9246,669 ops/s
[info]                  ·gc.alloc.rate:                   1332,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230258,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9161,893 ops/s
[info]                  ·gc.alloc.rate:                   1320,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232622,764 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9193,757 ops/s
[info]                  ·gc.alloc.rate:                   1325,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232041,340 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9231,972 ops/s
[info]                  ·gc.alloc.rate:                   1330,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231231,730 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9201,403 ±(99.9%) 141,814 ops/s [Average]
[info]   (min, avg, max) = (9161,893, 9201,403, 9246,669), stdev = 36,829
[info]   CI (99.9%): [9059,589, 9343,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1326,403 ±(99.9%) 20,465 MB/sec [Average]
[info]   (min, avg, max) = (1320,756, 1326,403, 1332,969), stdev = 5,315
[info]   CI (99.9%): [1305,938, 1346,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864,046 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (226864,044, 226864,046, 226864,048), stdev = 0,002
[info]   CI (99.9%): [226864,038, 226864,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4,981 ±(99.9%) 12,263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,981, 7,143), stdev = 3,185
[info]   CI (99.9%): [≈ 0, 17,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354,191 ±(99.9%) 7,180 MB/sec [Average]
[info]   (min, avg, max) = (1351,832, 1354,191, 1356,412), stdev = 1,865
[info]   CI (99.9%): [1347,011, 1361,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   231619,575 ±(99.9%) 3493,955 B/op [Average]
[info]   (min, avg, max) = (230258,175, 231619,575, 232622,764), stdev = 907,369
[info]   CI (99.9%): [228125,620, 235113,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,57% complete, ETA 01:17:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154254,066 ops/s
[info] # Warmup Iteration   2: 173912,133 ops/s
[info] # Warmup Iteration   3: 173707,488 ops/s
[info] # Warmup Iteration   4: 175032,671 ops/s
[info] # Warmup Iteration   5: 176018,942 ops/s
[info] Iteration   1: 174831,714 ops/s
[info]                  ·gc.alloc.rate:                   1693,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18168,530 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 176629,620 ops/s
[info]                  ·gc.alloc.rate:                   1711,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12001,838 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 175318,932 ops/s
[info]                  ·gc.alloc.rate:                   1698,647 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18150,961 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 175397,271 ops/s
[info]                  ·gc.alloc.rate:                   1699,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12108,999 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 166024,724 ops/s
[info]                  ·gc.alloc.rate:                   1608,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19211,338 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   173640,452 ±(99.9%) 16591,009 ops/s [Average]
[info]   (min, avg, max) = (166024,724, 173640,452, 176629,620), stdev = 4308,632
[info]   CI (99.9%): [157049,443, 190231,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1682,339 ±(99.9%) 160,805 MB/sec [Average]
[info]   (min, avg, max) = (1608,548, 1682,339, 1711,395), stdev = 41,761
[info]   CI (99.9%): [1521,534, 1843,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15248,002, 15248,002, 15248,003), stdev = 0,001
[info]   CI (99.9%): [15248,002, 15248,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,373 ±(99.9%) 1,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,373, 0,747), stdev = 0,296
[info]   CI (99.9%): [≈ 0, 1,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1752,681 ±(99.9%) 1421,463 MB/sec [Average]
[info]   (min, avg, max) = (1347,054, 1752,681, 2026,650), stdev = 369,149
[info]   CI (99.9%): [331,218, 3174,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15928,333 ±(99.9%) 13714,639 B/op [Average]
[info]   (min, avg, max) = (12001,838, 15928,333, 19211,338), stdev = 3561,648
[info]   CI (99.9%): [2213,694, 29642,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,77% complete, ETA 01:17:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4745,818 ops/s
[info] # Warmup Iteration   2: 8556,618 ops/s
[info] # Warmup Iteration   3: 8652,735 ops/s
[info] # Warmup Iteration   4: 8678,269 ops/s
[info] # Warmup Iteration   5: 8676,894 ops/s
[info] Iteration   1: 8659,480 ops/s
[info]                  ·gc.alloc.rate:                   1575,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11,349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368853,737 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8648,208 ops/s
[info]                  ·gc.alloc.rate:                   1573,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246445,666 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8602,766 ops/s
[info]                  ·gc.alloc.rate:                   1564,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              286285,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247978,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8672,095 ops/s
[info]                  ·gc.alloc.rate:                   1577,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369267,975 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8680,276 ops/s
[info]                  ·gc.alloc.rate:                   1578,923 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246112,851 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8652,565 ±(99.9%) 117,050 ops/s [Average]
[info]   (min, avg, max) = (8602,766, 8652,565, 8680,276), stdev = 30,398
[info]   CI (99.9%): [8535,515, 8769,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1573,954 ±(99.9%) 21,198 MB/sec [Average]
[info]   (min, avg, max) = (1564,904, 1573,954, 1578,923), stdev = 5,505
[info]   CI (99.9%): [1552,756, 1595,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286281,194 ±(99.9%) 9,853 B/op [Average]
[info]   (min, avg, max) = (286280,047, 286281,194, 286285,772), stdev = 2,559
[info]   CI (99.9%): [286271,341, 286291,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4,538 ±(99.9%) 18,985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,538, 11,349), stdev = 4,930
[info]   CI (99.9%): [≈ 0, 23,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1626,311 ±(99.9%) 1426,625 MB/sec [Average]
[info]   (min, avg, max) = (1354,351, 1626,311, 2034,812), stdev = 370,490
[info]   CI (99.9%): [199,687, 3052,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   295731,680 ±(99.9%) 257777,236 B/op [Average]
[info]   (min, avg, max) = (246112,851, 295731,680, 369267,975), stdev = 66943,930
[info]   CI (99.9%): [37954,444, 553508,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41,97% complete, ETA 01:17:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7028,168 ops/s
[info] # Warmup Iteration   2: 9213,684 ops/s
[info] # Warmup Iteration   3: 9205,095 ops/s
[info] # Warmup Iteration   4: 9257,422 ops/s
[info] # Warmup Iteration   5: 9176,824 ops/s
[info] Iteration   1: 9172,855 ops/s
[info]                  ·gc.alloc.rate:                   1270,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              218072,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230832,990 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9228,799 ops/s
[info]                  ·gc.alloc.rate:                   1278,958 MB/sec
[info]                  ·gc.alloc.rate.norm:              218074,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229230,459 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9217,649 ops/s
[info]                  ·gc.alloc.rate:                   1277,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              218096,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229731,401 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9234,839 ops/s
[info]                  ·gc.alloc.rate:                   1279,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              218096,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229397,283 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9214,818 ops/s
[info]                  ·gc.alloc.rate:                   1277,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              218096,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230122,505 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   9213,792 ±(99.9%) 93,531 ops/s [Average]
[info]   (min, avg, max) = (9172,855, 9213,792, 9234,839), stdev = 24,290
[info]   CI (99.9%): [9120,262, 9307,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1276,826 ±(99.9%) 13,341 MB/sec [Average]
[info]   (min, avg, max) = (1270,962, 1276,826, 1279,782), stdev = 3,465
[info]   CI (99.9%): [1263,485, 1290,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   218086,891 ±(99.9%) 48,357 B/op [Average]
[info]   (min, avg, max) = (218072,051, 218086,891, 218096,044), stdev = 12,558
[info]   CI (99.9%): [218038,534, 218135,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6,408 ±(99.9%) 24,518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,408, 14,219), stdev = 6,367
[info]   CI (99.9%): [≈ 0, 30,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1345,763 ±(99.9%) 4,425 MB/sec [Average]
[info]   (min, avg, max) = (1344,386, 1345,763, 1347,501), stdev = 1,149
[info]   CI (99.9%): [1341,339, 1350,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   229862,928 ±(99.9%) 2467,526 B/op [Average]
[info]   (min, avg, max) = (229230,459, 229862,928, 230832,990), stdev = 640,809
[info]   CI (99.9%): [227395,402, 232330,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42,17% complete, ETA 01:16:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15532,184 ops/s
[info] # Warmup Iteration   2: 20546,797 ops/s
[info] # Warmup Iteration   3: 20565,189 ops/s
[info] # Warmup Iteration   4: 20723,504 ops/s
[info] # Warmup Iteration   5: 20450,314 ops/s
[info] Iteration   1: 20619,184 ops/s
[info]                  ·gc.alloc.rate:                   935,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              71419,693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51297,609 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 20721,535 ops/s
[info]                  ·gc.alloc.rate:                   940,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51045,167 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 20677,686 ops/s
[info]                  ·gc.alloc.rate:                   938,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102104,727 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20681,280 ops/s
[info]                  ·gc.alloc.rate:                   938,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51044,959 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 20688,336 ops/s
[info]                  ·gc.alloc.rate:                   938,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102075,788 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20677,604 ±(99.9%) 142,416 ops/s [Average]
[info]   (min, avg, max) = (20619,184, 20677,604, 20721,535), stdev = 36,985
[info]   CI (99.9%): [20535,188, 20820,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   938,222 ±(99.9%) 6,502 MB/sec [Average]
[info]   (min, avg, max) = (935,552, 938,222, 940,224), stdev = 1,689
[info]   CI (99.9%): [931,720, 944,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71410,355 ±(99.9%) 20,101 B/op [Average]
[info]   (min, avg, max) = (71408,020, 71410,355, 71419,693), stdev = 5,220
[info]   CI (99.9%): [71390,253, 71430,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,634 ±(99.9%) 3,341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,634, 1,584), stdev = 0,868
[info]   CI (99.9%): [≈ 0, 3,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   939,657 ±(99.9%) 1413,272 MB/sec [Average]
[info]   (min, avg, max) = (670,794, 939,657, 1341,864), stdev = 367,022
[info]   CI (99.9%): [≈ 0, 2352,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   71513,650 ±(99.9%) 107481,823 B/op [Average]
[info]   (min, avg, max) = (51044,959, 71513,650, 102104,727), stdev = 27912,688
[info]   CI (99.9%): [≈ 0, 178995,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,37% complete, ETA 01:16:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15795,737 ops/s
[info] # Warmup Iteration   2: 22788,545 ops/s
[info] # Warmup Iteration   3: 22865,857 ops/s
[info] # Warmup Iteration   4: 22958,519 ops/s
[info] # Warmup Iteration   5: 22917,758 ops/s
[info] Iteration   1: 22930,272 ops/s
[info]                  ·gc.alloc.rate:                   971,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46334,661 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 22968,994 ops/s
[info]                  ·gc.alloc.rate:                   973,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46305,678 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 22902,399 ops/s
[info]                  ·gc.alloc.rate:                   970,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92897,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22949,157 ops/s
[info]                  ·gc.alloc.rate:                   972,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46364,829 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 22859,118 ops/s
[info]                  ·gc.alloc.rate:                   968,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93186,374 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   22921,988 ±(99.9%) 165,093 ops/s [Average]
[info]   (min, avg, max) = (22859,118, 22921,988, 22968,994), stdev = 42,874
[info]   CI (99.9%): [22756,895, 23087,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   971,352 ±(99.9%) 6,905 MB/sec [Average]
[info]   (min, avg, max) = (968,698, 971,352, 973,225), stdev = 1,793
[info]   CI (99.9%): [964,447, 978,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696,018 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (66696,018, 66696,018, 66696,019), stdev = 0,001
[info]   CI (99.9%): [66696,015, 66696,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,430 ±(99.9%) 7,787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,430, 4,291), stdev = 2,022
[info]   CI (99.9%): [≈ 0, 9,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946,425 ±(99.9%) 1427,895 MB/sec [Average]
[info]   (min, avg, max) = (675,039, 946,425, 1353,446), stdev = 370,820
[info]   CI (99.9%): [≈ 0, 2374,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   65017,713 ±(99.9%) 98509,077 B/op [Average]
[info]   (min, avg, max) = (46305,678, 65017,713, 93186,374), stdev = 25582,495
[info]   CI (99.9%): [≈ 0, 163526,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,57% complete, ETA 01:16:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457368,251 ops/s
[info] # Warmup Iteration   2: 492146,328 ops/s
[info] # Warmup Iteration   3: 492601,533 ops/s
[info] # Warmup Iteration   4: 491812,834 ops/s
[info] # Warmup Iteration   5: 490849,562 ops/s
[info] Iteration   1: 490879,727 ops/s
[info]                  ·gc.alloc.rate:                   1112,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4316,182 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 490823,766 ops/s
[info]                  ·gc.alloc.rate:                   1112,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4314,864 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 486886,162 ops/s
[info]                  ·gc.alloc.rate:                   1103,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2174,656 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 490949,354 ops/s
[info]                  ·gc.alloc.rate:                   1113,069 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4313,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 491264,983 ops/s
[info]                  ·gc.alloc.rate:                   1113,792 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4314,882 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   490160,798 ±(99.9%) 7079,499 ops/s [Average]
[info]   (min, avg, max) = (486886,162, 490160,798, 491264,983), stdev = 1838,524
[info]   CI (99.9%): [483081,299, 497240,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1111,221 ±(99.9%) 16,132 MB/sec [Average]
[info]   (min, avg, max) = (1103,767, 1111,221, 1113,792), stdev = 4,189
[info]   CI (99.9%): [1095,089, 1127,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3568,001, 3568,001, 3568,001), stdev = 0,001
[info]   CI (99.9%): [3568,001, 3568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,187 ±(99.9%) 0,494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,187, 0,334), stdev = 0,128
[info]   CI (99.9%): [≈ 0, 0,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1211,399 ±(99.9%) 1159,521 MB/sec [Average]
[info]   (min, avg, max) = (672,733, 1211,399, 1346,940), stdev = 301,124
[info]   CI (99.9%): [51,878, 2370,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3886,789 ±(99.9%) 3685,498 B/op [Average]
[info]   (min, avg, max) = (2174,656, 3886,789, 4316,182), stdev = 957,112
[info]   CI (99.9%): [201,291, 7572,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42,77% complete, ETA 01:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 534474,328 ops/s
[info] # Warmup Iteration   2: 569853,160 ops/s
[info] # Warmup Iteration   3: 569434,225 ops/s
[info] # Warmup Iteration   4: 568379,937 ops/s
[info] # Warmup Iteration   5: 567539,368 ops/s
[info] Iteration   1: 542269,175 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 572950,581 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 570595,617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 570256,689 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 394481,341 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   530110,680 ±(99.9%) 295956,093 ops/s [Average]
[info]   (min, avg, max) = (394481,341, 530110,680, 572950,581), stdev = 76858,858
[info]   CI (99.9%): [234154,587, 826066,774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻⁴, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42,97% complete, ETA 01:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17170,896 ops/s
[info] # Warmup Iteration   2: 21736,597 ops/s
[info] # Warmup Iteration   3: 21803,723 ops/s
[info] # Warmup Iteration   4: 21849,650 ops/s
[info] # Warmup Iteration   5: 21875,635 ops/s
[info] Iteration   1: 21744,226 ops/s
[info]                  ·gc.alloc.rate:                   1002,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              72575,281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97095,727 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 21876,616 ops/s
[info]                  ·gc.alloc.rate:                   1008,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48161,367 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 21819,885 ops/s
[info]                  ·gc.alloc.rate:                   1006,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96574,311 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 21807,293 ops/s
[info]                  ·gc.alloc.rate:                   1005,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48309,291 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21768,636 ops/s
[info]                  ·gc.alloc.rate:                   1003,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96839,786 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   21803,331 ±(99.9%) 195,945 ops/s [Average]
[info]   (min, avg, max) = (21744,226, 21803,331, 21876,616), stdev = 50,886
[info]   CI (99.9%): [21607,386, 21999,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1005,414 ±(99.9%) 9,081 MB/sec [Average]
[info]   (min, avg, max) = (1002,664, 1005,414, 1008,849), stdev = 2,358
[info]   CI (99.9%): [996,332, 1014,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72575,872 ±(99.9%) 1,272 B/op [Average]
[info]   (min, avg, max) = (72575,281, 72575,872, 72576,020), stdev = 0,330
[info]   CI (99.9%): [72574,600, 72577,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3,007 ±(99.9%) 12,269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,007, 7,507), stdev = 3,186
[info]   CI (99.9%): [≈ 0, 15,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071,702 ±(99.9%) 1414,093 MB/sec [Average]
[info]   (min, avg, max) = (669,364, 1071,702, 1341,426), stdev = 367,236
[info]   CI (99.9%): [≈ 0, 2485,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   77396,096 ±(99.9%) 102506,861 B/op [Average]
[info]   (min, avg, max) = (48161,367, 77396,096, 97095,727), stdev = 26620,706
[info]   CI (99.9%): [≈ 0, 179902,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43,17% complete, ETA 01:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10356,202 ops/s
[info] # Warmup Iteration   2: 11279,955 ops/s
[info] # Warmup Iteration   3: 11169,291 ops/s
[info] # Warmup Iteration   4: 11063,412 ops/s
[info] # Warmup Iteration   5: 11092,317 ops/s
[info] Iteration   1: 11179,747 ops/s
[info]                  ·gc.alloc.rate:                   626,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     422,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95086,395 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11214,640 ops/s
[info]                  ·gc.alloc.rate:                   629,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94798,151 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11233,268 ops/s
[info]                  ·gc.alloc.rate:      630,021 MB/sec
[info]                  ·gc.alloc.rate.norm: 88264,036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10881,247 ops/s
[info]                  ·gc.alloc.rate:                   610,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97400,803 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 11171,596 ops/s
[info]                  ·gc.alloc.rate:                   626,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94872,949 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   11136,100 ±(99.9%) 557,098 ops/s [Average]
[info]   (min, avg, max) = (10881,247, 11136,100, 11233,268), stdev = 144,677
[info]   CI (99.9%): [10579,002, 11693,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   624,583 ±(99.9%) 31,283 MB/sec [Average]
[info]   (min, avg, max) = (610,276, 624,583, 630,021), stdev = 8,124
[info]   CI (99.9%): [593,300, 655,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88264,038 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (88264,036, 88264,038, 88264,046), stdev = 0,004
[info]   CI (99.9%): [88264,023, 88264,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,612 ±(99.9%) 5,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,612, 2,999), stdev = 1,335
[info]   CI (99.9%): [≈ 0, 5,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   86,206 ±(99.9%) 723,541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86,206, 422,266), stdev = 187,901
[info]   CI (99.9%): [≈ 0, 809,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   539,603 ±(99.9%) 1161,543 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,603, 675,623), stdev = 301,649
[info]   CI (99.9%): [≈ 0, 1701,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   76431,660 ±(99.9%) 164577,439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 76431,660, 97400,803), stdev = 42740,238
[info]   CI (99.9%): [≈ 0, 241009,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43,37% complete, ETA 01:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11711,996 ops/s
[info] # Warmup Iteration   2: 15204,124 ops/s
[info] # Warmup Iteration   3: 15280,404 ops/s
[info] # Warmup Iteration   4: 15368,014 ops/s
[info] # Warmup Iteration   5: 15322,932 ops/s
[info] Iteration   1: 15174,808 ops/s
[info]                  ·gc.alloc.rate:                   1504,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              156064,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139266,698 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 15237,571 ops/s
[info]                  ·gc.alloc.rate:                   1510,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              156064,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138709,266 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 15329,582 ops/s
[info]                  ·gc.alloc.rate:                   1520,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              156062,991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207041,273 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15360,689 ops/s
[info]                  ·gc.alloc.rate:                   1523,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              156064,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137887,915 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15380,396 ops/s
[info]                  ·gc.alloc.rate:                   1525,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              156064,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137888,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   15296,609 ±(99.9%) 336,435 ops/s [Average]
[info]   (min, avg, max) = (15174,808, 15296,609, 15380,396), stdev = 87,371
[info]   CI (99.9%): [14960,174, 15633,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1516,833 ±(99.9%) 33,508 MB/sec [Average]
[info]   (min, avg, max) = (1504,702, 1516,833, 1525,162), stdev = 8,702
[info]   CI (99.9%): [1483,325, 1550,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   156063,822 ±(99.9%) 1,788 B/op [Average]
[info]   (min, avg, max) = (156062,991, 156063,822, 156064,036), stdev = 0,464
[info]   CI (99.9%): [156062,033, 156065,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4,291 ±(99.9%) 10,130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,291, 6,476), stdev = 2,631
[info]   CI (99.9%): [≈ 0, 14,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479,146 ±(99.9%) 1157,210 MB/sec [Average]
[info]   (min, avg, max) = (1342,749, 1479,146, 2016,727), stdev = 300,524
[info]   CI (99.9%): [321,936, 2636,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   152158,634 ±(99.9%) 118160,438 B/op [Average]
[info]   (min, avg, max) = (137887,915, 152158,634, 207041,273), stdev = 30685,891
[info]   CI (99.9%): [33998,196, 270319,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,57% complete, ETA 01:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9157,579 ops/s
[info] # Warmup Iteration   2: 14900,986 ops/s
[info] # Warmup Iteration   3: 15122,325 ops/s
[info] # Warmup Iteration   4: 14987,770 ops/s
[info] # Warmup Iteration   5: 15115,701 ops/s
[info] Iteration   1: 15044,608 ops/s
[info]                  ·gc.alloc.rate:                   1377,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141410,392 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 15128,293 ops/s
[info]                  ·gc.alloc.rate:                   1384,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140738,690 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 15089,765 ops/s
[info]                  ·gc.alloc.rate:                   1381,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              144079,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141231,947 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15113,807 ops/s
[info]                  ·gc.alloc.rate:                   1383,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141146,459 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15115,246 ops/s
[info]                  ·gc.alloc.rate:                   1383,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141241,155 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   15098,344 ±(99.9%) 127,463 ops/s [Average]
[info]   (min, avg, max) = (15044,608, 15098,344, 15128,293), stdev = 33,102
[info]   CI (99.9%): [14970,881, 15225,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1382,157 ±(99.9%) 11,463 MB/sec [Average]
[info]   (min, avg, max) = (1377,340, 1382,157, 1384,996), stdev = 2,977
[info]   CI (99.9%): [1370,694, 1393,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144073,540 ±(99.9%) 62,967 B/op [Average]
[info]   (min, avg, max) = (144056,027, 144073,540, 144088,027), stdev = 16,352
[info]   CI (99.9%): [144010,573, 144136,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3,035 ±(99.9%) 9,505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,035, 6,496), stdev = 2,468
[info]   CI (99.9%): [≈ 0, 12,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354,143 ±(99.9%) 7,485 MB/sec [Average]
[info]   (min, avg, max) = (1351,744, 1354,143, 1356,528), stdev = 1,944
[info]   CI (99.9%): [1346,658, 1361,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   141153,729 ±(99.9%) 966,404 B/op [Average]
[info]   (min, avg, max) = (140738,690, 141153,729, 141410,392), stdev = 250,972
[info]   CI (99.9%): [140187,325, 142120,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,78% complete, ETA 01:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262046,252 ops/s
[info] # Warmup Iteration   2: 278958,512 ops/s
[info] # Warmup Iteration   3: 261159,259 ops/s
[info] # Warmup Iteration   4: 280459,963 ops/s
[info] # Warmup Iteration   5: 275779,556 ops/s
[info] Iteration   1: 278178,547 ops/s
[info]                  ·gc.alloc.rate:                   1609,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7599,688 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 276840,750 ops/s
[info]                  ·gc.alloc.rate:                   1601,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11460,747 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 278194,101 ops/s
[info]                  ·gc.alloc.rate:                   1609,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7616,510 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 275639,127 ops/s
[info]                  ·gc.alloc.rate:                   1594,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7693,842 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 276712,138 ops/s
[info]                  ·gc.alloc.rate:                   1600,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11511,136 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   277112,933 ±(99.9%) 4179,005 ops/s [Average]
[info]   (min, avg, max) = (275639,127, 277112,933, 278194,101), stdev = 1085,274
[info]   CI (99.9%): [272933,928, 281291,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1603,159 ±(99.9%) 24,065 MB/sec [Average]
[info]   (min, avg, max) = (1594,600, 1603,159, 1609,553), stdev = 6,250
[info]   CI (99.9%): [1579,094, 1627,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9104,001, 9104,002, 9104,002), stdev = 0,001
[info]   CI (99.9%): [9104,001, 9104,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,307 ±(99.9%) 0,518 B/op [Average]
[info]   (min, avg, max) = (0,119, 0,307, 0,473), stdev = 0,134
[info]   CI (99.9%): [≈ 0, 0,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1615,574 ±(99.9%) 1422,609 MB/sec [Average]
[info]   (min, avg, max) = (1343,154, 1615,574, 2023,873), stdev = 369,447
[info]   CI (99.9%): [192,964, 3038,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9176,385 ±(99.9%) 8119,859 B/op [Average]
[info]   (min, avg, max) = (7599,688, 9176,385, 11511,136), stdev = 2108,701
[info]   CI (99.9%): [1056,526, 17296,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43,98% complete, ETA 01:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7006,946 ops/s
[info] # Warmup Iteration   2: 13596,047 ops/s
[info] # Warmup Iteration   3: 13712,794 ops/s
[info] # Warmup Iteration   4: 13702,790 ops/s
[info] # Warmup Iteration   5: 13752,445 ops/s
[info] Iteration   1: 13696,611 ops/s
[info]                  ·gc.alloc.rate:                   1714,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233080,666 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 13201,774 ops/s
[info]                  ·gc.alloc.rate:                   1652,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161435,442 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13631,701 ops/s
[info]                  ·gc.alloc.rate:                   1706,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234691,548 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13707,844 ops/s
[info]                  ·gc.alloc.rate:                   1715,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155734,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 13695,808 ops/s
[info]                  ·gc.alloc.rate:                   1714,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233939,602 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13586,748 ±(99.9%) 836,693 ops/s [Average]
[info]   (min, avg, max) = (13201,774, 13586,748, 13707,844), stdev = 217,287
[info]   CI (99.9%): [12750,054, 14423,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1700,835 ±(99.9%) 104,809 MB/sec [Average]
[info]   (min, avg, max) = (1652,598, 1700,835, 1715,886), stdev = 27,219
[info]   CI (99.9%): [1596,025, 1805,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197016,033 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (197016,030, 197016,033, 197016,040), stdev = 0,004
[info]   CI (99.9%): [197016,017, 197016,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5,270 ±(99.9%) 15,178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,270, 9,612), stdev = 3,942
[info]   CI (99.9%): [≈ 0, 20,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1761,543 ±(99.9%) 1428,236 MB/sec [Average]
[info]   (min, avg, max) = (1354,143, 1761,543, 2035,779), stdev = 370,908
[info]   CI (99.9%): [333,308, 3189,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   203776,258 ±(99.9%) 159059,227 B/op [Average]
[info]   (min, avg, max) = (155734,030, 203776,258, 234691,548), stdev = 41307,176
[info]   CI (99.9%): [44717,031, 362835,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44,18% complete, ETA 01:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11862,320 ops/s
[info] # Warmup Iteration   2: 14941,575 ops/s
[info] # Warmup Iteration   3: 14994,561 ops/s
[info] # Warmup Iteration   4: 15081,749 ops/s
[info] # Warmup Iteration   5: 15059,486 ops/s
[info] Iteration   1: 15100,655 ops/s
[info]                  ·gc.alloc.rate:                   1424,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139948,972 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 14910,176 ops/s
[info]                  ·gc.alloc.rate:                   1407,361 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141750,769 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 14974,805 ops/s
[info]                  ·gc.alloc.rate:                   1413,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              148524,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141196,194 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 14980,966 ops/s
[info]                  ·gc.alloc.rate:                   1413,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              148512,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211954,401 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 15062,108 ops/s
[info]                  ·gc.alloc.rate:                   1421,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              148512,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140728,838 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   15005,742 ±(99.9%) 291,287 ops/s [Average]
[info]   (min, avg, max) = (14910,176, 15005,742, 15100,655), stdev = 75,646
[info]   CI (99.9%): [14714,455, 15297,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1416,122 ±(99.9%) 27,075 MB/sec [Average]
[info]   (min, avg, max) = (1407,361, 1416,122, 1424,986), stdev = 7,031
[info]   CI (99.9%): [1389,047, 1443,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   148524,065 ±(99.9%) 46,218 B/op [Average]
[info]   (min, avg, max) = (148512,027, 148524,065, 148536,036), stdev = 12,003
[info]   CI (99.9%): [148477,848, 148570,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3,923 ±(99.9%) 18,231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,923, 10,934), stdev = 4,735
[info]   CI (99.9%): [≈ 0, 22,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1478,728 ±(99.9%) 1160,035 MB/sec [Average]
[info]   (min, avg, max) = (1342,605, 1478,728, 2017,625), stdev = 301,257
[info]   CI (99.9%): [318,693, 2638,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   155115,835 ±(99.9%) 122375,734 B/op [Average]
[info]   (min, avg, max) = (139948,972, 155115,835, 211954,401), stdev = 31780,589
[info]   CI (99.9%): [32740,101, 277491,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44,38% complete, ETA 01:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21634,668 ops/s
[info] # Warmup Iteration   2: 29828,723 ops/s
[info] # Warmup Iteration   3: 29273,060 ops/s
[info] # Warmup Iteration   4: 29604,044 ops/s
[info] # Warmup Iteration   5: 30028,841 ops/s
[info] Iteration   1: 28936,928 ops/s
[info]                  ·gc.alloc.rate:                   998,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73037,668 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29918,397 ops/s
[info]                  ·gc.alloc.rate:                   1032,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35287,773 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 29806,015 ops/s
[info]                  ·gc.alloc.rate:                   1028,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70835,946 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 28366,096 ops/s
[info]                  ·gc.alloc.rate:                   978,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37215,523 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29958,902 ops/s
[info]                  ·gc.alloc.rate:                   1033,889 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70471,921 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   29397,268 ±(99.9%) 2742,696 ops/s [Average]
[info]   (min, avg, max) = (28366,096, 29397,268, 29958,902), stdev = 712,269
[info]   CI (99.9%): [26654,572, 32139,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1014,496 ±(99.9%) 94,654 MB/sec [Average]
[info]   (min, avg, max) = (978,918, 1014,496, 1033,889), stdev = 24,581
[info]   CI (99.9%): [919,842, 1109,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (54312,014, 54312,014, 54312,015), stdev = 0,001
[info]   CI (99.9%): [54312,013, 54312,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,323 ±(99.9%) 5,507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,323, 3,297), stdev = 1,430
[info]   CI (99.9%): [≈ 0, 6,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1073,510 ±(99.9%) 1415,617 MB/sec [Average]
[info]   (min, avg, max) = (670,772, 1073,510, 1342,885), stdev = 367,631
[info]   CI (99.9%): [≈ 0, 2489,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   57369,766 ±(99.9%) 74375,652 B/op [Average]
[info]   (min, avg, max) = (35287,773, 57369,766, 73037,668), stdev = 19315,121
[info]   CI (99.9%): [≈ 0, 131745,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,58% complete, ETA 01:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57663,599 ops/s
[info] # Warmup Iteration   2: 81514,235 ops/s
[info] # Warmup Iteration   3: 81802,310 ops/s
[info] # Warmup Iteration   4: 81568,624 ops/s
[info] # Warmup Iteration   5: 81051,759 ops/s
[info] Iteration   1: 81533,066 ops/s
[info]                  ·gc.alloc.rate:                   1297,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26088,074 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81631,935 ops/s
[info]                  ·gc.alloc.rate:                   1299,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26084,363 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 81316,245 ops/s
[info]                  ·gc.alloc.rate:                   1294,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26209,243 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 81748,498 ops/s
[info]                  ·gc.alloc.rate:                   1301,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26089,690 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 81840,005 ops/s
[info]                  ·gc.alloc.rate:                   1302,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26080,220 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   81613,950 ±(99.9%) 781,353 ops/s [Average]
[info]   (min, avg, max) = (81316,245, 81613,950, 81840,005), stdev = 202,915
[info]   CI (99.9%): [80832,596, 82395,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1299,316 ±(99.9%) 12,471 MB/sec [Average]
[info]   (min, avg, max) = (1294,547, 1299,316, 1302,832), stdev = 3,239
[info]   CI (99.9%): [1286,844, 1311,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25056,005, 25056,005, 25056,005), stdev = 0,001
[info]   CI (99.9%): [25056,005, 25056,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,044 ±(99.9%) 2,355 B/op [Average]
[info]   (min, avg, max) = (0,402, 1,044, 2,014), stdev = 0,611
[info]   CI (99.9%): [≈ 0, 3,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353,984 ±(99.9%) 7,033 MB/sec [Average]
[info]   (min, avg, max) = (1351,415, 1353,984, 1356,088), stdev = 1,827
[info]   CI (99.9%): [1346,951, 1361,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26110,318 ±(99.9%) 213,407 B/op [Average]
[info]   (min, avg, max) = (26080,220, 26110,318, 26209,243), stdev = 55,421
[info]   CI (99.9%): [25896,911, 26323,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,78% complete, ETA 01:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 762670,822 ops/s
[info] # Warmup Iteration   2: 804155,279 ops/s
[info] # Warmup Iteration   3: 806582,173 ops/s
[info] # Warmup Iteration   4: 813284,197 ops/s
[info] # Warmup Iteration   5: 814009,534 ops/s
[info] Iteration   1: 810831,663 ops/s
[info]                  ·gc.alloc.rate:                   1112,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2609,112 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 816042,309 ops/s
[info]                  ·gc.alloc.rate:                   1120,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2590,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 809747,779 ops/s
[info]                  ·gc.alloc.rate:                   1111,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1305,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 810322,171 ops/s
[info]                  ·gc.alloc.rate:                   1112,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2609,505 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 810073,964 ops/s
[info]                  ·gc.alloc.rate:                   1111,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2611,617 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   811403,577 ±(99.9%) 10100,860 ops/s [Average]
[info]   (min, avg, max) = (809747,779, 811403,577, 816042,309), stdev = 2623,161
[info]   CI (99.9%): [801302,718, 821504,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1113,586 ±(99.9%) 13,970 MB/sec [Average]
[info]   (min, avg, max) = (1111,329, 1113,586, 1120,013), stdev = 3,628
[info]   CI (99.9%): [1099,616, 1127,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2160,000, 2160,001, 2160,001), stdev = 0,001
[info]   CI (99.9%): [2160,000, 2160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,097 ±(99.9%) 0,208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,097, 0,121), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1209,258 ±(99.9%) 1157,719 MB/sec [Average]
[info]   (min, avg, max) = (671,429, 1209,258, 1344,220), stdev = 300,656
[info]   CI (99.9%): [51,539, 2366,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2345,068 ±(99.9%) 2239,069 B/op [Average]
[info]   (min, avg, max) = (1305,003, 2345,068, 2611,617), stdev = 581,479
[info]   CI (99.9%): [105,998, 4584,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44,98% complete, ETA 01:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 851706,434 ops/s
[info] # Warmup Iteration   2: 890085,073 ops/s
[info] # Warmup Iteration   3: 891891,189 ops/s
[info] # Warmup Iteration   4: 888151,988 ops/s
[info] # Warmup Iteration   5: 889855,941 ops/s
[info] Iteration   1: 890629,225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 888233,572 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 890177,267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 888865,911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 888480,221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   889277,239 ±(99.9%) 4098,534 ops/s [Average]
[info]   (min, avg, max) = (888233,572, 889277,239, 890629,225), stdev = 1064,376
[info]   CI (99.9%): [885178,706, 893375,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45,18% complete, ETA 01:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45474,876 ops/s
[info] # Warmup Iteration   2: 72907,918 ops/s
[info] # Warmup Iteration   3: 73322,674 ops/s
[info] # Warmup Iteration   4: 74021,190 ops/s
[info] # Warmup Iteration   5: 73960,432 ops/s
[info] Iteration   1: 74048,853 ops/s
[info]                  ·gc.alloc.rate:                   1596,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28742,074 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 73281,551 ops/s
[info]                  ·gc.alloc.rate:                   1580,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29068,697 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 73817,570 ops/s
[info]                  ·gc.alloc.rate:                   1592,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43321,430 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 73655,876 ops/s
[info]                  ·gc.alloc.rate:                   1588,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28977,668 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 73792,337 ops/s
[info]                  ·gc.alloc.rate:                   1591,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28953,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   73719,237 ±(99.9%) 1087,838 ops/s [Average]
[info]   (min, avg, max) = (73281,551, 73719,237, 74048,853), stdev = 282,508
[info]   CI (99.9%): [72631,399, 74807,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1589,906 ±(99.9%) 23,274 MB/sec [Average]
[info]   (min, avg, max) = (1580,462, 1589,906, 1596,837), stdev = 6,044
[info]   CI (99.9%): [1566,632, 1613,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33944,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (33944,006, 33944,006, 33944,006), stdev = 0,001
[info]   CI (99.9%): [33944,005, 33944,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,424 ±(99.9%) 2,254 B/op [Average]
[info]   (min, avg, max) = (0,885, 1,424, 2,235), stdev = 0,585
[info]   CI (99.9%): [≈ 0, 3,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1490,243 ±(99.9%) 1165,945 MB/sec [Average]
[info]   (min, avg, max) = (1352,121, 1490,243, 2031,880), stdev = 302,792
[info]   CI (99.9%): [324,298, 2656,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31812,668 ±(99.9%) 24777,760 B/op [Average]
[info]   (min, avg, max) = (28742,074, 31812,668, 43321,430), stdev = 6434,706
[info]   CI (99.9%): [7034,909, 56590,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45,38% complete, ETA 01:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19362,893 ops/s
[info] # Warmup Iteration   2: 20844,496 ops/s
[info] # Warmup Iteration   3: 20905,283 ops/s
[info] # Warmup Iteration   4: 20912,516 ops/s
[info] # Warmup Iteration   5: 20669,421 ops/s
[info] Iteration   1: 20944,319 ops/s
[info]                  ·gc.alloc.rate:                   463,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38444,950 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20928,335 ops/s
[info]                  ·gc.alloc.rate:                   462,806 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38474,338 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 20927,474 ops/s
[info]                  ·gc.alloc.rate:                   462,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50748,053 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 20973,125 ops/s
[info]                  ·gc.alloc.rate:      463,723 MB/sec
[info]                  ·gc.alloc.rate.norm: 34800,019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20951,699 ops/s
[info]                  ·gc.alloc.rate:                   463,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50687,511 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   20944,990 ±(99.9%) 72,584 ops/s [Average]
[info]   (min, avg, max) = (20927,474, 20944,990, 20973,125), stdev = 18,850
[info]   CI (99.9%): [20872,407, 21017,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   463,119 ±(99.9%) 1,497 MB/sec [Average]
[info]   (min, avg, max) = (462,774, 463,119, 463,723), stdev = 0,389
[info]   CI (99.9%): [461,622, 464,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34800,020 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (34800,019, 34800,020, 34800,021), stdev = 0,001
[info]   CI (99.9%): [34800,017, 34800,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,687 ±(99.9%) 5,791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,687, 3,377), stdev = 1,504
[info]   CI (99.9%): [≈ 0, 6,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   51,641 ±(99.9%) 435,481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51,641, 253,935), stdev = 113,093
[info]   CI (99.9%): [≈ 0, 487,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   474,561 ±(99.9%) 1068,755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,561, 674,852), stdev = 277,552
[info]   CI (99.9%): [≈ 0, 1543,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   35670,970 ±(99.9%) 80329,704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35670,970, 50748,053), stdev = 20861,369
[info]   CI (99.9%): [≈ 0, 116000,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,140
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45,58% complete, ETA 01:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12222,794 ops/s
[info] # Warmup Iteration   2: 21822,634 ops/s
[info] # Warmup Iteration   3: 22325,689 ops/s
[info] # Warmup Iteration   4: 22294,841 ops/s
[info] # Warmup Iteration   5: 22347,787 ops/s
[info] Iteration   1: 22226,171 ops/s
[info]                  ·gc.alloc.rate:                   803,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47782,613 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 22568,146 ops/s
[info]                  ·gc.alloc.rate:                   816,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46872,815 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 22522,519 ops/s
[info]                  ·gc.alloc.rate:                   814,559 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46966,448 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22324,435 ops/s
[info]                  ·gc.alloc.rate:                   807,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47335,958 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 22437,481 ops/s
[info]                  ·gc.alloc.rate:                   811,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94195,224 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   22415,750 ±(99.9%) 542,432 ops/s [Average]
[info]   (min, avg, max) = (22226,171, 22415,750, 22568,146), stdev = 140,868
[info]   CI (99.9%): [21873,319, 22958,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   810,686 ±(99.9%) 19,786 MB/sec [Average]
[info]   (min, avg, max) = (803,747, 810,686, 816,242), stdev = 5,138
[info]   CI (99.9%): [790,900, 830,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56920,019 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (56920,018, 56920,019, 56920,023), stdev = 0,002
[info]   CI (99.9%): [56920,011, 56920,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,470 ±(99.9%) 8,000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,470, 4,403), stdev = 2,078
[info]   CI (99.9%): [≈ 0, 9,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   806,674 ±(99.9%) 1154,340 MB/sec [Average]
[info]   (min, avg, max) = (671,436, 806,674, 1342,929), stdev = 299,779
[info]   CI (99.9%): [≈ 0, 1961,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   56630,612 ±(99.9%) 80872,424 B/op [Average]
[info]   (min, avg, max) = (46872,815, 56630,612, 94195,224), stdev = 21002,312
[info]   CI (99.9%): [≈ 0, 137503,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,78% complete, ETA 01:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8500,012 ops/s
[info] # Warmup Iteration   2: 18105,115 ops/s
[info] # Warmup Iteration   3: 18047,259 ops/s
[info] # Warmup Iteration   4: 18154,509 ops/s
[info] # Warmup Iteration   5: 18167,595 ops/s
[info] Iteration   1: 18111,830 ops/s
[info]                  ·gc.alloc.rate:                   507,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44450,316 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 17954,238 ops/s
[info]                  ·gc.alloc.rate:                   503,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088,802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59065,246 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 18171,666 ops/s
[info]                  ·gc.alloc.rate:      509,069 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18229,999 ops/s
[info]                  ·gc.alloc.rate:                   510,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58167,962 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18000,430 ops/s
[info]                  ·gc.alloc.rate:                   504,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59020,981 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18093,633 ±(99.9%) 443,802 ops/s [Average]
[info]   (min, avg, max) = (17954,238, 18093,633, 18229,999), stdev = 115,254
[info]   CI (99.9%): [17649,831, 18537,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   506,897 ±(99.9%) 12,310 MB/sec [Average]
[info]   (min, avg, max) = (503,076, 506,897, 510,709), stdev = 3,197
[info]   CI (99.9%): [494,588, 519,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088,179 ±(99.9%) 1,342 B/op [Average]
[info]   (min, avg, max) = (44088,022, 44088,179, 44088,802), stdev = 0,349
[info]   CI (99.9%): [44086,837, 44089,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2,181 ±(99.9%) 11,551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,181, 7,299), stdev = 3,000
[info]   CI (99.9%): [≈ 0, 13,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506,876 ±(99.9%) 1124,339 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,876, 675,091), stdev = 291,987
[info]   CI (99.9%): [≈ 0, 1631,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44140,901 ±(99.9%) 97972,712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44140,901, 59065,246), stdev = 25443,202
[info]   CI (99.9%): [≈ 0, 142113,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,98% complete, ETA 01:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98688,652 ops/s
[info] # Warmup Iteration   2: 101638,053 ops/s
[info] # Warmup Iteration   3: 104004,009 ops/s
[info] # Warmup Iteration   4: 103051,733 ops/s
[info] # Warmup Iteration   5: 103659,913 ops/s
[info] Iteration   1: 102765,337 ops/s
[info]                  ·gc.alloc.rate:                   258,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7834,558 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 103508,806 ops/s
[info]                  ·gc.alloc.rate:      259,948 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 103141,955 ops/s
[info]                  ·gc.alloc.rate:                   259,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7805,777 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 103288,188 ops/s
[info]                  ·gc.alloc.rate:      259,368 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 102458,721 ops/s
[info]                  ·gc.alloc.rate:                   257,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7858,257 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   103032,601 ±(99.9%) 1616,379 ops/s [Average]
[info]   (min, avg, max) = (102458,721, 103032,601, 103508,806), stdev = 419,768
[info]   CI (99.9%): [101416,223, 104648,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   258,728 ±(99.9%) 4,106 MB/sec [Average]
[info]   (min, avg, max) = (257,280, 258,728, 259,948), stdev = 1,066
[info]   CI (99.9%): [254,622, 262,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3952,004, 3952,004, 3952,004), stdev = 0,001
[info]   CI (99.9%): [3952,003, 3952,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,003 ±(99.9%) 0,029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,017), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306,939 ±(99.9%) 1078,935 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,939, 511,582), stdev = 280,196
[info]   CI (99.9%): [≈ 0, 1385,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4699,718 ±(99.9%) 16520,327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4699,718, 7858,257), stdev = 4290,277
[info]   CI (99.9%): [≈ 0, 21220,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46,18% complete, ETA 01:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6095,479 ops/s
[info] # Warmup Iteration   2: 16236,496 ops/s
[info] # Warmup Iteration   3: 16244,348 ops/s
[info] # Warmup Iteration   4: 16388,874 ops/s
[info] # Warmup Iteration   5: 16360,652 ops/s
[info] Iteration   1: 16359,602 ops/s
[info]                  ·gc.alloc.rate:                   1033,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64943,276 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16162,575 ops/s
[info]                  ·gc.alloc.rate:                   1020,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131607,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 16382,193 ops/s
[info]                  ·gc.alloc.rate:                   1034,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64980,102 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 16399,940 ops/s
[info]                  ·gc.alloc.rate:                   1035,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129849,567 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16385,980 ops/s
[info]                  ·gc.alloc.rate:                   1034,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65000,196 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   16338,058 ±(99.9%) 381,837 ops/s [Average]
[info]   (min, avg, max) = (16162,575, 16338,058, 16399,940), stdev = 99,162
[info]   CI (99.9%): [15956,221, 16719,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1031,819 ±(99.9%) 24,037 MB/sec [Average]
[info]   (min, avg, max) = (1020,778, 1031,819, 1035,763), stdev = 6,242
[info]   CI (99.9%): [1007,782, 1055,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392,027 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (99392,025, 99392,027, 99392,032), stdev = 0,003
[info]   CI (99.9%): [99392,015, 99392,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,811 ±(99.9%) 10,362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,811, 6,007), stdev = 2,691
[info]   CI (99.9%): [≈ 0, 13,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   946,599 ±(99.9%) 1426,442 MB/sec [Average]
[info]   (min, avg, max) = (675,064, 946,599, 1353,160), stdev = 370,443
[info]   CI (99.9%): [≈ 0, 2373,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   91276,052 ±(99.9%) 138701,025 B/op [Average]
[info]   (min, avg, max) = (64943,276, 91276,052, 131607,120), stdev = 36020,216
[info]   CI (99.9%): [≈ 0, 229977,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46,39% complete, ETA 01:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12347,684 ops/s
[info] # Warmup Iteration   2: 19161,351 ops/s
[info] # Warmup Iteration   3: 19728,687 ops/s
[info] # Warmup Iteration   4: 19763,512 ops/s
[info] # Warmup Iteration   5: 19739,295 ops/s
[info] Iteration   1: 19712,845 ops/s
[info]                  ·gc.alloc.rate:                   634,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              50678,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40841,179 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 19782,883 ops/s
[info]                  ·gc.alloc.rate:                   636,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53737,798 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 19733,441 ops/s
[info]                  ·gc.alloc.rate:                   635,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53865,751 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 19724,390 ops/s
[info]                  ·gc.alloc.rate:                   634,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53730,884 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 19764,582 ops/s
[info]                  ·gc.alloc.rate:                   636,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53622,172 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   19743,628 ±(99.9%) 112,290 ops/s [Average]
[info]   (min, avg, max) = (19712,845, 19743,628, 19782,883), stdev = 29,161
[info]   CI (99.9%): [19631,339, 19855,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   635,533 ±(99.9%) 3,533 MB/sec [Average]
[info]   (min, avg, max) = (634,682, 635,533, 636,809), stdev = 0,917
[info]   CI (99.9%): [632,000, 639,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   50660,602 ±(99.9%) 39,440 B/op [Average]
[info]   (min, avg, max) = (50656,021, 50660,602, 50678,924), stdev = 10,243
[info]   CI (99.9%): [50621,162, 50700,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,608 ±(99.9%) 5,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,608, 2,979), stdev = 1,325
[info]   CI (99.9%): [≈ 0, 5,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   48,393 ±(99.9%) 405,996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48,393, 236,986), stdev = 105,436
[info]   CI (99.9%): [≈ 0, 454,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   641,846 ±(99.9%) 280,656 MB/sec [Average]
[info]   (min, avg, max) = (511,478, 641,846, 675,551), stdev = 72,885
[info]   CI (99.9%): [361,191, 922,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   51159,557 ±(99.9%) 22213,571 B/op [Average]
[info]   (min, avg, max) = (40841,179, 51159,557, 53865,751), stdev = 5768,794
[info]   CI (99.9%): [28945,986, 73373,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46,59% complete, ETA 01:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49734,427 ops/s
[info] # Warmup Iteration   2: 64983,048 ops/s
[info] # Warmup Iteration   3: 64769,991 ops/s
[info] # Warmup Iteration   4: 65836,752 ops/s
[info] # Warmup Iteration   5: 66028,536 ops/s
[info] Iteration   1: 65607,720 ops/s
[info]                  ·gc.alloc.rate:                   1170,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32213,727 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 65970,383 ops/s
[info]                  ·gc.alloc.rate:                   1176,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32007,155 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 65502,359 ops/s
[info]                  ·gc.alloc.rate:                   1168,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32240,363 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 65533,762 ops/s
[info]                  ·gc.alloc.rate:                   1168,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16117,541 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 65486,781 ops/s
[info]                  ·gc.alloc.rate:                   1168,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32272,743 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   65620,201 ±(99.9%) 774,789 ops/s [Average]
[info]   (min, avg, max) = (65486,781, 65620,201, 65970,383), stdev = 201,210
[info]   CI (99.9%): [64845,412, 66394,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1170,511 ±(99.9%) 13,749 MB/sec [Average]
[info]   (min, avg, max) = (1168,112, 1170,511, 1176,750), stdev = 3,571
[info]   CI (99.9%): [1156,762, 1184,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28072,006, 28072,006, 28072,007), stdev = 0,001
[info]   CI (99.9%): [28072,005, 28072,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,198 ±(99.9%) 2,914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,198, 1,997), stdev = 0,757
[info]   CI (99.9%): [≈ 0, 4,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1208,130 ±(99.9%) 1155,825 MB/sec [Average]
[info]   (min, avg, max) = (671,181, 1208,130, 1342,910), stdev = 300,164
[info]   CI (99.9%): [52,305, 2363,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28970,306 ±(99.9%) 27669,440 B/op [Average]
[info]   (min, avg, max) = (16117,541, 28970,306, 32272,743), stdev = 7185,666
[info]   CI (99.9%): [1300,865, 56639,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,79% complete, ETA 01:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61923,244 ops/s
[info] # Warmup Iteration   2: 87614,277 ops/s
[info] # Warmup Iteration   3: 87624,748 ops/s
[info] # Warmup Iteration   4: 86697,019 ops/s
[info] # Warmup Iteration   5: 87473,088 ops/s
[info] Iteration   1: 87176,544 ops/s
[info]                  ·gc.alloc.rate:                   1409,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24411,217 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 87625,893 ops/s
[info]                  ·gc.alloc.rate:                   1416,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24312,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 87352,349 ops/s
[info]                  ·gc.alloc.rate:                   1411,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24410,607 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 87122,089 ops/s
[info]                  ·gc.alloc.rate:                   1408,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24499,102 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87559,196 ops/s
[info]                  ·gc.alloc.rate:                   1415,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24389,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   87367,214 ±(99.9%) 861,964 ops/s [Average]
[info]   (min, avg, max) = (87122,089, 87367,214, 87625,893), stdev = 223,849
[info]   CI (99.9%): [86505,251, 88229,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1412,235 ±(99.9%) 14,096 MB/sec [Average]
[info]   (min, avg, max) = (1408,258, 1412,235, 1416,518), stdev = 3,661
[info]   CI (99.9%): [1398,139, 1426,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25440,005, 25440,005, 25440,005), stdev = 0,001
[info]   CI (99.9%): [25440,004, 25440,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,601 ±(99.9%) 2,417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,601, 1,500), stdev = 0,628
[info]   CI (99.9%): [≈ 0, 3,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354,740 ±(99.9%) 7,337 MB/sec [Average]
[info]   (min, avg, max) = (1352,104, 1354,740, 1356,848), stdev = 1,905
[info]   CI (99.9%): [1347,403, 1362,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24404,413 ±(99.9%) 257,009 B/op [Average]
[info]   (min, avg, max) = (24312,031, 24404,413, 24499,102), stdev = 66,744
[info]   CI (99.9%): [24147,404, 24661,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,99% complete, ETA 01:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264765,005 ops/s
[info] # Warmup Iteration   2: 278859,872 ops/s
[info] # Warmup Iteration   3: 257252,089 ops/s
[info] # Warmup Iteration   4: 268693,961 ops/s
[info] # Warmup Iteration   5: 269784,567 ops/s
[info] Iteration   1: 270028,789 ops/s
[info]                  ·gc.alloc.rate:                   517,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2981,832 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 271529,645 ops/s
[info]                  ·gc.alloc.rate:      520,366 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 269581,428 ops/s
[info]                  ·gc.alloc.rate:                   516,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3943,492 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 269405,966 ops/s
[info]                  ·gc.alloc.rate:                   516,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3946,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 269538,461 ops/s
[info]                  ·gc.alloc.rate:                   516,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3932,452 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   270016,858 ±(99.9%) 3379,101 ops/s [Average]
[info]   (min, avg, max) = (269405,966, 270016,858, 271529,645), stdev = 877,542
[info]   CI (99.9%): [266637,757, 273395,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   517,467 ±(99.9%) 6,462 MB/sec [Average]
[info]   (min, avg, max) = (516,292, 517,467, 520,366), stdev = 1,678
[info]   CI (99.9%): [511,005, 523,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,002, 3016,002, 3016,002), stdev = 0,001
[info]   CI (99.9%): [3016,001, 3016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,606 ±(99.9%) 5,041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,606, 2,948), stdev = 1,309
[info]   CI (99.9%): [≈ 0, 5,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3,539 ±(99.9%) 29,431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,539, 17,209), stdev = 7,643
[info]   CI (99.9%): [≈ 0, 32,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   507,232 ±(99.9%) 1125,279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,232, 675,518), stdev = 292,231
[info]   CI (99.9%): [≈ 0, 1632,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2960,763 ±(99.9%) 6570,756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2960,763, 3946,038), stdev = 1706,404
[info]   CI (99.9%): [≈ 0, 9531,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47,19% complete, ETA 01:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307281,246 ops/s
[info] # Warmup Iteration   2: 319615,514 ops/s
[info] # Warmup Iteration   3: 325906,423 ops/s
[info] # Warmup Iteration   4: 326726,904 ops/s
[info] # Warmup Iteration   5: 326821,193 ops/s
[info] Iteration   1: 326845,275 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 327420,337 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 327064,263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 326276,235 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 326103,224 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   326741,867 ±(99.9%) 2108,761 ops/s [Average]
[info]   (min, avg, max) = (326103,224, 326741,867, 327420,337), stdev = 547,639
[info]   CI (99.9%): [324633,105, 328850,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47,39% complete, ETA 01:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60641,581 ops/s
[info] # Warmup Iteration   2: 74337,474 ops/s
[info] # Warmup Iteration   3: 73329,571 ops/s
[info] # Warmup Iteration   4: 74822,731 ops/s
[info] # Warmup Iteration   5: 74937,093 ops/s
[info] Iteration   1: 74722,493 ops/s
[info]                  ·gc.alloc.rate:                   1341,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28199,218 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 68744,361 ops/s
[info]                  ·gc.alloc.rate:                   1233,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30661,945 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 74751,320 ops/s
[info]                  ·gc.alloc.rate:                   1341,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28216,329 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 74605,760 ops/s
[info]                  ·gc.alloc.rate:                   1339,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28300,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 74698,417 ops/s
[info]                  ·gc.alloc.rate:                   1341,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28293,237 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   73504,470 ±(99.9%) 10248,647 ops/s [Average]
[info]   (min, avg, max) = (68744,361, 73504,470, 74751,320), stdev = 2661,541
[info]   CI (99.9%): [63255,823, 83753,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1319,385 ±(99.9%) 183,970 MB/sec [Average]
[info]   (min, avg, max) = (1233,938, 1319,385, 1341,721), stdev = 47,776
[info]   CI (99.9%): [1135,415, 1503,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (28248,005, 28248,006, 28248,007), stdev = 0,001
[info]   CI (99.9%): [28248,004, 28248,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,439 ±(99.9%) 2,071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,439, 1,317), stdev = 0,538
[info]   CI (99.9%): [≈ 0, 2,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1340,636 ±(99.9%) 6,982 MB/sec [Average]
[info]   (min, avg, max) = (1338,739, 1340,636, 1343,269), stdev = 1,813
[info]   CI (99.9%): [1333,654, 1347,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28734,225 ±(99.9%) 4153,180 B/op [Average]
[info]   (min, avg, max) = (28199,218, 28734,225, 30661,945), stdev = 1078,568
[info]   CI (99.9%): [24581,045, 32887,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47,59% complete, ETA 01:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15998,272 ops/s
[info] # Warmup Iteration   2: 17070,482 ops/s
[info] # Warmup Iteration   3: 17269,431 ops/s
[info] # Warmup Iteration   4: 17181,311 ops/s
[info] # Warmup Iteration   5: 17286,288 ops/s
[info] Iteration   1: 16918,909 ops/s
[info]                  ·gc.alloc.rate:                   371,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47583,690 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 17129,178 ops/s
[info]                  ·gc.alloc.rate:                   375,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47005,975 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 17194,314 ops/s
[info]                  ·gc.alloc.rate:                   377,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46771,191 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 17230,200 ops/s
[info]                  ·gc.alloc.rate:      377,911 MB/sec
[info]                  ·gc.alloc.rate.norm: 34520,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17195,584 ops/s
[info]                  ·gc.alloc.rate:                   377,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61817,213 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   17133,637 ±(99.9%) 483,142 ops/s [Average]
[info]   (min, avg, max) = (16918,909, 17133,637, 17230,200), stdev = 125,470
[info]   CI (99.9%): [16650,495, 17616,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   375,828 ±(99.9%) 10,756 MB/sec [Average]
[info]   (min, avg, max) = (371,040, 375,828, 377,911), stdev = 2,793
[info]   CI (99.9%): [365,072, 386,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34520,026 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (34520,024, 34520,026, 34520,032), stdev = 0,004
[info]   CI (99.9%): [34520,012, 34520,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,605 ±(99.9%) 5,169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,605, 3,006), stdev = 1,342
[info]   CI (99.9%): [≈ 0, 5,774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   55,353 ±(99.9%) 473,115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55,353, 275,140), stdev = 122,867
[info]   CI (99.9%): [≈ 0, 528,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   441,940 ±(99.9%) 989,826 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,940, 675,418), stdev = 257,055
[info]   CI (99.9%): [≈ 0, 1431,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   40635,614 ±(99.9%) 90846,146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40635,614, 61817,213), stdev = 23592,456
[info]   CI (99.9%): [≈ 0, 131481,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,140
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47,79% complete, ETA 01:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115640,529 ops/s
[info] # Warmup Iteration   2: 133677,327 ops/s
[info] # Warmup Iteration   3: 136404,817 ops/s
[info] # Warmup Iteration   4: 135054,958 ops/s
[info] # Warmup Iteration   5: 134767,235 ops/s
[info] Iteration   1: 136591,688 ops/s
[info]                  ·gc.alloc.rate:                   1978,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23226,978 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 135745,419 ops/s
[info]                  ·gc.alloc.rate:                   1966,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019,856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23413,852 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 135972,764 ops/s
[info]                  ·gc.alloc.rate:                   1969,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23411,772 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 136060,676 ops/s
[info]                  ·gc.alloc.rate:                   1971,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23435,331 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 135960,982 ops/s
[info]                  ·gc.alloc.rate:                   1969,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23482,545 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   136066,306 ±(99.9%) 1215,958 ops/s [Average]
[info]   (min, avg, max) = (135745,419, 136066,306, 136591,688), stdev = 315,780
[info]   CI (99.9%): [134850,348, 137282,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1971,291 ±(99.9%) 17,099 MB/sec [Average]
[info]   (min, avg, max) = (1966,901, 1971,291, 1978,733), stdev = 4,441
[info]   CI (99.9%): [1954,192, 1988,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (22800,003, 22800,003, 22800,003), stdev = 0,001
[info]   CI (99.9%): [22800,003, 22800,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,530 ±(99.9%) 0,773 B/op [Average]
[info]   (min, avg, max) = (0,241, 0,530, 0,722), stdev = 0,201
[info]   CI (99.9%): [≈ 0, 1,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2022,644 ±(99.9%) 19,563 MB/sec [Average]
[info]   (min, avg, max) = (2015,788, 2022,644, 2028,711), stdev = 5,080
[info]   CI (99.9%): [2003,081, 2042,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23394,095 ±(99.9%) 376,078 B/op [Average]
[info]   (min, avg, max) = (23226,978, 23394,095, 23482,545), stdev = 97,666
[info]   CI (99.9%): [23018,018, 23770,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47,99% complete, ETA 01:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173809,715 ops/s
[info] # Warmup Iteration   2: 729882,309 ops/s
[info] # Warmup Iteration   3: 721761,106 ops/s
[info] # Warmup Iteration   4: 720561,581 ops/s
[info] # Warmup Iteration   5: 735030,891 ops/s
[info] Iteration   1: 735730,578 ops/s
[info]                  ·gc.alloc.rate:                   407,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1094,443 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 734701,835 ops/s
[info]                  ·gc.alloc.rate:                   407,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1095,974 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 737161,649 ops/s
[info]                  ·gc.alloc.rate:      408,472 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 732756,681 ops/s
[info]                  ·gc.alloc.rate:                   406,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1446,450 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 735943,586 ops/s
[info]                  ·gc.alloc.rate:      407,758 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   735258,866 ±(99.9%) 6351,563 ops/s [Average]
[info]   (min, avg, max) = (732756,681, 735258,866, 737161,649), stdev = 1649,481
[info]   CI (99.9%): [728907,303, 741610,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   407,397 ±(99.9%) 3,481 MB/sec [Average]
[info]   (min, avg, max) = (406,031, 407,397, 408,472), stdev = 0,904
[info]   CI (99.9%): [403,916, 410,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (872,001, 872,001, 872,001), stdev = 0,001
[info]   CI (99.9%): [872,000, 872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,530 ±(99.9%) 4,522 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,530, 2,631), stdev = 1,174
[info]   CI (99.9%): [≈ 0, 5,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1,139 ±(99.9%) 9,711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,139, 5,650), stdev = 2,522
[info]   CI (99.9%): [≈ 0, 10,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339,357 ±(99.9%) 1219,728 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,357, 673,513), stdev = 316,759
[info]   CI (99.9%): [≈ 0, 1559,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   727,373 ±(99.9%) 2615,762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 727,373, 1446,450), stdev = 679,305
[info]   CI (99.9%): [≈ 0, 3343,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,19% complete, ETA 01:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288784,944 ops/s
[info] # Warmup Iteration   2: 414903,391 ops/s
[info] # Warmup Iteration   3: 419795,238 ops/s
[info] # Warmup Iteration   4: 422033,338 ops/s
[info] # Warmup Iteration   5: 421839,872 ops/s
[info] Iteration   1: 422666,029 ops/s
[info]                  ·gc.alloc.rate:      431,785 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 418769,972 ops/s
[info]                  ·gc.alloc.rate:                   427,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1922,592 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 421003,686 ops/s
[info]                  ·gc.alloc.rate:                   430,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2518,772 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 422796,626 ops/s
[info]                  ·gc.alloc.rate:      431,956 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 416529,555 ops/s
[info]                  ·gc.alloc.rate:                   425,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2545,765 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   420353,173 ±(99.9%) 10344,824 ops/s [Average]
[info]   (min, avg, max) = (416529,555, 420353,173, 422796,626), stdev = 2686,518
[info]   CI (99.9%): [410008,350, 430697,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   429,461 ±(99.9%) 10,518 MB/sec [Average]
[info]   (min, avg, max) = (425,562, 429,461, 431,956), stdev = 2,731
[info]   CI (99.9%): [418,944, 439,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1608,001, 1608,001, 1608,001), stdev = 0,001
[info]   CI (99.9%): [1608,001, 1608,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,109 ±(99.9%) 0,781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,109, 0,467), stdev = 0,203
[info]   CI (99.9%): [≈ 0, 0,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   371,817 ±(99.9%) 1331,624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371,817, 673,769), stdev = 345,819
[info]   CI (99.9%): [≈ 0, 1703,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1397,426 ±(99.9%) 5004,910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1397,426, 2545,765), stdev = 1299,759
[info]   CI (99.9%): [≈ 0, 6402,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,39% complete, ETA 01:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 826122,797 ops/s
[info] # Warmup Iteration   2: 854697,343 ops/s
[info] # Warmup Iteration   3: 865767,935 ops/s
[info] # Warmup Iteration   4: 860663,950 ops/s
[info] # Warmup Iteration   5: 865678,790 ops/s
[info] Iteration   1: 865617,677 ops/s
[info]                  ·gc.alloc.rate:      299,207 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 859637,949 ops/s
[info]                  ·gc.alloc.rate:                   297,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 936,696 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 868261,186 ops/s
[info]                  ·gc.alloc.rate:      300,166 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 865786,293 ops/s
[info]                  ·gc.alloc.rate:                   299,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 929,999 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 867953,744 ops/s
[info]                  ·gc.alloc.rate:      300,048 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   865451,370 ±(99.9%) 13351,887 ops/s [Average]
[info]   (min, avg, max) = (859637,949, 865451,370, 868261,186), stdev = 3467,443
[info]   CI (99.9%): [852099,483, 878803,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   299,186 ±(99.9%) 4,527 MB/sec [Average]
[info]   (min, avg, max) = (297,233, 299,186, 300,166), stdev = 1,176
[info]   CI (99.9%): [294,660, 303,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,001), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,003 ±(99.9%) 0,024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,014), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,005 ±(99.9%) 0,044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204,685 ±(99.9%) 1079,246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,685, 511,795), stdev = 280,277
[info]   CI (99.9%): [≈ 0, 1283,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   373,339 ±(99.9%) 1968,529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 373,339, 936,696), stdev = 511,221
[info]   CI (99.9%): [≈ 0, 2341,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48,59% complete, ETA 01:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59296,877 ops/s
[info] # Warmup Iteration   2: 89301,847 ops/s
[info] # Warmup Iteration   3: 89167,503 ops/s
[info] # Warmup Iteration   4: 89154,328 ops/s
[info] # Warmup Iteration   5: 89680,607 ops/s
[info] Iteration   1: 89157,570 ops/s
[info]                  ·gc.alloc.rate:                   3822,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4080,351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72030,148 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 88778,705 ops/s
[info]                  ·gc.alloc.rate:                   3805,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60346,469 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 89066,788 ops/s
[info]                  ·gc.alloc.rate:                   3818,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084,917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72176,775 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 88359,150 ops/s
[info]                  ·gc.alloc.rate:                   3788,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72816,789 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 89162,712 ops/s
[info]                  ·gc.alloc.rate:                   3822,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3407,409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60142,030 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   88904,985 ±(99.9%) 1320,335 ops/s [Average]
[info]   (min, avg, max) = (88359,150, 88904,985, 89162,712), stdev = 342,887
[info]   CI (99.9%): [87584,650, 90225,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3811,587 ±(99.9%) 56,139 MB/sec [Average]
[info]   (min, avg, max) = (3788,478, 3811,587, 3822,697), stdev = 14,579
[info]   CI (99.9%): [3755,449, 3867,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (67472,005, 67472,005, 67472,005), stdev = 0,001
[info]   CI (99.9%): [67472,004, 67472,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,108 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,108, 0,125), stdev = 0,017
[info]   CI (99.9%): [0,041, 0,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,916 ±(99.9%) 1,193 B/op [Average]
[info]   (min, avg, max) = (1,476, 1,916, 2,225), stdev = 0,310
[info]   CI (99.9%): [0,723, 3,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3813,059 ±(99.9%) 1431,897 MB/sec [Average]
[info]   (min, avg, max) = (3404,035, 3813,059, 4088,582), stdev = 371,859
[info]   CI (99.9%): [2381,162, 5244,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67502,442 ±(99.9%) 25540,498 B/op [Average]
[info]   (min, avg, max) = (60142,030, 67502,442, 72816,789), stdev = 6632,786
[info]   CI (99.9%): [41961,945, 93042,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48,80% complete, ETA 01:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221768,153 ops/s
[info] # Warmup Iteration   2: 229964,520 ops/s
[info] # Warmup Iteration   3: 246708,780 ops/s
[info] # Warmup Iteration   4: 250177,340 ops/s
[info] # Warmup Iteration   5: 248714,179 ops/s
[info] Iteration   1: 248971,055 ops/s
[info]                  ·gc.alloc.rate:                   1572,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12735,085 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 249183,390 ops/s
[info]                  ·gc.alloc.rate:                   1574,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8488,220 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 248846,414 ops/s
[info]                  ·gc.alloc.rate:                   1572,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8507,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 246978,041 ops/s
[info]                  ·gc.alloc.rate:                   1560,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12876,549 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 248354,173 ops/s
[info]                  ·gc.alloc.rate:                   1569,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8547,830 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   248466,615 ±(99.9%) 3412,206 ops/s [Average]
[info]   (min, avg, max) = (246978,041, 248466,615, 249183,390), stdev = 886,139
[info]   CI (99.9%): [245054,409, 251878,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1569,929 ±(99.9%) 21,598 MB/sec [Average]
[info]   (min, avg, max) = (1560,506, 1569,929, 1574,565), stdev = 5,609
[info]   CI (99.9%): [1548,331, 1591,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9944,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9944,002, 9944,002, 9944,002), stdev = 0,001
[info]   CI (99.9%): [9944,001, 9944,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,211 ±(99.9%) 0,578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,211, 0,395), stdev = 0,150
[info]   CI (99.9%): [≈ 0, 0,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1614,681 ±(99.9%) 1416,227 MB/sec [Average]
[info]   (min, avg, max) = (1344,052, 1614,681, 2020,709), stdev = 367,790
[info]   CI (99.9%): [198,454, 3030,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10231,110 ±(99.9%) 9052,885 B/op [Average]
[info]   (min, avg, max) = (8488,220, 10231,110, 12876,549), stdev = 2351,005
[info]   CI (99.9%): [1178,225, 19283,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49,00% complete, ETA 01:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261955,346 ops/s
[info] # Warmup Iteration   2: 326346,734 ops/s
[info] # Warmup Iteration   3: 328294,873 ops/s
[info] # Warmup Iteration   4: 319701,759 ops/s
[info] # Warmup Iteration   5: 326484,896 ops/s
[info] Iteration   1: 329476,807 ops/s
[info]                  ·gc.alloc.rate:                   1716,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012,962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9615,497 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 331392,882 ops/s
[info]                  ·gc.alloc.rate:                   1726,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6381,159 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 329620,448 ops/s
[info]                  ·gc.alloc.rate:                   1717,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9635,121 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 318331,906 ops/s
[info]                  ·gc.alloc.rate:                   1658,584 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6658,901 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 327204,370 ops/s
[info]                  ·gc.alloc.rate:                   1705,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9732,326 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   327205,283 ±(99.9%) 19940,392 ops/s [Average]
[info]   (min, avg, max) = (318331,906, 327205,283, 331392,882), stdev = 5178,456
[info]   CI (99.9%): [307264,891, 347145,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1704,949 ±(99.9%) 104,052 MB/sec [Average]
[info]   (min, avg, max) = (1658,584, 1704,949, 1726,794), stdev = 27,022
[info]   CI (99.9%): [1600,897, 1809,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8200,001, 8200,001, 8200,001), stdev = 0,001
[info]   CI (99.9%): [8200,001, 8200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,160 ±(99.9%) 0,206 B/op [Average]
[info]   (min, avg, max) = (0,099, 0,160, 0,200), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1749,116 ±(99.9%) 1419,477 MB/sec [Average]
[info]   (min, avg, max) = (1343,774, 1749,116, 2023,904), stdev = 368,634
[info]   CI (99.9%): [329,639, 3168,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8404,601 ±(99.9%) 6637,501 B/op [Average]
[info]   (min, avg, max) = (6381,159, 8404,601, 9732,326), stdev = 1723,738
[info]   CI (99.9%): [1767,100, 15042,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49,20% complete, ETA 01:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388608,257 ops/s
[info] # Warmup Iteration   2: 1606839,781 ops/s
[info] # Warmup Iteration   3: 1637572,672 ops/s
[info] # Warmup Iteration   4: 1621358,156 ops/s
[info] # Warmup Iteration   5: 1638096,117 ops/s
[info] Iteration   1: 1639142,168 ops/s
[info]                  ·gc.alloc.rate:                   558,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491,213 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1627794,416 ops/s
[info]                  ·gc.alloc.rate:                   554,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 651,111 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1627158,825 ops/s
[info]                  ·gc.alloc.rate:                   554,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 651,363 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1630584,379 ops/s
[info]                  ·gc.alloc.rate:                   555,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 648,737 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1631558,024 ops/s
[info]                  ·gc.alloc.rate:      555,647 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1631247,562 ±(99.9%) 18417,089 ops/s [Average]
[info]   (min, avg, max) = (1627158,825, 1631247,562, 1639142,168), stdev = 4782,859
[info]   CI (99.9%): [1612830,474, 1649664,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   555,558 ±(99.9%) 6,233 MB/sec [Average]
[info]   (min, avg, max) = (554,151, 555,558, 558,231), stdev = 1,619
[info]   CI (99.9%): [549,326, 561,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,524 ±(99.9%) 4,458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,524, 2,594), stdev = 1,158
[info]   CI (99.9%): [≈ 0, 4,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,506 ±(99.9%) 4,310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,506, 2,508), stdev = 1,119
[info]   CI (99.9%): [≈ 0, 4,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506,128 ±(99.9%) 1122,239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,128, 673,482), stdev = 291,442
[info]   CI (99.9%): [≈ 0, 1628,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   488,485 ±(99.9%) 1084,492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 488,485, 651,363), stdev = 281,639
[info]   CI (99.9%): [≈ 0, 1572,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,40% complete, ETA 01:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 985000,650 ops/s
[info] # Warmup Iteration   2: 1408198,310 ops/s
[info] # Warmup Iteration   3: 1412564,597 ops/s
[info] # Warmup Iteration   4: 1424166,655 ops/s
[info] # Warmup Iteration   5: 1417239,974 ops/s
[info] Iteration   1: 1420930,602 ops/s
[info]                  ·gc.alloc.rate:                   830,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747,742 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1426026,797 ops/s
[info]                  ·gc.alloc.rate:                   833,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 745,127 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1418099,419 ops/s
[info]                  ·gc.alloc.rate:                   828,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749,965 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1420948,223 ops/s
[info]                  ·gc.alloc.rate:                   830,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1497,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1422458,984 ops/s
[info]                  ·gc.alloc.rate:                   831,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 748,020 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1421692,805 ±(99.9%) 11130,009 ops/s [Average]
[info]   (min, avg, max) = (1418099,419, 1421692,805, 1426026,797), stdev = 2890,428
[info]   CI (99.9%): [1410562,796, 1432822,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   831,041 ±(99.9%) 6,396 MB/sec [Average]
[info]   (min, avg, max) = (828,977, 831,041, 833,537), stdev = 1,661
[info]   CI (99.9%): [824,645, 837,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,032 ±(99.9%) 0,173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,032, 0,092), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810,766 ±(99.9%) 1164,739 MB/sec [Average]
[info]   (min, avg, max) = (675,077, 810,766, 1351,857), stdev = 302,479
[info]   CI (99.9%): [≈ 0, 1975,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   897,633 ±(99.9%) 1290,868 B/op [Average]
[info]   (min, avg, max) = (745,127, 897,633, 1497,310), stdev = 335,234
[info]   CI (99.9%): [≈ 0, 2188,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,60% complete, ETA 01:07:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1386670,038 ops/s
[info] # Warmup Iteration   2: 1454634,595 ops/s
[info] # Warmup Iteration   3: 1459455,352 ops/s
[info] # Warmup Iteration   4: 1462105,598 ops/s
[info] # Warmup Iteration   5: 1455635,686 ops/s
[info] Iteration   1: 1455557,982 ops/s
[info]                  ·gc.alloc.rate:                   495,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553,195 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1458178,187 ops/s
[info]                  ·gc.alloc.rate:                   496,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 552,205 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1458710,805 ops/s
[info]                  ·gc.alloc.rate:                   496,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728,096 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1460144,344 ops/s
[info]                  ·gc.alloc.rate:                   497,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 727,332 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1459155,723 ops/s
[info]                  ·gc.alloc.rate:      496,972 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1458349,408 ±(99.9%) 6620,398 ops/s [Average]
[info]   (min, avg, max) = (1455557,982, 1458349,408, 1460144,344), stdev = 1719,296
[info]   CI (99.9%): [1451729,010, 1464969,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   496,678 ±(99.9%) 2,277 MB/sec [Average]
[info]   (min, avg, max) = (495,714, 496,678, 497,292), stdev = 0,591
[info]   CI (99.9%): [494,401, 498,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,679 ±(99.9%) 5,672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,679, 3,314), stdev = 1,473
[info]   CI (99.9%): [≈ 0, 6,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,733 ±(99.9%) 6,121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,733, 3,576), stdev = 1,590
[info]   CI (99.9%): [≈ 0, 6,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474,576 ±(99.9%) 1068,763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,576, 674,806), stdev = 277,554
[info]   CI (99.9%): [≈ 0, 1543,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   512,166 ±(99.9%) 1152,821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 512,166, 728,096), stdev = 299,384
[info]   CI (99.9%): [≈ 0, 1664,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49,80% complete, ETA 01:06:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1497999,139 ops/s
[info] # Warmup Iteration   2: 1556953,308 ops/s
[info] # Warmup Iteration   3: 1552845,239 ops/s
[info] # Warmup Iteration   4: 1552063,310 ops/s
[info] # Warmup Iteration   5: 1554982,568 ops/s
[info] Iteration   1: 1556419,586 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1552555,207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1550046,599 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1536184,229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1549993,350 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1549039,794 ±(99.9%) 29452,262 ops/s [Average]
[info]   (min, avg, max) = (1536184,229, 1549039,794, 1556419,586), stdev = 7648,659
[info]   CI (99.9%): [1519587,532, 1578492,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50,00% complete, ETA 01:06:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32120,888 ops/s
[info] # Warmup Iteration   2: 43647,112 ops/s
[info] # Warmup Iteration   3: 44017,744 ops/s
[info] # Warmup Iteration   4: 43973,847 ops/s
[info] # Warmup Iteration   5: 44239,247 ops/s
[info] Iteration   1: 44127,616 ops/s
[info]                  ·gc.alloc.rate:                   2130,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011,959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71757,302 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 44243,785 ops/s
[info]                  ·gc.alloc.rate:                   2136,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71670,466 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 44203,088 ops/s
[info]                  ·gc.alloc.rate:                   2134,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693,630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95909,378 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 44097,186 ops/s
[info]                  ·gc.alloc.rate:                   2129,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72283,205 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 44110,108 ops/s
[info]                  ·gc.alloc.rate:                   2130,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              76000,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72380,739 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   44156,357 ±(99.9%) 245,760 ops/s [Average]
[info]   (min, avg, max) = (44097,186, 44156,357, 44243,785), stdev = 63,823
[info]   CI (99.9%): [43910,597, 44402,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2132,337 ±(99.9%) 11,839 MB/sec [Average]
[info]   (min, avg, max) = (2129,483, 2132,337, 2136,632), stdev = 3,074
[info]   CI (99.9%): [2120,499, 2144,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76000,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (76000,009, 76000,009, 76000,009), stdev = 0,001
[info]   CI (99.9%): [76000,009, 76000,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,022, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,078 ±(99.9%) 1,281 B/op [Average]
[info]   (min, avg, max) = (1,482, 2,078, 2,229), stdev = 0,333
[info]   CI (99.9%): [0,796, 3,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2154,916 ±(99.9%) 1159,934 MB/sec [Average]
[info]   (min, avg, max) = (2011,959, 2154,916, 2693,630), stdev = 301,231
[info]   CI (99.9%): [994,982, 3314,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76800,218 ±(99.9%) 41151,502 B/op [Average]
[info]   (min, avg, max) = (71670,466, 76800,218, 95909,378), stdev = 10686,914
[info]   CI (99.9%): [35648,716, 117951,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50,20% complete, ETA 01:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142982,437 ops/s
[info] # Warmup Iteration   2: 154999,008 ops/s
[info] # Warmup Iteration   3: 147915,854 ops/s
[info] # Warmup Iteration   4: 155826,273 ops/s
[info] # Warmup Iteration   5: 155344,529 ops/s
[info] Iteration   1: 155105,141 ops/s
[info]                  ·gc.alloc.rate:                   1046,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6826,403 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 156057,833 ops/s
[info]                  ·gc.alloc.rate:                   1053,606 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13544,143 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 155524,787 ops/s
[info]                  ·gc.alloc.rate:                   1049,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6794,491 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 154705,539 ops/s
[info]                  ·gc.alloc.rate:                   1044,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13664,292 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 155651,177 ops/s
[info]                  ·gc.alloc.rate:                   1050,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6792,185 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   155408,896 ±(99.9%) 2001,065 ops/s [Average]
[info]   (min, avg, max) = (154705,539, 155408,896, 156057,833), stdev = 519,670
[info]   CI (99.9%): [153407,831, 157409,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1049,077 ±(99.9%) 13,775 MB/sec [Average]
[info]   (min, avg, max) = (1044,371, 1049,077, 1053,606), stdev = 3,577
[info]   CI (99.9%): [1035,303, 1062,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10624,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10624,003, 10624,003, 10624,003), stdev = 0,001
[info]   CI (99.9%): [10624,002, 10624,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,338 ±(99.9%) 1,477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,338, 0,847), stdev = 0,384
[info]   CI (99.9%): [≈ 0, 1,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   940,452 ±(99.9%) 1415,794 MB/sec [Average]
[info]   (min, avg, max) = (671,411, 940,452, 1343,241), stdev = 367,677
[info]   CI (99.9%): [≈ 0, 2356,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   9524,303 ±(99.9%) 14342,502 B/op [Average]
[info]   (min, avg, max) = (6792,185, 9524,303, 13664,292), stdev = 3724,702
[info]   CI (99.9%): [≈ 0, 23866,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50,40% complete, ETA 01:05:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38706,721 ops/s
[info] # Warmup Iteration   2: 45533,106 ops/s
[info] # Warmup Iteration   3: 44591,505 ops/s
[info] # Warmup Iteration   4: 45952,125 ops/s
[info] # Warmup Iteration   5: 45875,840 ops/s
[info] Iteration   1: 45969,311 ops/s
[info]                  ·gc.alloc.rate:                   917,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23011,793 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 46036,847 ops/s
[info]                  ·gc.alloc.rate:                   919,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22977,309 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 46054,193 ops/s
[info]                  ·gc.alloc.rate:                   919,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45891,134 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 46064,895 ops/s
[info]                  ·gc.alloc.rate:                   919,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22940,587 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 44167,702 ops/s
[info]                  ·gc.alloc.rate:                   881,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23924,593 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   45658,590 ±(99.9%) 3212,437 ops/s [Average]
[info]   (min, avg, max) = (44167,702, 45658,590, 46064,895), stdev = 834,260
[info]   CI (99.9%): [42446,152, 48871,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   911,651 ±(99.9%) 64,083 MB/sec [Average]
[info]   (min, avg, max) = (881,913, 911,651, 919,759), stdev = 16,642
[info]   CI (99.9%): [847,568, 975,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (31424,009, 31424,009, 31424,010), stdev = 0,001
[info]   CI (99.9%): [31424,008, 31424,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,439 ±(99.9%) 2,542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,439, 1,483), stdev = 0,660
[info]   CI (99.9%): [≈ 0, 2,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   806,003 ±(99.9%) 1155,586 MB/sec [Average]
[info]   (min, avg, max) = (671,442, 806,003, 1342,842), stdev = 300,102
[info]   CI (99.9%): [≈ 0, 1961,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27749,083 ±(99.9%) 39084,232 B/op [Average]
[info]   (min, avg, max) = (22940,587, 27749,083, 45891,134), stdev = 10150,051
[info]   CI (99.9%): [≈ 0, 66833,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,60% complete, ETA 01:05:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67269,262 ops/s
[info] # Warmup Iteration   2: 95931,804 ops/s
[info] # Warmup Iteration   3: 91023,848 ops/s
[info] # Warmup Iteration   4: 97213,531 ops/s
[info] # Warmup Iteration   5: 97385,225 ops/s
[info] Iteration   1: 97164,892 ops/s
[info]                  ·gc.alloc.rate:                   1022,304 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10934,917 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 97131,129 ops/s
[info]                  ·gc.alloc.rate:                   1022,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21899,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 96950,248 ops/s
[info]                  ·gc.alloc.rate:                   1020,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10976,286 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 96890,637 ops/s
[info]                  ·gc.alloc.rate:                   1019,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21974,718 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 97259,349 ops/s
[info]                  ·gc.alloc.rate:                   1023,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10951,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97079,251 ±(99.9%) 592,418 ops/s [Average]
[info]   (min, avg, max) = (96890,637, 97079,251, 97259,349), stdev = 153,849
[info]   CI (99.9%): [96486,833, 97671,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1021,537 ±(99.9%) 6,258 MB/sec [Average]
[info]   (min, avg, max) = (1019,471, 1021,537, 1023,392), stdev = 1,625
[info]   CI (99.9%): [1015,279, 1027,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16560,004, 16560,004, 16560,005), stdev = 0,001
[info]   CI (99.9%): [16560,004, 16560,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,203 ±(99.9%) 1,164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,203, 0,676), stdev = 0,302
[info]   CI (99.9%): [≈ 0, 1,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946,552 ±(99.9%) 1426,472 MB/sec [Average]
[info]   (min, avg, max) = (675,049, 946,552, 1352,813), stdev = 370,450
[info]   CI (99.9%): [≈ 0, 2373,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15347,304 ±(99.9%) 23164,433 B/op [Average]
[info]   (min, avg, max) = (10934,917, 15347,304, 21974,718), stdev = 6015,730
[info]   CI (99.9%): [≈ 0, 38511,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,80% complete, ETA 01:05:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276694,618 ops/s
[info] # Warmup Iteration   2: 289523,431 ops/s
[info] # Warmup Iteration   3: 283919,107 ops/s
[info] # Warmup Iteration   4: 289920,044 ops/s
[info] # Warmup Iteration   5: 289091,465 ops/s
[info] Iteration   1: 291207,877 ops/s
[info]                  ·gc.alloc.rate:                   947,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3636,363 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 291015,096 ops/s
[info]                  ·gc.alloc.rate:                   946,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7270,269 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 291253,317 ops/s
[info]                  ·gc.alloc.rate:                   947,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3628,353 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 291142,388 ops/s
[info]                  ·gc.alloc.rate:                   947,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7259,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 291170,545 ops/s
[info]                  ·gc.alloc.rate:                   947,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3631,137 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   291157,845 ±(99.9%) 346,534 ops/s [Average]
[info]   (min, avg, max) = (291015,096, 291157,845, 291253,317), stdev = 89,994
[info]   CI (99.9%): [290811,311, 291504,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   947,154 ±(99.9%) 0,799 MB/sec [Average]
[info]   (min, avg, max) = (946,851, 947,154, 947,432), stdev = 0,207
[info]   CI (99.9%): [946,355, 947,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5120,001, 5120,001, 5120,002), stdev = 0,001
[info]   CI (99.9%): [5120,001, 5120,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,113 ±(99.9%) 0,531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,113, 0,338), stdev = 0,138
[info]   CI (99.9%): [≈ 0, 0,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940,652 ±(99.9%) 1416,770 MB/sec [Average]
[info]   (min, avg, max) = (671,410, 940,652, 1344,504), stdev = 367,931
[info]   CI (99.9%): [≈ 0, 2357,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5085,099 ±(99.9%) 7662,051 B/op [Average]
[info]   (min, avg, max) = (3628,353, 5085,099, 7270,269), stdev = 1989,810
[info]   CI (99.9%): [≈ 0, 12747,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51,00% complete, ETA 01:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21978,465 ops/s
[info] # Warmup Iteration   2: 33490,796 ops/s
[info] # Warmup Iteration   3: 33531,469 ops/s
[info] # Warmup Iteration   4: 33256,661 ops/s
[info] # Warmup Iteration   5: 33484,609 ops/s
[info] Iteration   1: 33242,050 ops/s
[info]                  ·gc.alloc.rate:                   1561,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              73944,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63815,259 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33595,790 ops/s
[info]                  ·gc.alloc.rate:                   1578,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              73944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63217,229 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33487,852 ops/s
[info]                  ·gc.alloc.rate:                   1573,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              73944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95243,984 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33283,746 ops/s
[info]                  ·gc.alloc.rate:                   1563,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              73944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63972,900 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33419,793 ops/s
[info]                  ·gc.alloc.rate:                   1570,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              73944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63771,539 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   33405,846 ±(99.9%) 560,450 ops/s [Average]
[info]   (min, avg, max) = (33242,050, 33405,846, 33595,790), stdev = 145,547
[info]   CI (99.9%): [32845,396, 33966,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1569,542 ±(99.9%) 26,313 MB/sec [Average]
[info]   (min, avg, max) = (1561,786, 1569,542, 1578,375), stdev = 6,833
[info]   CI (99.9%): [1543,228, 1595,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73944,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (73944,012, 73944,013, 73944,013), stdev = 0,001
[info]   CI (99.9%): [73944,011, 73944,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,125), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,935 ±(99.9%) 9,581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,935, 5,851), stdev = 2,488
[info]   CI (99.9%): [≈ 0, 12,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1486,229 ±(99.9%) 1163,396 MB/sec [Average]
[info]   (min, avg, max) = (1347,854, 1486,229, 2026,676), stdev = 302,130
[info]   CI (99.9%): [322,833, 2649,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   70004,182 ±(99.9%) 54341,690 B/op [Average]
[info]   (min, avg, max) = (63217,229, 70004,182, 95243,984), stdev = 14112,364
[info]   CI (99.9%): [15662,493, 124345,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51,20% complete, ETA 01:04:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32111,895 ops/s
[info] # Warmup Iteration   2: 35077,518 ops/s
[info] # Warmup Iteration   3: 34839,400 ops/s
[info] # Warmup Iteration   4: 35213,928 ops/s
[info] # Warmup Iteration   5: 35186,856 ops/s
[info] Iteration   1: 35332,638 ops/s
[info]                  ·gc.alloc.rate:                   589,573 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22786,745 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 35365,267 ops/s
[info]                  ·gc.alloc.rate:                   590,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30030,462 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 35411,276 ops/s
[info]                  ·gc.alloc.rate:                   590,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29989,765 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 35490,667 ops/s
[info]                  ·gc.alloc.rate:                   592,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29804,867 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 35509,720 ops/s
[info]                  ·gc.alloc.rate:                   592,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29787,246 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   35421,914 ±(99.9%) 296,581 ops/s [Average]
[info]   (min, avg, max) = (35332,638, 35421,914, 35509,720), stdev = 77,021
[info]   CI (99.9%): [35125,332, 35718,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   591,144 ±(99.9%) 5,028 MB/sec [Average]
[info]   (min, avg, max) = (589,573, 591,144, 592,631), stdev = 1,306
[info]   CI (99.9%): [586,116, 596,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   26264,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (26264,011, 26264,012, 26264,012), stdev = 0,001
[info]   CI (99.9%): [26264,010, 26264,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,683 ±(99.9%) 5,706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,683, 3,334), stdev = 1,482
[info]   CI (99.9%): [≈ 0, 6,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30,410 ±(99.9%) 253,905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30,410, 148,359), stdev = 65,938
[info]   CI (99.9%): [≈ 0, 284,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   641,099 ±(99.9%) 278,989 MB/sec [Average]
[info]   (min, avg, max) = (511,515, 641,099, 674,892), stdev = 72,452
[info]   CI (99.9%): [362,111, 920,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   28479,817 ±(99.9%) 12261,843 B/op [Average]
[info]   (min, avg, max) = (22786,745, 28479,817, 30030,462), stdev = 3184,362
[info]   CI (99.9%): [16217,974, 40741,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51,41% complete, ETA 01:04:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50821,725 ops/s
[info] # Warmup Iteration   2: 64768,585 ops/s
[info] # Warmup Iteration   3: 64592,033 ops/s
[info] # Warmup Iteration   4: 65185,414 ops/s
[info] # Warmup Iteration   5: 65312,902 ops/s
[info] Iteration   1: 65324,731 ops/s
[info]                  ·gc.alloc.rate:                   969,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16192,923 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 63769,768 ops/s
[info]                  ·gc.alloc.rate:                   946,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33144,077 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 65137,680 ops/s
[info]                  ·gc.alloc.rate:                   966,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16206,714 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 65135,481 ops/s
[info]                  ·gc.alloc.rate:                   966,485 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32414,423 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 65172,108 ops/s
[info]                  ·gc.alloc.rate:                   967,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16206,304 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   64907,953 ±(99.9%) 2468,238 ops/s [Average]
[info]   (min, avg, max) = (63769,768, 64907,953, 65324,731), stdev = 640,994
[info]   CI (99.9%): [62439,715, 67376,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   963,103 ±(99.9%) 36,389 MB/sec [Average]
[info]   (min, avg, max) = (946,314, 963,103, 969,172), stdev = 9,450
[info]   CI (99.9%): [926,714, 999,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23352,006, 23352,006, 23352,007), stdev = 0,001
[info]   CI (99.9%): [23352,005, 23352,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,507 ±(99.9%) 1,958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,507, 1,028), stdev = 0,508
[info]   CI (99.9%): [≈ 0, 2,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   939,727 ±(99.9%) 1415,251 MB/sec [Average]
[info]   (min, avg, max) = (670,784, 939,727, 1343,126), stdev = 367,536
[info]   CI (99.9%): [≈ 0, 2354,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22832,888 ±(99.9%) 34976,978 B/op [Average]
[info]   (min, avg, max) = (16192,923, 22832,888, 33144,077), stdev = 9083,410
[info]   CI (99.9%): [≈ 0, 57809,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,61% complete, ETA 01:04:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87364,189 ops/s
[info] # Warmup Iteration   2: 124913,360 ops/s
[info] # Warmup Iteration   3: 125160,785 ops/s
[info] # Warmup Iteration   4: 124738,460 ops/s
[info] # Warmup Iteration   5: 125100,930 ops/s
[info] Iteration   1: 124936,330 ops/s
[info]                  ·gc.alloc.rate:                   1711,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17050,153 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 120188,219 ops/s
[info]                  ·gc.alloc.rate:                   1646,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26616,061 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 125219,953 ops/s
[info]                  ·gc.alloc.rate:                   1715,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17041,338 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 124368,164 ops/s
[info]                  ·gc.alloc.rate:                   1704,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559,987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25759,852 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 125541,748 ops/s
[info]                  ·gc.alloc.rate:                   1720,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17027,543 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   124050,883 ±(99.9%) 8478,909 ops/s [Average]
[info]   (min, avg, max) = (120188,219, 124050,883, 125541,748), stdev = 2201,946
[info]   CI (99.9%): [115571,974, 132529,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1699,488 ±(99.9%) 116,357 MB/sec [Average]
[info]   (min, avg, max) = (1646,448, 1699,488, 1720,004), stdev = 30,218
[info]   CI (99.9%): [1583,131, 1815,845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560,000 ±(99.9%) 0,051 B/op [Average]
[info]   (min, avg, max) = (21559,987, 21560,000, 21560,019), stdev = 0,013
[info]   CI (99.9%): [21559,949, 21560,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,478 ±(99.9%) 1,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,478, 0,818), stdev = 0,296
[info]   CI (99.9%): [≈ 0, 1,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1627,281 ±(99.9%) 1430,856 MB/sec [Average]
[info]   (min, avg, max) = (1353,419, 1627,281, 2036,100), stdev = 371,589
[info]   CI (99.9%): [196,425, 3058,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20698,989 ±(99.9%) 19329,696 B/op [Average]
[info]   (min, avg, max) = (17027,543, 20698,989, 26616,061), stdev = 5019,861
[info]   CI (99.9%): [1369,293, 40028,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,81% complete, ETA 01:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297980,133 ops/s
[info] # Warmup Iteration   2: 316049,774 ops/s
[info] # Warmup Iteration   3: 306994,087 ops/s
[info] # Warmup Iteration   4: 300857,420 ops/s
[info] # Warmup Iteration   5: 308601,261 ops/s
[info] Iteration   1: 308551,058 ops/s
[info]                  ·gc.alloc.rate:                   983,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6856,414 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 309419,390 ops/s
[info]                  ·gc.alloc.rate:                   986,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3415,546 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 308617,942 ops/s
[info]                  ·gc.alloc.rate:                   983,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6848,331 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 309177,125 ops/s
[info]                  ·gc.alloc.rate:                   985,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3417,954 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 299417,467 ops/s
[info]                  ·gc.alloc.rate:                   954,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7062,544 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   307036,596 ±(99.9%) 16461,778 ops/s [Average]
[info]   (min, avg, max) = (299417,467, 307036,596, 309419,390), stdev = 4275,071
[info]   CI (99.9%): [290574,818, 323498,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   978,572 ±(99.9%) 52,418 MB/sec [Average]
[info]   (min, avg, max) = (954,328, 978,572, 986,286), stdev = 13,613
[info]   CI (99.9%): [926,155, 1030,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5016,001, 5016,001, 5016,001), stdev = 0,001
[info]   CI (99.9%): [5016,001, 5016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,151 ±(99.9%) 0,560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,151, 0,328), stdev = 0,145
[info]   CI (99.9%): [≈ 0, 0,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074,728 ±(99.9%) 1417,263 MB/sec [Average]
[info]   (min, avg, max) = (671,488, 1074,728, 1343,983), stdev = 368,059
[info]   CI (99.9%): [≈ 0, 2491,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5520,158 ±(99.9%) 7401,162 B/op [Average]
[info]   (min, avg, max) = (3415,546, 5520,158, 7062,544), stdev = 1922,058
[info]   CI (99.9%): [≈ 0, 12921,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52,01% complete, ETA 01:03:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342416,358 ops/s
[info] # Warmup Iteration   2: 358661,055 ops/s
[info] # Warmup Iteration   3: 360452,104 ops/s
[info] # Warmup Iteration   4: 360298,536 ops/s
[info] # Warmup Iteration   5: 360794,303 ops/s
[info] Iteration   1: 361167,920 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 360302,382 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 349814,225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 360108,367 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 361148,273 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   358508,233 ±(99.9%) 18806,063 ops/s [Average]
[info]   (min, avg, max) = (349814,225, 358508,233, 361167,920), stdev = 4883,875
[info]   CI (99.9%): [339702,171, 377314,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52,21% complete, ETA 01:03:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60570,561 ops/s
[info] # Warmup Iteration   2: 73163,834 ops/s
[info] # Warmup Iteration   3: 73684,992 ops/s
[info] # Warmup Iteration   4: 74320,925 ops/s
[info] # Warmup Iteration   5: 74635,402 ops/s
[info] Iteration   1: 73875,254 ops/s
[info]                  ·gc.alloc.rate:                   1095,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28540,114 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 74408,796 ops/s
[info]                  ·gc.alloc.rate:                   1103,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14159,094 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 74543,323 ops/s
[info]                  ·gc.alloc.rate:                   1105,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28267,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 74502,341 ops/s
[info]                  ·gc.alloc.rate:                   1105,074 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28282,847 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 73814,146 ops/s
[info]                  ·gc.alloc.rate:                   1094,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343,978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14286,821 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   74228,772 ±(99.9%) 1365,597 ops/s [Average]
[info]   (min, avg, max) = (73814,146, 74228,772, 74543,323), stdev = 354,641
[info]   CI (99.9%): [72863,176, 75594,369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1100,970 ±(99.9%) 20,174 MB/sec [Average]
[info]   (min, avg, max) = (1094,907, 1100,970, 1105,623), stdev = 5,239
[info]   CI (99.9%): [1080,796, 1121,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344,006 ±(99.9%) 0,104 B/op [Average]
[info]   (min, avg, max) = (23343,978, 23344,006, 23344,033), stdev = 0,027
[info]   CI (99.9%): [23343,902, 23344,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,616 ±(99.9%) 3,508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,616, 2,197), stdev = 0,911
[info]   CI (99.9%): [≈ 0, 4,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071,340 ±(99.9%) 1411,736 MB/sec [Average]
[info]   (min, avg, max) = (669,351, 1071,340, 1339,578), stdev = 366,623
[info]   CI (99.9%): [≈ 0, 2483,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22707,234 ±(99.9%) 29826,852 B/op [Average]
[info]   (min, avg, max) = (14159,094, 22707,234, 28540,114), stdev = 7745,939
[info]   CI (99.9%): [≈ 0, 52534,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52,41% complete, ETA 01:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11112,358 ops/s
[info] # Warmup Iteration   2: 11590,806 ops/s
[info] # Warmup Iteration   3: 11661,316 ops/s
[info] # Warmup Iteration   4: 11501,992 ops/s
[info] # Warmup Iteration   5: 11648,693 ops/s
[info] Iteration   1: 11602,259 ops/s
[info]                  ·gc.alloc.rate:                   287,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69387,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11652,949 ops/s
[info]                  ·gc.alloc.rate:                   288,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69095,355 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 11634,812 ops/s
[info]                  ·gc.alloc.rate:      288,374 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11610,448 ops/s
[info]                  ·gc.alloc.rate:                   287,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69339,277 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11609,399 ops/s
[info]                  ·gc.alloc.rate:      287,743 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   11621,973 ±(99.9%) 81,774 ops/s [Average]
[info]   (min, avg, max) = (11602,259, 11621,973, 11652,949), stdev = 21,236
[info]   CI (99.9%): [11540,199, 11703,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   288,049 ±(99.9%) 2,082 MB/sec [Average]
[info]   (min, avg, max) = (287,540, 288,049, 288,838), stdev = 0,541
[info]   CI (99.9%): [285,967, 290,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39008,037 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (39008,035, 39008,037, 39008,044), stdev = 0,004
[info]   CI (99.9%): [39008,022, 39008,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,004 ±(99.9%) 0,035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,020), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,546 ±(99.9%) 4,703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,546, 2,731), stdev = 1,221
[info]   CI (99.9%): [≈ 0, 5,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   306,918 ±(99.9%) 1078,860 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,918, 511,621), stdev = 280,177
[info]   CI (99.9%): [≈ 0, 1385,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   41564,341 ±(99.9%) 146105,137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41564,341, 69387,073), stdev = 37943,040
[info]   CI (99.9%): [≈ 0, 187669,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52,61% complete, ETA 01:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21524,264 ops/s
[info] # Warmup Iteration   2: 27962,462 ops/s
[info] # Warmup Iteration   3: 27764,547 ops/s
[info] # Warmup Iteration   4: 27768,221 ops/s
[info] # Warmup Iteration   5: 28171,166 ops/s
[info] Iteration   1: 27874,516 ops/s
[info]                  ·gc.alloc.rate:                   1452,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113725,480 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26970,777 ops/s
[info]                  ·gc.alloc.rate:                   1404,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78360,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 28031,189 ops/s
[info]                  ·gc.alloc.rate:                   1460,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75472,639 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 28071,932 ops/s
[info]                  ·gc.alloc.rate:                   1462,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75437,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 28028,590 ops/s
[info]                  ·gc.alloc.rate:                   1460,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75627,632 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   27795,401 ±(99.9%) 1798,612 ops/s [Average]
[info]   (min, avg, max) = (26970,777, 27795,401, 28071,932), stdev = 467,094
[info]   CI (99.9%): [25996,789, 29594,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1447,910 ±(99.9%) 93,804 MB/sec [Average]
[info]   (min, avg, max) = (1404,903, 1447,910, 1462,244), stdev = 24,361
[info]   CI (99.9%): [1354,106, 1541,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81984,015, 81984,015, 81984,016), stdev = 0,001
[info]   CI (99.9%): [81984,013, 81984,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,069 ±(99.9%) 6,863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,069, 4,668), stdev = 1,782
[info]   CI (99.9%): [≈ 0, 9,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1478,734 ±(99.9%) 1152,603 MB/sec [Average]
[info]   (min, avg, max) = (1342,808, 1478,734, 2014,180), stdev = 299,327
[info]   CI (99.9%): [326,130, 2631,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   83724,660 ±(99.9%) 64753,967 B/op [Average]
[info]   (min, avg, max) = (75437,122, 83724,660, 113725,480), stdev = 16816,400
[info]   CI (99.9%): [18970,693, 148478,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52,81% complete, ETA 01:02:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21758,932 ops/s
[info] # Warmup Iteration   2: 32940,847 ops/s
[info] # Warmup Iteration   3: 32925,569 ops/s
[info] # Warmup Iteration   4: 32975,121 ops/s
[info] # Warmup Iteration   5: 32944,347 ops/s
[info] Iteration   1: 32900,202 ops/s
[info]                  ·gc.alloc.rate:                   1287,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64665,745 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33034,325 ops/s
[info]                  ·gc.alloc.rate:                   1293,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64458,908 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 32950,762 ops/s
[info]                  ·gc.alloc.rate:                   1290,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32327,514 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30900,703 ops/s
[info]                  ·gc.alloc.rate:                   1209,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69007,137 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33007,710 ops/s
[info]                  ·gc.alloc.rate:                   1292,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              61616,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64632,808 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   32558,741 ±(99.9%) 3574,633 ops/s [Average]
[info]   (min, avg, max) = (30900,703, 32558,741, 33034,325), stdev = 928,321
[info]   CI (99.9%): [28984,108, 36133,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1274,725 ±(99.9%) 140,030 MB/sec [Average]
[info]   (min, avg, max) = (1209,777, 1274,725, 1293,351), stdev = 36,365
[info]   CI (99.9%): [1134,695, 1414,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61616,013 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (61616,012, 61616,013, 61616,013), stdev = 0,001
[info]   CI (99.9%): [61616,011, 61616,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,232 ±(99.9%) 5,256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,232, 3,181), stdev = 1,365
[info]   CI (99.9%): [≈ 0, 6,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218,428 ±(99.9%) 1165,612 MB/sec [Average]
[info]   (min, avg, max) = (676,938, 1218,428, 1355,554), stdev = 302,706
[info]   CI (99.9%): [52,815, 2384,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59018,422 ±(99.9%) 57926,007 B/op [Average]
[info]   (min, avg, max) = (32327,514, 59018,422, 69007,137), stdev = 15043,200
[info]   CI (99.9%): [1092,415, 116944,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,01% complete, ETA 01:02:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 519728,848 ops/s
[info] # Warmup Iteration   2: 556227,839 ops/s
[info] # Warmup Iteration   3: 556073,353 ops/s
[info] # Warmup Iteration   4: 554665,970 ops/s
[info] # Warmup Iteration   5: 557505,432 ops/s
[info] Iteration   1: 555159,193 ops/s
[info]                  ·gc.alloc.rate:                   1444,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3806,940 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 559316,459 ops/s
[info]                  ·gc.alloc.rate:                   1455,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3780,466 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 558685,260 ops/s
[info]                  ·gc.alloc.rate:                   1454,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3786,679 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 559081,995 ops/s
[info]                  ·gc.alloc.rate:                   1455,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3787,680 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 558260,729 ops/s
[info]                  ·gc.alloc.rate:                   1452,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3798,903 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   558100,727 ±(99.9%) 6517,945 ops/s [Average]
[info]   (min, avg, max) = (555159,193, 558100,727, 559316,459), stdev = 1692,690
[info]   CI (99.9%): [551582,782, 564618,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1452,523 ±(99.9%) 17,159 MB/sec [Average]
[info]   (min, avg, max) = (1444,770, 1452,523, 1455,713), stdev = 4,456
[info]   CI (99.9%): [1435,364, 1469,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,083), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,176 ±(99.9%) 0,278 B/op [Average]
[info]   (min, avg, max) = (0,059, 0,176, 0,236), stdev = 0,072
[info]   CI (99.9%): [≈ 0, 0,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344,758 ±(99.9%) 7,228 MB/sec [Average]
[info]   (min, avg, max) = (1342,811, 1344,758, 1347,591), stdev = 1,877
[info]   CI (99.9%): [1337,529, 1351,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3792,133 ±(99.9%) 40,878 B/op [Average]
[info]   (min, avg, max) = (3780,466, 3792,133, 3806,940), stdev = 10,616
[info]   CI (99.9%): [3751,255, 3833,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53,21% complete, ETA 01:02:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12577,163 ops/s
[info] # Warmup Iteration   2: 24631,343 ops/s
[info] # Warmup Iteration   3: 24621,891 ops/s
[info] # Warmup Iteration   4: 24553,318 ops/s
[info] # Warmup Iteration   5: 24461,856 ops/s
[info] Iteration   1: 24709,947 ops/s
[info]                  ·gc.alloc.rate:                   1878,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129290,151 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 24821,742 ops/s
[info]                  ·gc.alloc.rate:                   1887,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128843,998 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 24666,323 ops/s
[info]                  ·gc.alloc.rate:                   1875,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129818,231 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 24725,918 ops/s
[info]                  ·gc.alloc.rate:                   1880,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86384,991 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 24674,334 ops/s
[info]                  ·gc.alloc.rate:                   1876,333 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129962,075 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   24719,653 ±(99.9%) 239,341 ops/s [Average]
[info]   (min, avg, max) = (24666,323, 24719,653, 24821,742), stdev = 62,156
[info]   CI (99.9%): [24480,311, 24958,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1879,766 ±(99.9%) 18,330 MB/sec [Average]
[info]   (min, avg, max) = (1875,715, 1879,766, 1887,613), stdev = 4,760
[info]   CI (99.9%): [1861,437, 1898,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119672,017 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (119672,016, 119672,017, 119672,018), stdev = 0,001
[info]   CI (99.9%): [119672,015, 119672,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,916 ±(99.9%) 7,571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,916, 5,311), stdev = 1,966
[info]   CI (99.9%): [≈ 0, 10,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898,380 ±(99.9%) 1164,916 MB/sec [Average]
[info]   (min, avg, max) = (1357,231, 1898,380, 2037,670), stdev = 302,525
[info]   CI (99.9%): [733,464, 3063,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   120859,889 ±(99.9%) 74229,479 B/op [Average]
[info]   (min, avg, max) = (86384,991, 120859,889, 129962,075), stdev = 19277,160
[info]   CI (99.9%): [46630,410, 195089,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53,41% complete, ETA 01:01:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25086,193 ops/s
[info] # Warmup Iteration   2: 29808,943 ops/s
[info] # Warmup Iteration   3: 29857,759 ops/s
[info] # Warmup Iteration   4: 29955,553 ops/s
[info] # Warmup Iteration   5: 30159,292 ops/s
[info] Iteration   1: 30046,730 ops/s
[info]                  ·gc.alloc.rate:                   1356,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70335,359 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29954,826 ops/s
[info]                  ·gc.alloc.rate:                   1352,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70551,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 30219,303 ops/s
[info]                  ·gc.alloc.rate:                   1364,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69976,767 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30269,661 ops/s
[info]                  ·gc.alloc.rate:                   1366,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69925,847 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30256,414 ops/s
[info]                  ·gc.alloc.rate:                   1365,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70025,182 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   30149,387 ±(99.9%) 541,839 ops/s [Average]
[info]   (min, avg, max) = (29954,826, 30149,387, 30269,661), stdev = 140,714
[info]   CI (99.9%): [29607,548, 30691,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1360,846 ±(99.9%) 24,095 MB/sec [Average]
[info]   (min, avg, max) = (1352,348, 1360,846, 1366,193), stdev = 6,257
[info]   CI (99.9%): [1336,752, 1384,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   71032,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (71032,013, 71032,014, 71032,015), stdev = 0,001
[info]   CI (99.9%): [71032,012, 71032,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1,520 ±(99.9%) 5,602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,520, 3,247), stdev = 1,455
[info]   CI (99.9%): [≈ 0, 7,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1344,177 ±(99.9%) 5,462 MB/sec [Average]
[info]   (min, avg, max) = (1342,753, 1344,177, 1346,259), stdev = 1,419
[info]   CI (99.9%): [1338,714, 1349,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   70162,895 ±(99.9%) 1037,565 B/op [Average]
[info]   (min, avg, max) = (69925,847, 70162,895, 70551,320), stdev = 269,452
[info]   CI (99.9%): [69125,330, 71200,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53,61% complete, ETA 01:01:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61344,672 ops/s
[info] # Warmup Iteration   2: 79428,369 ops/s
[info] # Warmup Iteration   3: 79632,926 ops/s
[info] # Warmup Iteration   4: 79628,910 ops/s
[info] # Warmup Iteration   5: 79425,709 ops/s
[info] Iteration   1: 79489,485 ops/s
[info]                  ·gc.alloc.rate:                   1682,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012,890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39854,566 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 79708,893 ops/s
[info]                  ·gc.alloc.rate:                   1687,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26516,592 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 79356,193 ops/s
[info]                  ·gc.alloc.rate:                   1679,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40021,934 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 79422,089 ops/s
[info]                  ·gc.alloc.rate:                   1681,220 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26689,585 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 79446,750 ops/s
[info]                  ·gc.alloc.rate:                   1681,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40081,163 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   79484,682 ±(99.9%) 517,190 ops/s [Average]
[info]   (min, avg, max) = (79356,193, 79484,682, 79708,893), stdev = 134,313
[info]   CI (99.9%): [78967,492, 80001,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1682,493 ±(99.9%) 11,150 MB/sec [Average]
[info]   (min, avg, max) = (1679,779, 1682,493, 1687,374), stdev = 2,896
[info]   CI (99.9%): [1671,343, 1693,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (33312,005, 33312,005, 33312,006), stdev = 0,001
[info]   CI (99.9%): [33312,004, 33312,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,154 ±(99.9%) 1,320 B/op [Average]
[info]   (min, avg, max) = (0,825, 1,154, 1,644), stdev = 0,343
[info]   CI (99.9%): [≈ 0, 2,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1748,907 ±(99.9%) 1419,598 MB/sec [Average]
[info]   (min, avg, max) = (1343,161, 1748,907, 2023,357), stdev = 368,665
[info]   CI (99.9%): [329,309, 3168,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   34632,768 ±(99.9%) 28228,251 B/op [Average]
[info]   (min, avg, max) = (26516,592, 34632,768, 40081,163), stdev = 7330,787
[info]   CI (99.9%): [6404,517, 62861,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,82% complete, ETA 01:01:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126568,398 ops/s
[info] # Warmup Iteration   2: 172179,486 ops/s
[info] # Warmup Iteration   3: 174925,485 ops/s
[info] # Warmup Iteration   4: 174869,962 ops/s
[info] # Warmup Iteration   5: 173878,678 ops/s
[info] Iteration   1: 173445,533 ops/s
[info]                  ·gc.alloc.rate:                   1314,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12269,561 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 175069,817 ops/s
[info]                  ·gc.alloc.rate:                   1326,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12165,657 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 174589,241 ops/s
[info]                  ·gc.alloc.rate:                   1323,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12207,337 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 169480,189 ops/s
[info]                  ·gc.alloc.rate:                   1284,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12588,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 172624,844 ops/s
[info]                  ·gc.alloc.rate:                   1308,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12368,162 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   173041,925 ±(99.9%) 8508,388 ops/s [Average]
[info]   (min, avg, max) = (169480,189, 173041,925, 175069,817), stdev = 2209,601
[info]   CI (99.9%): [164533,537, 181550,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1311,607 ±(99.9%) 64,087 MB/sec [Average]
[info]   (min, avg, max) = (1284,791, 1311,607, 1326,929), stdev = 16,643
[info]   CI (99.9%): [1247,519, 1375,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11928,002, 11928,002, 11928,003), stdev = 0,001
[info]   CI (99.9%): [11928,002, 11928,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,604 ±(99.9%) 1,069 B/op [Average]
[info]   (min, avg, max) = (0,193, 0,604, 0,944), stdev = 0,278
[info]   CI (99.9%): [≈ 0, 1,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354,498 ±(99.9%) 7,216 MB/sec [Average]
[info]   (min, avg, max) = (1352,164, 1354,498, 1356,803), stdev = 1,874
[info]   CI (99.9%): [1347,282, 1361,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12319,770 ±(99.9%) 647,989 B/op [Average]
[info]   (min, avg, max) = (12165,657, 12319,770, 12588,133), stdev = 168,281
[info]   CI (99.9%): [11671,781, 12967,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,02% complete, ETA 01:01:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1351807,829 ops/s
[info] # Warmup Iteration   2: 1444750,827 ops/s
[info] # Warmup Iteration   3: 1455050,223 ops/s
[info] # Warmup Iteration   4: 1456068,153 ops/s
[info] # Warmup Iteration   5: 1460308,832 ops/s
[info] Iteration   1: 1455624,110 ops/s
[info]                  ·gc.alloc.rate:                   1205,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1451,906 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1460032,002 ops/s
[info]                  ·gc.alloc.rate:                   1210,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1446,693 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1454564,114 ops/s
[info]                  ·gc.alloc.rate:                   1205,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 726,848 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1455556,802 ops/s
[info]                  ·gc.alloc.rate:                   1206,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1453,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1460662,805 ops/s
[info]                  ·gc.alloc.rate:                   1210,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1449,478 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1457287,966 ±(99.9%) 10908,947 ops/s [Average]
[info]   (min, avg, max) = (1454564,114, 1457287,966, 1460662,805), stdev = 2833,019
[info]   CI (99.9%): [1446379,019, 1468196,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1207,484 ±(99.9%) 9,381 MB/sec [Average]
[info]   (min, avg, max) = (1205,207, 1207,484, 1210,165), stdev = 2,436
[info]   CI (99.9%): [1198,103, 1216,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,000, 1304,000, 1304,000), stdev = 0,001
[info]   CI (99.9%): [1304,000, 1304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,054 ±(99.9%) 0,131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,090), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1209,211 ±(99.9%) 1156,865 MB/sec [Average]
[info]   (min, avg, max) = (671,781, 1209,211, 1345,174), stdev = 300,434
[info]   CI (99.9%): [52,346, 2366,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1305,595 ±(99.9%) 1245,831 B/op [Average]
[info]   (min, avg, max) = (726,848, 1305,595, 1453,050), stdev = 323,538
[info]   CI (99.9%): [59,764, 2551,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54,22% complete, ETA 01:00:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1688784,289 ops/s
[info] # Warmup Iteration   2: 1772149,503 ops/s
[info] # Warmup Iteration   3: 1767437,895 ops/s
[info] # Warmup Iteration   4: 1766869,585 ops/s
[info] # Warmup Iteration   5: 1770656,840 ops/s
[info] Iteration   1: 1772006,140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1771184,057 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1771343,391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1739236,689 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1766225,236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1763999,102 ±(99.9%) 54039,764 ops/s [Average]
[info]   (min, avg, max) = (1739236,689, 1763999,102, 1772006,140), stdev = 14033,955
[info]   CI (99.9%): [1709959,338, 1818038,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54,42% complete, ETA 01:00:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87613,918 ops/s
[info] # Warmup Iteration   2: 136018,565 ops/s
[info] # Warmup Iteration   3: 137437,673 ops/s
[info] # Warmup Iteration   4: 120368,887 ops/s
[info] # Warmup Iteration   5: 137769,171 ops/s
[info] Iteration   1: 136359,997 ops/s
[info]                  ·gc.alloc.rate:                   1537,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15607,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 138006,170 ops/s
[info]                  ·gc.alloc.rate:                   1555,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23151,356 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 137660,438 ops/s
[info]                  ·gc.alloc.rate:                   1552,010 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15489,445 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 137937,604 ops/s
[info]                  ·gc.alloc.rate:                   1555,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15469,747 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 137913,451 ops/s
[info]                  ·gc.alloc.rate:                   1554,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23229,729 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   137575,532 ±(99.9%) 2664,655 ops/s [Average]
[info]   (min, avg, max) = (136359,997, 137575,532, 138006,170), stdev = 692,003
[info]   CI (99.9%): [134910,877, 140240,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1551,034 ±(99.9%) 30,160 MB/sec [Average]
[info]   (min, avg, max) = (1537,269, 1551,034, 1555,839), stdev = 7,832
[info]   CI (99.9%): [1520,874, 1581,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17744,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17744,003, 17744,003, 17744,003), stdev = 0,001
[info]   CI (99.9%): [17744,003, 17744,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,808 ±(99.9%) 1,528 B/op [Average]
[info]   (min, avg, max) = (0,240, 0,808, 1,190), stdev = 0,397
[info]   CI (99.9%): [≈ 0, 2,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625,671 ±(99.9%) 1431,159 MB/sec [Average]
[info]   (min, avg, max) = (1352,129, 1625,671, 2035,639), stdev = 371,667
[info]   CI (99.9%): [194,512, 3056,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18589,458 ±(99.9%) 16175,076 B/op [Average]
[info]   (min, avg, max) = (15469,747, 18589,458, 23229,729), stdev = 4200,616
[info]   CI (99.9%): [2414,382, 34764,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54,62% complete, ETA 01:00:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38537,732 ops/s
[info] # Warmup Iteration   2: 40589,485 ops/s
[info] # Warmup Iteration   3: 40213,562 ops/s
[info] # Warmup Iteration   4: 40541,060 ops/s
[info] # Warmup Iteration   5: 41135,622 ops/s
[info] Iteration   1: 41150,159 ops/s
[info]                  ·gc.alloc.rate:                   463,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19565,266 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 41120,326 ops/s
[info]                  ·gc.alloc.rate:                   463,203 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19580,965 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 41127,199 ops/s
[info]                  ·gc.alloc.rate:                   463,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25810,553 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 41153,657 ops/s
[info]                  ·gc.alloc.rate:      463,555 MB/sec
[info]                  ·gc.alloc.rate.norm: 17728,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41122,045 ops/s
[info]                  ·gc.alloc.rate:                   463,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25824,986 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   41134,677 ±(99.9%) 61,531 ops/s [Average]
[info]   (min, avg, max) = (41120,326, 41134,677, 41153,657), stdev = 15,979
[info]   CI (99.9%): [41073,147, 41196,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   463,346 ±(99.9%) 0,611 MB/sec [Average]
[info]   (min, avg, max) = (463,192, 463,346, 463,555), stdev = 0,159
[info]   CI (99.9%): [462,735, 463,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17728,010 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (17728,010, 17728,010, 17728,011), stdev = 0,001
[info]   CI (99.9%): [17728,008, 17728,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,684 ±(99.9%) 5,794 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,684, 3,376), stdev = 1,505
[info]   CI (99.9%): [≈ 0, 6,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   26,183 ±(99.9%) 221,677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26,183, 129,159), stdev = 57,569
[info]   CI (99.9%): [≈ 0, 247,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   474,482 ±(99.9%) 1068,543 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,482, 674,748), stdev = 277,497
[info]   CI (99.9%): [≈ 0, 1543,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   18156,354 ±(99.9%) 40890,431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18156,354, 25824,986), stdev = 10619,115
[info]   CI (99.9%): [≈ 0, 59046,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,82% complete, ETA 01:00:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26164,827 ops/s
[info] # Warmup Iteration   2: 40325,549 ops/s
[info] # Warmup Iteration   3: 40230,072 ops/s
[info] # Warmup Iteration   4: 40632,272 ops/s
[info] # Warmup Iteration   5: 40814,789 ops/s
[info] Iteration   1: 40592,246 ops/s
[info]                  ·gc.alloc.rate:                   1457,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52426,217 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 40704,392 ops/s
[info]                  ·gc.alloc.rate:                   1461,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52333,508 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38791,185 ops/s
[info]                  ·gc.alloc.rate:                   1392,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54969,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 40551,762 ops/s
[info]                  ·gc.alloc.rate:                   1455,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52607,173 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 40650,576 ops/s
[info]                  ·gc.alloc.rate:                   1459,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78814,705 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   40258,032 ±(99.9%) 3165,351 ops/s [Average]
[info]   (min, avg, max) = (38791,185, 40258,032, 40704,392), stdev = 822,032
[info]   CI (99.9%): [37092,681, 43423,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1445,108 ±(99.9%) 113,509 MB/sec [Average]
[info]   (min, avg, max) = (1392,496, 1445,108, 1461,043), stdev = 29,478
[info]   CI (99.9%): [1331,599, 1558,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56496,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (56496,010, 56496,011, 56496,012), stdev = 0,001
[info]   CI (99.9%): [56496,009, 56496,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,321 ±(99.9%) 5,836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,321, 3,378), stdev = 1,516
[info]   CI (99.9%): [≈ 0, 7,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1490,300 ±(99.9%) 1173,631 MB/sec [Average]
[info]   (min, avg, max) = (1352,133, 1490,300, 2035,517), stdev = 304,788
[info]   CI (99.9%): [316,670, 2663,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58230,153 ±(99.9%) 44509,172 B/op [Average]
[info]   (min, avg, max) = (52333,508, 58230,153, 78814,705), stdev = 11558,891
[info]   CI (99.9%): [13720,982, 102739,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,02% complete, ETA 00:59:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 690053,755 ops/s
[info] # Warmup Iteration   2: 741306,803 ops/s
[info] # Warmup Iteration   3: 748118,913 ops/s
[info] # Warmup Iteration   4: 699193,202 ops/s
[info] # Warmup Iteration   5: 750946,481 ops/s
[info] Iteration   1: 746645,047 ops/s
[info]                  ·gc.alloc.rate:                   1457,255 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2830,604 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 752960,893 ops/s
[info]                  ·gc.alloc.rate:                   1469,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2808,471 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 749681,445 ops/s
[info]                  ·gc.alloc.rate:                   1463,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2821,910 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 753156,946 ops/s
[info]                  ·gc.alloc.rate:                   1470,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2813,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 749283,475 ops/s
[info]                  ·gc.alloc.rate:                   1462,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2830,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   750345,561 ±(99.9%) 10546,605 ops/s [Average]
[info]   (min, avg, max) = (746645,047, 750345,561, 753156,946), stdev = 2738,920
[info]   CI (99.9%): [739798,956, 760892,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1464,648 ±(99.9%) 20,974 MB/sec [Average]
[info]   (min, avg, max) = (1457,255, 1464,648, 1470,145), stdev = 5,447
[info]   CI (99.9%): [1443,674, 1485,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,001, 3072,001, 3072,001), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,088 ±(99.9%) 0,358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,088, 0,219), stdev = 0,093
[info]   CI (99.9%): [≈ 0, 0,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344,919 ±(99.9%) 7,455 MB/sec [Average]
[info]   (min, avg, max) = (1342,744, 1344,919, 1347,544), stdev = 1,936
[info]   CI (99.9%): [1337,464, 1352,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2820,906 ±(99.9%) 38,630 B/op [Average]
[info]   (min, avg, max) = (2808,471, 2820,906, 2830,604), stdev = 10,032
[info]   CI (99.9%): [2782,276, 2859,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55,22% complete, ETA 00:59:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16734,151 ops/s
[info] # Warmup Iteration   2: 30672,938 ops/s
[info] # Warmup Iteration   3: 30906,534 ops/s
[info] # Warmup Iteration   4: 30857,455 ops/s
[info] # Warmup Iteration   5: 30920,214 ops/s
[info] Iteration   1: 30920,646 ops/s
[info]                  ·gc.alloc.rate:                   2250,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103426,814 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31026,953 ops/s
[info]                  ·gc.alloc.rate:                   2258,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137627,290 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 30947,042 ops/s
[info]                  ·gc.alloc.rate:                   2252,587 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103590,664 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31056,883 ops/s
[info]                  ·gc.alloc.rate:                   2260,536 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103294,677 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 30792,060 ops/s
[info]                  ·gc.alloc.rate:                   2241,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720,275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139042,968 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   30948,717 ±(99.9%) 399,952 ops/s [Average]
[info]   (min, avg, max) = (30792,060, 30948,717, 31056,883), stdev = 103,866
[info]   CI (99.9%): [30548,765, 31348,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2252,542 ±(99.9%) 29,194 MB/sec [Average]
[info]   (min, avg, max) = (2241,127, 2252,542, 2260,536), stdev = 7,581
[info]   CI (99.9%): [2223,349, 2281,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114552,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (114552,013, 114552,013, 114552,014), stdev = 0,001
[info]   CI (99.9%): [114552,012, 114552,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,963 ±(99.9%) 6,027 B/op [Average]
[info]   (min, avg, max) = (1,060, 2,963, 5,280), stdev = 1,565
[info]   CI (99.9%): [≈ 0, 8,989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2308,096 ±(99.9%) 1436,101 MB/sec [Average]
[info]   (min, avg, max) = (2031,805, 2308,096, 2720,275), stdev = 372,951
[info]   CI (99.9%): [871,995, 3744,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   117396,483 ±(99.9%) 73628,628 B/op [Average]
[info]   (min, avg, max) = (103294,677, 117396,483, 139042,968), stdev = 19121,121
[info]   CI (99.9%): [43767,854, 191025,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55,42% complete, ETA 00:59:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34447,805 ops/s
[info] # Warmup Iteration   2: 40966,353 ops/s
[info] # Warmup Iteration   3: 40460,274 ops/s
[info] # Warmup Iteration   4: 40853,300 ops/s
[info] # Warmup Iteration   5: 40334,316 ops/s
[info] Iteration   1: 40542,917 ops/s
[info]                  ·gc.alloc.rate:                   1692,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78193,278 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 40497,692 ops/s
[info]                  ·gc.alloc.rate:                   1691,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52242,405 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 40807,882 ops/s
[info]                  ·gc.alloc.rate:                   1704,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77867,352 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 40857,818 ops/s
[info]                  ·gc.alloc.rate:                   1706,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51919,484 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 40745,562 ops/s
[info]                  ·gc.alloc.rate:                   1701,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78198,757 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   40690,374 ±(99.9%) 620,185 ops/s [Average]
[info]   (min, avg, max) = (40497,692, 40690,374, 40857,818), stdev = 161,060
[info]   CI (99.9%): [40070,189, 41310,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1699,198 ±(99.9%) 26,002 MB/sec [Average]
[info]   (min, avg, max) = (1691,189, 1699,198, 1706,165), stdev = 6,753
[info]   CI (99.9%): [1673,196, 1725,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65720,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (65720,010, 65720,010, 65720,011), stdev = 0,001
[info]   CI (99.9%): [65720,009, 65720,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2,094 ±(99.9%) 3,546 B/op [Average]
[info]   (min, avg, max) = (0,804, 2,094, 3,236), stdev = 0,921
[info]   CI (99.9%): [≈ 0, 5,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1750,054 ±(99.9%) 1419,938 MB/sec [Average]
[info]   (min, avg, max) = (1344,367, 1750,054, 2024,673), stdev = 368,754
[info]   CI (99.9%): [330,116, 3169,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   67684,255 ±(99.9%) 54852,033 B/op [Average]
[info]   (min, avg, max) = (51919,484, 67684,255, 78198,757), stdev = 14244,899
[info]   CI (99.9%): [12832,223, 122536,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,62% complete, ETA 00:59:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292146,375 ops/s
[info] # Warmup Iteration   2: 398827,123 ops/s
[info] # Warmup Iteration   3: 403883,947 ops/s
[info] # Warmup Iteration   4: 403809,104 ops/s
[info] # Warmup Iteration   5: 403747,557 ops/s
[info] Iteration   1: 403989,917 ops/s
[info]                  ·gc.alloc.rate:                   1123,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2631,392 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 403983,907 ops/s
[info]                  ·gc.alloc.rate:                   1123,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5265,210 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 403612,426 ops/s
[info]                  ·gc.alloc.rate:                   1122,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5275,191 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 403856,396 ops/s
[info]                  ·gc.alloc.rate:                   1122,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2637,326 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 402987,588 ops/s
[info]                  ·gc.alloc.rate:                   1120,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5291,266 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   403686,047 ±(99.9%) 1614,680 ops/s [Average]
[info]   (min, avg, max) = (402987,588, 403686,047, 403989,917), stdev = 419,327
[info]   CI (99.9%): [402071,367, 405300,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1122,448 ±(99.9%) 4,600 MB/sec [Average]
[info]   (min, avg, max) = (1120,418, 1122,448, 1123,274), stdev = 1,195
[info]   CI (99.9%): [1117,848, 1127,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4376,001, 4376,001, 4376,001), stdev = 0,001
[info]   CI (99.9%): [4376,001, 4376,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,097 ±(99.9%) 0,408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,097, 0,244), stdev = 0,106
[info]   CI (99.9%): [≈ 0, 0,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082,294 ±(99.9%) 1427,805 MB/sec [Average]
[info]   (min, avg, max) = (675,433, 1082,294, 1354,760), stdev = 370,796
[info]   CI (99.9%): [≈ 0, 2510,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4220,077 ±(99.9%) 5574,143 B/op [Average]
[info]   (min, avg, max) = (2631,392, 4220,077, 5291,266), stdev = 1447,587
[info]   CI (99.9%): [≈ 0, 9794,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,82% complete, ETA 00:58:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1596019,385 ops/s
[info] # Warmup Iteration   2: 1679972,189 ops/s
[info] # Warmup Iteration   3: 1445176,961 ops/s
[info] # Warmup Iteration   4: 1702164,271 ops/s
[info] # Warmup Iteration   5: 1718589,582 ops/s
[info] Iteration   1: 1707982,843 ops/s
[info]                  ·gc.alloc.rate:                   998,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1238,645 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1720163,315 ops/s
[info]                  ·gc.alloc.rate:                   1005,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 614,373 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1696085,842 ops/s
[info]                  ·gc.alloc.rate:                   991,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1246,075 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1717837,846 ops/s
[info]                  ·gc.alloc.rate:                   1004,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 615,154 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1709180,975 ops/s
[info]                  ·gc.alloc.rate:                   999,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1237,139 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1710250,164 ±(99.9%) 36669,950 ops/s [Average]
[info]   (min, avg, max) = (1696085,842, 1710250,164, 1720163,315), stdev = 9523,069
[info]   CI (99.9%): [1673580,214, 1746920,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   999,769 ±(99.9%) 21,561 MB/sec [Average]
[info]   (min, avg, max) = (991,492, 999,769, 1005,664), stdev = 5,599
[info]   CI (99.9%): [978,207, 1021,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,023 ±(99.9%) 0,097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,058), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074,724 ±(99.9%) 1417,326 MB/sec [Average]
[info]   (min, avg, max) = (671,458, 1074,724, 1344,093), stdev = 368,075
[info]   CI (99.9%): [≈ 0, 2492,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   990,277 ±(99.9%) 1320,048 B/op [Average]
[info]   (min, avg, max) = (614,373, 990,277, 1246,075), stdev = 342,812
[info]   CI (99.9%): [≈ 0, 2310,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56,02% complete, ETA 00:58:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1977458,057 ops/s
[info] # Warmup Iteration   2: 2061867,409 ops/s
[info] # Warmup Iteration   3: 2056649,564 ops/s
[info] # Warmup Iteration   4: 2056755,579 ops/s
[info] # Warmup Iteration   5: 2056072,313 ops/s
[info] Iteration   1: 2060876,418 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2056960,598 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2057326,591 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2055482,076 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2056713,074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2057471,751 ±(99.9%) 7798,982 ops/s [Average]
[info]   (min, avg, max) = (2055482,076, 2057471,751, 2060876,418), stdev = 2025,371
[info]   CI (99.9%): [2049672,770, 2065270,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56,22% complete, ETA 00:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172578,522 ops/s
[info] # Warmup Iteration   2: 263620,427 ops/s
[info] # Warmup Iteration   3: 265785,481 ops/s
[info] # Warmup Iteration   4: 267520,710 ops/s
[info] # Warmup Iteration   5: 268136,327 ops/s
[info] Iteration   1: 267481,467 ops/s
[info]                  ·gc.alloc.rate:                   1732,220 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7960,058 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 266022,940 ops/s
[info]                  ·gc.alloc.rate:                   1722,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12019,215 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 268558,355 ops/s
[info]                  ·gc.alloc.rate:                   1739,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7943,994 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 267513,072 ops/s
[info]                  ·gc.alloc.rate:                   1732,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11971,880 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 265907,430 ops/s
[info]                  ·gc.alloc.rate:                   1721,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8035,065 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   267096,653 ±(99.9%) 4315,974 ops/s [Average]
[info]   (min, avg, max) = (265907,430, 267096,653, 268558,355), stdev = 1120,845
[info]   CI (99.9%): [262780,679, 271412,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1729,709 ±(99.9%) 27,974 MB/sec [Average]
[info]   (min, avg, max) = (1721,936, 1729,709, 1739,133), stdev = 7,265
[info]   CI (99.9%): [1701,734, 1757,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10192,002, 10192,002, 10192,002), stdev = 0,001
[info]   CI (99.9%): [10192,002, 10192,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,147 ±(99.9%) 0,617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,147, 0,369), stdev = 0,160
[info]   CI (99.9%): [≈ 0, 0,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1626,522 ±(99.9%) 1430,018 MB/sec [Average]
[info]   (min, avg, max) = (1352,882, 1626,522, 2035,021), stdev = 371,371
[info]   CI (99.9%): [196,504, 3056,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9586,042 ±(99.9%) 8471,028 B/op [Average]
[info]   (min, avg, max) = (7943,994, 9586,042, 12019,215), stdev = 2199,899
[info]   CI (99.9%): [1115,014, 18057,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56,43% complete, ETA 00:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48303,064 ops/s
[info] # Warmup Iteration   2: 50675,431 ops/s
[info] # Warmup Iteration   3: 51314,288 ops/s
[info] # Warmup Iteration   4: 51603,140 ops/s
[info] # Warmup Iteration   5: 51424,694 ops/s
[info] Iteration   1: 51393,848 ops/s
[info]                  ·gc.alloc.rate:                   344,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15665,610 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 51588,450 ops/s
[info]                  ·gc.alloc.rate:      345,650 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 51267,691 ops/s
[info]                  ·gc.alloc.rate:                   343,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15703,490 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 51152,510 ops/s
[info]                  ·gc.alloc.rate:                   342,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15739,399 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 51382,513 ops/s
[info]                  ·gc.alloc.rate:      344,259 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   51357,002 ±(99.9%) 624,973 ops/s [Average]
[info]   (min, avg, max) = (51152,510, 51357,002, 51588,450), stdev = 162,304
[info]   CI (99.9%): [50732,029, 51981,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   344,076 ±(99.9%) 4,207 MB/sec [Average]
[info]   (min, avg, max) = (342,711, 344,076, 345,650), stdev = 1,093
[info]   CI (99.9%): [339,869, 348,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10544,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10544,008, 10544,008, 10544,009), stdev = 0,001
[info]   CI (99.9%): [10544,007, 10544,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,010 ±(99.9%) 0,059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,318 ±(99.9%) 1,797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,318, 1,033), stdev = 0,467
[info]   CI (99.9%): [≈ 0, 2,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   306,928 ±(99.9%) 1078,896 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,928, 511,576), stdev = 280,186
[info]   CI (99.9%): [≈ 0, 1385,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   9421,700 ±(99.9%) 33118,755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9421,700, 15739,399), stdev = 8600,836
[info]   CI (99.9%): [≈ 0, 42540,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56,63% complete, ETA 00:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62936,966 ops/s
[info] # Warmup Iteration   2: 81487,304 ops/s
[info] # Warmup Iteration   3: 81695,339 ops/s
[info] # Warmup Iteration   4: 82685,579 ops/s
[info] # Warmup Iteration   5: 81898,891 ops/s
[info] Iteration   1: 81854,055 ops/s
[info]                  ·gc.alloc.rate:                   1644,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25742,455 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 82376,134 ops/s
[info]                  ·gc.alloc.rate:                   1655,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009,480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38385,508 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 80716,562 ops/s
[info]                  ·gc.alloc.rate:                   1622,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26159,198 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 82308,789 ops/s
[info]                  ·gc.alloc.rate:                   1654,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38549,090 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 82346,271 ops/s
[info]                  ·gc.alloc.rate:                   1654,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25729,661 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   81920,362 ±(99.9%) 2718,411 ops/s [Average]
[info]   (min, avg, max) = (80716,562, 81920,362, 82376,134), stdev = 705,963
[info]   CI (99.9%): [79201,951, 84638,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1646,181 ±(99.9%) 54,693 MB/sec [Average]
[info]   (min, avg, max) = (1622,019, 1646,181, 1655,515), stdev = 14,204
[info]   CI (99.9%): [1591,487, 1700,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (31624,005, 31624,005, 31624,005), stdev = 0,001
[info]   CI (99.9%): [31624,004, 31624,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,877 ±(99.9%) 2,511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,877, 1,591), stdev = 0,652
[info]   CI (99.9%): [≈ 0, 3,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1610,501 ±(99.9%) 1414,511 MB/sec [Average]
[info]   (min, avg, max) = (1338,782, 1610,501, 2016,295), stdev = 367,344
[info]   CI (99.9%): [195,990, 3025,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30913,182 ±(99.9%) 26563,053 B/op [Average]
[info]   (min, avg, max) = (25729,661, 30913,182, 38549,090), stdev = 6898,341
[info]   CI (99.9%): [4350,129, 57476,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56,83% complete, ETA 00:57:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61045,834 ops/s
[info] # Warmup Iteration   2: 93076,947 ops/s
[info] # Warmup Iteration   3: 94561,725 ops/s
[info] # Warmup Iteration   4: 93762,473 ops/s
[info] # Warmup Iteration   5: 94882,756 ops/s
[info] Iteration   1: 92936,900 ops/s
[info]                  ·gc.alloc.rate:                   1049,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22836,573 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 94835,605 ops/s
[info]                  ·gc.alloc.rate:                   1071,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11198,932 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 94754,176 ops/s
[info]                  ·gc.alloc.rate:                   1070,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22437,243 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 94906,394 ops/s
[info]                  ·gc.alloc.rate:                   1071,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11211,586 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 94451,209 ops/s
[info]                  ·gc.alloc.rate:                   1066,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22542,264 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   94376,857 ±(99.9%) 3170,785 ops/s [Average]
[info]   (min, avg, max) = (92936,900, 94376,857, 94906,394), stdev = 823,443
[info]   CI (99.9%): [91206,072, 97547,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1065,972 ±(99.9%) 35,998 MB/sec [Average]
[info]   (min, avg, max) = (1049,628, 1065,972, 1071,950), stdev = 9,349
[info]   CI (99.9%): [1029,974, 1101,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17776,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17776,004, 17776,005, 17776,005), stdev = 0,001
[info]   CI (99.9%): [17776,004, 17776,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,491 ±(99.9%) 2,817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,491, 1,763), stdev = 0,732
[info]   CI (99.9%): [≈ 0, 3,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080,627 ±(99.9%) 1424,120 MB/sec [Average]
[info]   (min, avg, max) = (674,890, 1080,627, 1352,834), stdev = 369,840
[info]   CI (99.9%): [≈ 0, 2504,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18045,319 ±(99.9%) 24050,388 B/op [Average]
[info]   (min, avg, max) = (11198,932, 18045,319, 22836,573), stdev = 6245,810
[info]   CI (99.9%): [≈ 0, 42095,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,03% complete, ETA 00:57:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104693,183 ops/s
[info] # Warmup Iteration   2: 119519,392 ops/s
[info] # Warmup Iteration   3: 120298,332 ops/s
[info] # Warmup Iteration   4: 120692,155 ops/s
[info] # Warmup Iteration   5: 120630,915 ops/s
[info] Iteration   1: 119452,817 ops/s
[info]                  ·gc.alloc.rate:                   1258,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17640,088 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 120478,493 ops/s
[info]                  ·gc.alloc.rate:                   1268,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17489,899 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 120916,712 ops/s
[info]                  ·gc.alloc.rate:                   1273,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17435,661 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 120957,200 ops/s
[info]                  ·gc.alloc.rate:                   1274,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17446,510 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 120726,711 ops/s
[info]                  ·gc.alloc.rate:                   1271,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17496,672 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   120506,387 ±(99.9%) 2382,216 ops/s [Average]
[info]   (min, avg, max) = (119452,817, 120506,387, 120957,200), stdev = 618,654
[info]   CI (99.9%): [118124,171, 122888,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1269,226 ±(99.9%) 25,265 MB/sec [Average]
[info]   (min, avg, max) = (1258,047, 1269,226, 1274,023), stdev = 6,561
[info]   CI (99.9%): [1243,961, 1294,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16576,003, 16576,003, 16576,004), stdev = 0,001
[info]   CI (99.9%): [16576,003, 16576,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,326 ±(99.9%) 1,363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,326, 0,814), stdev = 0,354
[info]   CI (99.9%): [≈ 0, 1,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1340,086 ±(99.9%) 5,686 MB/sec [Average]
[info]   (min, avg, max) = (1338,806, 1340,086, 1342,245), stdev = 1,477
[info]   CI (99.9%): [1334,400, 1345,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17501,766 ±(99.9%) 314,735 B/op [Average]
[info]   (min, avg, max) = (17435,661, 17501,766, 17640,088), stdev = 81,736
[info]   CI (99.9%): [17187,031, 17816,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57,23% complete, ETA 00:56:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26965,825 ops/s
[info] # Warmup Iteration   2: 44722,809 ops/s
[info] # Warmup Iteration   3: 44862,036 ops/s
[info] # Warmup Iteration   4: 44879,470 ops/s
[info] # Warmup Iteration   5: 44864,179 ops/s
[info] Iteration   1: 44945,060 ops/s
[info]                  ·gc.alloc.rate:                   2235,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              78264,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71139,710 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44898,425 ops/s
[info]                  ·gc.alloc.rate:                   2232,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              78264,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95104,328 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 45051,999 ops/s
[info]                  ·gc.alloc.rate:                   2240,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              78264,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71160,103 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 44724,872 ops/s
[info]                  ·gc.alloc.rate:                   2224,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              78264,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71725,552 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 44701,648 ops/s
[info]                  ·gc.alloc.rate:                   2223,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              78264,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720,751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95779,213 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   44864,401 ±(99.9%) 573,775 ops/s [Average]
[info]   (min, avg, max) = (44701,648, 44864,401, 45051,999), stdev = 149,008
[info]   CI (99.9%): [44290,625, 45438,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2231,102 ±(99.9%) 28,271 MB/sec [Average]
[info]   (min, avg, max) = (2223,206, 2231,102, 2240,464), stdev = 7,342
[info]   CI (99.9%): [2202,830, 2259,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78264,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (78264,009, 78264,010, 78264,010), stdev = 0,001
[info]   CI (99.9%): [78264,008, 78264,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,125), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,045 ±(99.9%) 5,406 B/op [Average]
[info]   (min, avg, max) = (0,727, 2,045, 4,378), stdev = 1,404
[info]   CI (99.9%): [≈ 0, 7,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2308,165 ±(99.9%) 1436,817 MB/sec [Average]
[info]   (min, avg, max) = (2031,569, 2308,165, 2720,751), stdev = 373,137
[info]   CI (99.9%): [871,348, 3744,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80981,781 ±(99.9%) 50845,264 B/op [Average]
[info]   (min, avg, max) = (71139,710, 80981,781, 95779,213), stdev = 13204,354
[info]   CI (99.9%): [30136,517, 131827,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57,43% complete, ETA 00:56:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73381,686 ops/s
[info] # Warmup Iteration   2: 84289,695 ops/s
[info] # Warmup Iteration   3: 84847,409 ops/s
[info] # Warmup Iteration   4: 84226,559 ops/s
[info] # Warmup Iteration   5: 85749,081 ops/s
[info] Iteration   1: 85470,243 ops/s
[info]                  ·gc.alloc.rate:                   1483,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24653,906 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 85375,519 ops/s
[info]                  ·gc.alloc.rate:                   1482,236 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24682,489 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 85432,860 ops/s
[info]                  ·gc.alloc.rate:                   1483,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24689,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 85388,323 ops/s
[info]                  ·gc.alloc.rate:                   1482,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37119,853 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 85446,547 ops/s
[info]                  ·gc.alloc.rate:                   1483,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24764,826 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   85422,698 ±(99.9%) 153,303 ops/s [Average]
[info]   (min, avg, max) = (85375,519, 85422,698, 85470,243), stdev = 39,812
[info]   CI (99.9%): [85269,395, 85576,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1482,887 ±(99.9%) 2,161 MB/sec [Average]
[info]   (min, avg, max) = (1482,236, 1482,887, 1483,455), stdev = 0,561
[info]   CI (99.9%): [1480,726, 1485,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   27320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27320,005, 27320,005, 27320,005), stdev = 0,001
[info]   CI (99.9%): [27320,004, 27320,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,614 ±(99.9%) 1,685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,614, 1,151), stdev = 0,438
[info]   CI (99.9%): [≈ 0, 2,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1475,350 ±(99.9%) 1159,705 MB/sec [Average]
[info]   (min, avg, max) = (1338,688, 1475,350, 2014,086), stdev = 301,172
[info]   CI (99.9%): [315,646, 2635,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   27182,039 ±(99.9%) 21392,476 B/op [Average]
[info]   (min, avg, max) = (24653,906, 27182,039, 37119,853), stdev = 5555,558
[info]   CI (99.9%): [5789,563, 48574,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57,63% complete, ETA 00:56:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114805,436 ops/s
[info] # Warmup Iteration   2: 148120,429 ops/s
[info] # Warmup Iteration   3: 151381,201 ops/s
[info] # Warmup Iteration   4: 151316,669 ops/s
[info] # Warmup Iteration   5: 150486,240 ops/s
[info] Iteration   1: 152323,029 ops/s
[info]                  ·gc.alloc.rate:                   675,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4,261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6951,459 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 152643,659 ops/s
[info]                  ·gc.alloc.rate:                   677,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6937,298 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 152628,363 ops/s
[info]                  ·gc.alloc.rate:                   677,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6910,457 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 152088,358 ops/s
[info]                  ·gc.alloc.rate:                   674,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6934,580 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 152008,320 ops/s
[info]                  ·gc.alloc.rate:                   674,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668,806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6924,253 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   152338,346 ±(99.9%) 1137,361 ops/s [Average]
[info]   (min, avg, max) = (152008,320, 152338,346, 152643,659), stdev = 295,369
[info]   CI (99.9%): [151200,984, 153475,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   676,018 ±(99.9%) 5,068 MB/sec [Average]
[info]   (min, avg, max) = (674,577, 676,018, 677,456), stdev = 1,316
[info]   CI (99.9%): [670,950, 681,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6984,003, 6984,003, 6984,003), stdev = 0,001
[info]   CI (99.9%): [6984,002, 6984,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,877 ±(99.9%) 7,284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,877, 4,261), stdev = 1,892
[info]   CI (99.9%): [≈ 0, 8,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9,063 ±(99.9%) 75,262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,063, 44,024), stdev = 19,545
[info]   CI (99.9%): [≈ 0, 84,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   670,946 ±(99.9%) 6,962 MB/sec [Average]
[info]   (min, avg, max) = (668,806, 670,946, 672,925), stdev = 1,808
[info]   CI (99.9%): [663,984, 677,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6931,609 ±(99.9%) 58,927 B/op [Average]
[info]   (min, avg, max) = (6910,457, 6931,609, 6951,459), stdev = 15,303
[info]   CI (99.9%): [6872,683, 6990,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,83% complete, ETA 00:56:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115041,490 ops/s
[info] # Warmup Iteration   2: 174164,509 ops/s
[info] # Warmup Iteration   3: 173437,217 ops/s
[info] # Warmup Iteration   4: 174116,529 ops/s
[info] # Warmup Iteration   5: 172138,390 ops/s
[info] Iteration   1: 172580,430 ops/s
[info]                  ·gc.alloc.rate:      256,146 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 172274,022 ops/s
[info]                  ·gc.alloc.rate:                   255,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4673,455 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 173089,525 ops/s
[info]                  ·gc.alloc.rate:      256,915 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 171545,797 ops/s
[info]                  ·gc.alloc.rate:                   254,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4693,283 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 173368,004 ops/s
[info]                  ·gc.alloc.rate:      257,322 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   172571,555 ±(99.9%) 2752,206 ops/s [Average]
[info]   (min, avg, max) = (171545,797, 172571,555, 173368,004), stdev = 714,739
[info]   CI (99.9%): [169819,350, 175323,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   256,138 ±(99.9%) 4,084 MB/sec [Average]
[info]   (min, avg, max) = (254,627, 256,138, 257,322), stdev = 1,061
[info]   CI (99.9%): [252,055, 260,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2336,002, 2336,003, 2336,003), stdev = 0,001
[info]   CI (99.9%): [2336,002, 2336,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204,619 ±(99.9%) 1078,896 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,619, 511,573), stdev = 280,186
[info]   CI (99.9%): [≈ 0, 1283,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1873,348 ±(99.9%) 9877,658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1873,348, 4693,283), stdev = 2565,196
[info]   CI (99.9%): [≈ 0, 11751,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58,03% complete, ETA 00:55:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 685965,833 ops/s
[info] # Warmup Iteration   2: 756746,356 ops/s
[info] # Warmup Iteration   3: 763930,043 ops/s
[info] # Warmup Iteration   4: 755484,601 ops/s
[info] # Warmup Iteration   5: 780056,586 ops/s
[info] Iteration   1: 777443,598 ops/s
[info]                  ·gc.alloc.rate:                   964,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1357,899 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 771331,688 ops/s
[info]                  ·gc.alloc.rate:                   956,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2734,613 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 777124,486 ops/s
[info]                  ·gc.alloc.rate:                   963,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1355,760 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 770345,700 ops/s
[info]                  ·gc.alloc.rate:                   955,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2735,309 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 660526,377 ops/s
[info]                  ·gc.alloc.rate:                   819,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1595,081 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   751354,370 ±(99.9%) 195912,602 ops/s [Average]
[info]   (min, avg, max) = (660526,377, 751354,370, 777443,598), stdev = 50877,881
[info]   CI (99.9%): [555441,768, 947266,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   931,901 ±(99.9%) 242,928 MB/sec [Average]
[info]   (min, avg, max) = (819,271, 931,901, 964,176), stdev = 63,088
[info]   CI (99.9%): [688,973, 1174,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,001, 1952,001, 1952,001), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,059 ±(99.9%) 0,319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,059, 0,170), stdev = 0,083
[info]   CI (99.9%): [≈ 0, 0,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   937,770 ±(99.9%) 1412,533 MB/sec [Average]
[info]   (min, avg, max) = (669,433, 937,770, 1340,367), stdev = 366,830
[info]   CI (99.9%): [≈ 0, 2350,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1955,733 ±(99.9%) 2764,588 B/op [Average]
[info]   (min, avg, max) = (1355,760, 1955,733, 2735,309), stdev = 717,955
[info]   CI (99.9%): [≈ 0, 4720,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58,23% complete, ETA 00:55:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 775226,203 ops/s
[info] # Warmup Iteration   2: 817808,242 ops/s
[info] # Warmup Iteration   3: 817310,310 ops/s
[info] # Warmup Iteration   4: 810101,527 ops/s
[info] # Warmup Iteration   5: 817619,843 ops/s
[info] Iteration   1: 813828,889 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 815145,346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 814348,419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 816602,417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 812561,329 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   814497,280 ±(99.9%) 5797,874 ops/s [Average]
[info]   (min, avg, max) = (812561,329, 814497,280, 816602,417), stdev = 1505,690
[info]   CI (99.9%): [808699,406, 820295,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58,43% complete, ETA 00:55:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178967,725 ops/s
[info] # Warmup Iteration   2: 230524,674 ops/s
[info] # Warmup Iteration   3: 228344,999 ops/s
[info] # Warmup Iteration   4: 227932,373 ops/s
[info] # Warmup Iteration   5: 229025,374 ops/s
[info] Iteration   1: 229432,774 ops/s
[info]                  ·gc.alloc.rate:                   749,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9216,112 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 230270,312 ops/s
[info]                  ·gc.alloc.rate:                   752,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668,840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4571,181 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 230515,653 ops/s
[info]                  ·gc.alloc.rate:                   753,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668,743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4565,907 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 228122,386 ops/s
[info]                  ·gc.alloc.rate:                   745,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667,448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4604,580 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 229671,140 ops/s
[info]                  ·gc.alloc.rate:                   750,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667,452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4573,593 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   229602,453 ±(99.9%) 3604,044 ops/s [Average]
[info]   (min, avg, max) = (228122,386, 229602,453, 230515,653), stdev = 935,959
[info]   CI (99.9%): [225998,409, 233206,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   750,450 ±(99.9%) 11,743 MB/sec [Average]
[info]   (min, avg, max) = (745,639, 750,450, 753,413), stdev = 3,050
[info]   CI (99.9%): [738,706, 762,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5144,002, 5144,002, 5144,002), stdev = 0,001
[info]   CI (99.9%): [5144,002, 5144,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,977 ±(99.9%) 8,275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,977, 4,820), stdev = 2,149
[info]   CI (99.9%): [≈ 0, 9,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6,700 ±(99.9%) 56,764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,700, 33,068), stdev = 14,741
[info]   CI (99.9%): [≈ 0, 63,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   803,186 ±(99.9%) 1162,955 MB/sec [Average]
[info]   (min, avg, max) = (667,448, 803,186, 1343,446), stdev = 302,016
[info]   CI (99.9%): [≈ 0, 1966,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5506,274 ±(99.9%) 7985,917 B/op [Average]
[info]   (min, avg, max) = (4565,907, 5506,274, 9216,112), stdev = 2073,917
[info]   CI (99.9%): [≈ 0, 13492,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58,63% complete, ETA 00:55:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28194,322 ops/s
[info] # Warmup Iteration   2: 30249,101 ops/s
[info] # Warmup Iteration   3: 29924,587 ops/s
[info] # Warmup Iteration   4: 30358,026 ops/s
[info] # Warmup Iteration   5: 30359,665 ops/s
[info] Iteration   1: 30212,105 ops/s
[info]                  ·gc.alloc.rate:                   168,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26648,126 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 30280,180 ops/s
[info]                  ·gc.alloc.rate:      169,008 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 30074,657 ops/s
[info]                  ·gc.alloc.rate:      167,857 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30015,558 ops/s
[info]                  ·gc.alloc.rate:                   167,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26822,981 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 30015,728 ops/s
[info]                  ·gc.alloc.rate:      167,523 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   30119,646 ±(99.9%) 463,587 ops/s [Average]
[info]   (min, avg, max) = (30015,558, 30119,646, 30280,180), stdev = 120,392
[info]   CI (99.9%): [29656,059, 30583,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   168,104 ±(99.9%) 2,589 MB/sec [Average]
[info]   (min, avg, max) = (167,522, 168,104, 169,008), stdev = 0,672
[info]   CI (99.9%): [165,515, 170,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8784,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (8784,014, 8784,014, 8784,016), stdev = 0,001
[info]   CI (99.9%): [8784,011, 8784,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,007 ±(99.9%) 0,058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,354 ±(99.9%) 3,045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,354, 1,769), stdev = 0,791
[info]   CI (99.9%): [≈ 0, 3,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   204,611 ±(99.9%) 1078,852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,611, 511,547), stdev = 280,175
[info]   CI (99.9%): [≈ 0, 1283,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10694,221 ±(99.9%) 56388,045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10694,221, 26822,981), stdev = 14643,796
[info]   CI (99.9%): [≈ 0, 67082,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58,84% complete, ETA 00:54:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106364,172 ops/s
[info] # Warmup Iteration   2: 140013,976 ops/s
[info] # Warmup Iteration   3: 140474,755 ops/s
[info] # Warmup Iteration   4: 140384,704 ops/s
[info] # Warmup Iteration   5: 140615,124 ops/s
[info] Iteration   1: 139752,440 ops/s
[info]                  ·gc.alloc.rate:                   1903,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15123,151 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 140546,910 ops/s
[info]                  ·gc.alloc.rate:                   1914,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22582,063 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 137401,946 ops/s
[info]                  ·gc.alloc.rate:                   1871,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23137,310 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 140618,449 ops/s
[info]                  ·gc.alloc.rate:                   1914,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22644,894 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 140545,040 ops/s
[info]                  ·gc.alloc.rate:                   1913,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22701,407 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   139772,957 ±(99.9%) 5283,978 ops/s [Average]
[info]   (min, avg, max) = (137401,946, 139772,957, 140618,449), stdev = 1372,232
[info]   CI (99.9%): [134488,979, 145056,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1903,406 ±(99.9%) 71,926 MB/sec [Average]
[info]   (min, avg, max) = (1871,164, 1903,406, 1914,944), stdev = 18,679
[info]   CI (99.9%): [1831,479, 1975,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21432,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (21432,003, 21432,003, 21432,003), stdev = 0,001
[info]   CI (99.9%): [21432,003, 21432,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,657 ±(99.9%) 1,740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,657, 1,165), stdev = 0,452
[info]   CI (99.9%): [≈ 0, 2,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1886,035 ±(99.9%) 1169,400 MB/sec [Average]
[info]   (min, avg, max) = (1342,823, 1886,035, 2027,231), stdev = 303,690
[info]   CI (99.9%): [716,634, 3055,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21237,765 ±(99.9%) 13188,971 B/op [Average]
[info]   (min, avg, max) = (15123,151, 21237,765, 23137,310), stdev = 3425,134
[info]   CI (99.9%): [8048,794, 34426,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,04% complete, ETA 00:54:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135972,743 ops/s
[info] # Warmup Iteration   2: 191060,919 ops/s
[info] # Warmup Iteration   3: 194353,547 ops/s
[info] # Warmup Iteration   4: 195141,440 ops/s
[info] # Warmup Iteration   5: 192976,088 ops/s
[info] Iteration   1: 194634,907 ops/s
[info]                  ·gc.alloc.rate:                   1034,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10918,907 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 195146,634 ops/s
[info]                  ·gc.alloc.rate:                   1037,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5447,455 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 186877,072 ops/s
[info]                  ·gc.alloc.rate:                   993,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11387,809 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 194746,902 ops/s
[info]                  ·gc.alloc.rate:                   1035,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5469,071 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 194264,548 ops/s
[info]                  ·gc.alloc.rate:                   1032,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10970,558 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   193134,012 ±(99.9%) 13522,856 ops/s [Average]
[info]   (min, avg, max) = (186877,072, 193134,012, 195146,634), stdev = 3511,843
[info]   CI (99.9%): [179611,156, 206656,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1026,933 ±(99.9%) 71,892 MB/sec [Average]
[info]   (min, avg, max) = (993,673, 1026,933, 1037,631), stdev = 18,670
[info]   CI (99.9%): [955,041, 1098,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8368,002, 8368,002, 8368,003), stdev = 0,001
[info]   CI (99.9%): [8368,001, 8368,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,239 ±(99.9%) 0,877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,239, 0,506), stdev = 0,228
[info]   CI (99.9%): [≈ 0, 1,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081,823 ±(99.9%) 1426,073 MB/sec [Average]
[info]   (min, avg, max) = (675,484, 1081,823, 1354,112), stdev = 370,347
[info]   CI (99.9%): [≈ 0, 2507,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8838,760 ±(99.9%) 11903,563 B/op [Average]
[info]   (min, avg, max) = (5447,455, 8838,760, 11387,809), stdev = 3091,318
[info]   CI (99.9%): [≈ 0, 20742,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,24% complete, ETA 00:54:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 488708,932 ops/s
[info] # Warmup Iteration   2: 519349,223 ops/s
[info] # Warmup Iteration   3: 475683,253 ops/s
[info] # Warmup Iteration   4: 419363,918 ops/s
[info] # Warmup Iteration   5: 526566,610 ops/s
[info] Iteration   1: 528013,558 ops/s
[info]                  ·gc.alloc.rate:                   1025,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4007,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 530737,478 ops/s
[info]                  ·gc.alloc.rate:                   1030,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1991,151 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 529800,533 ops/s
[info]                  ·gc.alloc.rate:                   1028,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3989,313 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 528705,449 ops/s
[info]                  ·gc.alloc.rate:                   1026,900 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1998,685 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 523874,076 ops/s
[info]                  ·gc.alloc.rate:                   1017,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4036,664 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   528226,219 ±(99.9%) 10188,014 ops/s [Average]
[info]   (min, avg, max) = (523874,076, 528226,219, 530737,478), stdev = 2645,795
[info]   CI (99.9%): [518038,205, 538414,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1025,790 ±(99.9%) 19,816 MB/sec [Average]
[info]   (min, avg, max) = (1017,325, 1025,790, 1030,658), stdev = 5,146
[info]   CI (99.9%): [1005,974, 1045,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3056,001, 3056,001, 3056,001), stdev = 0,001
[info]   CI (99.9%): [3056,001, 3056,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,100 ±(99.9%) 0,436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,100, 0,250), stdev = 0,113
[info]   CI (99.9%): [≈ 0, 0,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074,856 ±(99.9%) 1417,603 MB/sec [Average]
[info]   (min, avg, max) = (671,530, 1074,856, 1344,356), stdev = 368,147
[info]   CI (99.9%): [≈ 0, 2492,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3204,586 ±(99.9%) 4252,665 B/op [Average]
[info]   (min, avg, max) = (1991,151, 3204,586, 4036,664), stdev = 1104,404
[info]   CI (99.9%): [≈ 0, 7457,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59,44% complete, ETA 00:53:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42842,490 ops/s
[info] # Warmup Iteration   2: 76101,609 ops/s
[info] # Warmup Iteration   3: 75472,669 ops/s
[info] # Warmup Iteration   4: 76710,227 ops/s
[info] # Warmup Iteration   5: 76810,181 ops/s
[info] Iteration   1: 76946,664 ops/s
[info]                  ·gc.alloc.rate:                   3248,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716,132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55561,094 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 76791,648 ops/s
[info]                  ·gc.alloc.rate:                   3242,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399,623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69671,146 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 75622,334 ops/s
[info]                  ·gc.alloc.rate:                   3193,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70796,902 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 76506,678 ops/s
[info]                  ·gc.alloc.rate:                   3230,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70021,083 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 76680,126 ops/s
[info]                  ·gc.alloc.rate:                   3237,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55891,240 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   76509,490 ±(99.9%) 2007,239 ops/s [Average]
[info]   (min, avg, max) = (75622,334, 76509,490, 76946,664), stdev = 521,274
[info]   CI (99.9%): [74502,250, 78516,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3230,327 ±(99.9%) 84,168 MB/sec [Average]
[info]   (min, avg, max) = (3193,024, 3230,327, 3248,344), stdev = 21,858
[info]   CI (99.9%): [3146,160, 3314,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66448,005, 66448,006, 66448,006), stdev = 0,001
[info]   CI (99.9%): [66448,004, 66448,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,191 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,167), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,801 ±(99.9%) 3,953 B/op [Average]
[info]   (min, avg, max) = (0,853, 1,801, 3,426), stdev = 1,027
[info]   CI (99.9%): [≈ 0, 5,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3129,010 ±(99.9%) 1439,141 MB/sec [Average]
[info]   (min, avg, max) = (2716,132, 3129,010, 3404,205), stdev = 373,740
[info]   CI (99.9%): [1689,869, 4568,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64388,293 ±(99.9%) 30492,290 B/op [Average]
[info]   (min, avg, max) = (55561,094, 64388,293, 70796,902), stdev = 7918,751
[info]   CI (99.9%): [33896,003, 94880,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59,64% complete, ETA 00:53:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128887,546 ops/s
[info] # Warmup Iteration   2: 144144,108 ops/s
[info] # Warmup Iteration   3: 144632,404 ops/s
[info] # Warmup Iteration   4: 146760,265 ops/s
[info] # Warmup Iteration   5: 146247,065 ops/s
[info] Iteration   1: 146659,197 ops/s
[info]                  ·gc.alloc.rate:                   1651,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14410,468 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 146557,217 ops/s
[info]                  ·gc.alloc.rate:                   1650,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21646,968 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 145917,494 ops/s
[info]                  ·gc.alloc.rate:                   1642,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14513,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 139536,533 ops/s
[info]                  ·gc.alloc.rate:                   1571,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22797,907 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 145921,661 ops/s
[info]                  ·gc.alloc.rate:                   1642,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14554,875 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   144918,421 ±(99.9%) 11661,368 ops/s [Average]
[info]   (min, avg, max) = (139536,533, 144918,421, 146659,197), stdev = 3028,420
[info]   CI (99.9%): [133257,053, 156579,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1631,596 ±(99.9%) 131,108 MB/sec [Average]
[info]   (min, avg, max) = (1571,096, 1631,596, 1651,103), stdev = 34,048
[info]   CI (99.9%): [1500,487, 1762,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17720,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17720,003, 17720,003, 17720,003), stdev = 0,001
[info]   CI (99.9%): [17720,002, 17720,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,495 ±(99.9%) 0,707 B/op [Average]
[info]   (min, avg, max) = (0,235, 0,495, 0,674), stdev = 0,184
[info]   CI (99.9%): [≈ 0, 1,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1614,955 ±(99.9%) 1418,901 MB/sec [Average]
[info]   (min, avg, max) = (1342,730, 1614,955, 2021,314), stdev = 368,484
[info]   CI (99.9%): [196,054, 3033,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   17584,656 ±(99.9%) 16378,832 B/op [Average]
[info]   (min, avg, max) = (14410,468, 17584,656, 22797,907), stdev = 4253,531
[info]   CI (99.9%): [1205,824, 33963,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59,84% complete, ETA 00:53:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160710,309 ops/s
[info] # Warmup Iteration   2: 207327,801 ops/s
[info] # Warmup Iteration   3: 206092,869 ops/s
[info] # Warmup Iteration   4: 203411,722 ops/s
[info] # Warmup Iteration   5: 206819,129 ops/s
[info] Iteration   1: 206639,507 ops/s
[info]                  ·gc.alloc.rate:                   711,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5134,209 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 207421,001 ops/s
[info]                  ·gc.alloc.rate:                   713,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5115,251 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 207689,319 ops/s
[info]                  ·gc.alloc.rate:                   714,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5093,017 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 207157,253 ops/s
[info]                  ·gc.alloc.rate:                   712,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5106,093 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 207505,541 ops/s
[info]                  ·gc.alloc.rate:                   714,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5087,281 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   207282,524 ±(99.9%) 1568,349 ops/s [Average]
[info]   (min, avg, max) = (206639,507, 207282,524, 207689,319), stdev = 407,295
[info]   CI (99.9%): [205714,175, 208850,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   713,331 ±(99.9%) 5,597 MB/sec [Average]
[info]   (min, avg, max) = (711,034, 713,331, 714,760), stdev = 1,454
[info]   CI (99.9%): [707,734, 718,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5416,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5416,002, 5416,002, 5416,002), stdev = 0,001
[info]   CI (99.9%): [5416,002, 5416,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,718 ±(99.9%) 6,004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,718, 3,507), stdev = 1,559
[info]   CI (99.9%): [≈ 0, 6,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5,469 ±(99.9%) 45,732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,469, 26,711), stdev = 11,877
[info]   CI (99.9%): [≈ 0, 51,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   672,652 ±(99.9%) 5,597 MB/sec [Average]
[info]   (min, avg, max) = (670,788, 672,652, 674,220), stdev = 1,454
[info]   CI (99.9%): [667,055, 678,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5107,170 ±(99.9%) 71,871 B/op [Average]
[info]   (min, avg, max) = (5087,281, 5107,170, 5134,209), stdev = 18,665
[info]   CI (99.9%): [5035,300, 5179,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,04% complete, ETA 00:53:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225980,461 ops/s
[info] # Warmup Iteration   2: 313476,574 ops/s
[info] # Warmup Iteration   3: 301423,475 ops/s
[info] # Warmup Iteration   4: 302360,601 ops/s
[info] # Warmup Iteration   5: 303175,971 ops/s
[info] Iteration   1: 298847,635 ops/s
[info]                  ·gc.alloc.rate:                   294,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2694,107 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 303725,208 ops/s
[info]                  ·gc.alloc.rate:                   299,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2651,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 303323,489 ops/s
[info]                  ·gc.alloc.rate:      299,093 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 299393,635 ops/s
[info]                  ·gc.alloc.rate:                   295,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2689,132 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 302395,539 ops/s
[info]                  ·gc.alloc.rate:      298,178 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   301537,101 ±(99.9%) 8726,528 ops/s [Average]
[info]   (min, avg, max) = (298847,635, 301537,101, 303725,208), stdev = 2266,252
[info]   CI (99.9%): [292810,573, 310263,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   297,340 ±(99.9%) 8,593 MB/sec [Average]
[info]   (min, avg, max) = (294,673, 297,340, 299,503), stdev = 2,232
[info]   CI (99.9%): [288,747, 305,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1552,001, 1552,001, 1552,001), stdev = 0,001
[info]   CI (99.9%): [1552,001, 1552,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306,939 ±(99.9%) 1078,935 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,939, 511,594), stdev = 280,196
[info]   CI (99.9%): [≈ 0, 1385,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1606,856 ±(99.9%) 5648,689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1606,856, 2694,107), stdev = 1466,947
[info]   CI (99.9%): [≈ 0, 7255,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,24% complete, ETA 00:52:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1141350,785 ops/s
[info] # Warmup Iteration   2: 1195259,398 ops/s
[info] # Warmup Iteration   3: 1190390,822 ops/s
[info] # Warmup Iteration   4: 1205982,398 ops/s
[info] # Warmup Iteration   5: 1207194,197 ops/s
[info] Iteration   1: 1208884,722 ops/s
[info]                  ·gc.alloc.rate:                   897,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874,994 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1212280,022 ops/s
[info]                  ·gc.alloc.rate:                   899,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872,621 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1194051,170 ops/s
[info]                  ·gc.alloc.rate:                   886,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1769,989 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1208104,564 ops/s
[info]                  ·gc.alloc.rate:                   896,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874,713 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1206242,595 ops/s
[info]                  ·gc.alloc.rate:                   895,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 876,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1205912,615 ±(99.9%) 26884,603 ops/s [Average]
[info]   (min, avg, max) = (1194051,170, 1205912,615, 1212280,022), stdev = 6981,846
[info]   CI (99.9%): [1179028,012, 1232797,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   894,951 ±(99.9%) 20,113 MB/sec [Average]
[info]   (min, avg, max) = (886,093, 894,951, 899,805), stdev = 5,223
[info]   CI (99.9%): [874,838, 915,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1168,000, 1168,000, 1168,000), stdev = 0,001
[info]   CI (99.9%): [1168,000, 1168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,016 ±(99.9%) 0,142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,082), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   805,988 ±(99.9%) 1155,499 MB/sec [Average]
[info]   (min, avg, max) = (671,445, 805,988, 1342,787), stdev = 300,079
[info]   CI (99.9%): [≈ 0, 1961,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1053,669 ±(99.9%) 1541,939 B/op [Average]
[info]   (min, avg, max) = (872,621, 1053,669, 1769,989), stdev = 400,437
[info]   CI (99.9%): [≈ 0, 2595,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60,44% complete, ETA 00:52:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1249943,077 ops/s
[info] # Warmup Iteration   2: 1306871,833 ops/s
[info] # Warmup Iteration   3: 1292900,403 ops/s
[info] # Warmup Iteration   4: 1288377,736 ops/s
[info] # Warmup Iteration   5: 1291007,369 ops/s
[info] Iteration   1: 1288469,319 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1288541,975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1294734,074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1290844,646 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1287978,852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1290113,773 ±(99.9%) 10825,382 ops/s [Average]
[info]   (min, avg, max) = (1287978,852, 1290113,773, 1294734,074), stdev = 2811,317
[info]   CI (99.9%): [1279288,391, 1300939,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60,64% complete, ETA 00:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227652,151 ops/s
[info] # Warmup Iteration   2: 339352,325 ops/s
[info] # Warmup Iteration   3: 340807,992 ops/s
[info] # Warmup Iteration   4: 340360,009 ops/s
[info] # Warmup Iteration   5: 343465,111 ops/s
[info] Iteration   1: 342844,368 ops/s
[info]                  ·gc.alloc.rate:                   935,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6191,890 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 342903,856 ops/s
[info]                  ·gc.alloc.rate:                   936,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3100,288 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 342683,223 ops/s
[info]                  ·gc.alloc.rate:                   935,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3101,861 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 343892,486 ops/s
[info]                  ·gc.alloc.rate:                   938,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6185,597 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 343914,867 ops/s
[info]                  ·gc.alloc.rate:                   938,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3095,622 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   343247,760 ±(99.9%) 2326,695 ops/s [Average]
[info]   (min, avg, max) = (342683,223, 343247,760, 343914,867), stdev = 604,235
[info]   CI (99.9%): [340921,065, 345574,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   936,921 ±(99.9%) 6,273 MB/sec [Average]
[info]   (min, avg, max) = (935,437, 936,921, 938,735), stdev = 1,629
[info]   CI (99.9%): [930,648, 943,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4296,001, 4296,001, 4296,001), stdev = 0,001
[info]   CI (99.9%): [4296,001, 4296,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,134 ±(99.9%) 0,716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,134, 0,381), stdev = 0,186
[info]   CI (99.9%): [≈ 0, 0,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   945,531 ±(99.9%) 1422,422 MB/sec [Average]
[info]   (min, avg, max) = (675,418, 945,531, 1351,637), stdev = 369,399
[info]   CI (99.9%): [≈ 0, 2367,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4335,052 ±(99.9%) 6516,000 B/op [Average]
[info]   (min, avg, max) = (3095,622, 4335,052, 6191,890), stdev = 1692,184
[info]   CI (99.9%): [≈ 0, 10851,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60,84% complete, ETA 00:52:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39450,455 ops/s
[info] # Warmup Iteration   2: 42473,987 ops/s
[info] # Warmup Iteration   3: 42366,911 ops/s
[info] # Warmup Iteration   4: 42079,041 ops/s
[info] # Warmup Iteration   5: 42520,377 ops/s
[info] Iteration   1: 42429,638 ops/s
[info]                  ·gc.alloc.rate:      131,987 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42520,586 ops/s
[info]                  ·gc.alloc.rate:      132,278 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42025,780 ops/s
[info]                  ·gc.alloc.rate:                   130,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              4896,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19157,996 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 42313,400 ops/s
[info]                  ·gc.alloc.rate:      131,637 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42420,256 ops/s
[info]                  ·gc.alloc.rate:      131,969 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   42341,932 ±(99.9%) 736,949 ops/s [Average]
[info]   (min, avg, max) = (42025,780, 42341,932, 42520,586), stdev = 191,383
[info]   CI (99.9%): [41604,983, 43078,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   131,722 ±(99.9%) 2,286 MB/sec [Average]
[info]   (min, avg, max) = (130,741, 131,722, 132,278), stdev = 0,594
[info]   CI (99.9%): [129,436, 134,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4896,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (4896,010, 4896,010, 4896,010), stdev = 0,001
[info]   CI (99.9%): [4896,008, 4896,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   102,317 ±(99.9%) 880,982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,317, 511,586), stdev = 228,788
[info]   CI (99.9%): [≈ 0, 983,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3831,599 ±(99.9%) 32991,225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3831,599, 19157,996), stdev = 8567,716
[info]   CI (99.9%): [≈ 0, 36822,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61,04% complete, ETA 00:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4230,810 ops/s
[info] # Warmup Iteration   2: 5685,693 ops/s
[info] # Warmup Iteration   3: 5688,396 ops/s
[info] # Warmup Iteration   4: 5707,370 ops/s
[info] # Warmup Iteration   5: 5741,915 ops/s
[info] Iteration   1: 5729,479 ops/s
[info]                  ·gc.alloc.rate:                   1128,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330,672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 365565,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5742,357 ops/s
[info]                  ·gc.alloc.rate:                   1131,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664,637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182186,429 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5720,095 ops/s
[info]                  ·gc.alloc.rate:                   1126,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328,137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 365407,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5717,036 ops/s
[info]                  ·gc.alloc.rate:                   1126,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329,345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 365965,675 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5735,806 ops/s
[info]                  ·gc.alloc.rate:                   1129,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331,422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 365302,096 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5728,955 ±(99.9%) 40,724 ops/s [Average]
[info]   (min, avg, max) = (5717,036, 5728,955, 5742,357), stdev = 10,576
[info]   CI (99.9%): [5688,231, 5769,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1128,486 ±(99.9%) 7,867 MB/sec [Average]
[info]   (min, avg, max) = (1126,141, 1128,486, 1131,004), stdev = 2,043
[info]   CI (99.9%): [1120,619, 1136,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310024,072 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (310024,071, 310024,072, 310024,077), stdev = 0,002
[info]   CI (99.9%): [310024,063, 310024,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5,727 ±(99.9%) 27,021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,727, 17,189), stdev = 7,017
[info]   CI (99.9%): [≈ 0, 32,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1196,843 ±(99.9%) 1145,623 MB/sec [Average]
[info]   (min, avg, max) = (664,637, 1196,843, 1331,422), stdev = 297,515
[info]   CI (99.9%): [51,220, 2342,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   328885,363 ±(99.9%) 315782,009 B/op [Average]
[info]   (min, avg, max) = (182186,429, 328885,363, 365965,675), stdev = 82007,585
[info]   CI (99.9%): [13103,354, 644667,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,24% complete, ETA 00:51:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2860,915 ops/s
[info] # Warmup Iteration   2: 5843,186 ops/s
[info] # Warmup Iteration   3: 5908,429 ops/s
[info] # Warmup Iteration   4: 5934,301 ops/s
[info] # Warmup Iteration   5: 5915,260 ops/s
[info] Iteration   1: 5911,803 ops/s
[info]                  ·gc.alloc.rate:                   1098,585 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 357710,869 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5952,328 ops/s
[info]                  ·gc.alloc.rate:                   1106,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177785,938 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5917,270 ops/s
[info]                  ·gc.alloc.rate:                   1099,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358205,892 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5914,789 ops/s
[info]                  ·gc.alloc.rate:                   1099,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358858,611 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5389,167 ops/s
[info]                  ·gc.alloc.rate:                   1001,495 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456,082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197130,732 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   5817,072 ±(99.9%) 923,270 ops/s [Average]
[info]   (min, avg, max) = (5389,167, 5817,072, 5952,328), stdev = 239,770
[info]   CI (99.9%): [4893,802, 6740,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1081,012 ±(99.9%) 171,580 MB/sec [Average]
[info]   (min, avg, max) = (1001,495, 1081,012, 1106,211), stdev = 44,559
[info]   CI (99.9%): [909,432, 1252,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292456,071 ±(99.9%) 0,022 B/op [Average]
[info]   (min, avg, max) = (292456,069, 292456,071, 292456,082), stdev = 0,006
[info]   CI (99.9%): [292456,049, 292456,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6,755 ±(99.9%) 35,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,755, 22,163), stdev = 9,091
[info]   CI (99.9%): [≈ 0, 41,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1077,358 ±(99.9%) 1418,703 MB/sec [Average]
[info]   (min, avg, max) = (672,473, 1077,358, 1348,790), stdev = 368,433
[info]   CI (99.9%): [≈ 0, 2496,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   289938,408 ±(99.9%) 361196,720 B/op [Average]
[info]   (min, avg, max) = (177785,938, 289938,408, 358858,611), stdev = 93801,641
[info]   CI (99.9%): [≈ 0, 651135,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,45% complete, ETA 00:51:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36191,263 ops/s
[info] # Warmup Iteration   2: 43337,985 ops/s
[info] # Warmup Iteration   3: 43199,349 ops/s
[info] # Warmup Iteration   4: 42892,444 ops/s
[info] # Warmup Iteration   5: 41982,861 ops/s
[info] Iteration   1: 43384,172 ops/s
[info]                  ·gc.alloc.rate:                   712,267 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24309,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 43552,785 ops/s
[info]                  ·gc.alloc.rate:                   715,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24216,425 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 43996,088 ops/s
[info]                  ·gc.alloc.rate:                   722,337 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666,078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23827,482 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 43818,216 ops/s
[info]                  ·gc.alloc.rate:                   719,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666,055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23923,705 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 43729,289 ops/s
[info]                  ·gc.alloc.rate:                   718,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329,626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47849,970 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   43696,110 ±(99.9%) 910,914 ops/s [Average]
[info]   (min, avg, max) = (43384,172, 43696,110, 43996,088), stdev = 236,561
[info]   CI (99.9%): [42785,196, 44607,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   717,439 ±(99.9%) 14,933 MB/sec [Average]
[info]   (min, avg, max) = (712,267, 717,439, 722,337), stdev = 3,878
[info]   CI (99.9%): [702,505, 732,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25840,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (25840,009, 25840,010, 25840,011), stdev = 0,001
[info]   CI (99.9%): [25840,008, 25840,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1,131 ±(99.9%) 9,560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,131, 5,572), stdev = 2,483
[info]   CI (99.9%): [≈ 0, 10,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   41,030 ±(99.9%) 346,834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41,030, 202,152), stdev = 90,072
[info]   CI (99.9%): [≈ 0, 387,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   800,410 ±(99.9%) 1139,205 MB/sec [Average]
[info]   (min, avg, max) = (666,055, 800,410, 1329,626), stdev = 295,848
[info]   CI (99.9%): [≈ 0, 1939,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28825,329 ±(99.9%) 40959,161 B/op [Average]
[info]   (min, avg, max) = (23827,482, 28825,329, 47849,970), stdev = 10636,964
[info]   CI (99.9%): [≈ 0, 69784,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61,65% complete, ETA 00:51:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2994,450 ops/s
[info] # Warmup Iteration   2: 5209,250 ops/s
[info] # Warmup Iteration   3: 5238,770 ops/s
[info] # Warmup Iteration   4: 5266,244 ops/s
[info] # Warmup Iteration   5: 5296,075 ops/s
[info] Iteration   1: 5156,317 ops/s
[info]                  ·gc.alloc.rate:                   1253,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              382592,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205222,465 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5231,433 ops/s
[info]                  ·gc.alloc.rate:                   1271,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              382592,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 405163,515 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5208,182 ops/s
[info]                  ·gc.alloc.rate:                   1266,131 MB/sec
[info]                  ·gc.alloc.rate.norm:              382592,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 407555,931 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5226,598 ops/s
[info]                  ·gc.alloc.rate:                   1270,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              382592,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12,533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406476,105 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5258,924 ops/s
[info]                  ·gc.alloc.rate:                   1278,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              382592,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12,457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 404601,650 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   5216,291 ±(99.9%) 146,827 ops/s [Average]
[info]   (min, avg, max) = (5156,317, 5216,291, 5258,924), stdev = 38,130
[info]   CI (99.9%): [5069,464, 5363,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1268,112 ±(99.9%) 35,767 MB/sec [Average]
[info]   (min, avg, max) = (1253,492, 1268,112, 1278,476), stdev = 9,289
[info]   CI (99.9%): [1232,345, 1303,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   382592,079 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (382592,078, 382592,079, 382592,085), stdev = 0,003
[info]   CI (99.9%): [382592,067, 382592,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8,772 ±(99.9%) 32,421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,772, 18,868), stdev = 8,420
[info]   CI (99.9%): [≈ 0, 41,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1213,992 ±(99.9%) 1165,897 MB/sec [Average]
[info]   (min, avg, max) = (672,373, 1213,992, 1352,023), stdev = 302,780
[info]   CI (99.9%): [48,095, 2379,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   365803,933 ±(99.9%) 345692,094 B/op [Average]
[info]   (min, avg, max) = (205222,465, 365803,933, 407555,931), stdev = 89775,139
[info]   CI (99.9%): [20111,839, 711496,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61,85% complete, ETA 00:50:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4371,837 ops/s
[info] # Warmup Iteration   2: 5894,728 ops/s
[info] # Warmup Iteration   3: 6004,427 ops/s
[info] # Warmup Iteration   4: 6080,827 ops/s
[info] # Warmup Iteration   5: 6062,286 ops/s
[info] Iteration   1: 6064,991 ops/s
[info]                  ·gc.alloc.rate:                   1093,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              283728,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665,999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172832,701 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6018,594 ops/s
[info]                  ·gc.alloc.rate:                   1085,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              283728,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329,744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347667,391 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5945,765 ops/s
[info]                  ·gc.alloc.rate:                   1072,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              283728,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329,503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 351875,874 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6042,761 ops/s
[info]                  ·gc.alloc.rate:                   1089,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              283728,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173143,423 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5886,866 ops/s
[info]                  ·gc.alloc.rate:                   1061,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              283728,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330,557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 355728,696 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   5991,795 ±(99.9%) 284,284 ops/s [Average]
[info]   (min, avg, max) = (5886,866, 5991,795, 6064,991), stdev = 73,828
[info]   CI (99.9%): [5707,511, 6276,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1080,229 ±(99.9%) 51,201 MB/sec [Average]
[info]   (min, avg, max) = (1061,248, 1080,229, 1093,327), stdev = 13,297
[info]   CI (99.9%): [1029,028, 1131,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   283728,069 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (283728,067, 283728,069, 283728,075), stdev = 0,003
[info]   CI (99.9%): [283728,057, 283728,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7,687 ±(99.9%) 19,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,687, 11,130), stdev = 4,937
[info]   CI (99.9%): [≈ 0, 26,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1064,116 ±(99.9%) 1401,590 MB/sec [Average]
[info]   (min, avg, max) = (664,774, 1064,116, 1330,557), stdev = 363,988
[info]   CI (99.9%): [≈ 0, 2465,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   280249,617 ±(99.9%) 377199,509 B/op [Average]
[info]   (min, avg, max) = (172832,701, 280249,617, 355728,696), stdev = 97957,515
[info]   CI (99.9%): [≈ 0, 657449,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62,05% complete, ETA 00:50:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11971,792 ops/s
[info] # Warmup Iteration   2: 15929,128 ops/s
[info] # Warmup Iteration   3: 16016,527 ops/s
[info] # Warmup Iteration   4: 16093,264 ops/s
[info] # Warmup Iteration   5: 16110,951 ops/s
[info] Iteration   1: 15372,618 ops/s
[info]                  ·gc.alloc.rate:                                  861,553 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88208,027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0,105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10,792 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    17,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     1314,905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                134623,465 B/op
[info]                  ·gc.count:                                       3,000 counts
[info]                  ·gc.time:                                        47,000 ms
[info] Iteration   2: 16014,309 ops/s
[info]                  ·gc.alloc.rate:                   897,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665,367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65396,892 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 16071,635 ops/s
[info]                  ·gc.alloc.rate:                   900,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184,521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130060,994 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 16207,033 ops/s
[info]                  ·gc.alloc.rate:                   908,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664,127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64488,944 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 16179,354 ops/s
[info]                  ·gc.alloc.rate:                   906,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64600,524 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   15968,990 ±(99.9%) 1318,764 ops/s [Average]
[info]   (min, avg, max) = (15372,618, 15968,990, 16207,033), stdev = 342,479
[info]   CI (99.9%): [14650,226, 17287,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   894,823 ±(99.9%) 73,542 MB/sec [Average]
[info]   (min, avg, max) = (861,553, 894,823, 908,146), stdev = 19,099
[info]   CI (99.9%): [821,281, 968,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88193,726 ±(99.9%) 50,286 B/op [Average]
[info]   (min, avg, max) = (88184,025, 88193,726, 88208,034), stdev = 13,059
[info]   CI (99.9%): [88143,440, 88244,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0,021 ±(99.9%) 0,182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,105), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2,158 ±(99.9%) 18,585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,158, 10,792), stdev = 4,826
[info]   CI (99.9%): [≈ 0, 20,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,167), stdev = 0,077
[info]   CI (99.9%): [≈ 0, 0,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5,448 ±(99.9%) 30,204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,448, 17,048), stdev = 7,844
[info]   CI (99.9%): [≈ 0, 35,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   927,313 ±(99.9%) 1385,794 MB/sec [Average]
[info]   (min, avg, max) = (664,041, 927,313, 1328,125), stdev = 359,886
[info]   CI (99.9%): [≈ 0, 2313,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   91834,164 ±(99.9%) 142533,346 B/op [Average]
[info]   (min, avg, max) = (64488,944, 91834,164, 134623,465), stdev = 37015,457
[info]   CI (99.9%): [≈ 0, 234367,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   50,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 10,000, 47,000), stdev = 20,688
[info]   CI (99.9%): [50,000, 50,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,25% complete, ETA 00:50:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12104,490 ops/s
[info] # Warmup Iteration   2: 17493,415 ops/s
[info] # Warmup Iteration   3: 18189,397 ops/s
[info] # Warmup Iteration   4: 18207,510 ops/s
[info] # Warmup Iteration   5: 18291,441 ops/s
[info] Iteration   1: 18254,332 ops/s
[info]                  ·gc.alloc.rate:                   950,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115825,728 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18301,896 ops/s
[info]                  ·gc.alloc.rate:                   952,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57827,778 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17988,823 ops/s
[info]                  ·gc.alloc.rate:                   936,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              81943,931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117748,447 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18292,780 ops/s
[info]                  ·gc.alloc.rate:                   952,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57939,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 18258,657 ops/s
[info]                  ·gc.alloc.rate:                   950,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58129,829 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18219,298 ±(99.9%) 502,495 ops/s [Average]
[info]   (min, avg, max) = (17988,823, 18219,298, 18301,896), stdev = 130,496
[info]   CI (99.9%): [17716,803, 18721,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   948,623 ±(99.9%) 26,123 MB/sec [Average]
[info]   (min, avg, max) = (936,656, 948,623, 952,981), stdev = 6,784
[info]   CI (99.9%): [922,501, 974,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81944,025 ±(99.9%) 0,286 B/op [Average]
[info]   (min, avg, max) = (81943,931, 81944,025, 81944,138), stdev = 0,074
[info]   CI (99.9%): [81943,739, 81944,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2,893 ±(99.9%) 15,252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,893, 7,285), stdev = 3,961
[info]   CI (99.9%): [≈ 0, 18,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   941,917 ±(99.9%) 1415,593 MB/sec [Average]
[info]   (min, avg, max) = (672,517, 941,917, 1345,918), stdev = 367,625
[info]   CI (99.9%): [≈ 0, 2357,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81494,161 ±(99.9%) 124087,917 B/op [Average]
[info]   (min, avg, max) = (57827,778, 81494,161, 117748,447), stdev = 32225,238
[info]   CI (99.9%): [≈ 0, 205582,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,45% complete, ETA 00:49:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273173,461 ops/s
[info] # Warmup Iteration   2: 288737,069 ops/s
[info] # Warmup Iteration   3: 291258,849 ops/s
[info] # Warmup Iteration   4: 288137,254 ops/s
[info] # Warmup Iteration   5: 284261,099 ops/s
[info] Iteration   1: 284092,826 ops/s
[info]                  ·gc.alloc.rate:                   1029,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666,043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3690,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 268112,224 ops/s
[info]                  ·gc.alloc.rate:                   971,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330,923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7812,297 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 287343,245 ops/s
[info]                  ·gc.alloc.rate:                   1041,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664,767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3641,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 287308,399 ops/s
[info]                  ·gc.alloc.rate:                   1041,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329,912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7284,869 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 286843,463 ops/s
[info]                  ·gc.alloc.rate:                   1039,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665,105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3649,213 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   282740,031 ±(99.9%) 31910,463 ops/s [Average]
[info]   (min, avg, max) = (268112,224, 282740,031, 287343,245), stdev = 8287,046
[info]   CI (99.9%): [250829,569, 314650,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1024,727 ±(99.9%) 115,600 MB/sec [Average]
[info]   (min, avg, max) = (971,748, 1024,727, 1041,411), stdev = 30,021
[info]   CI (99.9%): [909,128, 1140,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5704,001, 5704,001, 5704,002), stdev = 0,001
[info]   CI (99.9%): [5704,001, 5704,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,142 ±(99.9%) 0,605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,142, 0,367), stdev = 0,157
[info]   CI (99.9%): [≈ 0, 0,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   931,350 ±(99.9%) 1402,780 MB/sec [Average]
[info]   (min, avg, max) = (664,767, 931,350, 1330,923), stdev = 364,297
[info]   CI (99.9%): [≈ 0, 2334,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5215,497 ±(99.9%) 8232,811 B/op [Average]
[info]   (min, avg, max) = (3641,054, 5215,497, 7812,297), stdev = 2138,035
[info]   CI (99.9%): [≈ 0, 13448,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62,65% complete, ETA 00:49:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307908,723 ops/s
[info] # Warmup Iteration   2: 325928,546 ops/s
[info] # Warmup Iteration   3: 328908,824 ops/s
[info] # Warmup Iteration   4: 328752,579 ops/s
[info] # Warmup Iteration   5: 313951,280 ops/s
[info] Iteration   1: 325161,087 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 324183,604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 319659,838 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 324240,427 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 329777,583 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   324604,508 ±(99.9%) 13860,975 ops/s [Average]
[info]   (min, avg, max) = (319659,838, 324604,508, 329777,583), stdev = 3599,651
[info]   CI (99.9%): [310743,532, 338465,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62,85% complete, ETA 00:49:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12254,078 ops/s
[info] # Warmup Iteration   2: 16240,251 ops/s
[info] # Warmup Iteration   3: 16788,992 ops/s
[info] # Warmup Iteration   4: 16812,164 ops/s
[info] # Warmup Iteration   5: 16824,017 ops/s
[info] Iteration   1: 16762,913 ops/s
[info]                  ·gc.alloc.rate:                   956,850 MB/sec
[info]                  ·gc.alloc.rate.norm:              89848,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663,344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62287,928 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16758,691 ops/s
[info]                  ·gc.alloc.rate:                   956,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              89846,227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663,427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62302,792 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 16833,550 ops/s
[info]                  ·gc.alloc.rate:                   960,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              89831,924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327,934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124143,975 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 16764,153 ops/s
[info]                  ·gc.alloc.rate:                   956,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832,125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62378,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 16317,517 ops/s
[info]                  ·gc.alloc.rate:                   931,538 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330,294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128285,626 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   16687,365 ±(99.9%) 805,072 ops/s [Average]
[info]   (min, avg, max) = (16317,517, 16687,365, 16833,550), stdev = 209,075
[info]   CI (99.9%): [15882,293, 17492,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   952,579 ±(99.9%) 45,803 MB/sec [Average]
[info]   (min, avg, max) = (931,538, 952,579, 960,908), stdev = 11,895
[info]   CI (99.9%): [906,776, 998,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89838,065 ±(99.9%) 31,944 B/op [Average]
[info]   (min, avg, max) = (89831,924, 89838,065, 89848,024), stdev = 8,296
[info]   CI (99.9%): [89806,121, 89870,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,949 ±(99.9%) 9,178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,949, 5,838), stdev = 2,383
[info]   CI (99.9%): [≈ 0, 11,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   929,888 ±(99.9%) 1403,339 MB/sec [Average]
[info]   (min, avg, max) = (663,344, 929,888, 1330,294), stdev = 364,443
[info]   CI (99.9%): [≈ 0, 2333,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87879,667 ±(99.9%) 134871,373 B/op [Average]
[info]   (min, avg, max) = (62287,928, 87879,667, 128285,626), stdev = 35025,667
[info]   CI (99.9%): [≈ 0, 222751,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63,05% complete, ETA 00:49:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7555,918 ops/s
[info] # Warmup Iteration   2: 8489,585 ops/s
[info] # Warmup Iteration   3: 8449,297 ops/s
[info] # Warmup Iteration   4: 8437,082 ops/s
[info] # Warmup Iteration   5: 8512,413 ops/s
[info] Iteration   1: 8507,370 ops/s
[info]                  ·gc.alloc.rate:                   542,303 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94630,596 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 8470,724 ops/s
[info]                  ·gc.alloc.rate:                   540,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1048,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124512,212 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 8534,461 ops/s
[info]                  ·gc.alloc.rate:      544,124 MB/sec
[info]                  ·gc.alloc.rate.norm: 100336,048 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8522,703 ops/s
[info]                  ·gc.alloc.rate:                   543,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123738,118 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 8518,726 ops/s
[info]                  ·gc.alloc.rate:                   543,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123057,857 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   8510,797 ±(99.9%) 93,971 ops/s [Average]
[info]   (min, avg, max) = (8470,724, 8510,797, 8534,461), stdev = 24,404
[info]   CI (99.9%): [8416,825, 8604,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   542,615 ±(99.9%) 5,954 MB/sec [Average]
[info]   (min, avg, max) = (540,106, 542,615, 544,124), stdev = 1,546
[info]   CI (99.9%): [536,661, 548,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   100336,049 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (100336,048, 100336,049, 100336,052), stdev = 0,002
[info]   CI (99.9%): [100336,042, 100336,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1,137 ±(99.9%) 9,700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,137, 5,643), stdev = 2,519
[info]   CI (99.9%): [≈ 0, 10,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   211,191 ±(99.9%) 1801,912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 211,191, 1048,265), stdev = 467,951
[info]   CI (99.9%): [≈ 0, 2013,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   503,599 ±(99.9%) 1115,360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503,599, 670,245), stdev = 289,656
[info]   CI (99.9%): [≈ 0, 1618,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   93187,756 ±(99.9%) 206403,214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93187,756, 124512,212), stdev = 53602,259
[info]   CI (99.9%): [≈ 0, 299590,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,517
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,25% complete, ETA 00:48:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 987674,987 ops/s
[info] # Warmup Iteration   2: 1031184,100 ops/s
[info] # Warmup Iteration   3: 1037005,635 ops/s
[info] # Warmup Iteration   4: 1036832,875 ops/s
[info] # Warmup Iteration   5: 1038798,321 ops/s
[info] Iteration   1: 1031246,142 ops/s
[info]                  ·gc.alloc.rate:      41,938 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1036975,704 ops/s
[info]                  ·gc.alloc.rate:      42,166 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1041722,166 ops/s
[info]                  ·gc.alloc.rate:      42,363 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1038213,986 ops/s
[info]                  ·gc.alloc.rate:      42,222 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1038592,900 ops/s
[info]                  ·gc.alloc.rate:      42,237 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1037350,180 ±(99.9%) 14764,130 ops/s [Average]
[info]   (min, avg, max) = (1031246,142, 1037350,180, 1041722,166), stdev = 3834,198
[info]   CI (99.9%): [1022586,050, 1052114,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   42,185 ±(99.9%) 0,600 MB/sec [Average]
[info]   (min, avg, max) = (41,938, 42,185, 42,363), stdev = 0,156
[info]   CI (99.9%): [41,586, 42,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64,000, 64,000, 64,000), stdev = 0,001
[info]   CI (99.9%): [64,000, 64,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63,45% complete, ETA 00:48:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45623,665 ops/s
[info] # Warmup Iteration   2: 80691,645 ops/s
[info] # Warmup Iteration   3: 81521,084 ops/s
[info] # Warmup Iteration   4: 79441,267 ops/s
[info] # Warmup Iteration   5: 78519,386 ops/s
[info] Iteration   1: 79147,818 ops/s
[info]                  ·gc.alloc.rate:                   3571,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078,084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81088,641 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 79503,269 ops/s
[info]                  ·gc.alloc.rate:                   3587,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401,175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67327,646 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 79292,988 ops/s
[info]                  ·gc.alloc.rate:                   3577,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67558,798 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 79774,763 ops/s
[info]                  ·gc.alloc.rate:                   3599,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67155,592 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 79500,598 ops/s
[info]                  ·gc.alloc.rate:                   3587,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80928,991 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   79443,887 ±(99.9%) 916,600 ops/s [Average]
[info]   (min, avg, max) = (79147,818, 79443,887, 79774,763), stdev = 238,038
[info]   CI (99.9%): [78527,287, 80360,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3584,544 ±(99.9%) 41,636 MB/sec [Average]
[info]   (min, avg, max) = (3571,112, 3584,544, 3599,579), stdev = 10,813
[info]   CI (99.9%): [3542,908, 3626,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71008,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (71008,005, 71008,005, 71008,006), stdev = 0,001
[info]   CI (99.9%): [71008,005, 71008,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,320 ±(99.9%) 1,329 B/op [Average]
[info]   (min, avg, max) = (0,824, 1,320, 1,656), stdev = 0,345
[info]   CI (99.9%): [≈ 0, 2,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3675,179 ±(99.9%) 1434,587 MB/sec [Average]
[info]   (min, avg, max) = (3401,175, 3675,179, 4088,464), stdev = 372,558
[info]   CI (99.9%): [2240,592, 5109,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72811,934 ±(99.9%) 28819,282 B/op [Average]
[info]   (min, avg, max) = (67155,592, 72811,934, 81088,641), stdev = 7484,276
[info]   CI (99.9%): [43992,652, 101631,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,65% complete, ETA 00:48:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 847196,676 ops/s
[info] # Warmup Iteration   2: 1139856,189 ops/s
[info] # Warmup Iteration   3: 1167659,074 ops/s
[info] # Warmup Iteration   4: 1151556,495 ops/s
[info] # Warmup Iteration   5: 1175669,134 ops/s
[info] Iteration   1: 1175711,935 ops/s
[info]                  ·gc.alloc.rate:                   675,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 901,913 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1156187,581 ops/s
[info]                  ·gc.alloc.rate:                   664,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 917,217 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1170980,107 ops/s
[info]                  ·gc.alloc.rate:                   672,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 906,908 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1159770,545 ops/s
[info]                  ·gc.alloc.rate:                   666,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 915,672 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1173572,836 ops/s
[info]                  ·gc.alloc.rate:                   674,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 905,768 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1167244,601 ±(99.9%) 33558,949 ops/s [Average]
[info]   (min, avg, max) = (1156187,581, 1167244,601, 1175711,935), stdev = 8715,152
[info]   CI (99.9%): [1133685,652, 1200803,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   670,465 ±(99.9%) 19,205 MB/sec [Average]
[info]   (min, avg, max) = (664,125, 670,465, 675,272), stdev = 4,987
[info]   CI (99.9%): [651,260, 689,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,187), stdev = 0,076
[info]   CI (99.9%): [≈ 0, 0,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,084 ±(99.9%) 0,394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,084, 0,251), stdev = 0,102
[info]   CI (99.9%): [≈ 0, 0,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,512 ±(99.9%) 2,766 MB/sec [Average]
[info]   (min, avg, max) = (673,713, 674,512, 675,404), stdev = 0,718
[info]   CI (99.9%): [671,745, 677,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   909,496 ±(99.9%) 25,531 B/op [Average]
[info]   (min, avg, max) = (901,913, 909,496, 917,217), stdev = 6,630
[info]   CI (99.9%): [883,965, 935,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,86% complete, ETA 00:48:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 746584,018 ops/s
[info] # Warmup Iteration   2: 759153,611 ops/s
[info] # Warmup Iteration   3: 757132,370 ops/s
[info] # Warmup Iteration   4: 763886,760 ops/s
[info] # Warmup Iteration   5: 760678,141 ops/s
[info] Iteration   1: 760817,940 ops/s
[info]                  ·gc.alloc.rate:      204,975 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 760685,395 ops/s
[info]                  ·gc.alloc.rate:      204,944 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 759035,042 ops/s
[info]                  ·gc.alloc.rate:                   204,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1060,683 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 762910,590 ops/s
[info]                  ·gc.alloc.rate:      205,537 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 759929,145 ops/s
[info]                  ·gc.alloc.rate:                   204,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1059,462 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   760675,622 ±(99.9%) 5534,811 ops/s [Average]
[info]   (min, avg, max) = (759035,042, 760675,622, 762910,590), stdev = 1437,373
[info]   CI (99.9%): [755140,812, 766210,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   204,937 ±(99.9%) 1,494 MB/sec [Average]
[info]   (min, avg, max) = (204,489, 204,937, 205,537), stdev = 0,388
[info]   CI (99.9%): [203,443, 206,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,001, 424,001, 424,001), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,002 ±(99.9%) 0,021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,012), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,005 ±(99.9%) 0,045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,026), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204,627 ±(99.9%) 1078,941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,627, 511,586), stdev = 280,197
[info]   CI (99.9%): [≈ 0, 1283,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   424,029 ±(99.9%) 2235,782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 424,029, 1060,683), stdev = 580,626
[info]   CI (99.9%): [≈ 0, 2659,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64,06% complete, ETA 00:47:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1460331,176 ops/s
[info] # Warmup Iteration   2: 1500387,559 ops/s
[info] # Warmup Iteration   3: 1567346,617 ops/s
[info] # Warmup Iteration   4: 1567449,675 ops/s
[info] # Warmup Iteration   5: 1520151,886 ops/s
[info] Iteration   1: 1570552,530 ops/s
[info]                  ·gc.alloc.rate:      15,967 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1535856,380 ops/s
[info]                  ·gc.alloc.rate:      15,613 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1570821,396 ops/s
[info]                  ·gc.alloc.rate:      15,969 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1567287,093 ops/s
[info]                  ·gc.alloc.rate:      15,934 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1568858,379 ops/s
[info]                  ·gc.alloc.rate:      15,950 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1562675,155 ±(99.9%) 57989,061 ops/s [Average]
[info]   (min, avg, max) = (1535856,380, 1562675,155, 1570821,396), stdev = 15059,575
[info]   CI (99.9%): [1504686,095, 1620664,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   15,887 ±(99.9%) 0,591 MB/sec [Average]
[info]   (min, avg, max) = (15,613, 15,887, 15,969), stdev = 0,154
[info]   CI (99.9%): [15,295, 16,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64,26% complete, ETA 00:47:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31267,775 ops/s
[info] # Warmup Iteration   2: 51207,873 ops/s
[info] # Warmup Iteration   3: 51204,352 ops/s
[info] # Warmup Iteration   4: 50784,187 ops/s
[info] # Warmup Iteration   5: 51035,753 ops/s
[info] Iteration   1: 51296,553 ops/s
[info]                  ·gc.alloc.rate:                   2170,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62343,951 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 51382,402 ops/s
[info]                  ·gc.alloc.rate:                   2174,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62336,291 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 51277,865 ops/s
[info]                  ·gc.alloc.rate:                   2170,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62498,720 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 51159,952 ops/s
[info]                  ·gc.alloc.rate:                   2165,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62704,316 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 50824,795 ops/s
[info]                  ·gc.alloc.rate:                   2151,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719,955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84216,925 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   51188,313 ±(99.9%) 840,012 ops/s [Average]
[info]   (min, avg, max) = (50824,795, 51188,313, 51382,402), stdev = 218,149
[info]   CI (99.9%): [50348,301, 52028,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2166,733 ±(99.9%) 35,178 MB/sec [Average]
[info]   (min, avg, max) = (2151,498, 2166,733, 2174,980), stdev = 9,136
[info]   CI (99.9%): [2131,555, 2201,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66616,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66616,008, 66616,008, 66616,009), stdev = 0,001
[info]   CI (99.9%): [66616,006, 66616,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,664 ±(99.9%) 1,355 B/op [Average]
[info]   (min, avg, max) = (1,277, 1,664, 1,934), stdev = 0,352
[info]   CI (99.9%): [0,310, 3,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2172,369 ±(99.9%) 1178,756 MB/sec [Average]
[info]   (min, avg, max) = (2031,747, 2172,369, 2719,955), stdev = 306,119
[info]   CI (99.9%): [993,614, 3351,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66820,041 ±(99.9%) 37452,534 B/op [Average]
[info]   (min, avg, max) = (62336,291, 66820,041, 84216,925), stdev = 9726,304
[info]   CI (99.9%): [29367,507, 104272,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64,46% complete, ETA 00:47:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 536343,334 ops/s
[info] # Warmup Iteration   2: 809420,897 ops/s
[info] # Warmup Iteration   3: 824664,069 ops/s
[info] # Warmup Iteration   4: 825568,639 ops/s
[info] # Warmup Iteration   5: 805864,979 ops/s
[info] Iteration   1: 813682,559 ops/s
[info]                  ·gc.alloc.rate:                   2584,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693,988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5210,844 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 828141,672 ops/s
[info]                  ·gc.alloc.rate:                   2631,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700,793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5132,365 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 825527,384 ops/s
[info]                  ·gc.alloc.rate:                   2622,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705,653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5158,355 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 817681,448 ops/s
[info]                  ·gc.alloc.rate:                   2597,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710,711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5217,450 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 821617,809 ops/s
[info]                  ·gc.alloc.rate:                   2610,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3899,361 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   821330,175 ±(99.9%) 22444,252 ops/s [Average]
[info]   (min, avg, max) = (813682,559, 821330,175, 828141,672), stdev = 5828,701
[info]   CI (99.9%): [798885,922, 843774,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2609,384 ±(99.9%) 71,524 MB/sec [Average]
[info]   (min, avg, max) = (2584,982, 2609,384, 2631,139), stdev = 18,575
[info]   CI (99.9%): [2537,860, 2680,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5000,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5000,000, 5000,001, 5000,001), stdev = 0,001
[info]   CI (99.9%): [5000,000, 5000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,104 ±(99.9%) 0,135 B/op [Average]
[info]   (min, avg, max) = (0,079, 0,104, 0,158), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2569,396 ±(99.9%) 1148,780 MB/sec [Average]
[info]   (min, avg, max) = (2035,833, 2569,396, 2710,711), stdev = 298,334
[info]   CI (99.9%): [1420,616, 3718,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4923,675 ±(99.9%) 2209,188 B/op [Average]
[info]   (min, avg, max) = (3899,361, 4923,675, 5217,450), stdev = 573,719
[info]   CI (99.9%): [2714,487, 7132,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64,66% complete, ETA 00:47:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316412,650 ops/s
[info] # Warmup Iteration   2: 6119744,136 ops/s
[info] # Warmup Iteration   3: 6052315,127 ops/s
[info] # Warmup Iteration   4: 6158615,264 ops/s
[info] # Warmup Iteration   5: 6149627,176 ops/s
[info] Iteration   1: 6168148,538 ops/s
[info]                  ·gc.alloc.rate:      376,231 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6137538,462 ops/s
[info]                  ·gc.alloc.rate:                   374,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131,180 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6128459,651 ops/s
[info]                  ·gc.alloc.rate:                   373,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131,379 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5790535,400 ops/s
[info]                  ·gc.alloc.rate:      353,255 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6147052,827 ops/s
[info]                  ·gc.alloc.rate:                   374,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172,424 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   6074346,976 ±(99.9%) 613556,430 ops/s [Average]
[info]   (min, avg, max) = (5790535,400, 6074346,976, 6168148,538), stdev = 159338,657
[info]   CI (99.9%): [5460790,545, 6687903,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   370,543 ±(99.9%) 37,371 MB/sec [Average]
[info]   (min, avg, max) = (353,255, 370,543, 376,231), stdev = 9,705
[info]   CI (99.9%): [333,173, 407,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,530 ±(99.9%) 4,520 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,530, 2,630), stdev = 1,174
[info]   CI (99.9%): [≈ 0, 5,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,136 ±(99.9%) 1,157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,136, 0,673), stdev = 0,301
[info]   CI (99.9%): [≈ 0, 1,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339,345 ±(99.9%) 1219,694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,345, 673,506), stdev = 316,751
[info]   CI (99.9%): [≈ 0, 1559,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   86,997 ±(99.9%) 312,571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86,997, 172,424), stdev = 81,174
[info]   CI (99.9%): [≈ 0, 399,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64,86% complete, ETA 00:46:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424443,205 ops/s
[info] # Warmup Iteration   2: 1033085,674 ops/s
[info] # Warmup Iteration   3: 1037886,485 ops/s
[info] # Warmup Iteration   4: 1036302,571 ops/s
[info] # Warmup Iteration   5: 1035977,563 ops/s
[info] Iteration   1: 1030379,216 ops/s
[info]                  ·gc.alloc.rate:                   1277,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2063,329 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1038522,513 ops/s
[info]                  ·gc.alloc.rate:                   1288,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2049,349 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1036576,618 ops/s
[info]                  ·gc.alloc.rate:                   1285,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2054,068 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1038132,510 ops/s
[info]                  ·gc.alloc.rate:                   1287,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2052,974 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1034850,691 ops/s
[info]                  ·gc.alloc.rate:                   1283,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2060,542 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1035692,309 ±(99.9%) 12725,186 ops/s [Average]
[info]   (min, avg, max) = (1030379,216, 1035692,309, 1038522,513), stdev = 3304,690
[info]   CI (99.9%): [1022967,124, 1048417,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1284,556 ±(99.9%) 15,990 MB/sec [Average]
[info]   (min, avg, max) = (1277,853, 1284,556, 1288,046), stdev = 4,153
[info]   CI (99.9%): [1268,566, 1300,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,000, 1952,000, 1952,000), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,051 ±(99.9%) 0,221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,051, 0,126), stdev = 0,057
[info]   CI (99.9%): [≈ 0, 0,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353,020 ±(99.9%) 6,336 MB/sec [Average]
[info]   (min, avg, max) = (1350,733, 1353,020, 1354,904), stdev = 1,645
[info]   CI (99.9%): [1346,684, 1359,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2056,052 ±(99.9%) 22,075 B/op [Average]
[info]   (min, avg, max) = (2049,349, 2056,052, 2063,329), stdev = 5,733
[info]   CI (99.9%): [2033,977, 2078,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65,06% complete, ETA 00:46:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8248966,875 ops/s
[info] # Warmup Iteration   2: 8859796,871 ops/s
[info] # Warmup Iteration   3: 8912057,449 ops/s
[info] # Warmup Iteration   4: 8941483,857 ops/s
[info] # Warmup Iteration   5: 9021407,834 ops/s
[info] Iteration   1: 7257233,741 ops/s
[info]                  ·gc.alloc.rate:      331,978 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9000133,036 ops/s
[info]                  ·gc.alloc.rate:                   411,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89,456 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9016818,673 ops/s
[info]                  ·gc.alloc.rate:                   412,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89,290 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 9016384,459 ops/s
[info]                  ·gc.alloc.rate:      412,508 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9001140,400 ops/s
[info]                  ·gc.alloc.rate:                   411,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117,982 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8658342,062 ±(99.9%) 3016148,294 ops/s [Average]
[info]   (min, avg, max) = (7257233,741, 8658342,062, 9016818,673), stdev = 783284,134
[info]   CI (99.9%): [5642193,768, 11674490,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   396,113 ±(99.9%) 138,062 MB/sec [Average]
[info]   (min, avg, max) = (331,978, 396,113, 412,517), stdev = 35,854
[info]   CI (99.9%): [258,051, 534,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,651 ±(99.9%) 5,471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,651, 3,193), stdev = 1,421
[info]   CI (99.9%): [≈ 0, 6,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,114 ±(99.9%) 0,957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,114, 0,558), stdev = 0,248
[info]   CI (99.9%): [≈ 0, 1,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339,592 ±(99.9%) 1220,975 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,592, 674,792), stdev = 317,083
[info]   CI (99.9%): [≈ 0, 1560,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59,346 ±(99.9%) 213,401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59,346, 117,982), stdev = 55,420
[info]   CI (99.9%): [≈ 0, 272,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65,26% complete, ETA 00:46:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81464,366 ops/s
[info] # Warmup Iteration   2: 339907,831 ops/s
[info] # Warmup Iteration   3: 341293,906 ops/s
[info] # Warmup Iteration   4: 340683,318 ops/s
[info] # Warmup Iteration   5: 340824,298 ops/s
[info] Iteration   1: 338415,904 ops/s
[info]                  ·gc.alloc.rate:                   1907,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              8872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9440,505 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 341748,191 ops/s
[info]                  ·gc.alloc.rate:                   1926,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              8872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9358,287 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 341259,277 ops/s
[info]                  ·gc.alloc.rate:                   1923,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              8872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6254,488 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 340610,369 ops/s
[info]                  ·gc.alloc.rate:                   1920,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              8872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9405,704 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 336948,092 ops/s
[info]                  ·gc.alloc.rate:                   1899,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              8872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9517,744 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   339796,367 ±(99.9%) 7851,602 ops/s [Average]
[info]   (min, avg, max) = (336948,092, 339796,367, 341748,191), stdev = 2039,036
[info]   CI (99.9%): [331944,765, 347647,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1915,582 ±(99.9%) 44,585 MB/sec [Average]
[info]   (min, avg, max) = (1899,433, 1915,582, 1926,707), stdev = 11,578
[info]   CI (99.9%): [1870,998, 1960,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8872,001, 8872,001, 8872,001), stdev = 0,001
[info]   CI (99.9%): [8872,001, 8872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,250 ±(99.9%) 0,617 B/op [Average]
[info]   (min, avg, max) = (0,096, 0,250, 0,479), stdev = 0,160
[info]   CI (99.9%): [≈ 0, 0,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898,383 ±(99.9%) 1166,975 MB/sec [Average]
[info]   (min, avg, max) = (1356,279, 1898,383, 2037,682), stdev = 303,060
[info]   CI (99.9%): [731,407, 3065,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8795,346 ±(99.9%) 5473,974 B/op [Average]
[info]   (min, avg, max) = (6254,488, 8795,346, 9517,744), stdev = 1421,574
[info]   CI (99.9%): [3321,372, 14269,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65,46% complete, ETA 00:45:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585113,520 ops/s
[info] # Warmup Iteration   2: 827182,776 ops/s
[info] # Warmup Iteration   3: 793137,650 ops/s
[info] # Warmup Iteration   4: 834296,689 ops/s
[info] # Warmup Iteration   5: 836739,439 ops/s
[info] Iteration   1: 833440,597 ops/s
[info]                  ·gc.alloc.rate:                   1156,441 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2537,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 835796,196 ops/s
[info]                  ·gc.alloc.rate:                   1159,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2528,905 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 836622,132 ops/s
[info]                  ·gc.alloc.rate:                   1161,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1263,180 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 835593,261 ops/s
[info]                  ·gc.alloc.rate:                   1159,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2529,401 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 838202,875 ops/s
[info]                  ·gc.alloc.rate:                   1163,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2523,926 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   835931,012 ±(99.9%) 6662,122 ops/s [Average]
[info]   (min, avg, max) = (833440,597, 835931,012, 838202,875), stdev = 1730,132
[info]   CI (99.9%): [829268,890, 842593,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1160,032 ±(99.9%) 9,508 MB/sec [Average]
[info]   (min, avg, max) = (1156,441, 1160,032, 1163,222), stdev = 2,469
[info]   CI (99.9%): [1150,525, 1169,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2184,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2184,000, 2184,000, 2184,001), stdev = 0,001
[info]   CI (99.9%): [2184,000, 2184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,063 ±(99.9%) 0,203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,063, 0,118), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1209,041 ±(99.9%) 1157,056 MB/sec [Average]
[info]   (min, avg, max) = (671,520, 1209,041, 1344,269), stdev = 300,484
[info]   CI (99.9%): [51,985, 2366,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2276,497 ±(99.9%) 2181,316 B/op [Average]
[info]   (min, avg, max) = (1263,180, 2276,497, 2537,073), stdev = 566,481
[info]   CI (99.9%): [95,181, 4457,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65,66% complete, ETA 00:45:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2934,213 ops/s
[info] # Warmup Iteration   2: 4128,228 ops/s
[info] # Warmup Iteration   3: 4183,811 ops/s
[info] # Warmup Iteration   4: 4136,766 ops/s
[info] # Warmup Iteration   5: 4200,515 ops/s
[info] Iteration   1: 4260,268 ops/s
[info]                  ·gc.alloc.rate:                   2011,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500423,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4255,921 ops/s
[info]                  ·gc.alloc.rate:                   2010,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752132,210 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4102,418 ops/s
[info]                  ·gc.alloc.rate:                   1937,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 780938,729 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4053,826 ops/s
[info]                  ·gc.alloc.rate:                   1914,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 791021,944 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4253,275 ops/s
[info]                  ·gc.alloc.rate:                   2008,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754087,558 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4185,142 ±(99.9%) 382,083 ops/s [Average]
[info]   (min, avg, max) = (4053,826, 4185,142, 4260,268), stdev = 99,226
[info]   CI (99.9%): [3803,059, 4567,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1976,753 ±(99.9%) 180,323 MB/sec [Average]
[info]   (min, avg, max) = (1914,697, 1976,753, 2011,985), stdev = 46,829
[info]   CI (99.9%): [1796,430, 2157,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743312,099 ±(99.9%) 0,021 B/op [Average]
[info]   (min, avg, max) = (743312,096, 743312,099, 743312,109), stdev = 0,005
[info]   CI (99.9%): [743312,078, 743312,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,150 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,104, 0,150, 0,208), stdev = 0,037
[info]   CI (99.9%): [0,006, 0,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   56,581 ±(99.9%) 58,686 B/op [Average]
[info]   (min, avg, max) = (38,505, 56,581, 80,809), stdev = 15,241
[info]   CI (99.9%): [≈ 0, 115,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1900,057 ±(99.9%) 1174,286 MB/sec [Average]
[info]   (min, avg, max) = (1354,537, 1900,057, 2037,986), stdev = 304,958
[info]   CI (99.9%): [725,771, 3074,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   715720,724 ±(99.9%) 467954,268 B/op [Average]
[info]   (min, avg, max) = (500423,178, 715720,724, 791021,944), stdev = 121526,237
[info]   CI (99.9%): [247766,455, 1183674,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65,86% complete, ETA 00:45:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3158,406 ops/s
[info] # Warmup Iteration   2: 5771,189 ops/s
[info] # Warmup Iteration   3: 5880,823 ops/s
[info] # Warmup Iteration   4: 5881,320 ops/s
[info] # Warmup Iteration   5: 5889,038 ops/s
[info] Iteration   1: 5863,030 ops/s
[info]                  ·gc.alloc.rate:                   2423,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708,411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 726941,179 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5893,730 ops/s
[info]                  ·gc.alloc.rate:                   2435,440 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 543320,677 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5856,077 ops/s
[info]                  ·gc.alloc.rate:                   2420,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715,053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 729689,325 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5851,716 ops/s
[info]                  ·gc.alloc.rate:                   2418,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548204,777 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5722,672 ops/s
[info]                  ·gc.alloc.rate:                   2365,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719,660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747831,582 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5837,445 ±(99.9%) 255,032 ops/s [Average]
[info]   (min, avg, max) = (5722,672, 5837,445, 5893,730), stdev = 66,231
[info]   CI (99.9%): [5582,413, 6092,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2412,436 ±(99.9%) 104,713 MB/sec [Average]
[info]   (min, avg, max) = (2365,299, 2412,436, 2435,440), stdev = 27,194
[info]   CI (99.9%): [2307,723, 2517,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650392,072 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (650392,070, 650392,072, 650392,075), stdev = 0,003
[info]   CI (99.9%): [650392,062, 650392,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23,585 ±(99.9%) 23,920 B/op [Average]
[info]   (min, avg, max) = (16,781, 23,585, 28,618), stdev = 6,212
[info]   CI (99.9%): [≈ 0, 47,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2443,184 ±(99.9%) 1430,005 MB/sec [Average]
[info]   (min, avg, max) = (2034,504, 2443,184, 2719,660), stdev = 371,368
[info]   CI (99.9%): [1013,179, 3873,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   659197,508 ±(99.9%) 399990,569 B/op [Average]
[info]   (min, avg, max) = (543320,677, 659197,508, 747831,582), stdev = 103876,280
[info]   CI (99.9%): [259206,939, 1059188,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66,06% complete, ETA 00:45:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44214,350 ops/s
[info] # Warmup Iteration   2: 47734,958 ops/s
[info] # Warmup Iteration   3: 47599,567 ops/s
[info] # Warmup Iteration   4: 46858,319 ops/s
[info] # Warmup Iteration   5: 47954,839 ops/s
[info] Iteration   1: 48002,123 ops/s
[info]                  ·gc.alloc.rate:                   798,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22144,248 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 48110,249 ops/s
[info]                  ·gc.alloc.rate:                   800,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22031,013 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 47966,645 ops/s
[info]                  ·gc.alloc.rate:                   798,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22095,299 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47924,320 ops/s
[info]                  ·gc.alloc.rate:                   797,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44184,645 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 47890,942 ops/s
[info]                  ·gc.alloc.rate:                   796,821 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22086,114 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   47978,856 ±(99.9%) 325,930 ops/s [Average]
[info]   (min, avg, max) = (47890,942, 47978,856, 48110,249), stdev = 84,643
[info]   CI (99.9%): [47652,926, 48304,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   798,229 ±(99.9%) 5,296 MB/sec [Average]
[info]   (min, avg, max) = (796,821, 798,229, 800,403), stdev = 1,375
[info]   CI (99.9%): [792,933, 803,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (26184,009, 26184,009, 26184,010), stdev = 0,001
[info]   CI (99.9%): [26184,007, 26184,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,819 ±(99.9%) 3,431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,819, 2,051), stdev = 0,891
[info]   CI (99.9%): [≈ 0, 4,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807,968 ±(99.9%) 1157,168 MB/sec [Average]
[info]   (min, avg, max) = (672,116, 807,968, 1345,538), stdev = 300,513
[info]   CI (99.9%): [≈ 0, 1965,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26508,264 ±(99.9%) 38050,058 B/op [Average]
[info]   (min, avg, max) = (22031,013, 26508,264, 44184,645), stdev = 9881,479
[info]   CI (99.9%): [≈ 0, 64558,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66,27% complete, ETA 00:44:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3346,642 ops/s
[info] # Warmup Iteration   2: 4521,426 ops/s
[info] # Warmup Iteration   3: 4552,513 ops/s
[info] # Warmup Iteration   4: 4534,968 ops/s
[info] # Warmup Iteration   5: 4580,356 ops/s
[info] Iteration   1: 4578,708 ops/s
[info]                  ·gc.alloc.rate:                   841,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231236,192 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4562,686 ops/s
[info]                  ·gc.alloc.rate:                   839,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232046,836 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 4515,227 ops/s
[info]                  ·gc.alloc.rate:                   830,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234693,455 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 4576,702 ops/s
[info]                  ·gc.alloc.rate:                   841,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 463361,566 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4582,610 ops/s
[info]                  ·gc.alloc.rate:                   842,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231491,909 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4563,187 ±(99.9%) 107,218 ops/s [Average]
[info]   (min, avg, max) = (4515,227, 4563,187, 4582,610), stdev = 27,844
[info]   CI (99.9%): [4455,969, 4670,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   839,145 ±(99.9%) 19,609 MB/sec [Average]
[info]   (min, avg, max) = (830,384, 839,145, 842,713), stdev = 5,092
[info]   CI (99.9%): [819,536, 858,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289416,094 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (289416,089, 289416,094, 289416,103), stdev = 0,007
[info]   CI (99.9%): [289416,068, 289416,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12,878 ±(99.9%) 59,739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,878, 35,789), stdev = 15,514
[info]   CI (99.9%): [≈ 0, 72,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   808,064 ±(99.9%) 1161,107 MB/sec [Average]
[info]   (min, avg, max) = (672,704, 808,064, 1347,467), stdev = 301,536
[info]   CI (99.9%): [≈ 0, 1969,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   278565,992 ±(99.9%) 397821,626 B/op [Average]
[info]   (min, avg, max) = (231236,192, 278565,992, 463361,566), stdev = 103313,013
[info]   CI (99.9%): [≈ 0, 676387,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66,47% complete, ETA 00:44:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6f4166c4/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2795,549 ops/s
[info] # Warmup Iteration   2: 4964,527 ops/s
[info] # Warmup Iteration   3: 4957,793 ops/s
[info] # Warmup Iteration   4: 5001,944 ops/s
[info] # Warmup Iteration   5: 4807,369 ops/s
[info] Iteration   1: 4644,540 ops/s
[info]                  ·gc.alloc.rate:                   568,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              192756,765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228289,846 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5022,470 ops/s
[info]                  ·gc.alloc.rate:                   615,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              192756,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211113,580 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 4594,832 ops/s
[info]                  ·gc.alloc.rate:                   562,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              192757,624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230887,492 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 4450,155 ops/s
[info]                  ·gc.alloc.rate:      545,090 MB/sec
[info]                  ·gc.alloc.rate.norm: 192758,724 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5018,061 ops/s
[info]                  ·gc.alloc.rate:                   614,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              192756,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211428,355 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4746,012 ±(99.9%) 1002,506 ops/s [Average]
[info]   (min, avg, max) = (4450,155, 4746,012, 5022,470), stdev = 260,348
[info]   CI (99.9%): [3743,506, 5748,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   581,322 ±(99.9%) 122,811 MB/sec [Average]
[info]   (min, avg, max) = (545,090, 581,322, 615,213), stdev = 31,894
[info]   CI (99.9%): [458,511, 704,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   192757,268 ±(99.9%) 3,541 B/op [Average]
[info]   (min, avg, max) = (192756,495, 192757,268, 192758,724), stdev = 0,920
[info]   CI (99.9%): [192753,727, 192760,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,192 ±(99.9%) 1,564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,192, 0,917), stdev = 0,406
[info]   CI (99.9%): [≈ 0, 1,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   65,026 ±(99.9%) 529,733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65,026, 310,870), stdev = 137,570
[info]   CI (99.9%): [≈ 0, 594,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539,169 ±(99.9%) 1160,602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,169, 674,171), stdev = 301,405
[info]   CI (99.9%): [≈ 0, 1699,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   176343,854 ±(99.9%) 381244,890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 176343,854, 230887,492), stdev = 99008,087
[info]   CI (99.9%): [≈ 0, 557588,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66,67% complete, ETA 00:44:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6874,339 ops/s
[info] # Warmup Iteration   2: 7126,071 ops/s
[info] # Warmup Iteration   3: 7037,781 ops/s
[info] # Warmup Iteration   4: 7134,144 ops/s
[info] # Warmup Iteration   5: 7119,066 ops/s
[info] Iteration   1: 7055,006 ops/s
[info]                  ·gc.alloc.rate:                   188,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114114,548 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 7141,689 ops/s
[info]                  ·gc.alloc.rate:      190,850 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7057,623 ops/s
[info]                  ·gc.alloc.rate:                   188,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114066,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7127,725 ops/s
[info]                  ·gc.alloc.rate:      190,484 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7114,772 ops/s
[info]                  ·gc.alloc.rate:      190,139 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   7099,363 ±(99.9%) 155,738 ops/s [Average]
[info]   (min, avg, max) = (7055,006, 7099,363, 7141,689), stdev = 40,445
[info]   CI (99.9%): [6943,625, 7255,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   189,720 ±(99.9%) 4,182 MB/sec [Average]
[info]   (min, avg, max) = (188,515, 189,720, 190,850), stdev = 1,086
[info]   CI (99.9%): [185,538, 193,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056,058 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (42056,057, 42056,058, 42056,062), stdev = 0,002
[info]   CI (99.9%): [42056,050, 42056,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204,615 ±(99.9%) 1078,874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,615, 511,557), stdev = 280,180
[info]   CI (99.9%): [≈ 0, 1283,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45636,121 ±(99.9%) 240626,104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45636,121, 114114,548), stdev = 62489,835
[info]   CI (99.9%): [≈ 0, 286262,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66,87% complete, ETA 00:44:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7041,499 ops/s
[info] # Warmup Iteration   2: 7290,611 ops/s
[info] # Warmup Iteration   3: 7272,363 ops/s
[info] # Warmup Iteration   4: 7223,427 ops/s
[info] # Warmup Iteration   5: 7314,943 ops/s
[info] Iteration   1: 7296,865 ops/s
[info]                  ·gc.alloc.rate:      141,644 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7250,246 ops/s
[info]                  ·gc.alloc.rate:                   140,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              30552,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111046,107 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7356,745 ops/s
[info]                  ·gc.alloc.rate:      142,814 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,060 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7335,280 ops/s
[info]                  ·gc.alloc.rate:      142,416 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,060 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7340,363 ops/s
[info]                  ·gc.alloc.rate:      142,515 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,060 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   7315,900 ±(99.9%) 164,670 ops/s [Average]
[info]   (min, avg, max) = (7250,246, 7315,900, 7356,745), stdev = 42,764
[info]   CI (99.9%): [7151,230, 7480,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   142,029 ±(99.9%) 3,203 MB/sec [Average]
[info]   (min, avg, max) = (140,757, 142,029, 142,814), stdev = 0,832
[info]   CI (99.9%): [138,826, 145,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552,058 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (30552,056, 30552,058, 30552,060), stdev = 0,002
[info]   CI (99.9%): [30552,050, 30552,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   102,320 ±(99.9%) 881,010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,320, 511,602), stdev = 228,795
[info]   CI (99.9%): [≈ 0, 983,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   22209,221 ±(99.9%) 191228,094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22209,221, 111046,107), stdev = 49661,329
[info]   CI (99.9%): [≈ 0, 213437,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   1,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67,07% complete, ETA 00:43:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6419,209 ops/s
[info] # Warmup Iteration   2: 8536,521 ops/s
[info] # Warmup Iteration   3: 8525,416 ops/s
[info] # Warmup Iteration   4: 8625,260 ops/s
[info] # Warmup Iteration   5: 8625,303 ops/s
[info] Iteration   1: 8570,445 ops/s
[info]                  ·gc.alloc.rate:                   1995,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369747,492 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8624,762 ops/s
[info]                  ·gc.alloc.rate:                   2009,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368101,590 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 8565,257 ops/s
[info]                  ·gc.alloc.rate:                   1994,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              366558,294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371248,284 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8565,219 ops/s
[info]                  ·gc.alloc.rate:                   1994,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 372087,200 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8432,253 ops/s
[info]                  ·gc.alloc.rate:                   1963,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 378452,139 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8551,587 ±(99.9%) 274,476 ops/s [Average]
[info]   (min, avg, max) = (8432,253, 8551,587, 8624,762), stdev = 71,280
[info]   CI (99.9%): [8277,112, 8826,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1991,659 ±(99.9%) 64,130 MB/sec [Average]
[info]   (min, avg, max) = (1963,878, 1991,659, 2009,006), stdev = 16,654
[info]   CI (99.9%): [1927,529, 2055,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366556,499 ±(99.9%) 46,370 B/op [Average]
[info]   (min, avg, max) = (366544,048, 366556,499, 366568,052), stdev = 12,042
[info]   CI (99.9%): [366510,128, 366602,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,079 ±(99.9%) 0,123 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,129), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14,561 ±(99.9%) 22,575 B/op [Average]
[info]   (min, avg, max) = (7,650, 14,561, 23,723), stdev = 5,863
[info]   CI (99.9%): [≈ 0, 37,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2020,700 ±(99.9%) 22,038 MB/sec [Average]
[info]   (min, avg, max) = (2013,151, 2020,700, 2027,547), stdev = 5,723
[info]   CI (99.9%): [1998,662, 2042,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   371927,341 ±(99.9%) 15214,647 B/op [Average]
[info]   (min, avg, max) = (368101,590, 371927,341, 378452,139), stdev = 3951,195
[info]   CI (99.9%): [356712,694, 387141,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67,27% complete, ETA 00:43:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2699,537 ops/s
[info] # Warmup Iteration   2: 12633,535 ops/s
[info] # Warmup Iteration   3: 12623,372 ops/s
[info] # Warmup Iteration   4: 12731,690 ops/s
[info] # Warmup Iteration   5: 12713,730 ops/s
[info] Iteration   1: 12734,141 ops/s
[info]                  ·gc.alloc.rate:                   293,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63220,786 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12787,139 ops/s
[info]                  ·gc.alloc.rate:      294,797 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280,032 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 12714,669 ops/s
[info]                  ·gc.alloc.rate:                   293,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63320,205 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 12738,914 ops/s
[info]                  ·gc.alloc.rate:      293,686 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280,040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 12658,396 ops/s
[info]                  ·gc.alloc.rate:                   291,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63600,250 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   12726,652 ±(99.9%) 179,247 ops/s [Average]
[info]   (min, avg, max) = (12658,396, 12726,652, 12787,139), stdev = 46,550
[info]   CI (99.9%): [12547,405, 12905,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   293,401 ±(99.9%) 4,131 MB/sec [Average]
[info]   (min, avg, max) = (291,827, 293,401, 294,797), stdev = 1,073
[info]   CI (99.9%): [289,270, 297,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280,035 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (36280,032, 36280,035, 36280,040), stdev = 0,003
[info]   CI (99.9%): [36280,022, 36280,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,001 ±(99.9%) 0,012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,180 ±(99.9%) 1,546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,180, 0,898), stdev = 0,402
[info]   CI (99.9%): [≈ 0, 1,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   306,950 ±(99.9%) 1078,972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,950, 511,610), stdev = 280,206
[info]   CI (99.9%): [≈ 0, 1385,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   38028,248 ±(99.9%) 133675,724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38028,248, 63600,250), stdev = 34715,161
[info]   CI (99.9%): [≈ 0, 171703,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67,47% complete, ETA 00:43:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9257,583 ops/s
[info] # Warmup Iteration   2: 16302,003 ops/s
[info] # Warmup Iteration   3: 16311,868 ops/s
[info] # Warmup Iteration   4: 16392,534 ops/s
[info] # Warmup Iteration   5: 16378,563 ops/s
[info] Iteration   1: 16437,990 ops/s
[info]                  ·gc.alloc.rate:                   573,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              54920,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64507,640 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16466,672 ops/s
[info]                  ·gc.alloc.rate:      574,691 MB/sec
[info]                  ·gc.alloc.rate.norm: 54920,031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16380,210 ops/s
[info]                  ·gc.alloc.rate:                   571,606 MB/sec
[info]                  ·gc.alloc.rate.norm:              54920,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64736,000 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 16378,802 ops/s
[info]                  ·gc.alloc.rate:                   571,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              54920,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64800,000 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16365,437 ops/s
[info]                  ·gc.alloc.rate:                   571,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              54920,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64855,418 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   16405,822 ±(99.9%) 169,543 ops/s [Average]
[info]   (min, avg, max) = (16365,437, 16405,822, 16466,672), stdev = 44,030
[info]   CI (99.9%): [16236,279, 16575,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   572,527 ±(99.9%) 5,959 MB/sec [Average]
[info]   (min, avg, max) = (571,112, 572,527, 574,691), stdev = 1,547
[info]   CI (99.9%): [566,569, 578,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54920,027 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (54920,025, 54920,027, 54920,031), stdev = 0,003
[info]   CI (99.9%): [54920,016, 54920,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,117 ±(99.9%) 0,872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,520), stdev = 0,226
[info]   CI (99.9%): [≈ 0, 0,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11,165 ±(99.9%) 83,460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,165, 49,824), stdev = 21,674
[info]   CI (99.9%): [≈ 0, 94,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539,280 ±(99.9%) 1160,841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,280, 674,438), stdev = 301,467
[info]   CI (99.9%): [≈ 0, 1700,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   51779,812 ±(99.9%) 111461,113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51779,812, 64855,418), stdev = 28946,097
[info]   CI (99.9%): [≈ 0, 163240,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67,67% complete, ETA 00:42:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22948,593 ops/s
[info] # Warmup Iteration   2: 25746,868 ops/s
[info] # Warmup Iteration   3: 25691,301 ops/s
[info] # Warmup Iteration   4: 25461,250 ops/s
[info] # Warmup Iteration   5: 25783,404 ops/s
[info] Iteration   1: 25849,880 ops/s
[info]                  ·gc.alloc.rate:                   484,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31149,436 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 25891,063 ops/s
[info]                  ·gc.alloc.rate:                   485,287 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31100,115 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 25936,075 ops/s
[info]                  ·gc.alloc.rate:                   486,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40948,631 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 25974,878 ops/s
[info]                  ·gc.alloc.rate:      486,816 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25409,231 ops/s
[info]                  ·gc.alloc.rate:                   476,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41796,155 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   25812,225 ±(99.9%) 886,134 ops/s [Average]
[info]   (min, avg, max) = (25409,231, 25812,225, 25974,878), stdev = 230,126
[info]   CI (99.9%): [24926,091, 26698,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   483,785 ±(99.9%) 16,605 MB/sec [Average]
[info]   (min, avg, max) = (476,235, 483,785, 486,816), stdev = 4,312
[info]   CI (99.9%): [467,180, 500,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (29496,016, 29496,016, 29496,017), stdev = 0,001
[info]   CI (99.9%): [29496,014, 29496,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,698 ±(99.9%) 5,874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,698, 3,426), stdev = 1,525
[info]   CI (99.9%): [≈ 0, 6,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   42,341 ±(99.9%) 356,378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42,341, 207,889), stdev = 92,550
[info]   CI (99.9%): [≈ 0, 398,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474,600 ±(99.9%) 1068,842 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,600, 674,872), stdev = 277,575
[info]   CI (99.9%): [≈ 0, 1543,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28998,867 ±(99.9%) 65476,289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28998,867, 41796,155), stdev = 17003,984
[info]   CI (99.9%): [≈ 0, 94475,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67,87% complete, ETA 00:42:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1315,383 ops/s
[info] # Warmup Iteration   2: 2620,785 ops/s
[info] # Warmup Iteration   3: 2626,580 ops/s
[info] # Warmup Iteration   4: 2611,127 ops/s
[info] # Warmup Iteration   5: 2652,274 ops/s
[info] Iteration   1: 2649,622 ops/s
[info]                  ·gc.alloc.rate:                   1683,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1203883,955 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2645,441 ops/s
[info]                  ·gc.alloc.rate:                   1680,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 804555,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2640,488 ops/s
[info]                  ·gc.alloc.rate:                   1677,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 806871,691 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2632,513 ops/s
[info]                  ·gc.alloc.rate:                   1672,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800,155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1214978,721 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2640,742 ops/s
[info]                  ·gc.alloc.rate:                   1677,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 808260,796 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2641,761 ±(99.9%) 24,620 ops/s [Average]
[info]   (min, avg, max) = (2632,513, 2641,761, 2649,622), stdev = 6,394
[info]   CI (99.9%): [2617,141, 2666,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1678,351 ±(99.9%) 15,565 MB/sec [Average]
[info]   (min, avg, max) = (1672,437, 1678,351, 1683,244), stdev = 4,042
[info]   CI (99.9%): [1662,786, 1693,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999800,154 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (999800,154, 999800,154, 999800,155), stdev = 0,001
[info]   CI (99.9%): [999800,153, 999800,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   17,382 ±(99.9%) 54,614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17,382, 37,321), stdev = 14,183
[info]   CI (99.9%): [≈ 0, 71,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1624,386 ±(99.9%) 1424,443 MB/sec [Average]
[info]   (min, avg, max) = (1352,491, 1624,386, 2032,382), stdev = 369,923
[info]   CI (99.9%): [199,943, 3048,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   967710,091 ±(99.9%) 849833,771 B/op [Average]
[info]   (min, avg, max) = (804555,291, 967710,091, 1214978,721), stdev = 220699,131
[info]   CI (99.9%): [117876,320, 1817543,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68,07% complete, ETA 00:42:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7503,601 ops/s
[info] # Warmup Iteration   2: 8967,644 ops/s
[info] # Warmup Iteration   3: 9036,755 ops/s
[info] # Warmup Iteration   4: 9096,095 ops/s
[info] # Warmup Iteration   5: 8978,051 ops/s
[info] Iteration   1: 9093,607 ops/s
[info]                  ·gc.alloc.rate:                   1116,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              193248,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232402,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9049,028 ops/s
[info]                  ·gc.alloc.rate:                   1111,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              193249,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116650,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8948,016 ops/s
[info]                  ·gc.alloc.rate:                   1098,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              193273,858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235932,529 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9046,131 ops/s
[info]                  ·gc.alloc.rate:                   1111,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233493,274 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9052,660 ops/s
[info]                  ·gc.alloc.rate:                   1111,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116785,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   9037,889 ±(99.9%) 207,291 ops/s [Average]
[info]   (min, avg, max) = (8948,016, 9037,889, 9093,607), stdev = 53,833
[info]   CI (99.9%): [8830,598, 9245,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1109,862 ±(99.9%) 25,085 MB/sec [Average]
[info]   (min, avg, max) = (1098,941, 1109,862, 1116,508), stdev = 6,515
[info]   CI (99.9%): [1084,777, 1134,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   193263,122 ±(99.9%) 50,360 B/op [Average]
[info]   (min, avg, max) = (193248,045, 193263,122, 193273,858), stdev = 13,078
[info]   CI (99.9%): [193212,762, 193313,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2,181 ±(99.9%) 12,489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,181, 7,242), stdev = 3,243
[info]   CI (99.9%): [≈ 0, 14,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1073,781 ±(99.9%) 1415,029 MB/sec [Average]
[info]   (min, avg, max) = (670,734, 1073,781, 1342,723), stdev = 367,479
[info]   CI (99.9%): [≈ 0, 2488,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   187052,595 ±(99.9%) 247286,639 B/op [Average]
[info]   (min, avg, max) = (116650,026, 187052,595, 235932,529), stdev = 64219,555
[info]   CI (99.9%): [≈ 0, 434339,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68,27% complete, ETA 00:42:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6623,380 ops/s
[info] # Warmup Iteration   2: 8787,842 ops/s
[info] # Warmup Iteration   3: 8904,874 ops/s
[info] # Warmup Iteration   4: 8815,670 ops/s
[info] # Warmup Iteration   5: 8887,320 ops/s
[info] Iteration   1: 8855,516 ops/s
[info]                  ·gc.alloc.rate:                   1705,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              303112,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358779,448 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8903,213 ops/s
[info]                  ·gc.alloc.rate:                   1714,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              303112,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238328,784 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8832,929 ops/s
[info]                  ·gc.alloc.rate:                   1701,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              303131,550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 360859,686 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8899,071 ops/s
[info]                  ·gc.alloc.rate:                   1714,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358772,970 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8883,404 ops/s
[info]                  ·gc.alloc.rate:                   1711,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239809,390 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8874,827 ±(99.9%) 115,446 ops/s [Average]
[info]   (min, avg, max) = (8832,929, 8874,827, 8903,213), stdev = 29,981
[info]   CI (99.9%): [8759,380, 8990,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1709,356 ±(99.9%) 22,317 MB/sec [Average]
[info]   (min, avg, max) = (1701,307, 1709,356, 1714,811), stdev = 5,796
[info]   CI (99.9%): [1687,039, 1731,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   303125,548 ±(99.9%) 47,980 B/op [Average]
[info]   (min, avg, max) = (303112,046, 303125,548, 303136,050), stdev = 12,460
[info]   CI (99.9%): [303077,568, 303173,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,146), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10,335 ±(99.9%) 48,574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,335, 25,770), stdev = 12,614
[info]   CI (99.9%): [≈ 0, 58,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1754,929 ±(99.9%) 1420,066 MB/sec [Average]
[info]   (min, avg, max) = (1348,309, 1754,929, 2028,659), stdev = 368,787
[info]   CI (99.9%): [334,862, 3174,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   311310,056 ±(99.9%) 253966,304 B/op [Average]
[info]   (min, avg, max) = (238328,784, 311310,056, 360859,686), stdev = 65954,243
[info]   CI (99.9%): [57343,752, 565276,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68,47% complete, ETA 00:41:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13014,214 ops/s
[info] # Warmup Iteration   2: 58451,698 ops/s
[info] # Warmup Iteration   3: 58907,244 ops/s
[info] # Warmup Iteration   4: 58122,622 ops/s
[info] # Warmup Iteration   5: 58655,482 ops/s
[info] Iteration   1: 57973,639 ops/s
[info]                  ·gc.alloc.rate:                   541,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13887,945 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 59001,273 ops/s
[info]                  ·gc.alloc.rate:                   551,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17981,477 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 59033,501 ops/s
[info]                  ·gc.alloc.rate:                   551,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17971,732 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 59016,168 ops/s
[info]                  ·gc.alloc.rate:                   551,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17923,617 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 59054,080 ops/s
[info]                  ·gc.alloc.rate:      552,051 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   58815,732 ±(99.9%) 1814,256 ops/s [Average]
[info]   (min, avg, max) = (57973,639, 58815,732, 59054,080), stdev = 471,156
[info]   CI (99.9%): [57001,476, 60629,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   549,827 ±(99.9%) 17,042 MB/sec [Average]
[info]   (min, avg, max) = (541,915, 549,827, 552,051), stdev = 4,426
[info]   CI (99.9%): [532,784, 566,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (14712,007, 14712,007, 14712,008), stdev = 0,001
[info]   CI (99.9%): [14712,006, 14712,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,609 ±(99.9%) 5,124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,609, 2,990), stdev = 1,331
[info]   CI (99.9%): [≈ 0, 5,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16,249 ±(99.9%) 136,676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,249, 79,742), stdev = 35,494
[info]   CI (99.9%): [≈ 0, 152,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506,404 ±(99.9%) 1123,016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,404, 674,154), stdev = 291,644
[info]   CI (99.9%): [≈ 0, 1629,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   13552,954 ±(99.9%) 29953,140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13552,954, 17981,477), stdev = 7778,735
[info]   CI (99.9%): [≈ 0, 43506,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68,67% complete, ETA 00:41:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6f4166c4/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 28345,037 ops/s
[info] # Warmup Iteration   2: 44504,079 ops/s
[info] # Warmup Iteration   3: 44903,914 ops/s
[info] # Warmup Iteration   4: 44975,072 ops/s
[info] # Warmup Iteration   5: 45045,874 ops/s
[info] Iteration   1: 44899,674 ops/s
[info]                  ·gc.alloc.rate:                   668,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23616,366 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45121,503 ops/s
[info]                  ·gc.alloc.rate:                   671,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23502,285 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 44968,068 ops/s
[info]                  ·gc.alloc.rate:                   669,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23592,319 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44991,399 ops/s
[info]                  ·gc.alloc.rate:                   669,877 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23580,261 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 45037,101 ops/s
[info]                  ·gc.alloc.rate:                   670,528 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23578,936 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45003,549 ±(99.9%) 317,739 ops/s [Average]
[info]   (min, avg, max) = (44899,674, 45003,549, 45121,503), stdev = 82,516
[info]   CI (99.9%): [44685,810, 45321,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   670,050 ±(99.9%) 4,865 MB/sec [Average]
[info]   (min, avg, max) = (668,455, 670,050, 671,867), stdev = 1,263
[info]   CI (99.9%): [665,185, 674,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431,864 ±(99.9%) 0,194 B/op [Average]
[info]   (min, avg, max) = (23431,824, 23431,864, 23431,952), stdev = 0,050
[info]   CI (99.9%): [23431,670, 23432,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,161 ±(99.9%) 1,208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,161, 0,722), stdev = 0,314
[info]   CI (99.9%): [≈ 0, 1,369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5,641 ±(99.9%) 42,358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,641, 25,297), stdev = 11,000
[info]   CI (99.9%): [≈ 0, 47,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,113 ±(99.9%) 1,488 MB/sec [Average]
[info]   (min, avg, max) = (673,719, 674,113, 674,737), stdev = 0,386
[info]   CI (99.9%): [672,626, 675,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23574,033 ±(99.9%) 164,917 B/op [Average]
[info]   (min, avg, max) = (23502,285, 23574,033, 23616,366), stdev = 42,828
[info]   CI (99.9%): [23409,117, 23738,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68,88% complete, ETA 00:41:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78569,897 ops/s
[info] # Warmup Iteration   2: 84840,014 ops/s
[info] # Warmup Iteration   3: 84292,262 ops/s
[info] # Warmup Iteration   4: 84843,510 ops/s
[info] # Warmup Iteration   5: 84933,315 ops/s
[info] Iteration   1: 84795,199 ops/s
[info]                  ·gc.alloc.rate:                   637,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12523,816 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 84441,692 ops/s
[info]                  ·gc.alloc.rate:                   634,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12577,350 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 84291,207 ops/s
[info]                  ·gc.alloc.rate:                   633,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12548,934 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 84512,753 ops/s
[info]                  ·gc.alloc.rate:                   635,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12516,126 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 84391,505 ops/s
[info]                  ·gc.alloc.rate:      634,471 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   84486,471 ±(99.9%) 733,534 ops/s [Average]
[info]   (min, avg, max) = (84291,207, 84486,471, 84795,199), stdev = 190,496
[info]   CI (99.9%): [83752,938, 85220,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   635,177 ±(99.9%) 5,412 MB/sec [Average]
[info]   (min, avg, max) = (633,697, 635,177, 637,438), stdev = 1,406
[info]   CI (99.9%): [629,765, 640,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11832,005, 11832,005, 11832,006), stdev = 0,001
[info]   CI (99.9%): [11832,004, 11832,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,691 ±(99.9%) 5,812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,691, 3,390), stdev = 1,509
[info]   CI (99.9%): [≈ 0, 6,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12,819 ±(99.9%) 107,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,819, 62,932), stdev = 28,016
[info]   CI (99.9%): [≈ 0, 120,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538,763 ±(99.9%) 1159,740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,763, 674,909), stdev = 301,181
[info]   CI (99.9%): [≈ 0, 1698,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10033,245 ±(99.9%) 21597,514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10033,245, 12577,350), stdev = 5608,806
[info]   CI (99.9%): [≈ 0, 31630,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69,08% complete, ETA 00:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109686,859 ops/s
[info] # Warmup Iteration   2: 116757,876 ops/s
[info] # Warmup Iteration   3: 116060,520 ops/s
[info] # Warmup Iteration   4: 116389,506 ops/s
[info] # Warmup Iteration   5: 116682,554 ops/s
[info] Iteration   1: 116516,099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 116416,154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116241,236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 116469,200 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 116153,230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   116359,184 ±(99.9%) 597,471 ops/s [Average]
[info]   (min, avg, max) = (116153,230, 116359,184, 116516,099), stdev = 155,161
[info]   CI (99.9%): [115761,713, 116956,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,004, 0,004), stdev = 0,001
[info]   CI (99.9%): [0,003, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69,28% complete, ETA 00:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3708,685 ops/s
[info] # Warmup Iteration   2: 6713,146 ops/s
[info] # Warmup Iteration   3: 6803,506 ops/s
[info] # Warmup Iteration   4: 6607,338 ops/s
[info] # Warmup Iteration   5: 6737,933 ops/s
[info] Iteration   1: 6495,014 ops/s
[info]                  ·gc.alloc.rate:                   1913,294 MB/sec
[info]                  ·gc.alloc.rate.norm:              463631,542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491525,044 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6830,959 ops/s
[info]                  ·gc.alloc.rate:                   2012,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              463631,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 467892,320 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6809,929 ops/s
[info]                  ·gc.alloc.rate:                   2006,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              463632,651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 469950,459 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6796,037 ops/s
[info]                  ·gc.alloc.rate:                   2002,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              463631,334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14,461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 471381,032 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6822,720 ops/s
[info]                  ·gc.alloc.rate:                   2009,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              463632,531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 469823,503 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6750,932 ±(99.9%) 553,231 ops/s [Average]
[info]   (min, avg, max) = (6495,014, 6750,932, 6830,959), stdev = 143,672
[info]   CI (99.9%): [6197,701, 7304,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1988,814 ±(99.9%) 163,280 MB/sec [Average]
[info]   (min, avg, max) = (1913,294, 1988,814, 2012,657), stdev = 42,403
[info]   CI (99.9%): [1825,534, 2152,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   463631,831 ±(99.9%) 2,745 B/op [Average]
[info]   (min, avg, max) = (463631,096, 463631,831, 463632,651), stdev = 0,713
[info]   CI (99.9%): [463629,086, 463634,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13,502 ±(99.9%) 23,762 B/op [Average]
[info]   (min, avg, max) = (5,044, 13,502, 19,205), stdev = 6,171
[info]   CI (99.9%): [≈ 0, 37,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2033,064 ±(99.9%) 12,855 MB/sec [Average]
[info]   (min, avg, max) = (2028,404, 2033,064, 2036,662), stdev = 3,339
[info]   CI (99.9%): [2020,208, 2045,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   474114,472 ±(99.9%) 37780,797 B/op [Average]
[info]   (min, avg, max) = (467892,320, 474114,472, 491525,044), stdev = 9811,553
[info]   CI (99.9%): [436333,675, 511895,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69,48% complete, ETA 00:40:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4578,096 ops/s
[info] # Warmup Iteration   2: 4934,207 ops/s
[info] # Warmup Iteration   3: 4935,591 ops/s
[info] # Warmup Iteration   4: 4950,773 ops/s
[info] # Warmup Iteration   5: 4971,145 ops/s
[info] Iteration   1: 4946,629 ops/s
[info]                  ·gc.alloc.rate:                   274,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296,082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162753,914 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4979,481 ops/s
[info]                  ·gc.alloc.rate:      276,238 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296,082 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4951,876 ops/s
[info]                  ·gc.alloc.rate:                   274,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296,082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162556,796 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4982,037 ops/s
[info]                  ·gc.alloc.rate:      276,339 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296,082 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4918,602 ops/s
[info]                  ·gc.alloc.rate:                   272,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296,083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163680,156 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   4955,725 ±(99.9%) 100,641 ops/s [Average]
[info]   (min, avg, max) = (4918,602, 4955,725, 4982,037), stdev = 26,136
[info]   CI (99.9%): [4855,084, 5056,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   274,880 ±(99.9%) 5,627 MB/sec [Average]
[info]   (min, avg, max) = (272,823, 274,880, 276,339), stdev = 1,461
[info]   CI (99.9%): [269,253, 280,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   87296,082 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87296,082, 87296,082, 87296,083), stdev = 0,001
[info]   CI (99.9%): [87296,081, 87296,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,002 ±(99.9%) 0,015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,009), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,754 ±(99.9%) 4,650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,754, 2,771), stdev = 1,208
[info]   CI (99.9%): [≈ 0, 5,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   306,895 ±(99.9%) 1078,780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,895, 511,543), stdev = 280,156
[info]   CI (99.9%): [≈ 0, 1385,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   97798,173 ±(99.9%) 343778,239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97798,173, 163680,156), stdev = 89278,117
[info]   CI (99.9%): [≈ 0, 441576,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69,68% complete, ETA 00:40:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4246986,799 ops/s
[info] # Warmup Iteration   2: 5757564,861 ops/s
[info] # Warmup Iteration   3: 5813614,783 ops/s
[info] # Warmup Iteration   4: 5802424,981 ops/s
[info] # Warmup Iteration   5: 5673189,809 ops/s
[info] Iteration   1: 5629237,732 ops/s
[info]                  ·gc.alloc.rate:                   3490,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4059,559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1135,080 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 5805503,949 ops/s
[info]                  ·gc.alloc.rate:                   3600,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391,866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 919,409 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5795439,885 ops/s
[info]                  ·gc.alloc.rate:                   3594,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396,641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 922,352 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 5787164,267 ops/s
[info]                  ·gc.alloc.rate:                   3588,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 924,773 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5769118,135 ops/s
[info]                  ·gc.alloc.rate:                   3577,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083,925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1114,119 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   5757292,794 ±(99.9%) 280395,622 ops/s [Average]
[info]   (min, avg, max) = (5629237,732, 5757292,794, 5805503,949), stdev = 72817,853
[info]   CI (99.9%): [5476897,171, 6037688,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3570,396 ±(99.9%) 174,776 MB/sec [Average]
[info]   (min, avg, max) = (3490,616, 3570,396, 3600,639), stdev = 45,389
[info]   CI (99.9%): [3395,620, 3745,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,019 ±(99.9%) 0,026 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,019, 0,029), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3666,502 ±(99.9%) 1424,910 MB/sec [Average]
[info]   (min, avg, max) = (3391,866, 3666,502, 4083,925), stdev = 370,045
[info]   CI (99.9%): [2241,592, 5091,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1003,147 ±(99.9%) 427,939 B/op [Average]
[info]   (min, avg, max) = (919,409, 1003,147, 1135,080), stdev = 111,134
[info]   CI (99.9%): [575,208, 1431,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69,88% complete, ETA 00:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4252830,696 ops/s
[info] # Warmup Iteration   2: 43439127,117 ops/s
[info] # Warmup Iteration   3: 47118068,628 ops/s
[info] # Warmup Iteration   4: 47390172,882 ops/s
[info] # Warmup Iteration   5: 46306338,688 ops/s
[info] Iteration   1: 47265470,865 ops/s
[info]                  ·gc.alloc.rate:                   480,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻³ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,034 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 47317857,919 ops/s
[info]                  ·gc.alloc.rate:                   481,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,017 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 47142211,451 ops/s
[info]                  ·gc.alloc.rate:                   479,303 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,483 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 45997106,023 ops/s
[info]                  ·gc.alloc.rate:                   467,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 47366642,631 ops/s
[info]                  ·gc.alloc.rate:      481,605 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   47017857,778 ±(99.9%) 2220691,075 ops/s [Average]
[info]   (min, avg, max) = (45997106,023, 47017857,778, 47366642,631), stdev = 576706,420
[info]   CI (99.9%): [44797166,703, 49238548,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   478,040 ±(99.9%) 22,540 MB/sec [Average]
[info]   (min, avg, max) = (467,681, 478,040, 481,605), stdev = 5,854
[info]   CI (99.9%): [455,500, 500,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,529 ±(99.9%) 4,479 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,529, 2,610), stdev = 1,163
[info]   CI (99.9%): [≈ 0, 5,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,018 ±(99.9%) 0,149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,087), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   474,065 ±(99.9%) 1067,027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,065, 673,580), stdev = 277,103
[info]   CI (99.9%): [≈ 0, 1541,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   15,916 ±(99.9%) 36,005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15,916, 23,044), stdev = 9,350
[info]   CI (99.9%): [≈ 0, 51,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70,08% complete, ETA 00:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5085699,056 ops/s
[info] # Warmup Iteration   2: 9655225,180 ops/s
[info] # Warmup Iteration   3: 9655737,343 ops/s
[info] # Warmup Iteration   4: 9722756,623 ops/s
[info] # Warmup Iteration   5: 9731646,109 ops/s
[info] Iteration   1: 9701224,653 ops/s
[info]                  ·gc.alloc.rate:                   3649,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4071,770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 660,575 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 9703570,774 ops/s
[info]                  ·gc.alloc.rate:                   3649,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398,660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551,247 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 9643647,257 ops/s
[info]                  ·gc.alloc.rate:                   3627,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401,987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555,184 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9673582,218 ops/s
[info]                  ·gc.alloc.rate:                   3639,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4085,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 664,564 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 9644858,885 ops/s
[info]                  ·gc.alloc.rate:                   3627,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3406,319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555,850 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   9673376,757 ±(99.9%) 112005,734 ops/s [Average]
[info]   (min, avg, max) = (9643647,257, 9673376,757, 9703570,774), stdev = 29087,533
[info]   CI (99.9%): [9561371,023, 9785382,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3638,699 ±(99.9%) 41,957 MB/sec [Average]
[info]   (min, avg, max) = (3627,581, 3638,699, 3649,919), stdev = 10,896
[info]   CI (99.9%): [3596,742, 3680,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (592,000, 592,000, 592,000), stdev = 0,001
[info]   CI (99.9%): [592,000, 592,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,104), stdev = 0,019
[info]   CI (99.9%): [0,003, 0,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,012 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,012, 0,017), stdev = 0,003
[info]   CI (99.9%): [0,001, 0,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3672,772 ±(99.9%) 1426,159 MB/sec [Average]
[info]   (min, avg, max) = (3398,660, 3672,772, 4085,125), stdev = 370,369
[info]   CI (99.9%): [2246,613, 5098,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   597,484 ±(99.9%) 228,950 B/op [Average]
[info]   (min, avg, max) = (551,247, 597,484, 664,564), stdev = 59,458
[info]   CI (99.9%): [368,534, 826,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70,28% complete, ETA 00:39:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56274956,829 ops/s
[info] # Warmup Iteration   2: 56816902,144 ops/s
[info] # Warmup Iteration   3: 58020203,693 ops/s
[info] # Warmup Iteration   4: 58126713,754 ops/s
[info] # Warmup Iteration   5: 58191291,800 ops/s
[info] Iteration   1: 58171118,572 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 58230046,935 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 57989692,969 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 58009549,089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57313016,346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   57942684,782 ±(99.9%) 1412092,015 ops/s [Average]
[info]   (min, avg, max) = (57313016,346, 57942684,782, 58230046,935), stdev = 366715,812
[info]   CI (99.9%): [56530592,767, 59354776,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70,48% complete, ETA 00:39:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29340152,186 ops/s
[info] # Warmup Iteration   2: 37191729,455 ops/s
[info] # Warmup Iteration   3: 38803825,084 ops/s
[info] # Warmup Iteration   4: 40026867,705 ops/s
[info] # Warmup Iteration   5: 39857645,174 ops/s
[info] Iteration   1: 39646426,528 ops/s
[info]                  ·gc.alloc.rate:                   1410,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53,334 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 40060809,403 ops/s
[info]                  ·gc.alloc.rate:                   1425,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,786 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 40055544,011 ops/s
[info]                  ·gc.alloc.rate:                   1425,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,833 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 39986597,999 ops/s
[info]                  ·gc.alloc.rate:                   1422,866 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,958 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 39902777,216 ops/s
[info]                  ·gc.alloc.rate:                   1419,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   39930431,031 ±(99.9%) 659207,853 ops/s [Average]
[info]   (min, avg, max) = (39646426,528, 39930431,031, 40060809,403), stdev = 171194,186
[info]   CI (99.9%): [39271223,178, 40589638,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1420,810 ±(99.9%) 23,778 MB/sec [Average]
[info]   (min, avg, max) = (1410,561, 1420,810, 1425,643), stdev = 6,175
[info]   CI (99.9%): [1397,032, 1444,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56,000, 56,000, 56,000), stdev = 0,001
[info]   CI (99.9%): [56,000, 56,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,001 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   1344,849 ±(99.9%) 5,385 MB/sec [Average]
[info]   (min, avg, max) = (1343,403, 1344,849, 1346,872), stdev = 1,398
[info]   CI (99.9%): [1339,464, 1350,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53,007 ±(99.9%) 0,864 B/op [Average]
[info]   (min, avg, max) = (52,786, 53,007, 53,334), stdev = 0,224
[info]   CI (99.9%): [52,143, 53,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70,68% complete, ETA 00:38:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5091442,178 ops/s
[info] # Warmup Iteration   2: 8134145,280 ops/s
[info] # Warmup Iteration   3: 8292204,830 ops/s
[info] # Warmup Iteration   4: 8324659,632 ops/s
[info] # Warmup Iteration   5: 8312387,673 ops/s
[info] Iteration   1: 8304746,785 ops/s
[info]                  ·gc.alloc.rate:                   4011,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3383,400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 641,014 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8343150,744 ops/s
[info]                  ·gc.alloc.rate:                   4028,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4069,527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 767,673 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 8236683,280 ops/s
[info]                  ·gc.alloc.rate:                   3977,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4076,350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 778,930 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8316586,107 ops/s
[info]                  ·gc.alloc.rate:                   4016,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4082,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 772,485 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 8059423,988 ops/s
[info]                  ·gc.alloc.rate:                   3892,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084,899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 797,620 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   8252118,181 ±(99.9%) 441491,479 ops/s [Average]
[info]   (min, avg, max) = (8059423,988, 8252118,181, 8343150,744), stdev = 114653,935
[info]   CI (99.9%): [7810626,702, 8693609,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3985,169 ±(99.9%) 213,096 MB/sec [Average]
[info]   (min, avg, max) = (3892,235, 3985,169, 4028,851), stdev = 55,340
[info]   CI (99.9%): [3772,074, 4198,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,000, 760,000, 760,000), stdev = 0,001
[info]   CI (99.9%): [760,000, 760,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,125), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,012 ±(99.9%) 0,026 B/op [Average]
[info]   (min, avg, max) = (0,008, 0,012, 0,024), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3939,238 ±(99.9%) 1196,697 MB/sec [Average]
[info]   (min, avg, max) = (3383,400, 3939,238, 4084,899), stdev = 310,778
[info]   CI (99.9%): [2742,541, 5135,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   751,544 ±(99.9%) 241,922 B/op [Average]
[info]   (min, avg, max) = (641,014, 751,544, 797,620), stdev = 62,826
[info]   CI (99.9%): [509,622, 993,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70,88% complete, ETA 00:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8823441,946 ops/s
[info] # Warmup Iteration   2: 10758475,447 ops/s
[info] # Warmup Iteration   3: 10992917,954 ops/s
[info] # Warmup Iteration   4: 10986301,997 ops/s
[info] # Warmup Iteration   5: 10992146,099 ops/s
[info] Iteration   1: 10965415,766 ops/s
[info]                  ·gc.alloc.rate:                   4625,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4751,985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 682,130 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 10941253,069 ops/s
[info]                  ·gc.alloc.rate:                   4616,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4760,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684,704 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 10977135,726 ops/s
[info]                  ·gc.alloc.rate:                   4631,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 585,659 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 10931797,223 ops/s
[info]                  ·gc.alloc.rate:                   4612,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4768,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 686,460 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 10959409,889 ops/s
[info]                  ·gc.alloc.rate:                   4623,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4769,972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684,989 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   10955002,334 ±(99.9%) 70616,878 ops/s [Average]
[info]   (min, avg, max) = (10931797,223, 10955002,334, 10977135,726), stdev = 18338,979
[info]   CI (99.9%): [10884385,456, 11025619,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4621,815 ±(99.9%) 29,287 MB/sec [Average]
[info]   (min, avg, max) = (4612,257, 4621,815, 4631,221), stdev = 7,606
[info]   CI (99.9%): [4592,528, 4651,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   664,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (664,000, 664,000, 664,000), stdev = 0,001
[info]   CI (99.9%): [664,000, 664,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,104), stdev = 0,017
[info]   CI (99.9%): [0,020, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,013 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (0,009, 0,013, 0,015), stdev = 0,003
[info]   CI (99.9%): [0,003, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   4627,015 ±(99.9%) 1167,459 MB/sec [Average]
[info]   (min, avg, max) = (4084,812, 4627,015, 4769,972), stdev = 303,185
[info]   CI (99.9%): [3459,556, 5794,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   664,789 ±(99.9%) 170,438 B/op [Average]
[info]   (min, avg, max) = (585,659, 664,789, 686,460), stdev = 44,262
[info]   CI (99.9%): [494,350, 835,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   34,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,800, 7,000), stdev = 0,447
[info]   CI (99.9%): [34,000, 34,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71,08% complete, ETA 00:38:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18891067,424 ops/s
[info] # Warmup Iteration   2: 24016299,704 ops/s
[info] # Warmup Iteration   3: 22878146,636 ops/s
[info] # Warmup Iteration   4: 22713479,222 ops/s
[info] # Warmup Iteration   5: 23324655,163 ops/s
[info] Iteration   1: 24000764,735 ops/s
[info]                  ·gc.alloc.rate:                   2196,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132,203 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 24037072,976 ops/s
[info]                  ·gc.alloc.rate:                   2199,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132,181 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 23954982,750 ops/s
[info]                  ·gc.alloc.rate:                   2191,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132,907 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23951536,894 ops/s
[info]                  ·gc.alloc.rate:                   2192,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703,534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177,597 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 23772221,551 ops/s
[info]                  ·gc.alloc.rate:                   2175,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134,453 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   23943315,781 ±(99.9%) 392537,852 ops/s [Average]
[info]   (min, avg, max) = (23772221,551, 23943315,781, 24037072,976), stdev = 101940,834
[info]   CI (99.9%): [23550777,929, 24335853,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2191,113 ±(99.9%) 35,775 MB/sec [Average]
[info]   (min, avg, max) = (2175,499, 2191,113, 2199,404), stdev = 9,291
[info]   CI (99.9%): [2155,339, 2226,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (144,000, 144,000, 144,000), stdev = 0,001
[info]   CI (99.9%): [144,000, 144,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,004 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,004, 0,007), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2158,688 ±(99.9%) 1173,018 MB/sec [Average]
[info]   (min, avg, max) = (2016,739, 2158,688, 2703,534), stdev = 304,629
[info]   CI (99.9%): [985,670, 3331,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   141,868 ±(99.9%) 76,991 B/op [Average]
[info]   (min, avg, max) = (132,181, 141,868, 177,597), stdev = 19,994
[info]   CI (99.9%): [64,877, 218,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71,29% complete, ETA 00:38:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4047291,284 ops/s
[info] # Warmup Iteration   2: 60707410,651 ops/s
[info] # Warmup Iteration   3: 64198276,276 ops/s
[info] # Warmup Iteration   4: 64064340,379 ops/s
[info] # Warmup Iteration   5: 64145288,087 ops/s
[info] Iteration   1: 64154520,298 ops/s
[info]                  ·gc.alloc.rate:                   1956,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,976 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 64064381,489 ops/s
[info]                  ·gc.alloc.rate:                   1954,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019,403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,603 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 64131978,115 ops/s
[info]                  ·gc.alloc.rate:                   1956,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,629 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 64003460,603 ops/s
[info]                  ·gc.alloc.rate:                   1952,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,818 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 63677931,766 ops/s
[info]                  ·gc.alloc.rate:                   1942,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50,140 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   64006454,454 ±(99.9%) 743112,787 ops/s [Average]
[info]   (min, avg, max) = (63677931,766, 64006454,454, 64154520,298), stdev = 192984,031
[info]   CI (99.9%): [63263341,667, 64749567,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1952,246 ±(99.9%) 22,606 MB/sec [Average]
[info]   (min, avg, max) = (1942,224, 1952,246, 1956,596), stdev = 5,871
[info]   CI (99.9%): [1929,639, 1974,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,001 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1888,190 ±(99.9%) 1171,100 MB/sec [Average]
[info]   (min, avg, max) = (1344,181, 1888,190, 2028,802), stdev = 304,131
[info]   CI (99.9%): [717,090, 3059,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   46,433 ±(99.9%) 28,979 B/op [Average]
[info]   (min, avg, max) = (32,976, 46,433, 50,140), stdev = 7,526
[info]   CI (99.9%): [17,454, 75,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71,49% complete, ETA 00:37:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6938323,605 ops/s
[info] # Warmup Iteration   2: 14828435,980 ops/s
[info] # Warmup Iteration   3: 14960965,580 ops/s
[info] # Warmup Iteration   4: 14925159,273 ops/s
[info] # Warmup Iteration   5: 14933616,576 ops/s
[info] Iteration   1: 14873002,801 ops/s
[info]                  ·gc.alloc.rate:                   2948,530 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394,003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 359,138 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 14751584,535 ops/s
[info]                  ·gc.alloc.rate:                   2924,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718,641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 290,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 14778610,213 ops/s
[info]                  ·gc.alloc.rate:                   2929,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720,603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289,705 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 14870813,401 ops/s
[info]                  ·gc.alloc.rate:                   2948,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 360,234 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 14679692,231 ops/s
[info]                  ·gc.alloc.rate:                   2910,179 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 291,948 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   14790740,636 ±(99.9%) 317478,570 ops/s [Average]
[info]   (min, avg, max) = (14679692,231, 14790740,636, 14873002,801), stdev = 82448,177
[info]   CI (99.9%): [14473262,066, 15108219,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2932,277 ±(99.9%) 62,998 MB/sec [Average]
[info]   (min, avg, max) = (2910,179, 2932,277, 2948,530), stdev = 16,360
[info]   CI (99.9%): [2869,279, 2995,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (312,000, 312,000, 312,000), stdev = 0,001
[info]   CI (99.9%): [312,000, 312,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,008 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,008, 0,011), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2992,069 ±(99.9%) 1430,415 MB/sec [Average]
[info]   (min, avg, max) = (2718,641, 2992,069, 3403,951), stdev = 371,474
[info]   CI (99.9%): [1561,654, 4422,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   318,212 ±(99.9%) 145,831 B/op [Average]
[info]   (min, avg, max) = (289,705, 318,212, 360,234), stdev = 37,872
[info]   CI (99.9%): [172,381, 464,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71,69% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40515295,098 ops/s
[info] # Warmup Iteration   2: 49406049,299 ops/s
[info] # Warmup Iteration   3: 51137086,731 ops/s
[info] # Warmup Iteration   4: 51392704,975 ops/s
[info] # Warmup Iteration   5: 51678013,487 ops/s
[info] Iteration   1: 51342663,372 ops/s
[info]                  ·gc.alloc.rate:                   1043,855 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41,245 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 51062146,420 ops/s
[info]                  ·gc.alloc.rate:                   1038,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41,393 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 47531832,213 ops/s
[info]                  ·gc.alloc.rate:                   966,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,232 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 51590771,324 ops/s
[info]                  ·gc.alloc.rate:                   1049,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,976 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 51522890,861 ops/s
[info]                  ·gc.alloc.rate:                   1047,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20,519 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   50610060,838 ±(99.9%) 6672742,361 ops/s [Average]
[info]   (min, avg, max) = (47531832,213, 50610060,838, 51590771,324), stdev = 1732890,001
[info]   CI (99.9%): [43937318,477, 57282803,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1029,034 ±(99.9%) 135,909 MB/sec [Average]
[info]   (min, avg, max) = (966,327, 1029,034, 1049,014), stdev = 35,295
[info]   CI (99.9%): [893,124, 1164,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,000, 32,000, 32,000), stdev = 0,001
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,001 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074,997 ±(99.9%) 1418,148 MB/sec [Average]
[info]   (min, avg, max) = (671,357, 1074,997, 1345,435), stdev = 368,289
[info]   CI (99.9%): [≈ 0, 2493,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   33,273 ±(99.9%) 41,890 B/op [Average]
[info]   (min, avg, max) = (20,519, 33,273, 41,393), stdev = 10,879
[info]   CI (99.9%): [≈ 0, 75,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71,89% complete, ETA 00:37:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41688754,168 ops/s
[info] # Warmup Iteration   2: 51772742,669 ops/s
[info] # Warmup Iteration   3: 57795827,706 ops/s
[info] # Warmup Iteration   4: 57799980,105 ops/s
[info] # Warmup Iteration   5: 57982738,564 ops/s
[info] Iteration   1: 57937533,847 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 58039171,198 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 57971955,703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 57305612,512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57455917,368 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   57742038,126 ±(99.9%) 1293984,151 ops/s [Average]
[info]   (min, avg, max) = (57305612,512, 57742038,126, 58039171,198), stdev = 336043,575
[info]   CI (99.9%): [56448053,975, 59036022,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72,09% complete, ETA 00:37:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47846620,473 ops/s
[info] # Warmup Iteration   2: 44825350,458 ops/s
[info] # Warmup Iteration   3: 45386330,642 ops/s
[info] # Warmup Iteration   4: 45117427,748 ops/s
[info] # Warmup Iteration   5: 45473453,619 ops/s
[info] Iteration   1: 45369677,402 ops/s
[info]                  ·gc.alloc.rate:                   2306,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2695,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93,499 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45072948,024 ops/s
[info]                  ·gc.alloc.rate:                   2291,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,712 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 45317917,641 ops/s
[info]                  ·gc.alloc.rate:                   2303,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704,486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93,919 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45396023,836 ops/s
[info]                  ·gc.alloc.rate:                   2307,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,436 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 45404647,143 ops/s
[info]                  ·gc.alloc.rate:                   2307,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70,527 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   45312242,809 ±(99.9%) 531300,792 ops/s [Average]
[info]   (min, avg, max) = (45072948,024, 45312242,809, 45404647,143), stdev = 137977,129
[info]   CI (99.9%): [44780942,017, 45843543,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2303,320 ±(99.9%) 26,349 MB/sec [Average]
[info]   (min, avg, max) = (2291,437, 2303,320, 2307,922), stdev = 6,843
[info]   CI (99.9%): [2276,971, 2329,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,002 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   2298,272 ±(99.9%) 1411,813 MB/sec [Average]
[info]   (min, avg, max) = (2025,410, 2298,272, 2704,486), stdev = 366,643
[info]   CI (99.9%): [886,459, 3710,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   79,819 ±(99.9%) 48,831 B/op [Average]
[info]   (min, avg, max) = (70,436, 79,819, 93,919), stdev = 12,681
[info]   CI (99.9%): [30,988, 128,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72,29% complete, ETA 00:36:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2005588,506 ops/s
[info] # Warmup Iteration   2: 2790389,563 ops/s
[info] # Warmup Iteration   3: 2821795,063 ops/s
[info] # Warmup Iteration   4: 2796645,838 ops/s
[info] # Warmup Iteration   5: 2815896,023 ops/s
[info] Iteration   1: 2791869,089 ops/s
[info]                  ·gc.alloc.rate:                   2284,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2685,509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1514,006 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2821234,209 ops/s
[info]                  ·gc.alloc.rate:                   2309,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1126,210 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2813391,434 ops/s
[info]                  ·gc.alloc.rate:                   2302,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1131,924 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2717178,084 ops/s
[info]                  ·gc.alloc.rate:                   2223,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703,110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1565,713 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2791003,274 ops/s
[info]                  ·gc.alloc.rate:                   2284,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1145,109 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2786935,218 ±(99.9%) 158571,066 ops/s [Average]
[info]   (min, avg, max) = (2717178,084, 2786935,218, 2821234,209), stdev = 41180,402
[info]   CI (99.9%): [2628364,152, 2945506,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2280,809 ±(99.9%) 130,017 MB/sec [Average]
[info]   (min, avg, max) = (2223,656, 2280,809, 2309,068), stdev = 33,765
[info]   CI (99.9%): [2150,792, 2410,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1288,000, 1288,000, 1288,000), stdev = 0,001
[info]   CI (99.9%): [1288,000, 1288,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,030 ±(99.9%) 0,050 B/op [Average]
[info]   (min, avg, max) = (0,012, 0,030, 0,046), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2292,383 ±(99.9%) 1413,124 MB/sec [Average]
[info]   (min, avg, max) = (2019,019, 2292,383, 2703,110), stdev = 366,984
[info]   CI (99.9%): [879,259, 3705,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1296,593 ±(99.9%) 858,416 B/op [Average]
[info]   (min, avg, max) = (1126,210, 1296,593, 1565,713), stdev = 222,928
[info]   CI (99.9%): [438,177, 2155,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72,49% complete, ETA 00:36:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10452758,233 ops/s
[info] # Warmup Iteration   2: 13277086,904 ops/s
[info] # Warmup Iteration   3: 13616503,406 ops/s
[info] # Warmup Iteration   4: 13189981,291 ops/s
[info] # Warmup Iteration   5: 13671856,758 ops/s
[info] Iteration   1: 13663599,334 ops/s
[info]                  ·gc.alloc.rate:                   2639,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232,899 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 13672316,643 ops/s
[info]                  ·gc.alloc.rate:                   2641,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 310,870 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 13445004,354 ops/s
[info]                  ·gc.alloc.rate:                   2597,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706,788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316,841 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13608710,385 ops/s
[info]                  ·gc.alloc.rate:                   2628,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711,362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 313,565 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13632799,765 ops/s
[info]                  ·gc.alloc.rate:                   2633,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715,523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 313,477 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   13604486,096 ±(99.9%) 356830,743 ops/s [Average]
[info]   (min, avg, max) = (13445004,354, 13604486,096, 13672316,643), stdev = 92667,811
[info]   CI (99.9%): [13247655,353, 13961316,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2627,869 ±(99.9%) 68,869 MB/sec [Average]
[info]   (min, avg, max) = (2597,090, 2627,869, 2641,120), stdev = 17,885
[info]   CI (99.9%): [2559,001, 2696,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,006 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,006, 0,010), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2571,258 ±(99.9%) 1182,907 MB/sec [Average]
[info]   (min, avg, max) = (2021,814, 2571,258, 2715,523), stdev = 307,197
[info]   CI (99.9%): [1388,351, 3754,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   297,530 ±(99.9%) 139,363 B/op [Average]
[info]   (min, avg, max) = (232,899, 297,530, 316,841), stdev = 36,192
[info]   CI (99.9%): [158,167, 436,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72,69% complete, ETA 00:36:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156269,673 ops/s
[info] # Warmup Iteration   2: 175696,229 ops/s
[info] # Warmup Iteration   3: 177234,767 ops/s
[info] # Warmup Iteration   4: 176992,068 ops/s
[info] # Warmup Iteration   5: 172066,295 ops/s
[info] Iteration   1: 176665,447 ops/s
[info]                  ·gc.alloc.rate:                   3240,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3378,892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30103,086 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 176663,413 ops/s
[info]                  ·gc.alloc.rate:                   3241,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387,910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30176,685 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 177185,135 ops/s
[info]                  ·gc.alloc.rate:                   3251,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30145,606 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 175702,978 ops/s
[info]                  ·gc.alloc.rate:                   3223,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399,214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30444,358 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 176655,988 ops/s
[info]                  ·gc.alloc.rate:                   3240,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720,469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24235,888 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   176574,592 ±(99.9%) 2069,379 ops/s [Average]
[info]   (min, avg, max) = (175702,978, 176574,592, 177185,135), stdev = 537,411
[info]   CI (99.9%): [174505,213, 178643,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3239,618 ±(99.9%) 38,515 MB/sec [Average]
[info]   (min, avg, max) = (3223,655, 3239,618, 3251,421), stdev = 10,002
[info]   CI (99.9%): [3201,103, 3278,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28872,002, 28872,002, 28872,002), stdev = 0,001
[info]   CI (99.9%): [28872,002, 28872,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,520 ±(99.9%) 0,786 B/op [Average]
[info]   (min, avg, max) = (0,185, 0,520, 0,746), stdev = 0,204
[info]   CI (99.9%): [≈ 0, 1,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   3256,266 ±(99.9%) 1153,724 MB/sec [Average]
[info]   (min, avg, max) = (2720,469, 3256,266, 3399,214), stdev = 299,618
[info]   CI (99.9%): [2102,543, 4409,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29021,124 ±(99.9%) 10313,421 B/op [Average]
[info]   (min, avg, max) = (24235,888, 29021,124, 30444,358), stdev = 2678,363
[info]   CI (99.9%): [18707,704, 39334,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72,89% complete, ETA 00:36:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12220,799 ops/s
[info] # Warmup Iteration   2: 24793,357 ops/s
[info] # Warmup Iteration   3: 25218,684 ops/s
[info] # Warmup Iteration   4: 25233,283 ops/s
[info] # Warmup Iteration   5: 24801,172 ops/s
[info] Iteration   1: 25376,585 ops/s
[info]                  ·gc.alloc.rate:                   1973,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125934,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 25549,318 ops/s
[info]                  ·gc.alloc.rate:                   1987,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125234,952 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 25442,830 ops/s
[info]                  ·gc.alloc.rate:                   1978,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125875,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 25352,069 ops/s
[info]                  ·gc.alloc.rate:                   1971,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126451,037 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 25446,165 ops/s
[info]                  ·gc.alloc.rate:                   1979,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84037,677 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   25433,393 ±(99.9%) 295,344 ops/s [Average]
[info]   (min, avg, max) = (25352,069, 25433,393, 25549,318), stdev = 76,700
[info]   CI (99.9%): [25138,050, 25728,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1978,091 ±(99.9%) 23,152 MB/sec [Average]
[info]   (min, avg, max) = (1971,752, 1978,091, 1987,202), stdev = 6,013
[info]   CI (99.9%): [1954,938, 2001,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122400,017 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (122400,016, 122400,017, 122400,017), stdev = 0,001
[info]   CI (99.9%): [122400,014, 122400,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,125), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4,380 ±(99.9%) 10,878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,380, 7,746), stdev = 2,825
[info]   CI (99.9%): [≈ 0, 15,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898,928 ±(99.9%) 1162,757 MB/sec [Average]
[info]   (min, avg, max) = (1358,774, 1898,928, 2037,010), stdev = 301,964
[info]   CI (99.9%): [736,171, 3061,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   117506,596 ±(99.9%) 72063,534 B/op [Average]
[info]   (min, avg, max) = (84037,677, 117506,596, 126451,037), stdev = 18714,671
[info]   CI (99.9%): [45443,062, 189570,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,09% complete, ETA 00:35:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90552,834 ops/s
[info] # Warmup Iteration   2: 136592,278 ops/s
[info] # Warmup Iteration   3: 136506,584 ops/s
[info] # Warmup Iteration   4: 136743,785 ops/s
[info] # Warmup Iteration   5: 137149,310 ops/s
[info] Iteration   1: 136517,584 ops/s
[info]                  ·gc.alloc.rate:                   1516,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23378,735 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 137026,256 ops/s
[info]                  ·gc.alloc.rate:                   1522,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15546,247 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 137121,699 ops/s
[info]                  ·gc.alloc.rate:                   1523,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15545,927 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 136052,546 ops/s
[info]                  ·gc.alloc.rate:                   1511,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15680,174 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 136129,712 ops/s
[info]                  ·gc.alloc.rate:                   1512,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15682,513 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   136569,559 ±(99.9%) 1902,953 ops/s [Average]
[info]   (min, avg, max) = (136052,546, 136569,559, 137121,699), stdev = 494,191
[info]   CI (99.9%): [134666,606, 138472,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1517,537 ±(99.9%) 21,055 MB/sec [Average]
[info]   (min, avg, max) = (1511,780, 1517,537, 1523,760), stdev = 5,468
[info]   CI (99.9%): [1496,482, 1538,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17488,003, 17488,003, 17488,003), stdev = 0,001
[info]   CI (99.9%): [17488,003, 17488,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,527 ±(99.9%) 0,767 B/op [Average]
[info]   (min, avg, max) = (0,240, 0,527, 0,717), stdev = 0,199
[info]   CI (99.9%): [≈ 0, 1,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1489,591 ±(99.9%) 1158,893 MB/sec [Average]
[info]   (min, avg, max) = (1353,409, 1489,591, 2027,962), stdev = 300,961
[info]   CI (99.9%): [330,698, 2648,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17166,719 ±(99.9%) 13374,368 B/op [Average]
[info]   (min, avg, max) = (15545,927, 17166,719, 23378,735), stdev = 3473,281
[info]   CI (99.9%): [3792,351, 30541,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,29% complete, ETA 00:35:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520782,202 ops/s
[info] # Warmup Iteration   2: 539531,546 ops/s
[info] # Warmup Iteration   3: 545491,784 ops/s
[info] # Warmup Iteration   4: 551285,163 ops/s
[info] # Warmup Iteration   5: 553147,187 ops/s
[info] Iteration   1: 553660,382 ops/s
[info]                  ·gc.alloc.rate:                   1145,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3821,211 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 545782,551 ops/s
[info]                  ·gc.alloc.rate:                   1129,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3872,708 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 551563,583 ops/s
[info]                  ·gc.alloc.rate:                   1141,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3832,684 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 554015,186 ops/s
[info]                  ·gc.alloc.rate:                   1146,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1908,339 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 550841,104 ops/s
[info]                  ·gc.alloc.rate:                   1139,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3840,568 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   551172,561 ±(99.9%) 12710,733 ops/s [Average]
[info]   (min, avg, max) = (545782,551, 551172,561, 554015,186), stdev = 3300,937
[info]   CI (99.9%): [538461,828, 563883,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1140,322 ±(99.9%) 25,926 MB/sec [Average]
[info]   (min, avg, max) = (1129,339, 1140,322, 1146,204), stdev = 6,733
[info]   CI (99.9%): [1114,397, 1166,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3256,001, 3256,001, 3256,001), stdev = 0,001
[info]   CI (99.9%): [3256,001, 3256,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,104), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,179 ±(99.9%) 0,428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,179, 0,297), stdev = 0,111
[info]   CI (99.9%): [≈ 0, 0,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1209,326 ±(99.9%) 1157,089 MB/sec [Average]
[info]   (min, avg, max) = (671,789, 1209,326, 1344,208), stdev = 300,492
[info]   CI (99.9%): [52,237, 2366,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3455,102 ±(99.9%) 3330,339 B/op [Average]
[info]   (min, avg, max) = (1908,339, 3455,102, 3872,708), stdev = 864,878
[info]   CI (99.9%): [124,763, 6785,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73,49% complete, ETA 00:35:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 556228,167 ops/s
[info] # Warmup Iteration   2: 593416,343 ops/s
[info] # Warmup Iteration   3: 591354,847 ops/s
[info] # Warmup Iteration   4: 593887,565 ops/s
[info] # Warmup Iteration   5: 594942,289 ops/s
[info] Iteration   1: 594591,258 ops/s
[info]                  ·gc.alloc.rate:                   580,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1354,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 594538,285 ops/s
[info]                  ·gc.alloc.rate:                   580,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1786,333 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 588947,219 ops/s
[info]                  ·gc.alloc.rate:                   574,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1803,197 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 591760,107 ops/s
[info]                  ·gc.alloc.rate:                   577,536 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1789,321 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 593786,150 ops/s
[info]                  ·gc.alloc.rate:                   579,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1783,136 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   592724,604 ±(99.9%) 9253,492 ops/s [Average]
[info]   (min, avg, max) = (588947,219, 592724,604, 594591,258), stdev = 2403,103
[info]   CI (99.9%): [583471,112, 601978,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   578,485 ±(99.9%) 9,024 MB/sec [Average]
[info]   (min, avg, max) = (574,802, 578,485, 580,302), stdev = 2,344
[info]   CI (99.9%): [569,461, 587,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1536,001, 1536,001, 1536,001), stdev = 0,001
[info]   CI (99.9%): [1536,001, 1536,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,677 ±(99.9%) 5,586 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,677, 3,272), stdev = 1,451
[info]   CI (99.9%): [≈ 0, 6,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1,792 ±(99.9%) 14,784 B/op [Average]
[info]   (min, avg, max) = (0,055, 1,792, 8,660), stdev = 3,839
[info]   CI (99.9%): [≈ 0, 16,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   641,351 ±(99.9%) 279,524 MB/sec [Average]
[info]   (min, avg, max) = (511,508, 641,351, 674,878), stdev = 72,592
[info]   CI (99.9%): [361,827, 920,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1703,209 ±(99.9%) 752,154 B/op [Average]
[info]   (min, avg, max) = (1354,057, 1703,209, 1803,197), stdev = 195,332
[info]   CI (99.9%): [951,055, 2455,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73,69% complete, ETA 00:34:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39838,622 ops/s
[info] # Warmup Iteration   2: 63392,206 ops/s
[info] # Warmup Iteration   3: 64132,001 ops/s
[info] # Warmup Iteration   4: 64533,519 ops/s
[info] # Warmup Iteration   5: 64229,985 ops/s
[info] Iteration   1: 64203,799 ops/s
[info]                  ·gc.alloc.rate:                   1404,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49705,141 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 63466,957 ops/s
[info]                  ·gc.alloc.rate:                   1388,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33549,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 64258,809 ops/s
[info]                  ·gc.alloc.rate:                   1405,609 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33167,193 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 61680,477 ops/s
[info]                  ·gc.alloc.rate:                   1349,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34570,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 64418,300 ops/s
[info]                  ·gc.alloc.rate:                   1409,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33133,654 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   63605,668 ±(99.9%) 4377,864 ops/s [Average]
[info]   (min, avg, max) = (61680,477, 63605,668, 64418,300), stdev = 1136,917
[info]   CI (99.9%): [59227,805, 67983,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1391,253 ±(99.9%) 96,022 MB/sec [Average]
[info]   (min, avg, max) = (1349,040, 1391,253, 1409,039), stdev = 24,937
[info]   CI (99.9%): [1295,231, 1487,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34424,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (34424,006, 34424,007, 34424,007), stdev = 0,001
[info]   CI (99.9%): [34424,005, 34424,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,833 ±(99.9%) 3,404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,833, 2,125), stdev = 0,884
[info]   CI (99.9%): [≈ 0, 4,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489,201 ±(99.9%) 1159,504 MB/sec [Average]
[info]   (min, avg, max) = (1352,871, 1489,201, 2027,856), stdev = 301,119
[info]   CI (99.9%): [329,697, 2648,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36825,025 ±(99.9%) 27815,418 B/op [Average]
[info]   (min, avg, max) = (33133,654, 36825,025, 49705,141), stdev = 7223,576
[info]   CI (99.9%): [9009,606, 64640,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73,90% complete, ETA 00:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 376629,480 ops/s
[info] # Warmup Iteration   2: 431066,856 ops/s
[info] # Warmup Iteration   3: 431140,641 ops/s
[info] # Warmup Iteration   4: 430670,497 ops/s
[info] # Warmup Iteration   5: 434053,069 ops/s
[info] Iteration   1: 435131,355 ops/s
[info]                  ·gc.alloc.rate:                   2952,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3374,748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12207,060 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 435056,379 ops/s
[info]                  ·gc.alloc.rate:                   2952,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706,986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9791,262 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 426615,185 ops/s
[info]                  ·gc.alloc.rate:                   2895,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711,177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10001,487 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 430894,828 ops/s
[info]                  ·gc.alloc.rate:                   2924,220 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394,943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12399,200 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 433119,957 ops/s
[info]                  ·gc.alloc.rate:                   2939,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9880,193 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   432163,541 ±(99.9%) 13679,958 ops/s [Average]
[info]   (min, avg, max) = (426615,185, 432163,541, 435131,355), stdev = 3552,642
[info]   CI (99.9%): [418483,583, 445843,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2932,791 ±(99.9%) 92,823 MB/sec [Average]
[info]   (min, avg, max) = (2895,107, 2932,791, 2952,696), stdev = 24,106
[info]   CI (99.9%): [2839,968, 3025,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10680,001, 10680,001, 10680,001), stdev = 0,001
[info]   CI (99.9%): [10680,001, 10680,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,242 ±(99.9%) 0,241 B/op [Average]
[info]   (min, avg, max) = (0,154, 0,242, 0,304), stdev = 0,063
[info]   CI (99.9%): [0,001, 0,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2981,416 ±(99.9%) 1418,478 MB/sec [Average]
[info]   (min, avg, max) = (2706,986, 2981,416, 3394,943), stdev = 368,374
[info]   CI (99.9%): [1562,938, 4399,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10855,840 ±(99.9%) 5102,245 B/op [Average]
[info]   (min, avg, max) = (9791,262, 10855,840, 12399,200), stdev = 1325,037
[info]   CI (99.9%): [5753,596, 15958,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,10% complete, ETA 00:34:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236001,967 ops/s
[info] # Warmup Iteration   2: 350455,863 ops/s
[info] # Warmup Iteration   3: 356062,939 ops/s
[info] # Warmup Iteration   4: 356268,359 ops/s
[info] # Warmup Iteration   5: 350253,001 ops/s
[info] Iteration   1: 355342,921 ops/s
[info]                  ·gc.alloc.rate:                   941,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5977,196 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 358359,226 ops/s
[info]                  ·gc.alloc.rate:                   949,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2966,327 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 357666,509 ops/s
[info]                  ·gc.alloc.rate:                   947,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5947,110 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 358041,168 ops/s
[info]                  ·gc.alloc.rate:                   948,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2971,914 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 356841,508 ops/s
[info]                  ·gc.alloc.rate:                   944,973 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2983,316 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   357250,266 ±(99.9%) 4650,211 ops/s [Average]
[info]   (min, avg, max) = (355342,921, 357250,266, 358359,226), stdev = 1207,645
[info]   CI (99.9%): [352600,055, 361900,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   946,108 ±(99.9%) 12,375 MB/sec [Average]
[info]   (min, avg, max) = (941,046, 946,108, 949,035), stdev = 3,214
[info]   CI (99.9%): [933,733, 958,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4168,001, 4168,001, 4168,001), stdev = 0,001
[info]   CI (99.9%): [4168,001, 4168,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,165 ±(99.9%) 0,880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,165, 0,458), stdev = 0,229
[info]   CI (99.9%): [≈ 0, 1,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   945,805 ±(99.9%) 1422,749 MB/sec [Average]
[info]   (min, avg, max) = (675,419, 945,805, 1351,583), stdev = 369,484
[info]   CI (99.9%): [≈ 0, 2368,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4169,172 ±(99.9%) 6302,756 B/op [Average]
[info]   (min, avg, max) = (2966,327, 4169,172, 5977,196), stdev = 1636,806
[info]   CI (99.9%): [≈ 0, 10471,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,30% complete, ETA 00:34:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1210861,125 ops/s
[info] # Warmup Iteration   2: 1340148,002 ops/s
[info] # Warmup Iteration   3: 1349483,384 ops/s
[info] # Warmup Iteration   4: 1344385,971 ops/s
[info] # Warmup Iteration   5: 1311107,343 ops/s
[info] Iteration   1: 1345803,081 ops/s
[info]                  ·gc.alloc.rate:                   2626,586 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696,355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3153,600 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1343720,821 ops/s
[info]                  ·gc.alloc.rate:                   2623,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3165,391 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1339943,015 ops/s
[info]                  ·gc.alloc.rate:                   2615,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708,421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3180,867 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1341930,750 ops/s
[info]                  ·gc.alloc.rate:                   2619,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3181,068 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1345976,510 ops/s
[info]                  ·gc.alloc.rate:                   2627,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2381,771 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1343474,836 ±(99.9%) 9929,430 ops/s [Average]
[info]   (min, avg, max) = (1339943,015, 1343474,836, 1345976,510), stdev = 2578,641
[info]   CI (99.9%): [1333545,406, 1353404,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2622,478 ±(99.9%) 18,928 MB/sec [Average]
[info]   (min, avg, max) = (2615,724, 2622,478, 2627,399), stdev = 4,916
[info]   CI (99.9%): [2603,550, 2641,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,000, 3072,000, 3072,000), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,063 ±(99.9%) 0,142 B/op [Average]
[info]   (min, avg, max) = (0,024, 0,063, 0,122), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2571,454 ±(99.9%) 1150,546 MB/sec [Average]
[info]   (min, avg, max) = (2037,065, 2571,454, 2712,424), stdev = 298,793
[info]   CI (99.9%): [1420,908, 3722,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3012,539 ±(99.9%) 1358,500 B/op [Average]
[info]   (min, avg, max) = (2381,771, 3012,539, 3181,068), stdev = 352,798
[info]   CI (99.9%): [1654,039, 4371,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74,50% complete, ETA 00:33:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86209,314 ops/s
[info] # Warmup Iteration   2: 121604,848 ops/s
[info] # Warmup Iteration   3: 122145,588 ops/s
[info] # Warmup Iteration   4: 121876,356 ops/s
[info] # Warmup Iteration   5: 122207,884 ops/s
[info] Iteration   1: 122704,477 ops/s
[info]                  ·gc.alloc.rate:                   4442,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4079,452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52323,282 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 121832,201 ops/s
[info]                  ·gc.alloc.rate:                   4411,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4764,744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61550,350 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 122439,609 ops/s
[info]                  ·gc.alloc.rate:                   4433,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4086,402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52522,131 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 121602,171 ops/s
[info]                  ·gc.alloc.rate:                   4403,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4770,383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61733,680 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 121927,458 ops/s
[info]                  ·gc.alloc.rate:                   4414,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52774,006 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   122101,183 ±(99.9%) 1754,095 ops/s [Average]
[info]   (min, avg, max) = (121602,171, 122101,183, 122704,477), stdev = 455,533
[info]   CI (99.9%): [120347,088, 123855,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4421,128 ±(99.9%) 63,292 MB/sec [Average]
[info]   (min, avg, max) = (4403,358, 4421,128, 4442,832), stdev = 16,437
[info]   CI (99.9%): [4357,836, 4484,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56984,003, 56984,003, 56984,004), stdev = 0,001
[info]   CI (99.9%): [56984,003, 56984,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,913 ±(99.9%) 1,185 B/op [Average]
[info]   (min, avg, max) = (0,537, 0,913, 1,345), stdev = 0,308
[info]   CI (99.9%): [≈ 0, 2,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   4357,894 ±(99.9%) 1440,123 MB/sec [Average]
[info]   (min, avg, max) = (4079,452, 4357,894, 4770,383), stdev = 373,995
[info]   CI (99.9%): [2917,772, 5798,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56180,690 ±(99.9%) 19208,799 B/op [Average]
[info]   (min, avg, max) = (52323,282, 56180,690, 61733,680), stdev = 4988,464
[info]   CI (99.9%): [36971,891, 75389,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74,70% complete, ETA 00:33:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569388,480 ops/s
[info] # Warmup Iteration   2: 633861,913 ops/s
[info] # Warmup Iteration   3: 634584,647 ops/s
[info] # Warmup Iteration   4: 633938,484 ops/s
[info] # Warmup Iteration   5: 635106,371 ops/s
[info] Iteration   1: 635722,480 ops/s
[info]                  ·gc.alloc.rate:                   2775,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6678,744 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 636009,567 ops/s
[info]                  ·gc.alloc.rate:                   2777,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704,630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6691,800 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 634940,326 ops/s
[info]                  ·gc.alloc.rate:                   2772,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387,227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8395,794 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 640390,341 ops/s
[info]                  ·gc.alloc.rate:                   2796,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714,386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6670,851 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 636786,639 ops/s
[info]                  ·gc.alloc.rate:                   2780,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717,887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6716,955 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   636769,871 ±(99.9%) 8197,986 ops/s [Average]
[info]   (min, avg, max) = (634940,326, 636769,871, 640390,341), stdev = 2128,991
[info]   CI (99.9%): [628571,885, 644967,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2780,475 ±(99.9%) 35,784 MB/sec [Average]
[info]   (min, avg, max) = (2772,463, 2780,475, 2796,234), stdev = 9,293
[info]   CI (99.9%): [2744,691, 2816,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   6872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6872,001, 6872,001, 6872,001), stdev = 0,001
[info]   CI (99.9%): [6872,001, 6872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,124 ±(99.9%) 0,109 B/op [Average]
[info]   (min, avg, max) = (0,102, 0,124, 0,155), stdev = 0,028
[info]   CI (99.9%): [0,014, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2844,334 ±(99.9%) 1169,027 MB/sec [Average]
[info]   (min, avg, max) = (2697,540, 2844,334, 3387,227), stdev = 303,593
[info]   CI (99.9%): [1675,307, 4013,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7030,829 ±(99.9%) 2938,960 B/op [Average]
[info]   (min, avg, max) = (6670,851, 7030,829, 8395,794), stdev = 763,239
[info]   CI (99.9%): [4091,869, 9969,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74,90% complete, ETA 00:33:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300694,233 ops/s
[info] # Warmup Iteration   2: 362451,307 ops/s
[info] # Warmup Iteration   3: 356967,031 ops/s
[info] # Warmup Iteration   4: 356054,190 ops/s
[info] # Warmup Iteration   5: 357979,215 ops/s
[info] Iteration   1: 356626,174 ops/s
[info]                  ·gc.alloc.rate:                   543,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2257,632 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 355763,269 ops/s
[info]                  ·gc.alloc.rate:                   542,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2982,132 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 358699,992 ops/s
[info]                  ·gc.alloc.rate:      547,034 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 356325,032 ops/s
[info]                  ·gc.alloc.rate:                   543,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2977,413 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 358448,401 ops/s
[info]                  ·gc.alloc.rate:                   546,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2951,132 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   357172,574 ±(99.9%) 5080,720 ops/s [Average]
[info]   (min, avg, max) = (355763,269, 357172,574, 358699,992), stdev = 1319,447
[info]   CI (99.9%): [352091,854, 362253,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   544,653 ±(99.9%) 7,863 MB/sec [Average]
[info]   (min, avg, max) = (542,483, 544,653, 547,034), stdev = 2,042
[info]   CI (99.9%): [536,790, 552,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2400,001, 2400,001, 2400,001), stdev = 0,001
[info]   CI (99.9%): [2400,001, 2400,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,711 ±(99.9%) 6,037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,711, 3,516), stdev = 1,568
[info]   CI (99.9%): [≈ 0, 6,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,148 ±(99.9%) 26,707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,148, 15,554), stdev = 6,936
[info]   CI (99.9%): [≈ 0, 29,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   506,362 ±(99.9%) 1122,928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,362, 674,097), stdev = 291,621
[info]   CI (99.9%): [≈ 0, 1629,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2233,662 ±(99.9%) 4952,966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2233,662, 2982,132), stdev = 1286,269
[info]   CI (99.9%): [≈ 0, 7186,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,10% complete, ETA 00:33:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 550585,538 ops/s
[info] # Warmup Iteration   2: 792362,099 ops/s
[info] # Warmup Iteration   3: 793402,502 ops/s
[info] # Warmup Iteration   4: 794491,550 ops/s
[info] # Warmup Iteration   5: 792802,299 ops/s
[info] Iteration   1: 795405,104 ops/s
[info]                  ·gc.alloc.rate:                   582,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1333,198 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 784443,260 ops/s
[info]                  ·gc.alloc.rate:                   574,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1351,847 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 795708,442 ops/s
[info]                  ·gc.alloc.rate:      582,470 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 795900,220 ops/s
[info]                  ·gc.alloc.rate:                   582,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1333,614 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 796981,472 ops/s
[info]                  ·gc.alloc.rate:                   583,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1331,822 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   793687,700 ±(99.9%) 20030,449 ops/s [Average]
[info]   (min, avg, max) = (784443,260, 793687,700, 796981,472), stdev = 5201,844
[info]   CI (99.9%): [773657,251, 813718,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   580,964 ±(99.9%) 14,589 MB/sec [Average]
[info]   (min, avg, max) = (574,234, 580,964, 583,366), stdev = 3,789
[info]   CI (99.9%): [566,376, 595,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1152,001, 1152,001, 1152,001), stdev = 0,001
[info]   CI (99.9%): [1152,000, 1152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,291), stdev = 0,126
[info]   CI (99.9%): [≈ 0, 0,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,132 ±(99.9%) 0,961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,132, 0,577), stdev = 0,249
[info]   CI (99.9%): [≈ 0, 1,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539,288 ±(99.9%) 1160,859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,288, 674,439), stdev = 301,471
[info]   CI (99.9%): [≈ 0, 1700,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1070,096 ±(99.9%) 2303,681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1070,096, 1351,847), stdev = 598,259
[info]   CI (99.9%): [≈ 0, 3373,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,30% complete, ETA 00:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2194066,169 ops/s
[info] # Warmup Iteration   2: 2454747,127 ops/s
[info] # Warmup Iteration   3: 2183324,467 ops/s
[info] # Warmup Iteration   4: 2188945,221 ops/s
[info] # Warmup Iteration   5: 2162197,521 ops/s
[info] Iteration   1: 2194094,429 ops/s
[info]                  ·gc.alloc.rate:                   1014,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482,585 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2190455,452 ops/s
[info]                  ·gc.alloc.rate:                   1013,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964,920 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2169839,426 ops/s
[info]                  ·gc.alloc.rate:                   1003,677 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487,022 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2184870,009 ops/s
[info]                  ·gc.alloc.rate:                   1010,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 967,584 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2178030,108 ops/s
[info]                  ·gc.alloc.rate:                   1007,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485,417 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2183457,885 ±(99.9%) 37482,972 ops/s [Average]
[info]   (min, avg, max) = (2169839,426, 2183457,885, 2194094,429), stdev = 9734,209
[info]   CI (99.9%): [2145974,913, 2220940,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1009,962 ±(99.9%) 17,249 MB/sec [Average]
[info]   (min, avg, max) = (1003,677, 1009,962, 1014,764), stdev = 4,479
[info]   CI (99.9%): [992,713, 1027,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,015 ±(99.9%) 0,082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,045), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940,429 ±(99.9%) 1415,567 MB/sec [Average]
[info]   (min, avg, max) = (671,446, 940,429, 1343,237), stdev = 367,618
[info]   CI (99.9%): [≈ 0, 2355,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   677,505 ±(99.9%) 1015,010 B/op [Average]
[info]   (min, avg, max) = (482,585, 677,505, 967,584), stdev = 263,595
[info]   CI (99.9%): [≈ 0, 1692,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75,50% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2493304,464 ops/s
[info] # Warmup Iteration   2: 2637301,201 ops/s
[info] # Warmup Iteration   3: 2351563,696 ops/s
[info] # Warmup Iteration   4: 2501071,522 ops/s
[info] # Warmup Iteration   5: 2605439,724 ops/s
[info] Iteration   1: 2603048,848 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2611665,750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2606592,551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2607232,363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2602098,392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2606127,581 ±(99.9%) 14640,173 ops/s [Average]
[info]   (min, avg, max) = (2602098,392, 2606127,581, 2611665,750), stdev = 3802,007
[info]   CI (99.9%): [2591487,407, 2620767,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75,70% complete, ETA 00:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 363630,923 ops/s
[info] # Warmup Iteration   2: 428325,561 ops/s
[info] # Warmup Iteration   3: 422963,611 ops/s
[info] # Warmup Iteration   4: 426106,532 ops/s
[info] # Warmup Iteration   5: 426410,877 ops/s
[info] Iteration   1: 426757,915 ops/s
[info]                  ·gc.alloc.rate:      613,892 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 426694,083 ops/s
[info]                  ·gc.alloc.rate:                   613,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2483,892 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 428190,947 ops/s
[info]                  ·gc.alloc.rate:                   615,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2475,147 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 427434,096 ops/s
[info]                  ·gc.alloc.rate:                   614,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2469,794 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 428603,011 ops/s
[info]                  ·gc.alloc.rate:                   616,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2463,036 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   427536,010 ±(99.9%) 3274,232 ops/s [Average]
[info]   (min, avg, max) = (426694,083, 427536,010, 428603,011), stdev = 850,308
[info]   CI (99.9%): [424261,779, 430810,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   615,019 ±(99.9%) 4,749 MB/sec [Average]
[info]   (min, avg, max) = (613,793, 615,019, 616,556), stdev = 1,233
[info]   CI (99.9%): [610,270, 619,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,824 ±(99.9%) 6,914 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,824, 4,035), stdev = 1,795
[info]   CI (99.9%): [≈ 0, 7,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3,038 ±(99.9%) 25,502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,038, 14,884), stdev = 6,623
[info]   CI (99.9%): [≈ 0, 28,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   537,672 ±(99.9%) 1157,390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,672, 673,429), stdev = 300,571
[info]   CI (99.9%): [≈ 0, 1695,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1978,374 ±(99.9%) 4258,700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1978,374, 2483,892), stdev = 1105,971
[info]   CI (99.9%): [≈ 0, 6237,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75,90% complete, ETA 00:32:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187192,642 ops/s
[info] # Warmup Iteration   2: 196023,878 ops/s
[info] # Warmup Iteration   3: 196106,638 ops/s
[info] # Warmup Iteration   4: 195975,423 ops/s
[info] # Warmup Iteration   5: 196543,373 ops/s
[info] Iteration   1: 196687,767 ops/s
[info]                  ·gc.alloc.rate:      501,868 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 196821,552 ops/s
[info]                  ·gc.alloc.rate:                   502,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4090,653 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 197157,394 ops/s
[info]                  ·gc.alloc.rate:                   503,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5386,420 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 195960,223 ops/s
[info]                  ·gc.alloc.rate:                   500,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5419,371 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 198600,312 ops/s
[info]                  ·gc.alloc.rate:      506,789 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   197045,450 ±(99.9%) 3746,180 ops/s [Average]
[info]   (min, avg, max) = (195960,223, 197045,450, 198600,312), stdev = 972,871
[info]   CI (99.9%): [193299,270, 200791,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   502,811 ±(99.9%) 9,572 MB/sec [Average]
[info]   (min, avg, max) = (500,053, 502,811, 506,789), stdev = 2,486
[info]   CI (99.9%): [493,240, 512,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,666 ±(99.9%) 5,621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 3,277), stdev = 1,460
[info]   CI (99.9%): [≈ 0, 6,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5,315 ±(99.9%) 44,870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,315, 26,159), stdev = 11,653
[info]   CI (99.9%): [≈ 0, 50,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   372,231 ±(99.9%) 1333,357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,231, 674,794), stdev = 346,269
[info]   CI (99.9%): [≈ 0, 1705,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2979,289 ±(99.9%) 10673,950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2979,289, 5419,371), stdev = 2771,991
[info]   CI (99.9%): [≈ 0, 13653,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76,10% complete, ETA 00:31:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55052,572 ops/s
[info] # Warmup Iteration   2: 65319,270 ops/s
[info] # Warmup Iteration   3: 65451,925 ops/s
[info] # Warmup Iteration   4: 65804,080 ops/s
[info] # Warmup Iteration   5: 66148,448 ops/s
[info] Iteration   1: 66126,692 ops/s
[info]                  ·gc.alloc.rate:                   2227,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48020,694 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 65424,048 ops/s
[info]                  ·gc.alloc.rate:                   2204,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696,524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64854,919 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 66098,236 ops/s
[info]                  ·gc.alloc.rate:                   2226,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48238,556 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 66043,057 ops/s
[info]                  ·gc.alloc.rate:                   2224,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48344,408 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 65838,638 ops/s
[info]                  ·gc.alloc.rate:                   2217,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48573,788 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   65906,134 ±(99.9%) 1124,724 ops/s [Average]
[info]   (min, avg, max) = (65424,048, 65906,134, 66126,692), stdev = 292,087
[info]   CI (99.9%): [64781,410, 67030,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2220,181 ±(99.9%) 37,097 MB/sec [Average]
[info]   (min, avg, max) = (2204,289, 2220,181, 2227,425), stdev = 9,634
[info]   CI (99.9%): [2183,084, 2257,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53016,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (53016,006, 53016,006, 53016,007), stdev = 0,001
[info]   CI (99.9%): [53016,005, 53016,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,095 ±(99.9%) 2,105 B/op [Average]
[info]   (min, avg, max) = (0,496, 1,095, 1,502), stdev = 0,547
[info]   CI (99.9%): [≈ 0, 3,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2160,150 ±(99.9%) 1154,772 MB/sec [Average]
[info]   (min, avg, max) = (2017,551, 2160,150, 2696,524), stdev = 299,891
[info]   CI (99.9%): [1005,378, 3314,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   51606,473 ±(99.9%) 28528,584 B/op [Average]
[info]   (min, avg, max) = (48020,694, 51606,473, 64854,919), stdev = 7408,783
[info]   CI (99.9%): [23077,889, 80135,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,31% complete, ETA 00:31:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62064,102 ops/s
[info] # Warmup Iteration   2: 98380,516 ops/s
[info] # Warmup Iteration   3: 99637,011 ops/s
[info] # Warmup Iteration   4: 99326,997 ops/s
[info] # Warmup Iteration   5: 99453,657 ops/s
[info] Iteration   1: 98449,594 ops/s
[info]                  ·gc.alloc.rate:                   1770,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32452,856 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 99452,593 ops/s
[info]                  ·gc.alloc.rate:                   1788,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21435,113 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 99248,254 ops/s
[info]                  ·gc.alloc.rate:                   1785,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32247,789 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 99124,610 ops/s
[info]                  ·gc.alloc.rate:                   1782,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32318,870 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 99132,064 ops/s
[info]                  ·gc.alloc.rate:                   1782,876 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358,279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21563,322 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   99081,423 ±(99.9%) 1452,614 ops/s [Average]
[info]   (min, avg, max) = (98449,594, 99081,423, 99452,593), stdev = 377,239
[info]   CI (99.9%): [97628,809, 100534,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1781,944 ±(99.9%) 26,167 MB/sec [Average]
[info]   (min, avg, max) = (1770,498, 1781,944, 1788,464), stdev = 6,796
[info]   CI (99.9%): [1755,777, 1808,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28304,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28304,004, 28304,004, 28304,004), stdev = 0,001
[info]   CI (99.9%): [28304,004, 28304,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,529 ±(99.9%) 0,693 B/op [Average]
[info]   (min, avg, max) = (0,330, 0,529, 0,661), stdev = 0,180
[info]   CI (99.9%): [≈ 0, 1,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1762,446 ±(99.9%) 1427,494 MB/sec [Average]
[info]   (min, avg, max) = (1354,435, 1762,446, 2035,757), stdev = 370,716
[info]   CI (99.9%): [334,953, 3189,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28003,590 ±(99.9%) 22866,210 B/op [Average]
[info]   (min, avg, max) = (21435,113, 28003,590, 32452,856), stdev = 5938,282
[info]   CI (99.9%): [5137,380, 50869,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,51% complete, ETA 00:31:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85886,199 ops/s
[info] # Warmup Iteration   2: 92713,170 ops/s
[info] # Warmup Iteration   3: 93237,149 ops/s
[info] # Warmup Iteration   4: 93395,493 ops/s
[info] # Warmup Iteration   5: 93346,843 ops/s
[info] Iteration   1: 93347,974 ops/s
[info]                  ·gc.alloc.rate:                   1431,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22642,772 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 93354,265 ops/s
[info]                  ·gc.alloc.rate:                   1431,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22652,548 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 93420,312 ops/s
[info]                  ·gc.alloc.rate:                   1432,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22645,345 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 93344,429 ops/s
[info]                  ·gc.alloc.rate:                   1431,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22686,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 93293,474 ops/s
[info]                  ·gc.alloc.rate:                   1430,817 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22731,619 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   93352,091 ±(99.9%) 174,031 ops/s [Average]
[info]   (min, avg, max) = (93293,474, 93352,091, 93420,312), stdev = 45,195
[info]   CI (99.9%): [93178,060, 93526,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1431,732 ±(99.9%) 2,710 MB/sec [Average]
[info]   (min, avg, max) = (1430,817, 1431,732, 1432,770), stdev = 0,704
[info]   CI (99.9%): [1429,022, 1434,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24136,004, 24136,005, 24136,005), stdev = 0,001
[info]   CI (99.9%): [24136,004, 24136,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,842 ±(99.9%) 1,541 B/op [Average]
[info]   (min, avg, max) = (0,351, 0,842, 1,404), stdev = 0,400
[info]   CI (99.9%): [≈ 0, 2,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344,870 ±(99.9%) 6,779 MB/sec [Average]
[info]   (min, avg, max) = (1343,046, 1344,870, 1347,563), stdev = 1,761
[info]   CI (99.9%): [1338,090, 1351,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22671,705 ±(99.9%) 145,358 B/op [Average]
[info]   (min, avg, max) = (22642,772, 22671,705, 22731,619), stdev = 37,749
[info]   CI (99.9%): [22526,347, 22817,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76,71% complete, ETA 00:30:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10788,651 ops/s
[info] # Warmup Iteration   2: 19424,005 ops/s
[info] # Warmup Iteration   3: 19571,677 ops/s
[info] # Warmup Iteration   4: 19449,751 ops/s
[info] # Warmup Iteration   5: 19393,216 ops/s
[info] Iteration   1: 19380,749 ops/s
[info]                  ·gc.alloc.rate:                   1350,879 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109693,187 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19598,408 ops/s
[info]                  ·gc.alloc.rate:                   1365,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108596,974 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19645,181 ops/s
[info]                  ·gc.alloc.rate:                   1369,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108411,733 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 19591,981 ops/s
[info]                  ·gc.alloc.rate:                   1365,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108785,212 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19639,728 ops/s
[info]                  ·gc.alloc.rate:                   1368,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108626,154 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   19571,209 ±(99.9%) 420,113 ops/s [Average]
[info]   (min, avg, max) = (19380,749, 19571,209, 19645,181), stdev = 109,102
[info]   CI (99.9%): [19151,096, 19991,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1364,135 ±(99.9%) 29,251 MB/sec [Average]
[info]   (min, avg, max) = (1350,879, 1364,135, 1369,285), stdev = 7,596
[info]   CI (99.9%): [1334,884, 1393,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109696,023 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (109696,021, 109696,023, 109696,026), stdev = 0,002
[info]   CI (99.9%): [109696,014, 109696,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,004 ±(99.9%) 8,377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,004, 5,003), stdev = 2,175
[info]   CI (99.9%): [≈ 0, 10,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353,247 ±(99.9%) 7,022 MB/sec [Average]
[info]   (min, avg, max) = (1350,844, 1353,247, 1355,586), stdev = 1,824
[info]   CI (99.9%): [1346,225, 1360,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   108822,652 ±(99.9%) 1942,220 B/op [Average]
[info]   (min, avg, max) = (108411,733, 108822,652, 109693,187), stdev = 504,388
[info]   CI (99.9%): [106880,432, 110764,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,91% complete, ETA 00:30:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112703,808 ops/s
[info] # Warmup Iteration   2: 175813,274 ops/s
[info] # Warmup Iteration   3: 161857,107 ops/s
[info] # Warmup Iteration   4: 176472,395 ops/s
[info] # Warmup Iteration   5: 170180,952 ops/s
[info] Iteration   1: 170066,420 ops/s
[info]                  ·gc.alloc.rate:                   1257,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6250,807 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 170245,175 ops/s
[info]                  ·gc.alloc.rate:                   1259,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12495,144 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 169205,502 ops/s
[info]                  ·gc.alloc.rate:                   1251,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12583,284 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 169587,500 ops/s
[info]                  ·gc.alloc.rate:                   1254,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12561,498 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 169765,291 ops/s
[info]                  ·gc.alloc.rate:                   1255,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12560,311 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   169773,978 ±(99.9%) 1570,718 ops/s [Average]
[info]   (min, avg, max) = (169205,502, 169773,978, 170245,175), stdev = 407,910
[info]   CI (99.9%): [168203,260, 171344,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1255,647 ±(99.9%) 11,378 MB/sec [Average]
[info]   (min, avg, max) = (1251,552, 1255,647, 1259,147), stdev = 2,955
[info]   CI (99.9%): [1244,269, 1267,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11640,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11640,002, 11640,002, 11640,003), stdev = 0,001
[info]   CI (99.9%): [11640,002, 11640,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,347 ±(99.9%) 1,329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,347, 0,773), stdev = 0,345
[info]   CI (99.9%): [≈ 0, 1,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217,691 ±(99.9%) 1167,399 MB/sec [Average]
[info]   (min, avg, max) = (675,369, 1217,691, 1354,902), stdev = 303,170
[info]   CI (99.9%): [50,292, 2385,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11290,209 ±(99.9%) 10848,436 B/op [Average]
[info]   (min, avg, max) = (6250,807, 11290,209, 12583,284), stdev = 2817,304
[info]   CI (99.9%): [441,773, 22138,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77,11% complete, ETA 00:30:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 522867,367 ops/s
[info] # Warmup Iteration   2: 536070,057 ops/s
[info] # Warmup Iteration   3: 536814,244 ops/s
[info] # Warmup Iteration   4: 561209,772 ops/s
[info] # Warmup Iteration   5: 560405,344 ops/s
[info] Iteration   1: 567631,234 ops/s
[info]                  ·gc.alloc.rate:      626,041 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 566930,241 ops/s
[info]                  ·gc.alloc.rate:                   625,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1873,322 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 566510,554 ops/s
[info]                  ·gc.alloc.rate:                   624,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1874,565 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 564100,692 ops/s
[info]                  ·gc.alloc.rate:                   622,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1875,135 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 564354,477 ops/s
[info]                  ·gc.alloc.rate:                   622,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1874,301 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   565905,440 ±(99.9%) 6105,834 ops/s [Average]
[info]   (min, avg, max) = (564100,692, 565905,440, 567631,234), stdev = 1585,666
[info]   CI (99.9%): [559799,605, 572011,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   624,215 ±(99.9%) 6,691 MB/sec [Average]
[info]   (min, avg, max) = (622,217, 624,215, 626,041), stdev = 1,738
[info]   CI (99.9%): [617,524, 630,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1736,001, 1736,001, 1736,001), stdev = 0,001
[info]   CI (99.9%): [1736,001, 1736,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,681 ±(99.9%) 5,638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,681, 3,299), stdev = 1,464
[info]   CI (99.9%): [≈ 0, 6,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,890 ±(99.9%) 15,649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,890, 9,158), stdev = 4,064
[info]   CI (99.9%): [≈ 0, 17,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538,769 ±(99.9%) 1159,752 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,769, 674,892), stdev = 301,184
[info]   CI (99.9%): [≈ 0, 1698,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1499,465 ±(99.9%) 3227,712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1499,465, 1875,135), stdev = 838,227
[info]   CI (99.9%): [≈ 0, 4727,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77,31% complete, ETA 00:30:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 526299,597 ops/s
[info] # Warmup Iteration   2: 548950,279 ops/s
[info] # Warmup Iteration   3: 548277,622 ops/s
[info] # Warmup Iteration   4: 547148,004 ops/s
[info] # Warmup Iteration   5: 547158,708 ops/s
[info] Iteration   1: 546060,555 ops/s
[info]                  ·gc.alloc.rate:      5,552 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 546594,387 ops/s
[info]                  ·gc.alloc.rate:      5,556 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 545403,914 ops/s
[info]                  ·gc.alloc.rate:      5,545 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 545151,177 ops/s
[info]                  ·gc.alloc.rate:      5,543 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 546648,879 ops/s
[info]                  ·gc.alloc.rate:      5,558 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   545971,782 ±(99.9%) 2618,611 ops/s [Average]
[info]   (min, avg, max) = (545151,177, 545971,782, 546648,879), stdev = 680,045
[info]   CI (99.9%): [543353,171, 548590,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5,551 ±(99.9%) 0,027 MB/sec [Average]
[info]   (min, avg, max) = (5,543, 5,551, 5,558), stdev = 0,007
[info]   CI (99.9%): [5,524, 5,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77,51% complete, ETA 00:29:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15366,380 ops/s
[info] # Warmup Iteration   2: 23317,773 ops/s
[info] # Warmup Iteration   3: 23266,326 ops/s
[info] # Warmup Iteration   4: 23471,339 ops/s
[info] # Warmup Iteration   5: 23546,406 ops/s
[info] Iteration   1: 23539,492 ops/s
[info]                  ·gc.alloc.rate:                   449,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34201,409 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 23509,524 ops/s
[info]                  ·gc.alloc.rate:      448,805 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23537,207 ops/s
[info]                  ·gc.alloc.rate:                   449,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45049,041 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23556,536 ops/s
[info]                  ·gc.alloc.rate:                   449,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45014,626 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23587,234 ops/s
[info]                  ·gc.alloc.rate:      450,323 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   23545,999 ±(99.9%) 109,953 ops/s [Average]
[info]   (min, avg, max) = (23509,524, 23545,999, 23587,234), stdev = 28,554
[info]   CI (99.9%): [23436,046, 23655,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   449,541 ±(99.9%) 2,156 MB/sec [Average]
[info]   (min, avg, max) = (448,805, 449,541, 450,323), stdev = 0,560
[info]   CI (99.9%): [447,386, 451,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30048,157 ±(99.9%) 1,199 B/op [Average]
[info]   (min, avg, max) = (30048,017, 30048,157, 30048,714), stdev = 0,311
[info]   CI (99.9%): [30046,958, 30049,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,333), stdev = 0,145
[info]   CI (99.9%): [≈ 0, 0,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5,010 ±(99.9%) 37,438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,010, 22,268), stdev = 9,723
[info]   CI (99.9%): [≈ 0, 42,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   371,814 ±(99.9%) 1331,642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371,814, 673,818), stdev = 345,823
[info]   CI (99.9%): [≈ 0, 1703,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24853,015 ±(99.9%) 89005,434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24853,015, 45049,041), stdev = 23114,428
[info]   CI (99.9%): [≈ 0, 113858,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77,71% complete, ETA 00:29:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1541576,211 ops/s
[info] # Warmup Iteration   2: 2479319,809 ops/s
[info] # Warmup Iteration   3: 2537833,450 ops/s
[info] # Warmup Iteration   4: 2527089,917 ops/s
[info] # Warmup Iteration   5: 2538622,000 ops/s
[info] Iteration   1: 2526858,898 ops/s
[info]                  ·gc.alloc.rate:                   3480,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3379,335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2104,946 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2530099,961 ops/s
[info]                  ·gc.alloc.rate:                   3485,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388,203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2107,466 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2520381,646 ops/s
[info]                  ·gc.alloc.rate:                   3471,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393,779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2119,260 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2529161,982 ops/s
[info]                  ·gc.alloc.rate:                   3484,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398,714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2114,812 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2505371,037 ops/s
[info]                  ·gc.alloc.rate:                   3451,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              2168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4082,675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2564,597 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2522374,705 ±(99.9%) 39408,086 ops/s [Average]
[info]   (min, avg, max) = (2505371,037, 2522374,705, 2530099,961), stdev = 10234,155
[info]   CI (99.9%): [2482966,618, 2561782,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3474,686 ±(99.9%) 54,342 MB/sec [Average]
[info]   (min, avg, max) = (3451,317, 3474,686, 3485,524), stdev = 14,112
[info]   CI (99.9%): [3420,344, 3529,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2168,000, 2168,000, 2168,000), stdev = 0,001
[info]   CI (99.9%): [2168,000, 2168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,044 ±(99.9%) 0,045 B/op [Average]
[info]   (min, avg, max) = (0,026, 0,044, 0,052), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3528,541 ±(99.9%) 1193,136 MB/sec [Average]
[info]   (min, avg, max) = (3379,335, 3528,541, 4082,675), stdev = 309,854
[info]   CI (99.9%): [2335,405, 4721,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2202,216 ±(99.9%) 780,363 B/op [Average]
[info]   (min, avg, max) = (2104,946, 2202,216, 2564,597), stdev = 202,658
[info]   CI (99.9%): [1421,854, 2982,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77,91% complete, ETA 00:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18608,837 ops/s
[info] # Warmup Iteration   2: 980134,054 ops/s
[info] # Warmup Iteration   3: 982349,669 ops/s
[info] # Warmup Iteration   4: 930950,130 ops/s
[info] # Warmup Iteration   5: 983136,498 ops/s
[info] Iteration   1: 974357,359 ops/s
[info]                  ·gc.alloc.rate:      619,100 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 970089,435 ops/s
[info]                  ·gc.alloc.rate:                   616,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1092,651 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 971148,671 ops/s
[info]                  ·gc.alloc.rate:                   617,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1091,479 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 966218,497 ops/s
[info]                  ·gc.alloc.rate:                   613,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1094,751 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 956786,525 ops/s
[info]                  ·gc.alloc.rate:                   607,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1105,553 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   967720,097 ±(99.9%) 26060,918 ops/s [Average]
[info]   (min, avg, max) = (956786,525, 967720,097, 974357,359), stdev = 6767,938
[info]   CI (99.9%): [941659,180, 993781,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   614,915 ±(99.9%) 16,535 MB/sec [Average]
[info]   (min, avg, max) = (607,968, 614,915, 619,100), stdev = 4,294
[info]   CI (99.9%): [598,380, 631,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,000, 1000,000, 1000,000), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,532 ±(99.9%) 4,495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,532, 2,621), stdev = 1,167
[info]   CI (99.9%): [≈ 0, 5,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,864 ±(99.9%) 7,292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,864, 4,251), stdev = 1,894
[info]   CI (99.9%): [≈ 0, 8,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   538,277 ±(99.9%) 1158,686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,277, 673,594), stdev = 300,907
[info]   CI (99.9%): [≈ 0, 1696,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   876,887 ±(99.9%) 1887,687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 876,887, 1105,553), stdev = 490,226
[info]   CI (99.9%): [≈ 0, 2764,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78,11% complete, ETA 00:29:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61172,997 ops/s
[info] # Warmup Iteration   2: 350385,424 ops/s
[info] # Warmup Iteration   3: 348874,609 ops/s
[info] # Warmup Iteration   4: 347796,301 ops/s
[info] # Warmup Iteration   5: 351544,166 ops/s
[info] Iteration   1: 349219,654 ops/s
[info]                  ·gc.alloc.rate:                   683,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              3080,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3036,458 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 352403,583 ops/s
[info]                  ·gc.alloc.rate:                   689,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              3080,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3009,277 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 350578,683 ops/s
[info]                  ·gc.alloc.rate:                   686,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              3080,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3029,175 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 350995,888 ops/s
[info]                  ·gc.alloc.rate:                   686,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              3080,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3025,560 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 351018,848 ops/s
[info]                  ·gc.alloc.rate:                   686,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              3080,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3028,391 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   350843,331 ±(99.9%) 4388,228 ops/s [Average]
[info]   (min, avg, max) = (349219,654, 350843,331, 352403,583), stdev = 1139,609
[info]   CI (99.9%): [346455,103, 355231,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   686,622 ±(99.9%) 8,706 MB/sec [Average]
[info]   (min, avg, max) = (683,420, 686,622, 689,741), stdev = 2,261
[info]   CI (99.9%): [677,916, 695,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3080,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3080,001, 3080,001, 3080,001), stdev = 0,001
[info]   CI (99.9%): [3080,001, 3080,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,229), stdev = 0,097
[info]   CI (99.9%): [≈ 0, 0,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,281 ±(99.9%) 1,675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,281, 1,032), stdev = 0,435
[info]   CI (99.9%): [≈ 0, 1,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,527 ±(99.9%) 2,679 MB/sec [Average]
[info]   (min, avg, max) = (673,758, 674,527, 675,445), stdev = 0,696
[info]   CI (99.9%): [671,848, 677,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3025,772 ±(99.9%) 38,735 B/op [Average]
[info]   (min, avg, max) = (3009,277, 3025,772, 3036,458), stdev = 10,059
[info]   CI (99.9%): [2987,037, 3064,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78,31% complete, ETA 00:28:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 782863,767 ops/s
[info] # Warmup Iteration   2: 839930,203 ops/s
[info] # Warmup Iteration   3: 849223,163 ops/s
[info] # Warmup Iteration   4: 843797,732 ops/s
[info] # Warmup Iteration   5: 849685,618 ops/s
[info] Iteration   1: 853818,732 ops/s
[info]                  ·gc.alloc.rate:                   642,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1243,876 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 853416,344 ops/s
[info]                  ·gc.alloc.rate:                   642,094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1244,511 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 849999,404 ops/s
[info]                  ·gc.alloc.rate:                   639,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1245,690 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 851268,455 ops/s
[info]                  ·gc.alloc.rate:                   640,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1243,821 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 851179,136 ops/s
[info]                  ·gc.alloc.rate:      640,384 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   851936,414 ±(99.9%) 6240,229 ops/s [Average]
[info]   (min, avg, max) = (849999,404, 851936,414, 853818,732), stdev = 1620,568
[info]   CI (99.9%): [845696,185, 858176,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   640,932 ±(99.9%) 4,702 MB/sec [Average]
[info]   (min, avg, max) = (639,465, 640,932, 642,307), stdev = 1,221
[info]   CI (99.9%): [636,231, 645,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1184,000, 1184,000, 1184,001), stdev = 0,001
[info]   CI (99.9%): [1184,000, 1184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,653 ±(99.9%) 5,626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,653, 3,267), stdev = 1,461
[info]   CI (99.9%): [≈ 0, 6,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,204 ±(99.9%) 10,370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,204, 6,022), stdev = 2,693
[info]   CI (99.9%): [≈ 0, 11,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539,050 ±(99.9%) 1160,352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,050, 674,910), stdev = 301,340
[info]   CI (99.9%): [≈ 0, 1699,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   995,580 ±(99.9%) 2143,062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 995,580, 1245,690), stdev = 556,546
[info]   CI (99.9%): [≈ 0, 3138,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78,51% complete, ETA 00:28:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4595016,004 ops/s
[info] # Warmup Iteration   2: 4889890,592 ops/s
[info] # Warmup Iteration   3: 4990094,877 ops/s
[info] # Warmup Iteration   4: 4967656,175 ops/s
[info] # Warmup Iteration   5: 4964933,176 ops/s
[info] Iteration   1: 4975063,457 ops/s
[info]                  ·gc.alloc.rate:                   1592,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4949880,115 ops/s
[info]                  ·gc.alloc.rate:                   1585,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 427,527 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 4919486,043 ops/s
[info]                  ·gc.alloc.rate:                   1575,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 645,786 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4760833,333 ops/s
[info]                  ·gc.alloc.rate:                   1524,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445,466 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4775487,113 ops/s
[info]                  ·gc.alloc.rate:                   1529,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 444,774 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4876150,012 ±(99.9%) 387602,100 ops/s [Average]
[info]   (min, avg, max) = (4760833,333, 4876150,012, 4975063,457), stdev = 100659,035
[info]   CI (99.9%): [4488547,912, 5263752,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1561,540 ±(99.9%) 124,154 MB/sec [Average]
[info]   (min, avg, max) = (1524,574, 1561,540, 1592,999), stdev = 32,242
[info]   CI (99.9%): [1437,386, 1685,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0,016 ±(99.9%) 0,034 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,016, 0,027), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1480,923 ±(99.9%) 1157,695 MB/sec [Average]
[info]   (min, avg, max) = (1344,014, 1480,923, 2018,727), stdev = 300,650
[info]   CI (99.9%): [323,229, 2638,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   477,756 ±(99.9%) 363,509 B/op [Average]
[info]   (min, avg, max) = (425,225, 477,756, 645,786), stdev = 94,402
[info]   CI (99.9%): [114,247, 841,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78,71% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8661648,633 ops/s
[info] # Warmup Iteration   2: 9865113,435 ops/s
[info] # Warmup Iteration   3: 9313694,975 ops/s
[info] # Warmup Iteration   4: 9755942,658 ops/s
[info] # Warmup Iteration   5: 9558195,308 ops/s
[info] Iteration   1: 9858697,944 ops/s
[info]                  ·gc.alloc.rate:                   801,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107,719 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 9748904,952 ops/s
[info]                  ·gc.alloc.rate:                   792,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108,617 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10006860,773 ops/s
[info]                  ·gc.alloc.rate:                   813,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105,812 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 10007756,395 ops/s
[info]                  ·gc.alloc.rate:                   813,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211,399 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10011548,484 ops/s
[info]                  ·gc.alloc.rate:                   814,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105,658 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   9926753,710 ±(99.9%) 457362,241 ops/s [Average]
[info]   (min, avg, max) = (9748904,952, 9926753,710, 10011548,484), stdev = 118775,522
[info]   CI (99.9%): [9469391,469, 10384115,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   807,341 ±(99.9%) 37,150 MB/sec [Average]
[info]   (min, avg, max) = (792,962, 807,341, 814,224), stdev = 9,648
[info]   CI (99.9%): [770,192, 844,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (128,000, 128,000, 128,000), stdev = 0,001
[info]   CI (99.9%): [128,000, 128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0,005 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,010), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   807,350 ±(99.9%) 1155,844 MB/sec [Average]
[info]   (min, avg, max) = (672,102, 807,350, 1344,305), stdev = 300,169
[info]   CI (99.9%): [≈ 0, 1963,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   127,841 ±(99.9%) 179,929 B/op [Average]
[info]   (min, avg, max) = (105,658, 127,841, 211,399), stdev = 46,727
[info]   CI (99.9%): [≈ 0, 307,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78,92% complete, ETA 00:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47020,277 ops/s
[info] # Warmup Iteration   2: 217295,134 ops/s
[info] # Warmup Iteration   3: 217344,825 ops/s
[info] # Warmup Iteration   4: 224103,464 ops/s
[info] # Warmup Iteration   5: 220512,424 ops/s
[info] Iteration   1: 220595,555 ops/s
[info]                  ·gc.alloc.rate:                   1491,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9637,752 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 221398,993 ops/s
[info]                  ·gc.alloc.rate:                   1496,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14422,212 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 220487,412 ops/s
[info]                  ·gc.alloc.rate:                   1490,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9661,403 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 220950,553 ops/s
[info]                  ·gc.alloc.rate:                   1493,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9650,608 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 220716,764 ops/s
[info]                  ·gc.alloc.rate:                   1492,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9670,774 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   220829,856 ±(99.9%) 1392,954 ops/s [Average]
[info]   (min, avg, max) = (220487,412, 220829,856, 221398,993), stdev = 361,746
[info]   CI (99.9%): [219436,902, 222222,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1493,005 ±(99.9%) 9,558 MB/sec [Average]
[info]   (min, avg, max) = (1490,721, 1493,005, 1496,906), stdev = 2,482
[info]   CI (99.9%): [1483,447, 1502,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10640,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10640,002, 10640,002, 10640,002), stdev = 0,001
[info]   CI (99.9%): [10640,002, 10640,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,416 ±(99.9%) 0,849 B/op [Average]
[info]   (min, avg, max) = (0,148, 0,416, 0,742), stdev = 0,220
[info]   CI (99.9%): [≈ 0, 1,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1488,941 ±(99.9%) 1162,568 MB/sec [Average]
[info]   (min, avg, max) = (1350,841, 1488,941, 2029,012), stdev = 301,915
[info]   CI (99.9%): [326,373, 2651,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10608,550 ±(99.9%) 8209,332 B/op [Average]
[info]   (min, avg, max) = (9637,752, 10608,550, 14422,212), stdev = 2131,937
[info]   CI (99.9%): [2399,218, 18817,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79,12% complete, ETA 00:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243231,610 ops/s
[info] # Warmup Iteration   2: 342656,453 ops/s
[info] # Warmup Iteration   3: 340192,489 ops/s
[info] # Warmup Iteration   4: 342224,519 ops/s
[info] # Warmup Iteration   5: 340505,998 ops/s
[info] Iteration   1: 341636,486 ops/s
[info]                  ·gc.alloc.rate:                   670,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              3088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3108,469 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 344944,895 ops/s
[info]                  ·gc.alloc.rate:                   676,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              3088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3078,916 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 333415,031 ops/s
[info]                  ·gc.alloc.rate:                   654,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              3088,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3172,587 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 336092,079 ops/s
[info]                  ·gc.alloc.rate:                   659,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              3088,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3147,303 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 266053,071 ops/s
[info]                  ·gc.alloc.rate:                   522,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              3088,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3971,849 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   324428,313 ±(99.9%) 126859,942 ops/s [Average]
[info]   (min, avg, max) = (266053,071, 324428,313, 344944,895), stdev = 32945,124
[info]   CI (99.9%): [197568,370, 451288,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   636,562 ±(99.9%) 248,865 MB/sec [Average]
[info]   (min, avg, max) = (522,052, 636,562, 676,909), stdev = 64,629
[info]   CI (99.9%): [387,697, 885,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3088,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3088,001, 3088,001, 3088,002), stdev = 0,001
[info]   CI (99.9%): [3088,001, 3088,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,699 ±(99.9%) 5,883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,699, 3,432), stdev = 1,528
[info]   CI (99.9%): [≈ 0, 6,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3,230 ±(99.9%) 27,082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,230, 15,810), stdev = 7,033
[info]   CI (99.9%): [≈ 0, 30,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   673,053 ±(99.9%) 6,246 MB/sec [Average]
[info]   (min, avg, max) = (671,473, 673,053, 674,917), stdev = 1,622
[info]   CI (99.9%): [666,807, 679,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3295,825 ±(99.9%) 1461,732 B/op [Average]
[info]   (min, avg, max) = (3078,916, 3295,825, 3971,849), stdev = 379,607
[info]   CI (99.9%): [1834,093, 4757,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,32% complete, ETA 00:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 983793,258 ops/s
[info] # Warmup Iteration   2: 1028919,584 ops/s
[info] # Warmup Iteration   3: 1031227,203 ops/s
[info] # Warmup Iteration   4: 1030781,849 ops/s
[info] # Warmup Iteration   5: 1032714,754 ops/s
[info] Iteration   1: 1033554,815 ops/s
[info]                  ·gc.alloc.rate:      57,789 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1035507,653 ops/s
[info]                  ·gc.alloc.rate:      57,904 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1023600,814 ops/s
[info]                  ·gc.alloc.rate:      57,238 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1021937,635 ops/s
[info]                  ·gc.alloc.rate:                   57,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              88,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 787,839 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1039670,665 ops/s
[info]                  ·gc.alloc.rate:      58,142 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1030854,317 ±(99.9%) 29751,970 ops/s [Average]
[info]   (min, avg, max) = (1021937,635, 1030854,317, 1039670,665), stdev = 7726,492
[info]   CI (99.9%): [1001102,346, 1060606,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   57,642 ±(99.9%) 1,674 MB/sec [Average]
[info]   (min, avg, max) = (57,140, 57,642, 58,142), stdev = 0,435
[info]   CI (99.9%): [55,968, 59,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (88,000, 88,000, 88,000), stdev = 0,001
[info]   CI (99.9%): [88,000, 88,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102,311 ±(99.9%) 880,925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,311, 511,553), stdev = 228,774
[info]   CI (99.9%): [≈ 0, 983,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   157,568 ±(99.9%) 1356,707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 157,568, 787,839), stdev = 352,332
[info]   CI (99.9%): [≈ 0, 1514,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   1,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79,52% complete, ETA 00:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40189,049 ops/s
[info] # Warmup Iteration   2: 70534,088 ops/s
[info] # Warmup Iteration   3: 70218,818 ops/s
[info] # Warmup Iteration   4: 69832,282 ops/s
[info] # Warmup Iteration   5: 70144,512 ops/s
[info] Iteration   1: 68291,458 ops/s
[info]                  ·gc.alloc.rate:                   3172,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396,054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78263,626 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 70731,530 ops/s
[info]                  ·gc.alloc.rate:                   3285,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719,709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60519,568 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 70953,129 ops/s
[info]                  ·gc.alloc.rate:                   3296,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401,985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75458,701 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 70174,997 ops/s
[info]                  ·gc.alloc.rate:                   3260,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76336,667 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 69162,178 ops/s
[info]                  ·gc.alloc.rate:                   3213,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404,637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77471,876 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   69862,658 ±(99.9%) 4305,566 ops/s [Average]
[info]   (min, avg, max) = (68291,458, 69862,658, 70953,129), stdev = 1118,142
[info]   CI (99.9%): [65557,093, 74168,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3245,888 ±(99.9%) 199,909 MB/sec [Average]
[info]   (min, avg, max) = (3172,859, 3245,888, 3296,547), stdev = 51,916
[info]   CI (99.9%): [3045,979, 3445,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73120,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (73120,006, 73120,006, 73120,007), stdev = 0,001
[info]   CI (99.9%): [73120,005, 73120,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,087 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,104), stdev = 0,017
[info]   CI (99.9%): [0,020, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,968 ±(99.9%) 1,450 B/op [Average]
[info]   (min, avg, max) = (1,401, 1,968, 2,316), stdev = 0,376
[info]   CI (99.9%): [0,518, 3,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3265,302 ±(99.9%) 1174,504 MB/sec [Average]
[info]   (min, avg, max) = (2719,709, 3265,302, 3404,637), stdev = 305,015
[info]   CI (99.9%): [2090,799, 4439,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73610,088 ±(99.9%) 28477,987 B/op [Average]
[info]   (min, avg, max) = (60519,568, 73610,088, 78263,626), stdev = 7395,643
[info]   CI (99.9%): [45132,100, 102088,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,72% complete, ETA 00:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 835868,417 ops/s
[info] # Warmup Iteration   2: 1160590,763 ops/s
[info] # Warmup Iteration   3: 1181825,638 ops/s
[info] # Warmup Iteration   4: 1107721,599 ops/s
[info] # Warmup Iteration   5: 1169617,723 ops/s
[info] Iteration   1: 1183032,337 ops/s
[info]                  ·gc.alloc.rate:                   679,460 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 896,322 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1183262,736 ops/s
[info]                  ·gc.alloc.rate:                   679,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1792,204 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1184297,668 ops/s
[info]                  ·gc.alloc.rate:                   680,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 896,705 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1137959,013 ops/s
[info]                  ·gc.alloc.rate:      653,821 MB/sec
[info]                  ·gc.alloc.rate.norm: 904,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1187643,350 ops/s
[info]                  ·gc.alloc.rate:                   682,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 895,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1175239,021 ±(99.9%) 80561,352 ops/s [Average]
[info]   (min, avg, max) = (1137959,013, 1175239,021, 1187643,350), stdev = 20921,527
[info]   CI (99.9%): [1094677,668, 1255800,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   675,127 ±(99.9%) 46,047 MB/sec [Average]
[info]   (min, avg, max) = (653,821, 675,127, 682,238), stdev = 11,958
[info]   CI (99.9%): [629,080, 721,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,208), stdev = 0,086
[info]   CI (99.9%): [≈ 0, 0,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,083 ±(99.9%) 0,440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,277), stdev = 0,114
[info]   CI (99.9%): [≈ 0, 0,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,367 ±(99.9%) 1834,968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 674,367, 1347,844), stdev = 476,535
[info]   CI (99.9%): [≈ 0, 2509,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   896,071 ±(99.9%) 2439,922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 896,071, 1792,204), stdev = 633,640
[info]   CI (99.9%): [≈ 0, 3335,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,92% complete, ETA 00:26:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 752489,279 ops/s
[info] # Warmup Iteration   2: 764211,758 ops/s
[info] # Warmup Iteration   3: 741480,063 ops/s
[info] # Warmup Iteration   4: 761862,532 ops/s
[info] # Warmup Iteration   5: 759395,579 ops/s
[info] Iteration   1: 763311,984 ops/s
[info]                  ·gc.alloc.rate:      213,408 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 762164,862 ops/s
[info]                  ·gc.alloc.rate:                   213,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1056,479 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 762148,036 ops/s
[info]                  ·gc.alloc.rate:      213,089 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 758828,626 ops/s
[info]                  ·gc.alloc.rate:      212,146 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 754846,047 ops/s
[info]                  ·gc.alloc.rate:                   211,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1066,648 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   760259,911 ±(99.9%) 13320,599 ops/s [Average]
[info]   (min, avg, max) = (754846,047, 760259,911, 763311,984), stdev = 3459,317
[info]   CI (99.9%): [746939,312, 773580,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   212,556 ±(99.9%) 3,748 MB/sec [Average]
[info]   (min, avg, max) = (211,035, 212,556, 213,408), stdev = 0,973
[info]   CI (99.9%): [208,809, 216,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,001, 440,001, 440,001), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,002 ±(99.9%) 0,018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,011), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,004 ±(99.9%) 0,038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,022), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204,654 ±(99.9%) 1079,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,654, 511,678), stdev = 280,234
[info]   CI (99.9%): [≈ 0, 1283,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   424,625 ±(99.9%) 2238,970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 424,625, 1066,648), stdev = 581,453
[info]   CI (99.9%): [≈ 0, 2663,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80,12% complete, ETA 00:26:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 980139,278 ops/s
[info] # Warmup Iteration   2: 1035749,915 ops/s
[info] # Warmup Iteration   3: 1020697,560 ops/s
[info] # Warmup Iteration   4: 1034374,491 ops/s
[info] # Warmup Iteration   5: 1037044,743 ops/s
[info] Iteration   1: 1035355,004 ops/s
[info]                  ·gc.alloc.rate:      10,526 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1034267,972 ops/s
[info]                  ·gc.alloc.rate:      10,515 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1037841,253 ops/s
[info]                  ·gc.alloc.rate:      10,551 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1035278,004 ops/s
[info]                  ·gc.alloc.rate:      10,526 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1035101,925 ops/s
[info]                  ·gc.alloc.rate:      10,524 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1035568,832 ±(99.9%) 5167,774 ops/s [Average]
[info]   (min, avg, max) = (1034267,972, 1035568,832, 1037841,253), stdev = 1342,054
[info]   CI (99.9%): [1030401,058, 1040736,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10,528 ±(99.9%) 0,053 MB/sec [Average]
[info]   (min, avg, max) = (10,515, 10,528, 10,551), stdev = 0,014
[info]   CI (99.9%): [10,476, 10,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,32% complete, ETA 00:26:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29615,856 ops/s
[info] # Warmup Iteration   2: 49899,376 ops/s
[info] # Warmup Iteration   3: 50458,718 ops/s
[info] # Warmup Iteration   4: 50290,289 ops/s
[info] # Warmup Iteration   5: 50533,645 ops/s
[info] Iteration   1: 50351,025 ops/s
[info]                  ·gc.alloc.rate:                   2130,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63503,372 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 50519,215 ops/s
[info]                  ·gc.alloc.rate:                   2137,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84508,688 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 50540,704 ops/s
[info]                  ·gc.alloc.rate:                   2138,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63413,655 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 50407,226 ops/s
[info]                  ·gc.alloc.rate:                   2133,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63643,339 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 50144,135 ops/s
[info]                  ·gc.alloc.rate:                   2122,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039,796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64018,896 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   50392,461 ±(99.9%) 613,823 ops/s [Average]
[info]   (min, avg, max) = (50144,135, 50392,461, 50540,704), stdev = 159,408
[info]   CI (99.9%): [49778,638, 51006,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2132,572 ±(99.9%) 26,170 MB/sec [Average]
[info]   (min, avg, max) = (2122,036, 2132,572, 2138,927), stdev = 6,796
[info]   CI (99.9%): [2106,402, 2158,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66600,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66600,008, 66600,008, 66600,009), stdev = 0,001
[info]   CI (99.9%): [66600,007, 66600,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,104), stdev = 0,019
[info]   CI (99.9%): [0,003, 0,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,340 ±(99.9%) 2,223 B/op [Average]
[info]   (min, avg, max) = (1,946, 2,340, 3,241), stdev = 0,577
[info]   CI (99.9%): [0,117, 4,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2171,883 ±(99.9%) 1164,591 MB/sec [Average]
[info]   (min, avg, max) = (2031,586, 2171,883, 2712,876), stdev = 302,441
[info]   CI (99.9%): [1007,291, 3336,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67817,590 ±(99.9%) 35939,853 B/op [Average]
[info]   (min, avg, max) = (63413,655, 67817,590, 84508,688), stdev = 9333,466
[info]   CI (99.9%): [31877,737, 103757,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,52% complete, ETA 00:25:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246890,646 ops/s
[info] # Warmup Iteration   2: 261643,556 ops/s
[info] # Warmup Iteration   3: 262585,686 ops/s
[info] # Warmup Iteration   4: 265226,063 ops/s
[info] # Warmup Iteration   5: 266236,126 ops/s
[info] Iteration   1: 266305,455 ops/s
[info]                  ·gc.alloc.rate:                   1042,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3972,475 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 265648,077 ops/s
[info]                  ·gc.alloc.rate:                   1039,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7956,734 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 258741,836 ops/s
[info]                  ·gc.alloc.rate:                   1012,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4084,256 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 258691,592 ops/s
[info]                  ·gc.alloc.rate:                   1012,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8171,643 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 264613,838 ops/s
[info]                  ·gc.alloc.rate:                   1035,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3995,092 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   262800,159 ±(99.9%) 14540,639 ops/s [Average]
[info]   (min, avg, max) = (258691,592, 262800,159, 266305,455), stdev = 3776,158
[info]   CI (99.9%): [248259,521, 277340,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1028,610 ±(99.9%) 56,928 MB/sec [Average]
[info]   (min, avg, max) = (1012,539, 1028,610, 1042,248), stdev = 14,784
[info]   CI (99.9%): [971,682, 1085,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6160,002, 6160,002, 6160,002), stdev = 0,001
[info]   CI (99.9%): [6160,001, 6160,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,150 ±(99.9%) 0,791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,150, 0,380), stdev = 0,205
[info]   CI (99.9%): [≈ 0, 0,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940,334 ±(99.9%) 1416,150 MB/sec [Average]
[info]   (min, avg, max) = (671,453, 940,334, 1343,212), stdev = 367,770
[info]   CI (99.9%): [≈ 0, 2356,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5636,040 ±(99.9%) 8541,813 B/op [Average]
[info]   (min, avg, max) = (3972,475, 5636,040, 8171,643), stdev = 2218,282
[info]   CI (99.9%): [≈ 0, 14177,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,72% complete, ETA 00:25:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14580,729 ops/s
[info] # Warmup Iteration   2: 29656,186 ops/s
[info] # Warmup Iteration   3: 29904,305 ops/s
[info] # Warmup Iteration   4: 30052,931 ops/s
[info] # Warmup Iteration   5: 28894,778 ops/s
[info] Iteration   1: 30079,575 ops/s
[info]                  ·gc.alloc.rate:                   1642,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70753,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30171,576 ops/s
[info]                  ·gc.alloc.rate:                   1647,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105924,314 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 30019,944 ops/s
[info]                  ·gc.alloc.rate:                   1639,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71027,161 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30114,399 ops/s
[info]                  ·gc.alloc.rate:                   1644,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70875,132 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30095,011 ops/s
[info]                  ·gc.alloc.rate:                   1643,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106449,465 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   30096,101 ±(99.9%) 211,834 ops/s [Average]
[info]   (min, avg, max) = (30019,944, 30096,101, 30171,576), stdev = 55,013
[info]   CI (99.9%): [29884,266, 30307,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1643,360 ±(99.9%) 11,401 MB/sec [Average]
[info]   (min, avg, max) = (1639,235, 1643,360, 1647,389), stdev = 2,961
[info]   CI (99.9%): [1631,959, 1654,760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85936,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (85936,014, 85936,014, 85936,015), stdev = 0,001
[info]   CI (99.9%): [85936,012, 85936,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,956 ±(99.9%) 11,223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,956, 6,515), stdev = 2,914
[info]   CI (99.9%): [≈ 0, 13,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625,898 ±(99.9%) 1431,376 MB/sec [Average]
[info]   (min, avg, max) = (1352,277, 1625,898, 2035,624), stdev = 371,724
[info]   CI (99.9%): [194,522, 3057,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85005,849 ±(99.9%) 74458,711 B/op [Average]
[info]   (min, avg, max) = (70753,175, 85005,849, 106449,465), stdev = 19336,691
[info]   CI (99.9%): [10547,139, 159464,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,92% complete, ETA 00:25:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84938,906 ops/s
[info] # Warmup Iteration   2: 150529,922 ops/s
[info] # Warmup Iteration   3: 150720,022 ops/s
[info] # Warmup Iteration   4: 151380,086 ops/s
[info] # Warmup Iteration   5: 151640,930 ops/s
[info] Iteration   1: 151512,561 ops/s
[info]                  ·gc.alloc.rate:                   1851,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21086,101 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 152024,327 ops/s
[info]                  ·gc.alloc.rate:                   1857,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21037,450 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 151919,722 ops/s
[info]                  ·gc.alloc.rate:                   1856,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21076,957 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 151560,421 ops/s
[info]                  ·gc.alloc.rate:                   1852,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357,233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14093,670 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 151235,276 ops/s
[info]                  ·gc.alloc.rate:                   1847,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21204,289 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   151650,461 ±(99.9%) 1235,480 ops/s [Average]
[info]   (min, avg, max) = (151235,276, 151650,461, 152024,327), stdev = 320,850
[info]   CI (99.9%): [150414,981, 152885,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1853,115 ±(99.9%) 15,093 MB/sec [Average]
[info]   (min, avg, max) = (1847,959, 1853,115, 1857,521), stdev = 3,920
[info]   CI (99.9%): [1838,022, 1868,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19232,003, 19232,003, 19232,003), stdev = 0,001
[info]   CI (99.9%): [19232,002, 19232,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,562 ±(99.9%) 0,948 B/op [Average]
[info]   (min, avg, max) = (0,216, 0,562, 0,865), stdev = 0,246
[info]   CI (99.9%): [≈ 0, 1,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1898,247 ±(99.9%) 1164,626 MB/sec [Average]
[info]   (min, avg, max) = (1357,233, 1898,247, 2037,472), stdev = 302,450
[info]   CI (99.9%): [733,622, 3062,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19699,693 ±(99.9%) 12069,768 B/op [Average]
[info]   (min, avg, max) = (14093,670, 19699,693, 21204,289), stdev = 3134,481
[info]   CI (99.9%): [7629,925, 31769,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,12% complete, ETA 00:25:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353105,161 ops/s
[info] # Warmup Iteration   2: 384506,875 ops/s
[info] # Warmup Iteration   3: 389649,983 ops/s
[info] # Warmup Iteration   4: 391819,993 ops/s
[info] # Warmup Iteration   5: 379154,763 ops/s
[info] Iteration   1: 364754,048 ops/s
[info]                  ·gc.alloc.rate:                   1737,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5798,549 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 380468,525 ops/s
[info]                  ·gc.alloc.rate:                   1812,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8349,522 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 379410,272 ops/s
[info]                  ·gc.alloc.rate:                   1807,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5589,628 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 379323,802 ops/s
[info]                  ·gc.alloc.rate:                   1806,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8397,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 379118,537 ops/s
[info]                  ·gc.alloc.rate:                   1805,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026,607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8412,864 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   376615,037 ±(99.9%) 25611,174 ops/s [Average]
[info]   (min, avg, max) = (364754,048, 376615,037, 380468,525), stdev = 6651,140
[info]   CI (99.9%): [351003,863, 402226,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1793,832 ±(99.9%) 122,379 MB/sec [Average]
[info]   (min, avg, max) = (1737,165, 1793,832, 1812,341), stdev = 31,781
[info]   CI (99.9%): [1671,453, 1916,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7496,001, 7496,001, 7496,001), stdev = 0,001
[info]   CI (99.9%): [7496,001, 7496,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,190 ±(99.9%) 0,681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,190, 0,345), stdev = 0,177
[info]   CI (99.9%): [≈ 0, 0,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1752,141 ±(99.9%) 1428,782 MB/sec [Average]
[info]   (min, avg, max) = (1343,788, 1752,141, 2026,607), stdev = 371,050
[info]   CI (99.9%): [323,359, 3180,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7309,627 ±(99.9%) 5686,677 B/op [Average]
[info]   (min, avg, max) = (5589,628, 7309,627, 8412,864), stdev = 1476,812
[info]   CI (99.9%): [1622,950, 12996,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81,33% complete, ETA 00:24:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434540,604 ops/s
[info] # Warmup Iteration   2: 463825,768 ops/s
[info] # Warmup Iteration   3: 472854,417 ops/s
[info] # Warmup Iteration   4: 476235,231 ops/s
[info] # Warmup Iteration   5: 475882,563 ops/s
[info] Iteration   1: 476438,443 ops/s
[info]                  ·gc.alloc.rate:                   1632,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4437,319 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 475072,403 ops/s
[info]                  ·gc.alloc.rate:                   1627,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6681,407 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 472401,712 ops/s
[info]                  ·gc.alloc.rate:                   1618,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4484,944 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 473877,979 ops/s
[info]                  ·gc.alloc.rate:                   1623,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6715,217 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 475239,813 ops/s
[info]                  ·gc.alloc.rate:                   1628,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4469,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   474606,070 ±(99.9%) 5892,240 ops/s [Average]
[info]   (min, avg, max) = (472401,712, 474606,070, 476438,443), stdev = 1530,196
[info]   CI (99.9%): [468713,830, 480498,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1626,093 ±(99.9%) 20,241 MB/sec [Average]
[info]   (min, avg, max) = (1618,509, 1626,093, 1632,385), stdev = 5,257
[info]   CI (99.9%): [1605,851, 1646,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,001, 5392,001, 5392,001), stdev = 0,001
[info]   CI (99.9%): [5392,001, 5392,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0,166 ±(99.9%) 0,303 B/op [Average]
[info]   (min, avg, max) = (0,069, 0,166, 0,276), stdev = 0,079
[info]   CI (99.9%): [≈ 0, 0,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1615,642 ±(99.9%) 1419,907 MB/sec [Average]
[info]   (min, avg, max) = (1343,363, 1615,642, 2022,038), stdev = 368,745
[info]   CI (99.9%): [195,735, 3035,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5357,602 ±(99.9%) 4713,473 B/op [Average]
[info]   (min, avg, max) = (4437,319, 5357,602, 6715,217), stdev = 1224,074
[info]   CI (99.9%): [644,129, 10071,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81,53% complete, ETA 00:24:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32806,480 ops/s
[info] # Warmup Iteration   2: 54305,613 ops/s
[info] # Warmup Iteration   3: 56060,113 ops/s
[info] # Warmup Iteration   4: 56301,530 ops/s
[info] # Warmup Iteration   5: 56377,334 ops/s
[info] Iteration   1: 56364,789 ops/s
[info]                  ·gc.alloc.rate:                   1413,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37730,136 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 55850,487 ops/s
[info]                  ·gc.alloc.rate:                   1400,169 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57164,510 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 56173,290 ops/s
[info]                  ·gc.alloc.rate:                   1408,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37940,360 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 56143,082 ops/s
[info]                  ·gc.alloc.rate:                   1407,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37979,301 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 56357,521 ops/s
[info]                  ·gc.alloc.rate:                   1413,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37875,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   56177,834 ±(99.9%) 806,855 ops/s [Average]
[info]   (min, avg, max) = (55850,487, 56177,834, 56364,789), stdev = 209,538
[info]   CI (99.9%): [55370,978, 56984,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1408,491 ±(99.9%) 20,306 MB/sec [Average]
[info]   (min, avg, max) = (1400,169, 1408,491, 1413,082), stdev = 5,273
[info]   CI (99.9%): [1388,184, 1428,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39456,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (39456,007, 39456,007, 39456,008), stdev = 0,001
[info]   CI (99.9%): [39456,006, 39456,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,819 ±(99.9%) 3,428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,819, 2,346), stdev = 0,890
[info]   CI (99.9%): [≈ 0, 4,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489,130 ±(99.9%) 1161,248 MB/sec [Average]
[info]   (min, avg, max) = (1351,214, 1489,130, 2028,588), stdev = 301,572
[info]   CI (99.9%): [327,883, 2650,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   41737,864 ±(99.9%) 33209,029 B/op [Average]
[info]   (min, avg, max) = (37730,136, 41737,864, 57164,510), stdev = 8624,279
[info]   CI (99.9%): [8528,835, 74946,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81,73% complete, ETA 00:24:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67866,290 ops/s
[info] # Warmup Iteration   2: 77578,072 ops/s
[info] # Warmup Iteration   3: 80834,998 ops/s
[info] # Warmup Iteration   4: 81359,993 ops/s
[info] # Warmup Iteration   5: 78396,089 ops/s
[info] Iteration   1: 77999,694 ops/s
[info]                  ·gc.alloc.rate:                   1612,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27095,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 78092,576 ops/s
[info]                  ·gc.alloc.rate:                   1615,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40624,684 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 78274,846 ops/s
[info]                  ·gc.alloc.rate:                   1618,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27054,841 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 77981,208 ops/s
[info]                  ·gc.alloc.rate:                   1612,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40792,593 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 77517,189 ops/s
[info]                  ·gc.alloc.rate:                   1602,883 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27399,079 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   77973,103 ±(99.9%) 1078,787 ops/s [Average]
[info]   (min, avg, max) = (77517,189, 77973,103, 78274,846), stdev = 280,158
[info]   CI (99.9%): [76894,315, 79051,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1612,371 ±(99.9%) 22,473 MB/sec [Average]
[info]   (min, avg, max) = (1602,883, 1612,371, 1618,605), stdev = 5,836
[info]   CI (99.9%): [1589,898, 1634,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32544,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32544,005, 32544,005, 32544,006), stdev = 0,001
[info]   CI (99.9%): [32544,004, 32544,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,672 ±(99.9%) 2,452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,672, 1,260), stdev = 0,637
[info]   CI (99.9%): [≈ 0, 3,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1615,036 ±(99.9%) 1419,036 MB/sec [Average]
[info]   (min, avg, max) = (1342,672, 1615,036, 2021,359), stdev = 368,519
[info]   CI (99.9%): [196,000, 3034,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32593,251 ±(99.9%) 28532,251 B/op [Average]
[info]   (min, avg, max) = (27054,841, 32593,251, 40792,593), stdev = 7409,735
[info]   CI (99.9%): [4061,000, 61125,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,93% complete, ETA 00:24:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88994,781 ops/s
[info] # Warmup Iteration   2: 141935,690 ops/s
[info] # Warmup Iteration   3: 143568,864 ops/s
[info] # Warmup Iteration   4: 143491,246 ops/s
[info] # Warmup Iteration   5: 141536,439 ops/s
[info] Iteration   1: 143072,664 ops/s
[info]                  ·gc.alloc.rate:                   707,612 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7411,480 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 143270,273 ops/s
[info]                  ·gc.alloc.rate:                   708,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7412,888 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 143537,784 ops/s
[info]                  ·gc.alloc.rate:                   709,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7398,379 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 140162,117 ops/s
[info]                  ·gc.alloc.rate:                   693,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7583,960 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 142993,993 ops/s
[info]                  ·gc.alloc.rate:                   707,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7433,850 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   142607,366 ±(99.9%) 5325,298 ops/s [Average]
[info]   (min, avg, max) = (140162,117, 142607,366, 143537,784), stdev = 1382,963
[info]   CI (99.9%): [137282,068, 147932,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   705,348 ±(99.9%) 26,338 MB/sec [Average]
[info]   (min, avg, max) = (693,261, 705,348, 709,970), stdev = 6,840
[info]   CI (99.9%): [679,010, 731,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7784,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7784,003, 7784,003, 7784,003), stdev = 0,001
[info]   CI (99.9%): [7784,003, 7784,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,183 ±(99.9%) 0,738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,183, 0,458), stdev = 0,192
[info]   CI (99.9%): [≈ 0, 0,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674,857 ±(99.9%) 2,648 MB/sec [Average]
[info]   (min, avg, max) = (673,747, 674,857, 675,445), stdev = 0,688
[info]   CI (99.9%): [672,209, 677,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7448,111 ±(99.9%) 296,488 B/op [Average]
[info]   (min, avg, max) = (7398,379, 7448,111, 7583,960), stdev = 76,997
[info]   CI (99.9%): [7151,623, 7744,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,13% complete, ETA 00:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188421,819 ops/s
[info] # Warmup Iteration   2: 205566,024 ops/s
[info] # Warmup Iteration   3: 206403,218 ops/s
[info] # Warmup Iteration   4: 207387,000 ops/s
[info] # Warmup Iteration   5: 206382,200 ops/s
[info] Iteration   1: 208613,821 ops/s
[info]                  ·gc.alloc.rate:                   858,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10166,152 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 208275,310 ops/s
[info]                  ·gc.alloc.rate:                   857,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5084,188 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 206394,030 ops/s
[info]                  ·gc.alloc.rate:                   849,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5119,960 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 208069,805 ops/s
[info]                  ·gc.alloc.rate:                   856,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5078,679 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 207930,069 ops/s
[info]                  ·gc.alloc.rate:                   856,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10164,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   207856,607 ±(99.9%) 3300,491 ops/s [Average]
[info]   (min, avg, max) = (206394,030, 207856,607, 208613,821), stdev = 857,127
[info]   CI (99.9%): [204556,117, 211157,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   855,807 ±(99.9%) 13,536 MB/sec [Average]
[info]   (min, avg, max) = (849,786, 855,807, 858,786), stdev = 3,515
[info]   CI (99.9%): [842,270, 869,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6480,002, 6480,002, 6480,002), stdev = 0,001
[info]   CI (99.9%): [6480,002, 6480,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,189 ±(99.9%) 0,789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,189, 0,471), stdev = 0,205
[info]   CI (99.9%): [≈ 0, 0,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941,183 ±(99.9%) 1419,738 MB/sec [Average]
[info]   (min, avg, max) = (671,429, 941,183, 1347,307), stdev = 368,701
[info]   CI (99.9%): [≈ 0, 2360,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7122,606 ±(99.9%) 10694,973 B/op [Average]
[info]   (min, avg, max) = (5078,679, 7122,606, 10166,152), stdev = 2777,450
[info]   CI (99.9%): [≈ 0, 17817,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82,33% complete, ETA 00:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9432,461 ops/s
[info] # Warmup Iteration   2: 19178,623 ops/s
[info] # Warmup Iteration   3: 19311,738 ops/s
[info] # Warmup Iteration   4: 19220,991 ops/s
[info] # Warmup Iteration   5: 19511,311 ops/s
[info] Iteration   1: 19452,667 ops/s
[info]                  ·gc.alloc.rate:                   1113,877 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109233,403 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19470,517 ops/s
[info]                  ·gc.alloc.rate:                   1114,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109218,815 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 19219,399 ops/s
[info]                  ·gc.alloc.rate:                   1100,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55333,178 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 19407,672 ops/s
[info]                  ·gc.alloc.rate:                   1111,485 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109702,666 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19388,497 ops/s
[info]                  ·gc.alloc.rate:                   1110,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109923,942 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   19387,750 ±(99.9%) 384,120 ops/s [Average]
[info]   (min, avg, max) = (19219,399, 19387,750, 19470,517), stdev = 99,755
[info]   CI (99.9%): [19003,630, 19771,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1110,245 ±(99.9%) 21,682 MB/sec [Average]
[info]   (min, avg, max) = (1100,699, 1110,245, 1114,824), stdev = 5,631
[info]   CI (99.9%): [1088,563, 1131,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90128,023 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (90128,021, 90128,023, 90128,028), stdev = 0,003
[info]   CI (99.9%): [90128,012, 90128,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,359 ±(99.9%) 7,390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,359, 5,048), stdev = 1,919
[info]   CI (99.9%): [≈ 0, 9,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1216,765 ±(99.9%) 1164,565 MB/sec [Average]
[info]   (min, avg, max) = (675,763, 1216,765, 1354,218), stdev = 302,434
[info]   CI (99.9%): [52,200, 2381,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   98682,401 ±(99.9%) 93319,806 B/op [Average]
[info]   (min, avg, max) = (55333,178, 98682,401, 109923,942), stdev = 24234,857
[info]   CI (99.9%): [5362,594, 192002,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,53% complete, ETA 00:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93376,975 ops/s
[info] # Warmup Iteration   2: 141312,283 ops/s
[info] # Warmup Iteration   3: 146205,923 ops/s
[info] # Warmup Iteration   4: 144874,722 ops/s
[info] # Warmup Iteration   5: 146701,960 ops/s
[info] Iteration   1: 137531,325 ops/s
[info]                  ·gc.alloc.rate:                   1384,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351,432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15465,970 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 147684,829 ops/s
[info]                  ·gc.alloc.rate:                   1486,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14416,758 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 147186,947 ops/s
[info]                  ·gc.alloc.rate:                   1481,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14472,646 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 147104,049 ops/s
[info]                  ·gc.alloc.rate:                   1480,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14495,260 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 146526,423 ops/s
[info]                  ·gc.alloc.rate:                   1474,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21854,426 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   145206,715 ±(99.9%) 16597,513 ops/s [Average]
[info]   (min, avg, max) = (137531,325, 145206,715, 147684,829), stdev = 4310,321
[info]   CI (99.9%): [128609,201, 161804,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1461,386 ±(99.9%) 167,055 MB/sec [Average]
[info]   (min, avg, max) = (1384,116, 1461,386, 1486,133), stdev = 43,384
[info]   CI (99.9%): [1294,331, 1628,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15840,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15840,003, 15840,003, 15840,003), stdev = 0,001
[info]   CI (99.9%): [15840,002, 15840,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,455 ±(99.9%) 1,385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,455, 0,890), stdev = 0,360
[info]   CI (99.9%): [≈ 0, 1,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1489,423 ±(99.9%) 1173,829 MB/sec [Average]
[info]   (min, avg, max) = (1351,432, 1489,423, 2034,732), stdev = 304,840
[info]   CI (99.9%): [315,594, 2663,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16141,012 ±(99.9%) 12412,546 B/op [Average]
[info]   (min, avg, max) = (14416,758, 16141,012, 21854,426), stdev = 3223,499
[info]   CI (99.9%): [3728,466, 28553,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,73% complete, ETA 00:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 544968,905 ops/s
[info] # Warmup Iteration   2: 575501,148 ops/s
[info] # Warmup Iteration   3: 482978,497 ops/s
[info] # Warmup Iteration   4: 580538,327 ops/s
[info] # Warmup Iteration   5: 573159,980 ops/s
[info] Iteration   1: 582985,719 ops/s
[info]                  ·gc.alloc.rate:                   648,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1821,618 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 583811,081 ops/s
[info]                  ·gc.alloc.rate:                   649,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1819,176 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 584636,167 ops/s
[info]                  ·gc.alloc.rate:                   650,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1811,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 583454,488 ops/s
[info]                  ·gc.alloc.rate:      649,489 MB/sec
[info]                  ·gc.alloc.rate.norm: 1752,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 572937,421 ops/s
[info]                  ·gc.alloc.rate:                   637,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1848,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   581564,975 ±(99.9%) 18716,335 ops/s [Average]
[info]   (min, avg, max) = (572937,421, 581564,975, 584636,167), stdev = 4860,573
[info]   CI (99.9%): [562848,641, 600281,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   647,405 ±(99.9%) 20,823 MB/sec [Average]
[info]   (min, avg, max) = (637,810, 647,405, 650,847), stdev = 5,408
[info]   CI (99.9%): [626,582, 668,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1752,001, 1752,001, 1752,001), stdev = 0,001
[info]   CI (99.9%): [1752,001, 1752,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,666 ±(99.9%) 5,597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 3,265), stdev = 1,453
[info]   CI (99.9%): [≈ 0, 6,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,797 ±(99.9%) 15,109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,797, 8,816), stdev = 3,924
[info]   CI (99.9%): [≈ 0, 16,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539,029 ±(99.9%) 1160,306 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,029, 674,827), stdev = 301,328
[info]   CI (99.9%): [≈ 0, 1699,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1459,978 ±(99.9%) 3143,166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1459,978, 1848,021), stdev = 816,270
[info]   CI (99.9%): [≈ 0, 4603,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82,93% complete, ETA 00:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 592801,435 ops/s
[info] # Warmup Iteration   2: 630283,234 ops/s
[info] # Warmup Iteration   3: 627760,256 ops/s
[info] # Warmup Iteration   4: 629429,796 ops/s
[info] # Warmup Iteration   5: 630241,750 ops/s
[info] Iteration   1: 630222,023 ops/s
[info]                  ·gc.alloc.rate:      12,814 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 632196,391 ops/s
[info]                  ·gc.alloc.rate:      12,853 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 630817,662 ops/s
[info]                  ·gc.alloc.rate:      12,827 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 629278,984 ops/s
[info]                  ·gc.alloc.rate:      12,796 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 624962,379 ops/s
[info]                  ·gc.alloc.rate:      12,708 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   629495,488 ±(99.9%) 10574,703 ops/s [Average]
[info]   (min, avg, max) = (624962,379, 629495,488, 632196,391), stdev = 2746,217
[info]   CI (99.9%): [618920,785, 640070,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12,800 ±(99.9%) 0,214 MB/sec [Average]
[info]   (min, avg, max) = (12,708, 12,800, 12,853), stdev = 0,055
[info]   CI (99.9%): [12,586, 13,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,001, 32,001, 32,001), stdev = 0,001
[info]   CI (99.9%): [32,001, 32,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,13% complete, ETA 00:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14557,021 ops/s
[info] # Warmup Iteration   2: 23401,189 ops/s
[info] # Warmup Iteration   3: 23445,317 ops/s
[info] # Warmup Iteration   4: 23575,111 ops/s
[info] # Warmup Iteration   5: 23114,247 ops/s
[info] Iteration   1: 23496,819 ops/s
[info]                  ·gc.alloc.rate:                   481,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34265,440 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 23596,021 ops/s
[info]                  ·gc.alloc.rate:                   483,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44944,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 23660,951 ops/s
[info]                  ·gc.alloc.rate:      485,103 MB/sec
[info]                  ·gc.alloc.rate.norm: 32264,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23605,231 ops/s
[info]                  ·gc.alloc.rate:                   483,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44923,110 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23530,243 ops/s
[info]                  ·gc.alloc.rate:                   482,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45131,182 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   23577,853 ±(99.9%) 249,685 ops/s [Average]
[info]   (min, avg, max) = (23496,819, 23577,853, 23660,951), stdev = 64,842
[info]   CI (99.9%): [23328,168, 23827,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   483,355 ±(99.9%) 5,300 MB/sec [Average]
[info]   (min, avg, max) = (481,608, 483,355, 485,103), stdev = 1,376
[info]   CI (99.9%): [478,055, 488,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32264,018 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (32264,017, 32264,018, 32264,019), stdev = 0,001
[info]   CI (99.9%): [32264,015, 32264,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,291), stdev = 0,128
[info]   CI (99.9%): [≈ 0, 0,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4,165 ±(99.9%) 32,960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,165, 19,439), stdev = 8,560
[info]   CI (99.9%): [≈ 0, 37,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   506,784 ±(99.9%) 1124,102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,784, 674,741), stdev = 291,926
[info]   CI (99.9%): [≈ 0, 1630,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33852,756 ±(99.9%) 75036,983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33852,756, 45131,182), stdev = 19486,866
[info]   CI (99.9%): [≈ 0, 108889,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83,33% complete, ETA 00:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70272,908 ops/s
[info] # Warmup Iteration   2: 81965,926 ops/s
[info] # Warmup Iteration   3: 82720,075 ops/s
[info] # Warmup Iteration   4: 82658,583 ops/s
[info] # Warmup Iteration   5: 82495,773 ops/s
[info] Iteration   1: 82060,959 ops/s
[info]                  ·gc.alloc.rate:                   1435,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38635,513 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 83088,147 ops/s
[info]                  ·gc.alloc.rate:                   1453,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25438,684 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 80096,869 ops/s
[info]                  ·gc.alloc.rate:                   1401,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26414,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 83039,083 ops/s
[info]                  ·gc.alloc.rate:                   1452,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25500,819 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 82921,512 ops/s
[info]                  ·gc.alloc.rate:                   1450,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25562,690 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   82241,314 ±(99.9%) 4888,726 ops/s [Average]
[info]   (min, avg, max) = (80096,869, 82241,314, 83088,147), stdev = 1269,587
[info]   CI (99.9%): [77352,588, 87130,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1438,532 ±(99.9%) 85,647 MB/sec [Average]
[info]   (min, avg, max) = (1401,034, 1438,532, 1453,509), stdev = 22,242
[info]   CI (99.9%): [1352,885, 1524,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27528,005, 27528,005, 27528,005), stdev = 0,001
[info]   CI (99.9%): [27528,004, 27528,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,716 ±(99.9%) 2,499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,716, 1,577), stdev = 0,649
[info]   CI (99.9%): [≈ 0, 3,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1478,843 ±(99.9%) 1152,518 MB/sec [Average]
[info]   (min, avg, max) = (1343,190, 1478,843, 2014,251), stdev = 299,305
[info]   CI (99.9%): [326,325, 2631,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28310,343 ±(99.9%) 22278,451 B/op [Average]
[info]   (min, avg, max) = (25438,684, 28310,343, 38635,513), stdev = 5785,643
[info]   CI (99.9%): [6031,892, 50588,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,53% complete, ETA 00:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85167,593 ops/s
[info] # Warmup Iteration   2: 161965,556 ops/s
[info] # Warmup Iteration   3: 162806,969 ops/s
[info] # Warmup Iteration   4: 163010,576 ops/s
[info] # Warmup Iteration   5: 162925,232 ops/s
[info] Iteration   1: 162265,010 ops/s
[info]                  ·gc.alloc.rate:                   693,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13069,729 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 163172,005 ops/s
[info]                  ·gc.alloc.rate:                   697,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6508,704 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 162516,663 ops/s
[info]                  ·gc.alloc.rate:                   694,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6534,329 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 162510,819 ops/s
[info]                  ·gc.alloc.rate:                   694,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6541,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 162843,964 ops/s
[info]                  ·gc.alloc.rate:                   696,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6527,649 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   162661,692 ±(99.9%) 1354,304 ops/s [Average]
[info]   (min, avg, max) = (162265,010, 162661,692, 163172,005), stdev = 351,708
[info]   CI (99.9%): [161307,388, 164015,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   695,370 ±(99.9%) 5,853 MB/sec [Average]
[info]   (min, avg, max) = (693,645, 695,370, 697,590), stdev = 1,520
[info]   CI (99.9%): [689,517, 701,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6728,003, 6728,003, 6728,003), stdev = 0,001
[info]   CI (99.9%): [6728,002, 6728,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,079 ±(99.9%) 0,551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,333), stdev = 0,143
[info]   CI (99.9%): [≈ 0, 0,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,767 ±(99.9%) 5,341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,767, 3,230), stdev = 1,387
[info]   CI (99.9%): [≈ 0, 6,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809,579 ±(99.9%) 1157,844 MB/sec [Average]
[info]   (min, avg, max) = (674,752, 809,579, 1347,466), stdev = 300,688
[info]   CI (99.9%): [≈ 0, 1967,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7836,286 ±(99.9%) 11265,475 B/op [Average]
[info]   (min, avg, max) = (6508,704, 7836,286, 13069,729), stdev = 2925,608
[info]   CI (99.9%): [≈ 0, 19101,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,73% complete, ETA 00:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214015,266 ops/s
[info] # Warmup Iteration   2: 229484,020 ops/s
[info] # Warmup Iteration   3: 229560,783 ops/s
[info] # Warmup Iteration   4: 229221,442 ops/s
[info] # Warmup Iteration   5: 229905,075 ops/s
[info] Iteration   1: 232834,224 ops/s
[info]                  ·gc.alloc.rate:                   829,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4561,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 233356,814 ops/s
[info]                  ·gc.alloc.rate:                   831,538 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9075,429 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 232398,842 ops/s
[info]                  ·gc.alloc.rate:                   828,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4546,964 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 231836,098 ops/s
[info]                  ·gc.alloc.rate:                   826,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4558,200 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 229533,150 ops/s
[info]                  ·gc.alloc.rate:                   817,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4604,186 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   231991,826 ±(99.9%) 5713,968 ops/s [Average]
[info]   (min, avg, max) = (229533,150, 231991,826, 233356,814), stdev = 1483,899
[info]   CI (99.9%): [226277,858, 237705,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   826,673 ±(99.9%) 20,301 MB/sec [Average]
[info]   (min, avg, max) = (817,903, 826,673, 831,538), stdev = 5,272
[info]   CI (99.9%): [806,373, 846,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5608,002, 5608,002, 5608,002), stdev = 0,001
[info]   CI (99.9%): [5608,002, 5608,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,084 ±(99.9%) 0,297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,084, 0,141), stdev = 0,077
[info]   CI (99.9%): [≈ 0, 0,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806,976 ±(99.9%) 1159,609 MB/sec [Average]
[info]   (min, avg, max) = (671,449, 806,976, 1345,678), stdev = 301,147
[info]   CI (99.9%): [≈ 0, 1966,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5469,165 ±(99.9%) 7763,209 B/op [Average]
[info]   (min, avg, max) = (4546,964, 5469,165, 9075,429), stdev = 2016,081
[info]   CI (99.9%): [≈ 0, 13232,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,94% complete, ETA 00:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30981,215 ops/s
[info] # Warmup Iteration   2: 46034,641 ops/s
[info] # Warmup Iteration   3: 46390,668 ops/s
[info] # Warmup Iteration   4: 46713,746 ops/s
[info] # Warmup Iteration   5: 46930,158 ops/s
[info] Iteration   1: 47024,947 ops/s
[info]                  ·gc.alloc.rate:                   1949,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68007,847 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 47043,704 ops/s
[info]                  ·gc.alloc.rate:                   1950,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68070,972 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 46952,939 ops/s
[info]                  ·gc.alloc.rate:                   1946,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68246,083 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 46836,220 ops/s
[info]                  ·gc.alloc.rate:                   1941,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68490,492 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 46843,336 ops/s
[info]                  ·gc.alloc.rate:                   1941,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1359,421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45676,860 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   46940,229 ±(99.9%) 376,557 ops/s [Average]
[info]   (min, avg, max) = (46836,220, 46940,229, 47043,704), stdev = 97,791
[info]   CI (99.9%): [46563,672, 47316,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1946,094 ±(99.9%) 15,731 MB/sec [Average]
[info]   (min, avg, max) = (1941,890, 1946,094, 1950,458), stdev = 4,085
[info]   CI (99.9%): [1930,363, 1961,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65248,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65248,009, 65248,009, 65248,009), stdev = 0,001
[info]   CI (99.9%): [65248,008, 65248,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,534 ±(99.9%) 5,158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,534, 3,483), stdev = 1,340
[info]   CI (99.9%): [≈ 0, 6,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1900,160 ±(99.9%) 1164,015 MB/sec [Average]
[info]   (min, avg, max) = (1359,421, 1900,160, 2038,392), stdev = 302,291
[info]   CI (99.9%): [736,144, 3064,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   63698,451 ±(99.9%) 38799,522 B/op [Average]
[info]   (min, avg, max) = (45676,860, 63698,451, 68490,492), stdev = 10076,113
[info]   CI (99.9%): [24898,929, 102497,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84,14% complete, ETA 00:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120831,717 ops/s
[info] # Warmup Iteration   2: 133159,960 ops/s
[info] # Warmup Iteration   3: 134023,799 ops/s
[info] # Warmup Iteration   4: 134515,612 ops/s
[info] # Warmup Iteration   5: 134726,458 ops/s
[info] Iteration   1: 118583,575 ops/s
[info]                  ·gc.alloc.rate:                   1098,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17823,423 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 134451,270 ops/s
[info]                  ·gc.alloc.rate:                   1245,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15719,985 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 135231,908 ops/s
[info]                  ·gc.alloc.rate:                   1253,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7818,541 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 134435,800 ops/s
[info]                  ·gc.alloc.rate:                   1245,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15733,319 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 134547,700 ops/s
[info]                  ·gc.alloc.rate:                   1246,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15731,679 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   131450,050 ±(99.9%) 27725,044 ops/s [Average]
[info]   (min, avg, max) = (118583,575, 131450,050, 135231,908), stdev = 7200,106
[info]   CI (99.9%): [103725,007, 159175,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1218,134 ±(99.9%) 257,113 MB/sec [Average]
[info]   (min, avg, max) = (1098,815, 1218,134, 1253,197), stdev = 66,771
[info]   CI (99.9%): [961,022, 1475,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   14584,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14584,003, 14584,003, 14584,003), stdev = 0,001
[info]   CI (99.9%): [14584,002, 14584,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,305 ±(99.9%) 0,850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,305, 0,553), stdev = 0,221
[info]   CI (99.9%): [≈ 0, 1,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1209,348 ±(99.9%) 1157,024 MB/sec [Average]
[info]   (min, avg, max) = (671,844, 1209,348, 1345,020), stdev = 300,476
[info]   CI (99.9%): [52,324, 2366,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   14565,389 ±(99.9%) 14937,338 B/op [Average]
[info]   (min, avg, max) = (7818,541, 14565,389, 17823,423), stdev = 3879,179
[info]   CI (99.9%): [≈ 0, 29502,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84,34% complete, ETA 00:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233716,918 ops/s
[info] # Warmup Iteration   2: 290399,628 ops/s
[info] # Warmup Iteration   3: 293135,582 ops/s
[info] # Warmup Iteration   4: 294295,895 ops/s
[info] # Warmup Iteration   5: 293535,065 ops/s
[info] Iteration   1: 292441,344 ops/s
[info]                  ·gc.alloc.rate:                   1376,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7224,116 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 293229,230 ops/s
[info]                  ·gc.alloc.rate:                   1380,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7204,828 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 293089,154 ops/s
[info]                  ·gc.alloc.rate:                   1379,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7213,217 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 293761,924 ops/s
[info]                  ·gc.alloc.rate:                   1382,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7201,998 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 292764,848 ops/s
[info]                  ·gc.alloc.rate:                   1378,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7233,608 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   293057,300 ±(99.9%) 1917,605 ops/s [Average]
[info]   (min, avg, max) = (292441,344, 293057,300, 293761,924), stdev = 497,996
[info]   CI (99.9%): [291139,695, 294974,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1379,493 ±(99.9%) 9,224 MB/sec [Average]
[info]   (min, avg, max) = (1376,482, 1379,493, 1382,809), stdev = 2,396
[info]   CI (99.9%): [1370,269, 1388,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7408,001, 7408,001, 7408,002), stdev = 0,001
[info]   CI (99.9%): [7408,001, 7408,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,134 ±(99.9%) 0,361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,134, 0,224), stdev = 0,094
[info]   CI (99.9%): [≈ 0, 0,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1343,653 ±(99.9%) 5,269 MB/sec [Average]
[info]   (min, avg, max) = (1342,314, 1343,653, 1345,644), stdev = 1,368
[info]   CI (99.9%): [1338,385, 1348,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7215,554 ±(99.9%) 51,068 B/op [Average]
[info]   (min, avg, max) = (7201,998, 7215,554, 7233,608), stdev = 13,262
[info]   CI (99.9%): [7164,486, 7266,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,54% complete, ETA 00:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346179,535 ops/s
[info] # Warmup Iteration   2: 562994,763 ops/s
[info] # Warmup Iteration   3: 559585,234 ops/s
[info] # Warmup Iteration   4: 560109,734 ops/s
[info] # Warmup Iteration   5: 555550,239 ops/s
[info] Iteration   1: 559704,311 ops/s
[info]                  ·gc.alloc.rate:                   449,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1438,502 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 559854,454 ops/s
[info]                  ·gc.alloc.rate:      449,644 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 559088,119 ops/s
[info]                  ·gc.alloc.rate:                   449,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1896,700 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 558173,379 ops/s
[info]                  ·gc.alloc.rate:                   448,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1899,907 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 560327,053 ops/s
[info]                  ·gc.alloc.rate:      450,019 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   559429,463 ±(99.9%) 3196,318 ops/s [Average]
[info]   (min, avg, max) = (558173,379, 559429,463, 560327,053), stdev = 830,074
[info]   CI (99.9%): [556233,145, 562625,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   449,329 ±(99.9%) 2,429 MB/sec [Average]
[info]   (min, avg, max) = (448,355, 449,329, 450,019), stdev = 0,631
[info]   CI (99.9%): [446,900, 451,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,333), stdev = 0,147
[info]   CI (99.9%): [≈ 0, 0,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,199 ±(99.9%) 1,592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,199, 0,938), stdev = 0,414
[info]   CI (99.9%): [≈ 0, 1,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   371,882 ±(99.9%) 1331,910 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371,882, 673,946), stdev = 345,893
[info]   CI (99.9%): [≈ 0, 1703,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1047,022 ±(99.9%) 3750,739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1047,022, 1899,907), stdev = 974,055
[info]   CI (99.9%): [≈ 0, 4797,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,74% complete, ETA 00:20:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635357,678 ops/s
[info] # Warmup Iteration   2: 661640,420 ops/s
[info] # Warmup Iteration   3: 674238,196 ops/s
[info] # Warmup Iteration   4: 672996,098 ops/s
[info] # Warmup Iteration   5: 676606,930 ops/s
[info] Iteration   1: 672489,455 ops/s
[info]                  ·gc.alloc.rate:                   355,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1197,206 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 673317,086 ops/s
[info]                  ·gc.alloc.rate:      355,987 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 673178,156 ops/s
[info]                  ·gc.alloc.rate:                   355,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1196,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 666427,153 ops/s
[info]                  ·gc.alloc.rate:                   352,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1208,127 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 677574,380 ops/s
[info]                  ·gc.alloc.rate:      358,253 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   672597,246 ±(99.9%) 15367,538 ops/s [Average]
[info]   (min, avg, max) = (666427,153, 672597,246, 677574,380), stdev = 3990,901
[info]   CI (99.9%): [657229,708, 687964,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   355,591 ±(99.9%) 8,078 MB/sec [Average]
[info]   (min, avg, max) = (352,384, 355,591, 358,253), stdev = 2,098
[info]   CI (99.9%): [347,512, 363,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (832,001, 832,001, 832,001), stdev = 0,001
[info]   CI (99.9%): [832,001, 832,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,003 ±(99.9%) 0,029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,017), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,008 ±(99.9%) 0,068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,039), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306,948 ±(99.9%) 1078,966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,948, 511,688), stdev = 280,204
[info]   CI (99.9%): [≈ 0, 1385,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   720,267 ±(99.9%) 2531,905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 720,267, 1208,127), stdev = 657,528
[info]   CI (99.9%): [≈ 0, 3252,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84,94% complete, ETA 00:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695553,312 ops/s
[info] # Warmup Iteration   2: 748764,206 ops/s
[info] # Warmup Iteration   3: 774186,479 ops/s
[info] # Warmup Iteration   4: 770268,658 ops/s
[info] # Warmup Iteration   5: 777852,329 ops/s
[info] Iteration   1: 777001,223 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 772372,803 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 772013,496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 775201,532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 765740,075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   772465,826 ±(99.9%) 16506,522 ops/s [Average]
[info]   (min, avg, max) = (765740,075, 772465,826, 777001,223), stdev = 4286,691
[info]   CI (99.9%): [755959,304, 788972,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85,14% complete, ETA 00:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26899,192 ops/s
[info] # Warmup Iteration   2: 37381,984 ops/s
[info] # Warmup Iteration   3: 37402,292 ops/s
[info] # Warmup Iteration   4: 37722,480 ops/s
[info] # Warmup Iteration   5: 37910,300 ops/s
[info] Iteration   1: 37448,388 ops/s
[info]                  ·gc.alloc.rate:                   1940,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010,930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84504,783 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37897,525 ops/s
[info]                  ·gc.alloc.rate:                   1963,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83642,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 37835,474 ops/s
[info]                  ·gc.alloc.rate:                   1960,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83945,378 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 37916,116 ops/s
[info]                  ·gc.alloc.rate:                   1964,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55934,744 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37840,746 ops/s
[info]                  ·gc.alloc.rate:                   1960,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84218,522 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   37787,650 ±(99.9%) 742,637 ops/s [Average]
[info]   (min, avg, max) = (37448,388, 37787,650, 37916,116), stdev = 192,861
[info]   CI (99.9%): [37045,012, 38530,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1957,786 ±(99.9%) 38,320 MB/sec [Average]
[info]   (min, avg, max) = (1940,284, 1957,786, 1964,419), stdev = 9,952
[info]   CI (99.9%): [1919,467, 1996,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81536,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81536,011, 81536,011, 81536,012), stdev = 0,001
[info]   CI (99.9%): [81536,009, 81536,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,256 ±(99.9%) 5,062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,256, 3,463), stdev = 1,315
[info]   CI (99.9%): [≈ 0, 7,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1883,183 ±(99.9%) 1153,025 MB/sec [Average]
[info]   (min, avg, max) = (1347,616, 1883,183, 2024,970), stdev = 299,437
[info]   CI (99.9%): [730,159, 3036,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78449,102 ±(99.9%) 48479,511 B/op [Average]
[info]   (min, avg, max) = (55934,744, 78449,102, 84504,783), stdev = 12589,975
[info]   CI (99.9%): [29969,591, 126928,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85,34% complete, ETA 00:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141985,882 ops/s
[info] # Warmup Iteration   2: 153042,052 ops/s
[info] # Warmup Iteration   3: 153371,478 ops/s
[info] # Warmup Iteration   4: 153963,224 ops/s
[info] # Warmup Iteration   5: 153777,247 ops/s
[info] Iteration   1: 153808,757 ops/s
[info]                  ·gc.alloc.rate:                   1143,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13754,275 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 153913,199 ops/s
[info]                  ·gc.alloc.rate:                   1144,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13732,252 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 152121,916 ops/s
[info]                  ·gc.alloc.rate:                   1131,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13896,707 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 153839,619 ops/s
[info]                  ·gc.alloc.rate:                   1144,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6872,434 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 150891,749 ops/s
[info]                  ·gc.alloc.rate:                   1122,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14020,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   152915,048 ±(99.9%) 5227,755 ops/s [Average]
[info]   (min, avg, max) = (150891,749, 152915,048, 153913,199), stdev = 1357,631
[info]   CI (99.9%): [147687,293, 158142,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1137,155 ±(99.9%) 38,739 MB/sec [Average]
[info]   (min, avg, max) = (1122,166, 1137,155, 1144,540), stdev = 10,060
[info]   CI (99.9%): [1098,416, 1175,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11704,003, 11704,003, 11704,003), stdev = 0,001
[info]   CI (99.9%): [11704,002, 11704,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,387 ±(99.9%) 1,087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,387, 0,651), stdev = 0,282
[info]   CI (99.9%): [≈ 0, 1,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1209,242 ±(99.9%) 1156,934 MB/sec [Average]
[info]   (min, avg, max) = (671,779, 1209,242, 1344,249), stdev = 300,452
[info]   CI (99.9%): [52,309, 2366,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   12455,192 ±(99.9%) 12025,664 B/op [Average]
[info]   (min, avg, max) = (6872,434, 12455,192, 14020,291), stdev = 3123,027
[info]   CI (99.9%): [429,527, 24480,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85,54% complete, ETA 00:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55020,433 ops/s
[info] # Warmup Iteration   2: 68399,594 ops/s
[info] # Warmup Iteration   3: 68639,408 ops/s
[info] # Warmup Iteration   4: 68662,362 ops/s
[info] # Warmup Iteration   5: 69329,257 ops/s
[info] Iteration   1: 68925,859 ops/s
[info]                  ·gc.alloc.rate:                   3121,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3375,910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77089,546 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 69394,385 ops/s
[info]                  ·gc.alloc.rate:                   3143,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3385,617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76772,793 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 69572,421 ops/s
[info]                  ·gc.alloc.rate:                   3151,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61364,954 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 69487,625 ops/s
[info]                  ·gc.alloc.rate:                   3147,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395,960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76914,583 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 69040,714 ops/s
[info]                  ·gc.alloc.rate:                   3127,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719,702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61996,232 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   69284,201 ±(99.9%) 1096,399 ops/s [Average]
[info]   (min, avg, max) = (68925,859, 69284,201, 69572,421), stdev = 284,731
[info]   CI (99.9%): [68187,802, 70380,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3138,324 ±(99.9%) 49,905 MB/sec [Average]
[info]   (min, avg, max) = (3121,849, 3138,324, 3151,177), stdev = 12,960
[info]   CI (99.9%): [3088,419, 3188,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   71288,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (71288,006, 71288,006, 71288,007), stdev = 0,001
[info]   CI (99.9%): [71288,005, 71288,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,162 ±(99.9%) 0,351 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,162, 0,291), stdev = 0,091
[info]   CI (99.9%): [≈ 0, 0,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,691 ±(99.9%) 8,018 B/op [Average]
[info]   (min, avg, max) = (0,944, 3,691, 6,654), stdev = 2,082
[info]   CI (99.9%): [≈ 0, 11,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3117,946 ±(99.9%) 1412,765 MB/sec [Average]
[info]   (min, avg, max) = (2712,544, 3117,946, 3395,960), stdev = 366,891
[info]   CI (99.9%): [1705,182, 4530,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   70827,622 ±(99.9%) 32167,480 B/op [Average]
[info]   (min, avg, max) = (61364,954, 70827,622, 77089,546), stdev = 8353,792
[info]   CI (99.9%): [38660,142, 102995,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,74% complete, ETA 00:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84291,309 ops/s
[info] # Warmup Iteration   2: 141157,379 ops/s
[info] # Warmup Iteration   3: 141638,385 ops/s
[info] # Warmup Iteration   4: 140960,678 ops/s
[info] # Warmup Iteration   5: 139038,502 ops/s
[info] Iteration   1: 142411,331 ops/s
[info]                  ·gc.alloc.rate:                   1836,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22433,626 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 140620,448 ops/s
[info]                  ·gc.alloc.rate:                   1813,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22751,692 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 141224,725 ops/s
[info]                  ·gc.alloc.rate:                   1821,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356,516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15115,091 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 141823,814 ops/s
[info]                  ·gc.alloc.rate:                   1828,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22597,633 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 141759,565 ops/s
[info]                  ·gc.alloc.rate:                   1828,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22622,624 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   141567,977 ±(99.9%) 2603,842 ops/s [Average]
[info]   (min, avg, max) = (140620,448, 141567,977, 142411,331), stdev = 676,210
[info]   CI (99.9%): [138964,134, 144171,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1825,694 ±(99.9%) 33,176 MB/sec [Average]
[info]   (min, avg, max) = (1813,564, 1825,694, 1836,471), stdev = 8,616
[info]   CI (99.9%): [1792,518, 1858,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20296,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20296,003, 20296,003, 20296,003), stdev = 0,001
[info]   CI (99.9%): [20296,002, 20296,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,083, 0,125), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,926 ±(99.9%) 1,668 B/op [Average]
[info]   (min, avg, max) = (0,232, 0,926, 1,386), stdev = 0,433
[info]   CI (99.9%): [≈ 0, 2,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1898,663 ±(99.9%) 1167,071 MB/sec [Average]
[info]   (min, avg, max) = (1356,516, 1898,663, 2037,582), stdev = 303,085
[info]   CI (99.9%): [731,593, 3065,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21104,133 ±(99.9%) 12899,224 B/op [Average]
[info]   (min, avg, max) = (15115,091, 21104,133, 22751,692), stdev = 3349,888
[info]   CI (99.9%): [8204,909, 34003,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,94% complete, ETA 00:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 551562,026 ops/s
[info] # Warmup Iteration   2: 571370,638 ops/s
[info] # Warmup Iteration   3: 560501,041 ops/s
[info] # Warmup Iteration   4: 557160,779 ops/s
[info] # Warmup Iteration   5: 573099,677 ops/s
[info] Iteration   1: 575590,163 ops/s
[info]                  ·gc.alloc.rate:                   1503,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3672,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 575569,635 ops/s
[info]                  ·gc.alloc.rate:                   1503,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3673,960 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 574459,572 ops/s
[info]                  ·gc.alloc.rate:                   1500,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5526,909 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 576698,810 ops/s
[info]                  ·gc.alloc.rate:                   1506,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3675,725 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 575103,872 ops/s
[info]                  ·gc.alloc.rate:                   1502,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3689,582 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   575484,411 ±(99.9%) 3156,773 ops/s [Average]
[info]   (min, avg, max) = (574459,572, 575484,411, 576698,810), stdev = 819,804
[info]   CI (99.9%): [572327,637, 578641,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1503,581 ±(99.9%) 8,235 MB/sec [Average]
[info]   (min, avg, max) = (1500,918, 1503,581, 1506,747), stdev = 2,139
[info]   CI (99.9%): [1495,346, 1511,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,046, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,125 ±(99.9%) 0,099 B/op [Average]
[info]   (min, avg, max) = (0,114, 0,125, 0,171), stdev = 0,026
[info]   CI (99.9%): [0,027, 0,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1479,814 ±(99.9%) 1157,167 MB/sec [Average]
[info]   (min, avg, max) = (1342,875, 1479,814, 2017,373), stdev = 300,513
[info]   CI (99.9%): [322,646, 2636,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4047,659 ±(99.9%) 3184,306 B/op [Average]
[info]   (min, avg, max) = (3672,120, 4047,659, 5526,909), stdev = 826,954
[info]   CI (99.9%): [863,353, 7231,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86,14% complete, ETA 00:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8542,392 ops/s
[info] # Warmup Iteration   2: 17945,995 ops/s
[info] # Warmup Iteration   3: 17945,777 ops/s
[info] # Warmup Iteration   4: 17779,492 ops/s
[info] # Warmup Iteration   5: 17778,653 ops/s
[info] Iteration   1: 17932,614 ops/s
[info]                  ·gc.alloc.rate:                   2284,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178299,426 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 17744,132 ops/s
[info]                  ·gc.alloc.rate:                   2261,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713,912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240638,384 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 17770,890 ops/s
[info]                  ·gc.alloc.rate:                   2264,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180406,516 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 17957,185 ops/s
[info]                  ·gc.alloc.rate:                   2288,094 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178635,038 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 17857,128 ops/s
[info]                  ·gc.alloc.rate:                   2275,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719,672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239703,029 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   17852,390 ±(99.9%) 364,300 ops/s [Average]
[info]   (min, avg, max) = (17744,132, 17852,390, 17957,185), stdev = 94,608
[info]   CI (99.9%): [17488,089, 18216,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2274,774 ±(99.9%) 45,344 MB/sec [Average]
[info]   (min, avg, max) = (2261,549, 2274,774, 2288,094), stdev = 11,776
[info]   CI (99.9%): [2229,430, 2320,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200528,024 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (200528,023, 200528,024, 200528,029), stdev = 0,003
[info]   CI (99.9%): [200528,014, 200528,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,934 ±(99.9%) 6,282 B/op [Average]
[info]   (min, avg, max) = (1,827, 2,934, 5,473), stdev = 1,631
[info]   CI (99.9%): [≈ 0, 9,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2308,088 ±(99.9%) 1436,711 MB/sec [Average]
[info]   (min, avg, max) = (2031,323, 2308,088, 2719,672), stdev = 373,109
[info]   CI (99.9%): [871,377, 3744,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   203536,479 ±(99.9%) 128817,659 B/op [Average]
[info]   (min, avg, max) = (178299,426, 203536,479, 240638,384), stdev = 33453,537
[info]   CI (99.9%): [74718,819, 332354,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86,35% complete, ETA 00:18:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33533,677 ops/s
[info] # Warmup Iteration   2: 43766,238 ops/s
[info] # Warmup Iteration   3: 43734,537 ops/s
[info] # Warmup Iteration   4: 43694,756 ops/s
[info] # Warmup Iteration   5: 44101,028 ops/s
[info] Iteration   1: 44272,219 ops/s
[info]                  ·gc.alloc.rate:                   2470,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              87840,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2690,912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95663,054 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 44368,609 ops/s
[info]                  ·gc.alloc.rate:                   2476,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              87840,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697,434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95675,235 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 44384,674 ops/s
[info]                  ·gc.alloc.rate:                   2477,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              87840,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71876,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44245,754 ops/s
[info]                  ·gc.alloc.rate:                   2469,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              87840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707,008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96294,411 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 44197,994 ops/s
[info]                  ·gc.alloc.rate:                   2466,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              87840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96574,687 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   44293,850 ±(99.9%) 309,296 ops/s [Average]
[info]   (min, avg, max) = (44197,994, 44293,850, 44384,674), stdev = 80,323
[info]   CI (99.9%): [43984,554, 44603,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2472,216 ±(99.9%) 17,693 MB/sec [Average]
[info]   (min, avg, max) = (2466,897, 2472,216, 2477,453), stdev = 4,595
[info]   CI (99.9%): [2454,523, 2489,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87840,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87840,009, 87840,010, 87840,010), stdev = 0,001
[info]   CI (99.9%): [87840,008, 87840,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,092 ±(99.9%) 0,257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,092, 0,146), stdev = 0,067
[info]   CI (99.9%): [≈ 0, 0,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,253 ±(99.9%) 9,132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,253, 5,183), stdev = 2,371
[info]   CI (99.9%): [≈ 0, 12,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2566,955 ±(99.9%) 1162,260 MB/sec [Average]
[info]   (min, avg, max) = (2027,218, 2566,955, 2712,202), stdev = 301,835
[info]   CI (99.9%): [1404,695, 3729,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   91216,792 ±(99.9%) 41659,102 B/op [Average]
[info]   (min, avg, max) = (71876,574, 91216,792, 96574,687), stdev = 10818,736
[info]   CI (99.9%): [49557,691, 132875,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,55% complete, ETA 00:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6f4166c4/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 149152,889 ops/s
[info] # Warmup Iteration   2: 236776,496 ops/s
[info] # Warmup Iteration   3: 236373,648 ops/s
[info] # Warmup Iteration   4: 233130,148 ops/s
[info] # Warmup Iteration   5: 237194,370 ops/s
[info] Iteration   1: 236688,460 ops/s
[info]                  ·gc.alloc.rate:                   1100,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8975,722 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 236091,419 ops/s
[info]                  ·gc.alloc.rate:                   1098,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9003,616 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 236487,554 ops/s
[info]                  ·gc.alloc.rate:                   1099,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4494,999 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 236310,338 ops/s
[info]                  ·gc.alloc.rate:                   1099,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9005,679 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 220638,786 ops/s
[info]                  ·gc.alloc.rate:                   1026,143 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4827,505 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   233243,311 ±(99.9%) 27145,442 ops/s [Average]
[info]   (min, avg, max) = (220638,786, 233243,311, 236688,460), stdev = 7049,585
[info]   CI (99.9%): [206097,870, 260388,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1084,813 ±(99.9%) 126,348 MB/sec [Average]
[info]   (min, avg, max) = (1026,143, 1084,813, 1100,769), stdev = 32,812
[info]   CI (99.9%): [958,465, 1211,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7320,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7320,002, 7320,002, 7320,002), stdev = 0,001
[info]   CI (99.9%): [7320,002, 7320,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,254 ±(99.9%) 0,796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,254, 0,555), stdev = 0,207
[info]   CI (99.9%): [≈ 0, 1,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080,965 ±(99.9%) 1423,219 MB/sec [Average]
[info]   (min, avg, max) = (675,432, 1080,965, 1352,230), stdev = 369,605
[info]   CI (99.9%): [≈ 0, 2504,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7261,504 ±(99.9%) 9151,568 B/op [Average]
[info]   (min, avg, max) = (4494,999, 7261,504, 9005,679), stdev = 2376,633
[info]   CI (99.9%): [≈ 0, 16413,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,75% complete, ETA 00:17:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1219860,793 ops/s
[info] # Warmup Iteration   2: 1232372,115 ops/s
[info] # Warmup Iteration   3: 1222043,424 ops/s
[info] # Warmup Iteration   4: 1245239,244 ops/s
[info] # Warmup Iteration   5: 1245885,253 ops/s
[info] Iteration   1: 1240990,000 ops/s
[info]                  ·gc.alloc.rate:                   624,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 855,760 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1236219,207 ops/s
[info]                  ·gc.alloc.rate:                   622,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 859,114 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1235178,767 ops/s
[info]                  ·gc.alloc.rate:      621,596 MB/sec
[info]                  ·gc.alloc.rate.norm: 792,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1235940,971 ops/s
[info]                  ·gc.alloc.rate:                   621,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 856,692 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1236061,152 ops/s
[info]                  ·gc.alloc.rate:                   622,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 856,642 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1236878,019 ±(99.9%) 8984,307 ops/s [Average]
[info]   (min, avg, max) = (1235178,767, 1236878,019, 1240990,000), stdev = 2333,196
[info]   CI (99.9%): [1227893,713, 1245862,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   622,453 ±(99.9%) 4,366 MB/sec [Average]
[info]   (min, avg, max) = (621,596, 622,453, 624,442), stdev = 1,134
[info]   CI (99.9%): [618,086, 626,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   792,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (792,000, 792,000, 792,000), stdev = 0,001
[info]   CI (99.9%): [792,000, 792,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,672 ±(99.9%) 5,650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,672, 3,296), stdev = 1,467
[info]   CI (99.9%): [≈ 0, 6,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,852 ±(99.9%) 7,166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,852, 4,181), stdev = 1,861
[info]   CI (99.9%): [≈ 0, 8,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539,047 ±(99.9%) 1160,347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,047, 674,908), stdev = 301,338
[info]   CI (99.9%): [≈ 0, 1699,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   685,642 ±(99.9%) 1475,903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 685,642, 859,114), stdev = 383,287
[info]   CI (99.9%): [≈ 0, 2161,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86,95% complete, ETA 00:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1270724,512 ops/s
[info] # Warmup Iteration   2: 1273013,652 ops/s
[info] # Warmup Iteration   3: 1288544,210 ops/s
[info] # Warmup Iteration   4: 1288420,538 ops/s
[info] # Warmup Iteration   5: 1290782,919 ops/s
[info] Iteration   1: 1287007,567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1233289,864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1291734,243 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1288157,055 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1288312,640 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1277700,274 ±(99.9%) 95838,286 ops/s [Average]
[info]   (min, avg, max) = (1233289,864, 1277700,274, 1291734,243), stdev = 24888,899
[info]   CI (99.9%): [1181861,987, 1373538,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87,15% complete, ETA 00:17:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22532,908 ops/s
[info] # Warmup Iteration   2: 36852,191 ops/s
[info] # Warmup Iteration   3: 36918,001 ops/s
[info] # Warmup Iteration   4: 36422,571 ops/s
[info] # Warmup Iteration   5: 36791,652 ops/s
[info] Iteration   1: 36796,251 ops/s
[info]                  ·gc.alloc.rate:                   1970,441 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029,516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86806,800 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 36349,065 ops/s
[info]                  ·gc.alloc.rate:                   1946,701 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88015,890 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 36717,388 ops/s
[info]                  ·gc.alloc.rate:                   1966,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034,243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87186,222 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 36709,158 ops/s
[info]                  ·gc.alloc.rate:                   1965,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87307,554 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 36679,107 ops/s
[info]                  ·gc.alloc.rate:                   1964,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87433,735 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   36650,194 ±(99.9%) 669,279 ops/s [Average]
[info]   (min, avg, max) = (36349,065, 36650,194, 36796,251), stdev = 173,810
[info]   CI (99.9%): [35980,915, 37319,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1962,797 ±(99.9%) 35,686 MB/sec [Average]
[info]   (min, avg, max) = (1946,701, 1962,797, 1970,441), stdev = 9,268
[info]   CI (99.9%): [1927,111, 1998,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   84280,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84280,011, 84280,011, 84280,012), stdev = 0,001
[info]   CI (99.9%): [84280,010, 84280,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,857 ±(99.9%) 4,469 B/op [Average]
[info]   (min, avg, max) = (0,901, 2,857, 3,573), stdev = 1,160
[info]   CI (99.9%): [≈ 0, 7,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2034,259 ±(99.9%) 12,643 MB/sec [Average]
[info]   (min, avg, max) = (2029,516, 2034,259, 2037,934), stdev = 3,283
[info]   CI (99.9%): [2021,616, 2046,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87350,040 ±(99.9%) 1693,969 B/op [Average]
[info]   (min, avg, max) = (86806,800, 87350,040, 88015,890), stdev = 439,918
[info]   CI (99.9%): [85656,071, 89044,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87,35% complete, ETA 00:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 436491,975 ops/s
[info] # Warmup Iteration   2: 746494,957 ops/s
[info] # Warmup Iteration   3: 754032,246 ops/s
[info] # Warmup Iteration   4: 763285,314 ops/s
[info] # Warmup Iteration   5: 761185,161 ops/s
[info] Iteration   1: 762512,271 ops/s
[info]                  ·gc.alloc.rate:                   2329,380 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4164,633 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 762892,217 ops/s
[info]                  ·gc.alloc.rate:                   2330,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2695,592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5560,273 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 762779,393 ops/s
[info]                  ·gc.alloc.rate:                   2330,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025,953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4180,132 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 760949,854 ops/s
[info]                  ·gc.alloc.rate:                   2324,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705,777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5596,234 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 761411,943 ops/s
[info]                  ·gc.alloc.rate:                   2326,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4201,635 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   762109,136 ±(99.9%) 3365,181 ops/s [Average]
[info]   (min, avg, max) = (760949,854, 762109,136, 762892,217), stdev = 873,927
[info]   CI (99.9%): [758743,955, 765474,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2328,288 ±(99.9%) 10,397 MB/sec [Average]
[info]   (min, avg, max) = (2324,666, 2328,288, 2330,894), stdev = 2,700
[info]   CI (99.9%): [2317,891, 2338,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4808,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4808,001, 4808,001, 4808,001), stdev = 0,001
[info]   CI (99.9%): [4808,000, 4808,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,138 ±(99.9%) 0,139 B/op [Average]
[info]   (min, avg, max) = (0,086, 0,138, 0,172), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2295,574 ±(99.9%) 1424,239 MB/sec [Average]
[info]   (min, avg, max) = (2017,681, 2295,574, 2705,777), stdev = 369,870
[info]   CI (99.9%): [871,335, 3719,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4740,581 ±(99.9%) 2945,377 B/op [Average]
[info]   (min, avg, max) = (4164,633, 4740,581, 5596,234), stdev = 764,905
[info]   CI (99.9%): [1795,204, 7685,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87,55% complete, ETA 00:16:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 707930,760 ops/s
[info] # Warmup Iteration   2: 1681186,400 ops/s
[info] # Warmup Iteration   3: 1672323,703 ops/s
[info] # Warmup Iteration   4: 1667765,106 ops/s
[info] # Warmup Iteration   5: 1679004,683 ops/s
[info] Iteration   1: 1694017,146 ops/s
[info]                  ·gc.alloc.rate:                   1282,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1255,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1695396,542 ops/s
[info]                  ·gc.alloc.rate:                   1284,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1255,344 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1681722,200 ops/s
[info]                  ·gc.alloc.rate:                   1273,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1266,068 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1689629,691 ops/s
[info]                  ·gc.alloc.rate:                   1279,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1261,435 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1668826,404 ops/s
[info]                  ·gc.alloc.rate:                   1263,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1277,786 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1685918,397 ±(99.9%) 42135,219 ops/s [Average]
[info]   (min, avg, max) = (1668826,404, 1685918,397, 1695396,542), stdev = 10942,383
[info]   CI (99.9%): [1643783,177, 1728053,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1276,921 ±(99.9%) 32,149 MB/sec [Average]
[info]   (min, avg, max) = (1263,846, 1276,921, 1284,231), stdev = 8,349
[info]   CI (99.9%): [1244,772, 1309,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1192,000, 1192,000, 1192,000), stdev = 0,001
[info]   CI (99.9%): [1192,000, 1192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,054 ±(99.9%) 0,134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,097), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353,067 ±(99.9%) 6,068 MB/sec [Average]
[info]   (min, avg, max) = (1350,814, 1353,067, 1354,802), stdev = 1,576
[info]   CI (99.9%): [1346,998, 1359,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1263,131 ±(99.9%) 36,157 B/op [Average]
[info]   (min, avg, max) = (1255,021, 1263,131, 1277,786), stdev = 9,390
[info]   CI (99.9%): [1226,973, 1299,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87,75% complete, ETA 00:16:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7527873,223 ops/s
[info] # Warmup Iteration   2: 8130653,544 ops/s
[info] # Warmup Iteration   3: 8025062,179 ops/s
[info] # Warmup Iteration   4: 8034805,583 ops/s
[info] # Warmup Iteration   5: 8054380,278 ops/s
[info] Iteration   1: 8044184,636 ops/s
[info]                  ·gc.alloc.rate:      245,328 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8123275,131 ops/s
[info]                  ·gc.alloc.rate:                   247,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99,112 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 8160935,940 ops/s
[info]                  ·gc.alloc.rate:      248,923 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7650426,822 ops/s
[info]                  ·gc.alloc.rate:                   233,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105,242 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8157034,532 ops/s
[info]                  ·gc.alloc.rate:      248,796 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8027171,412 ±(99.9%) 830836,638 ops/s [Average]
[info]   (min, avg, max) = (7650426,822, 8027171,412, 8160935,940), stdev = 215765,636
[info]   CI (99.9%): [7196334,774, 8858008,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   244,826 ±(99.9%) 25,364 MB/sec [Average]
[info]   (min, avg, max) = (233,329, 244,826, 248,923), stdev = 6,587
[info]   CI (99.9%): [219,462, 270,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,002 ±(99.9%) 0,018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,011), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204,631 ±(99.9%) 1078,959 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,631, 511,583), stdev = 280,202
[info]   CI (99.9%): [≈ 0, 1283,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40,871 ±(99.9%) 215,662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40,871, 105,242), stdev = 56,007
[info]   CI (99.9%): [≈ 0, 256,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87,95% complete, ETA 00:16:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77660,903 ops/s
[info] # Warmup Iteration   2: 258943,294 ops/s
[info] # Warmup Iteration   3: 254462,924 ops/s
[info] # Warmup Iteration   4: 255723,293 ops/s
[info] # Warmup Iteration   5: 256519,596 ops/s
[info] Iteration   1: 254948,239 ops/s
[info]                  ·gc.alloc.rate:                   1806,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12522,992 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 256560,821 ops/s
[info]                  ·gc.alloc.rate:                   1818,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12463,637 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 255849,103 ops/s
[info]                  ·gc.alloc.rate:                   1812,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8338,454 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 254905,933 ops/s
[info]                  ·gc.alloc.rate:                   1806,333 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12564,273 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 255432,916 ops/s
[info]                  ·gc.alloc.rate:                   1810,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12550,522 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   255539,402 ±(99.9%) 2654,785 ops/s [Average]
[info]   (min, avg, max) = (254905,933, 255539,402, 256560,821), stdev = 689,439
[info]   CI (99.9%): [252884,617, 258194,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1810,789 ±(99.9%) 18,762 MB/sec [Average]
[info]   (min, avg, max) = (1806,333, 1810,789, 1818,005), stdev = 4,872
[info]   CI (99.9%): [1792,027, 1829,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11152,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11152,002, 11152,002, 11152,002), stdev = 0,001
[info]   CI (99.9%): [11152,001, 11152,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,308 ±(99.9%) 0,440 B/op [Average]
[info]   (min, avg, max) = (0,128, 0,308, 0,385), stdev = 0,114
[info]   CI (99.9%): [≈ 0, 0,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1897,643 ±(99.9%) 1166,922 MB/sec [Average]
[info]   (min, avg, max) = (1355,568, 1897,643, 2037,070), stdev = 303,046
[info]   CI (99.9%): [730,721, 3064,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11687,976 ±(99.9%) 7211,630 B/op [Average]
[info]   (min, avg, max) = (8338,454, 11687,976, 12564,273), stdev = 1872,837
[info]   CI (99.9%): [4476,346, 18899,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88,15% complete, ETA 00:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 577845,852 ops/s
[info] # Warmup Iteration   2: 1051557,717 ops/s
[info] # Warmup Iteration   3: 1053025,427 ops/s
[info] # Warmup Iteration   4: 1056748,613 ops/s
[info] # Warmup Iteration   5: 1056569,553 ops/s
[info] Iteration   1: 1055249,041 ops/s
[info]                  ·gc.alloc.rate:                   1576,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2000,809 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1063004,064 ops/s
[info]                  ·gc.alloc.rate:                   1588,900 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2981,391 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1058952,093 ops/s
[info]                  ·gc.alloc.rate:                   1582,571 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1997,307 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1061464,559 ops/s
[info]                  ·gc.alloc.rate:                   1586,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1995,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1059996,603 ops/s
[info]                  ·gc.alloc.rate:                   1584,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3000,269 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1059733,272 ±(99.9%) 11305,977 ops/s [Average]
[info]   (min, avg, max) = (1055249,041, 1059733,272, 1063004,064), stdev = 2936,126
[info]   CI (99.9%): [1048427,295, 1071039,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1583,721 ±(99.9%) 17,390 MB/sec [Average]
[info]   (min, avg, max) = (1576,849, 1583,721, 1588,900), stdev = 4,516
[info]   CI (99.9%): [1566,331, 1601,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2352,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2352,000, 2352,000, 2352,000), stdev = 0,001
[info]   CI (99.9%): [2352,000, 2352,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,093 ±(99.9%) 0,084 B/op [Average]
[info]   (min, avg, max) = (0,062, 0,093, 0,123), stdev = 0,022
[info]   CI (99.9%): [0,009, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1613,114 ±(99.9%) 1421,168 MB/sec [Average]
[info]   (min, avg, max) = (1341,400, 1613,114, 2020,717), stdev = 369,073
[info]   CI (99.9%): [191,946, 3034,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2394,964 ±(99.9%) 2094,726 B/op [Average]
[info]   (min, avg, max) = (1995,043, 2394,964, 3000,269), stdev = 543,994
[info]   CI (99.9%): [300,238, 4489,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88,35% complete, ETA 00:15:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6f4166c4/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1155474,995 ops/s
[info] # Warmup Iteration   2: 2708294,128 ops/s
[info] # Warmup Iteration   3: 2718674,644 ops/s
[info] # Warmup Iteration   4: 2700371,377 ops/s
[info] # Warmup Iteration   5: 2713548,333 ops/s
[info] Iteration   1: 2706893,068 ops/s
[info]                  ·gc.alloc.rate:                   1114,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 784,696 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2723180,019 ops/s
[info]                  ·gc.alloc.rate:                   1121,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675,142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 390,212 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2709335,306 ops/s
[info]                  ·gc.alloc.rate:                   1115,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 784,700 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2711621,555 ops/s
[info]                  ·gc.alloc.rate:                   1116,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 784,819 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2713454,350 ops/s
[info]                  ·gc.alloc.rate:                   1117,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676,692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392,523 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2712896,860 ±(99.9%) 24078,901 ops/s [Average]
[info]   (min, avg, max) = (2706893,068, 2712896,860, 2723180,019), stdev = 6253,214
[info]   CI (99.9%): [2688817,958, 2736975,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1116,995 ±(99.9%) 9,715 MB/sec [Average]
[info]   (min, avg, max) = (1114,570, 1116,995, 1121,164), stdev = 2,523
[info]   CI (99.9%): [1107,280, 1126,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (648,000, 648,000, 648,000), stdev = 0,001
[info]   CI (99.9%): [648,000, 648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,017 ±(99.9%) 0,062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,036), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080,944 ±(99.9%) 1423,734 MB/sec [Average]
[info]   (min, avg, max) = (675,142, 1080,944, 1352,259), stdev = 369,739
[info]   CI (99.9%): [≈ 0, 2504,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   627,390 ±(99.9%) 829,657 B/op [Average]
[info]   (min, avg, max) = (390,212, 627,390, 784,819), stdev = 215,459
[info]   CI (99.9%): [≈ 0, 1457,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88,55% complete, ETA 00:15:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3986592,702 ops/s
[info] # Warmup Iteration   2: 6437952,313 ops/s
[info] # Warmup Iteration   3: 6541319,809 ops/s
[info] # Warmup Iteration   4: 6552166,642 ops/s
[info] # Warmup Iteration   5: 6601991,284 ops/s
[info] Iteration   1: 6426412,172 ops/s
[info]                  ·gc.alloc.rate:                   718,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165,266 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6634411,373 ops/s
[info]                  ·gc.alloc.rate:                   742,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 6610877,603 ops/s
[info]                  ·gc.alloc.rate:                   739,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6613505,969 ops/s
[info]                  ·gc.alloc.rate:                   739,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159,945 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 6588961,272 ops/s
[info]                  ·gc.alloc.rate:                   736,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 320,766 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6574833,678 ±(99.9%) 325446,306 ops/s [Average]
[info]   (min, avg, max) = (6426412,172, 6574833,678, 6634411,373), stdev = 84517,372
[info]   CI (99.9%): [6249387,371, 6900279,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   735,292 ±(99.9%) 36,412 MB/sec [Average]
[info]   (min, avg, max) = (718,692, 735,292, 742,004), stdev = 9,456
[info]   CI (99.9%): [698,880, 771,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,684 ±(99.9%) 5,580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,684, 3,276), stdev = 1,449
[info]   CI (99.9%): [≈ 0, 6,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,167 ±(99.9%) 1,367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,167, 0,802), stdev = 0,355
[info]   CI (99.9%): [≈ 0, 1,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807,397 ±(99.9%) 1152,874 MB/sec [Average]
[info]   (min, avg, max) = (672,100, 807,397, 1342,971), stdev = 299,398
[info]   CI (99.9%): [≈ 0, 1960,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   193,214 ±(99.9%) 274,705 B/op [Average]
[info]   (min, avg, max) = (159,945, 193,214, 320,766), stdev = 71,340
[info]   CI (99.9%): [≈ 0, 467,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88,76% complete, ETA 00:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4912675,314 ops/s
[info] # Warmup Iteration   2: 6406158,418 ops/s
[info] # Warmup Iteration   3: 6398517,386 ops/s
[info] # Warmup Iteration   4: 6471396,229 ops/s
[info] # Warmup Iteration   5: 6482516,414 ops/s
[info] Iteration   1: 6498385,165 ops/s
[info]                  ·gc.alloc.rate:                   396,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123,895 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6540565,109 ops/s
[info]                  ·gc.alloc.rate:                   399,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123,107 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6525530,046 ops/s
[info]                  ·gc.alloc.rate:                   398,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123,380 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6526417,126 ops/s
[info]                  ·gc.alloc.rate:      398,110 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6490357,025 ops/s
[info]                  ·gc.alloc.rate:                   395,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163,621 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6516250,894 ±(99.9%) 81008,084 ops/s [Average]
[info]   (min, avg, max) = (6490357,025, 6516250,894, 6540565,109), stdev = 21037,542
[info]   CI (99.9%): [6435242,810, 6597258,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   397,485 ±(99.9%) 5,018 MB/sec [Average]
[info]   (min, avg, max) = (395,905, 397,485, 399,007), stdev = 1,303
[info]   CI (99.9%): [392,467, 402,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0,667 ±(99.9%) 5,712 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,667, 3,321), stdev = 1,484
[info]   CI (99.9%): [≈ 0, 6,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0,162 ±(99.9%) 1,385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,162, 0,805), stdev = 0,360
[info]   CI (99.9%): [≈ 0, 1,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   441,910 ±(99.9%) 989,394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,910, 674,776), stdev = 256,942
[info]   CI (99.9%): [≈ 0, 1431,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   106,801 ±(99.9%) 239,453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106,801, 163,621), stdev = 62,185
[info]   CI (99.9%): [≈ 0, 346,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88,96% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112234,412 ops/s
[info] # Warmup Iteration   2: 368852,169 ops/s
[info] # Warmup Iteration   3: 366469,754 ops/s
[info] # Warmup Iteration   4: 368461,743 ops/s
[info] # Warmup Iteration   5: 368260,008 ops/s
[info] Iteration   1: 366436,853 ops/s
[info]                  ·gc.alloc.rate:                   1866,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8718,679 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 367088,781 ops/s
[info]                  ·gc.alloc.rate:                   1869,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5807,667 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 346302,709 ops/s
[info]                  ·gc.alloc.rate:                   1764,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033,969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9242,729 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 365609,312 ops/s
[info]                  ·gc.alloc.rate:                   1862,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8763,033 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 364602,822 ops/s
[info]                  ·gc.alloc.rate:                   1857,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358,246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5862,930 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   362008,095 ±(99.9%) 33996,399 ops/s [Average]
[info]   (min, avg, max) = (346302,709, 362008,095, 367088,781), stdev = 8828,757
[info]   CI (99.9%): [328011,696, 396004,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1843,960 ±(99.9%) 173,074 MB/sec [Average]
[info]   (min, avg, max) = (1764,013, 1843,960, 1869,852), stdev = 44,947
[info]   CI (99.9%): [1670,886, 2017,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8016,001, 8016,001, 8016,001), stdev = 0,001
[info]   CI (99.9%): [8016,001, 8016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,125), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,235 ±(99.9%) 0,794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,235, 0,535), stdev = 0,206
[info]   CI (99.9%): [≈ 0, 1,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1762,602 ±(99.9%) 1427,587 MB/sec [Average]
[info]   (min, avg, max) = (1354,725, 1762,602, 2035,948), stdev = 370,740
[info]   CI (99.9%): [335,015, 3190,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7679,008 ±(99.9%) 6529,455 B/op [Average]
[info]   (min, avg, max) = (5807,667, 7679,008, 9242,729), stdev = 1695,679
[info]   CI (99.9%): [1149,553, 14208,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89,16% complete, ETA 00:14:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63938,037 ops/s
[info] # Warmup Iteration   2: 73499,949 ops/s
[info] # Warmup Iteration   3: 74886,622 ops/s
[info] # Warmup Iteration   4: 70858,143 ops/s
[info] # Warmup Iteration   5: 72821,479 ops/s
[info] Iteration   1: 75201,191 ops/s
[info]                  ·gc.alloc.rate:                   2149,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42213,496 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 75073,497 ops/s
[info]                  ·gc.alloc.rate:                   2146,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2694,691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56483,700 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 75122,430 ops/s
[info]                  ·gc.alloc.rate:                   2147,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42416,113 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 75014,754 ops/s
[info]                  ·gc.alloc.rate:                   2144,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42546,475 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 75008,539 ops/s
[info]                  ·gc.alloc.rate:                   2144,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42608,621 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   75084,082 ±(99.9%) 309,314 ops/s [Average]
[info]   (min, avg, max) = (75008,539, 75084,082, 75201,191), stdev = 80,328
[info]   CI (99.9%): [74774,768, 75393,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2146,588 ±(99.9%) 8,555 MB/sec [Average]
[info]   (min, avg, max) = (2144,393, 2146,588, 2149,717), stdev = 2,222
[info]   CI (99.9%): [2138,033, 2155,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (44992,005, 44992,006, 44992,006), stdev = 0,001
[info]   CI (99.9%): [44992,005, 44992,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1,222 ±(99.9%) 3,640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,222, 2,178), stdev = 0,945
[info]   CI (99.9%): [≈ 0, 4,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2159,058 ±(99.9%) 1153,163 MB/sec [Average]
[info]   (min, avg, max) = (2016,960, 2159,058, 2694,691), stdev = 299,473
[info]   CI (99.9%): [1005,895, 3312,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45253,681 ±(99.9%) 24180,476 B/op [Average]
[info]   (min, avg, max) = (42213,496, 45253,681, 56483,700), stdev = 6279,593
[info]   CI (99.9%): [21073,205, 69434,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,36% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77920,350 ops/s
[info] # Warmup Iteration   2: 123347,116 ops/s
[info] # Warmup Iteration   3: 123303,496 ops/s
[info] # Warmup Iteration   4: 124039,335 ops/s
[info] # Warmup Iteration   5: 122834,515 ops/s
[info] Iteration   1: 122699,461 ops/s
[info]                  ·gc.alloc.rate:                   1889,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030,854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26050,357 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 124474,872 ops/s
[info]                  ·gc.alloc.rate:                   1917,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355,750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17140,338 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 118518,839 ops/s
[info]                  ·gc.alloc.rate:                   1825,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27022,419 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 124077,867 ops/s
[info]                  ·gc.alloc.rate:                   1911,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036,411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25827,661 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 123929,095 ops/s
[info]                  ·gc.alloc.rate:                   1908,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25884,917 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   122740,027 ±(99.9%) 9438,686 ops/s [Average]
[info]   (min, avg, max) = (118518,839, 122740,027, 124474,872), stdev = 2451,197
[info]   CI (99.9%): [113301,341, 132178,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1890,499 ±(99.9%) 145,499 MB/sec [Average]
[info]   (min, avg, max) = (1825,473, 1890,499, 1917,312), stdev = 37,786
[info]   CI (99.9%): [1744,999, 2035,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24240,003, 24240,003, 24240,004), stdev = 0,001
[info]   CI (99.9%): [24240,003, 24240,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,042 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,104), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,536 ±(99.9%) 1,786 B/op [Average]
[info]   (min, avg, max) = (0,263, 0,536, 1,335), stdev = 0,464
[info]   CI (99.9%): [≈ 0, 2,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1899,262 ±(99.9%) 1169,999 MB/sec [Average]
[info]   (min, avg, max) = (1355,750, 1899,262, 2038,285), stdev = 303,845
[info]   CI (99.9%): [729,263, 3069,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24385,139 ±(99.9%) 15705,900 B/op [Average]
[info]   (min, avg, max) = (17140,338, 24385,139, 27022,419), stdev = 4078,772
[info]   CI (99.9%): [8679,239, 40091,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,56% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166615,229 ops/s
[info] # Warmup Iteration   2: 179760,710 ops/s
[info] # Warmup Iteration   3: 182356,422 ops/s
[info] # Warmup Iteration   4: 181209,911 ops/s
[info] # Warmup Iteration   5: 182309,791 ops/s
[info] Iteration   1: 182203,548 ops/s
[info]                  ·gc.alloc.rate:                   2676,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697,589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23302,712 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 182454,787 ops/s
[info]                  ·gc.alloc.rate:                   2680,560 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704,549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23326,909 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 181385,830 ops/s
[info]                  ·gc.alloc.rate:                   2664,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031,679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17627,594 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 181823,655 ops/s
[info]                  ·gc.alloc.rate:                   2671,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23478,766 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 180705,387 ops/s
[info]                  ·gc.alloc.rate:                   2654,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716,385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23658,546 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   181714,641 ±(99.9%) 2671,582 ops/s [Average]
[info]   (min, avg, max) = (180705,387, 181714,641, 182454,787), stdev = 693,801
[info]   CI (99.9%): [179043,059, 184386,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2669,489 ±(99.9%) 39,443 MB/sec [Average]
[info]   (min, avg, max) = (2654,552, 2669,489, 2680,560), stdev = 10,243
[info]   CI (99.9%): [2630,046, 2708,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23120,002, 23120,002, 23120,002), stdev = 0,001
[info]   CI (99.9%): [23120,002, 23120,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,541 ±(99.9%) 0,494 B/op [Average]
[info]   (min, avg, max) = (0,360, 0,541, 0,722), stdev = 0,128
[info]   CI (99.9%): [0,047, 1,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2572,567 ±(99.9%) 1164,641 MB/sec [Average]
[info]   (min, avg, max) = (2031,679, 2572,567, 2716,385), stdev = 302,454
[info]   CI (99.9%): [1407,926, 3737,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22278,905 ±(99.9%) 10027,261 B/op [Average]
[info]   (min, avg, max) = (17627,594, 22278,905, 23658,546), stdev = 2604,048
[info]   CI (99.9%): [12251,645, 32306,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89,76% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38270,399 ops/s
[info] # Warmup Iteration   2: 59160,038 ops/s
[info] # Warmup Iteration   3: 59480,671 ops/s
[info] # Warmup Iteration   4: 59557,516 ops/s
[info] # Warmup Iteration   5: 59157,726 ops/s
[info] Iteration   1: 57234,067 ops/s
[info]                  ·gc.alloc.rate:                   3009,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396,380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93395,211 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 59583,062 ops/s
[info]                  ·gc.alloc.rate:                   3133,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720,538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71860,527 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 59426,876 ops/s
[info]                  ·gc.alloc.rate:                   3124,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402,433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90109,795 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 58064,915 ops/s
[info]                  ·gc.alloc.rate:                   3053,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723,163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73807,271 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 59673,941 ops/s
[info]                  ·gc.alloc.rate:                   3137,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403,763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89772,033 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   58796,572 ±(99.9%) 4201,602 ops/s [Average]
[info]   (min, avg, max) = (57234,067, 58796,572, 59673,941), stdev = 1091,143
[info]   CI (99.9%): [54594,971, 62998,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3091,818 ±(99.9%) 220,825 MB/sec [Average]
[info]   (min, avg, max) = (3009,624, 3091,818, 3137,898), stdev = 57,348
[info]   CI (99.9%): [2870,993, 3312,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82760,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82760,007, 82760,007, 82760,007), stdev = 0,001
[info]   CI (99.9%): [82760,006, 82760,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,075 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,125), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,015 ±(99.9%) 3,681 B/op [Average]
[info]   (min, avg, max) = (1,100, 2,015, 3,385), stdev = 0,956
[info]   CI (99.9%): [≈ 0, 5,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3129,255 ±(99.9%) 1432,131 MB/sec [Average]
[info]   (min, avg, max) = (2720,538, 3129,255, 3403,763), stdev = 371,920
[info]   CI (99.9%): [1697,124, 4561,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83788,967 ±(99.9%) 38982,507 B/op [Average]
[info]   (min, avg, max) = (71860,527, 83788,967, 93395,211), stdev = 10123,633
[info]   CI (99.9%): [44806,460, 122771,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89,96% complete, ETA 00:13:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78819,696 ops/s
[info] # Warmup Iteration   2: 87821,188 ops/s
[info] # Warmup Iteration   3: 88905,935 ops/s
[info] # Warmup Iteration   4: 88859,819 ops/s
[info] # Warmup Iteration   5: 89396,249 ops/s
[info] Iteration   1: 88843,614 ops/s
[info]                  ·gc.alloc.rate:                   1811,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35706,548 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 89246,742 ops/s
[info]                  ·gc.alloc.rate:                   1820,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018,745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35595,524 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 89122,119 ops/s
[info]                  ·gc.alloc.rate:                   1817,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23796,252 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 87004,588 ops/s
[info]                  ·gc.alloc.rate:                   1774,817 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36610,456 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 88652,836 ops/s
[info]                  ·gc.alloc.rate:                   1808,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027,118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35980,607 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   88573,980 ±(99.9%) 3494,858 ops/s [Average]
[info]   (min, avg, max) = (87004,588, 88573,980, 89246,742), stdev = 907,603
[info]   CI (99.9%): [85079,122, 92068,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1806,498 ±(99.9%) 70,597 MB/sec [Average]
[info]   (min, avg, max) = (1774,817, 1806,498, 1820,275), stdev = 18,334
[info]   CI (99.9%): [1735,901, 1877,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   32096,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32096,005, 32096,005, 32096,005), stdev = 0,001
[info]   CI (99.9%): [32096,004, 32096,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,669 ±(99.9%) 1,902 B/op [Average]
[info]   (min, avg, max) = (0,368, 0,669, 1,506), stdev = 0,494
[info]   CI (99.9%): [≈ 0, 2,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1886,649 ±(99.9%) 1160,609 MB/sec [Average]
[info]   (min, avg, max) = (1347,540, 1886,649, 2027,118), stdev = 301,406
[info]   CI (99.9%): [726,040, 3047,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   33537,877 ±(99.9%) 21024,303 B/op [Average]
[info]   (min, avg, max) = (23796,252, 33537,877, 36610,456), stdev = 5459,945
[info]   CI (99.9%): [12513,574, 54562,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90,16% complete, ETA 00:13:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236987,766 ops/s
[info] # Warmup Iteration   2: 295491,552 ops/s
[info] # Warmup Iteration   3: 294838,111 ops/s
[info] # Warmup Iteration   4: 289462,173 ops/s
[info] # Warmup Iteration   5: 289629,379 ops/s
[info] Iteration   1: 287504,225 ops/s
[info]                  ·gc.alloc.rate:                   1367,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7343,715 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 286171,976 ops/s
[info]                  ·gc.alloc.rate:                   1361,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7379,720 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 284772,494 ops/s
[info]                  ·gc.alloc.rate:                   1354,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7421,462 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 285254,775 ops/s
[info]                  ·gc.alloc.rate:                   1357,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7416,379 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 286783,679 ops/s
[info]                  ·gc.alloc.rate:                   1364,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7384,287 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   286097,430 ±(99.9%) 4271,044 ops/s [Average]
[info]   (min, avg, max) = (284772,494, 286097,430, 287504,225), stdev = 1109,176
[info]   CI (99.9%): [281826,386, 290368,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1361,226 ±(99.9%) 20,226 MB/sec [Average]
[info]   (min, avg, max) = (1354,895, 1361,226, 1367,787), stdev = 5,253
[info]   CI (99.9%): [1340,999, 1381,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7488,001, 7488,001, 7488,002), stdev = 0,001
[info]   CI (99.9%): [7488,001, 7488,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,251 ±(99.9%) 0,652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,251, 0,457), stdev = 0,169
[info]   CI (99.9%): [≈ 0, 0,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1343,232 ±(99.9%) 6,682 MB/sec [Average]
[info]   (min, avg, max) = (1341,432, 1343,232, 1345,670), stdev = 1,735
[info]   CI (99.9%): [1336,550, 1349,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7389,112 ±(99.9%) 121,194 B/op [Average]
[info]   (min, avg, max) = (7343,715, 7389,112, 7421,462), stdev = 31,474
[info]   CI (99.9%): [7267,918, 7510,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,36% complete, ETA 00:12:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381453,688 ops/s
[info] # Warmup Iteration   2: 604274,514 ops/s
[info] # Warmup Iteration   3: 604154,073 ops/s
[info] # Warmup Iteration   4: 597608,367 ops/s
[info] # Warmup Iteration   5: 601688,653 ops/s
[info] Iteration   1: 601844,328 ops/s
[info]                  ·gc.alloc.rate:                   520,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1337,772 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 603154,408 ops/s
[info]                  ·gc.alloc.rate:                   521,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1758,227 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 599635,002 ops/s
[info]                  ·gc.alloc.rate:                   518,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1768,420 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 600696,870 ops/s
[info]                  ·gc.alloc.rate:      519,088 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 600130,320 ops/s
[info]                  ·gc.alloc.rate:                   518,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1769,550 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   601092,186 ±(99.9%) 5453,564 ops/s [Average]
[info]   (min, avg, max) = (599635,002, 601092,186, 603154,408), stdev = 1416,273
[info]   CI (99.9%): [595638,621, 606545,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   519,427 ±(99.9%) 4,713 MB/sec [Average]
[info]   (min, avg, max) = (518,178, 519,427, 521,239), stdev = 1,224
[info]   CI (99.9%): [514,714, 524,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1360,001, 1360,001, 1360,001), stdev = 0,001
[info]   CI (99.9%): [1360,001, 1360,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,083 ±(99.9%) 0,586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,354), stdev = 0,152
[info]   CI (99.9%): [≈ 0, 0,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,217 ±(99.9%) 1,530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,217, 0,923), stdev = 0,397
[info]   CI (99.9%): [≈ 0, 1,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506,792 ±(99.9%) 1124,100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,792, 674,776), stdev = 291,925
[info]   CI (99.9%): [≈ 0, 1630,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1326,794 ±(99.9%) 2943,731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1326,794, 1769,550), stdev = 764,477
[info]   CI (99.9%): [≈ 0, 4270,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,56% complete, ETA 00:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 839524,262 ops/s
[info] # Warmup Iteration   2: 872252,044 ops/s
[info] # Warmup Iteration   3: 887175,718 ops/s
[info] # Warmup Iteration   4: 879534,587 ops/s
[info] # Warmup Iteration   5: 838365,008 ops/s
[info] Iteration   1: 873781,312 ops/s
[info]                  ·gc.alloc.rate:                   470,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 921,436 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 888036,980 ops/s
[info]                  ·gc.alloc.rate:                   478,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 906,723 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 831979,594 ops/s
[info]                  ·gc.alloc.rate:                   448,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1276,435 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 890814,118 ops/s
[info]                  ·gc.alloc.rate:      479,995 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 888649,057 ops/s
[info]                  ·gc.alloc.rate:                   478,826 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1195,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   874652,212 ±(99.9%) 95453,682 ops/s [Average]
[info]   (min, avg, max) = (831979,594, 874652,212, 890814,118), stdev = 24789,018
[info]   CI (99.9%): [779198,530, 970105,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   471,278 ±(99.9%) 51,450 MB/sec [Average]
[info]   (min, avg, max) = (448,291, 471,278, 479,995), stdev = 13,361
[info]   CI (99.9%): [419,827, 522,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,000, 848,000, 848,000), stdev = 0,001
[info]   CI (99.9%): [848,000, 848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,675 ±(99.9%) 5,678 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,675, 3,312), stdev = 1,475
[info]   CI (99.9%): [≈ 0, 6,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,275 ±(99.9%) 10,744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,275, 6,266), stdev = 2,790
[info]   CI (99.9%): [≈ 0, 12,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474,549 ±(99.9%) 1068,733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,549, 674,785), stdev = 277,546
[info]   CI (99.9%): [≈ 0, 1543,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   859,928 ±(99.9%) 1955,155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 859,928, 1276,435), stdev = 507,748
[info]   CI (99.9%): [≈ 0, 2815,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90,76% complete, ETA 00:12:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 848544,616 ops/s
[info] # Warmup Iteration   2: 875092,367 ops/s
[info] # Warmup Iteration   3: 888028,460 ops/s
[info] # Warmup Iteration   4: 885741,566 ops/s
[info] # Warmup Iteration   5: 886227,828 ops/s
[info] Iteration   1: 885737,690 ops/s
[info]                  ·gc.alloc.rate:      9,005 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 888559,808 ops/s
[info]                  ·gc.alloc.rate:      9,033 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 890040,456 ops/s
[info]                  ·gc.alloc.rate:      9,049 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 880396,489 ops/s
[info]                  ·gc.alloc.rate:      8,951 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 884812,173 ops/s
[info]                  ·gc.alloc.rate:      8,996 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   885909,323 ±(99.9%) 14371,193 ops/s [Average]
[info]   (min, avg, max) = (880396,489, 885909,323, 890040,456), stdev = 3732,153
[info]   CI (99.9%): [871538,130, 900280,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9,007 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (8,951, 9,007, 9,049), stdev = 0,038
[info]   CI (99.9%): [8,861, 9,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90,96% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27968,241 ops/s
[info] # Warmup Iteration   2: 36341,266 ops/s
[info] # Warmup Iteration   3: 37179,012 ops/s
[info] # Warmup Iteration   4: 37238,306 ops/s
[info] # Warmup Iteration   5: 37288,198 ops/s
[info] Iteration   1: 37381,058 ops/s
[info]                  ·gc.alloc.rate:                   1929,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010,731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84649,425 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37601,399 ops/s
[info]                  ·gc.alloc.rate:                   1941,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56184,668 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37233,900 ops/s
[info]                  ·gc.alloc.rate:                   1922,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85239,208 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37438,470 ops/s
[info]                  ·gc.alloc.rate:                   1932,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84945,129 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37340,637 ops/s
[info]                  ·gc.alloc.rate:                   1927,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85317,871 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   37399,093 ±(99.9%) 522,005 ops/s [Average]
[info]   (min, avg, max) = (37233,900, 37399,093, 37601,399), stdev = 135,563
[info]   CI (99.9%): [36877,088, 37921,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1930,783 ±(99.9%) 27,182 MB/sec [Average]
[info]   (min, avg, max) = (1922,099, 1930,783, 1941,270), stdev = 7,059
[info]   CI (99.9%): [1903,602, 1957,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81248,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81248,011, 81248,011, 81248,012), stdev = 0,001
[info]   CI (99.9%): [81248,009, 81248,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2,454 ±(99.9%) 4,402 B/op [Average]
[info]   (min, avg, max) = (0,871, 2,454, 3,505), stdev = 1,143
[info]   CI (99.9%): [≈ 0, 6,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1882,962 ±(99.9%) 1163,703 MB/sec [Average]
[info]   (min, avg, max) = (1342,428, 1882,962, 2024,348), stdev = 302,210
[info]   CI (99.9%): [719,259, 3046,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79267,260 ±(99.9%) 49697,404 B/op [Average]
[info]   (min, avg, max) = (56184,668, 79267,260, 85317,871), stdev = 12906,258
[info]   CI (99.9%): [29569,856, 128964,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91,16% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133569,130 ops/s
[info] # Warmup Iteration   2: 150850,918 ops/s
[info] # Warmup Iteration   3: 150841,373 ops/s
[info] # Warmup Iteration   4: 151066,138 ops/s
[info] # Warmup Iteration   5: 152023,509 ops/s
[info] Iteration   1: 151381,394 ops/s
[info]                  ·gc.alloc.rate:                   1133,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13967,902 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 152513,630 ops/s
[info]                  ·gc.alloc.rate:                   1142,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13858,559 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 150007,286 ops/s
[info]                  ·gc.alloc.rate:                   1123,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7044,599 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 151896,742 ops/s
[info]                  ·gc.alloc.rate:                   1137,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13921,655 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 151281,023 ops/s
[info]                  ·gc.alloc.rate:                   1132,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13984,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   151416,015 ±(99.9%) 3570,834 ops/s [Average]
[info]   (min, avg, max) = (150007,286, 151416,015, 152513,630), stdev = 927,334
[info]   CI (99.9%): [147845,181, 154986,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1133,836 ±(99.9%) 26,464 MB/sec [Average]
[info]   (min, avg, max) = (1123,532, 1133,836, 1142,087), stdev = 6,873
[info]   CI (99.9%): [1107,372, 1160,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11784,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11784,003, 11784,003, 11784,003), stdev = 0,001
[info]   CI (99.9%): [11784,002, 11784,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,389 ±(99.9%) 0,913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,389, 0,650), stdev = 0,237
[info]   CI (99.9%): [≈ 0, 1,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1209,255 ±(99.9%) 1157,218 MB/sec [Average]
[info]   (min, avg, max) = (671,659, 1209,255, 1344,227), stdev = 300,526
[info]   CI (99.9%): [52,037, 2366,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   12555,448 ±(99.9%) 11864,008 B/op [Average]
[info]   (min, avg, max) = (7044,599, 12555,448, 13984,524), stdev = 3081,045
[info]   CI (99.9%): [691,439, 24419,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91,37% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4860684,402 ops/s
[info] # Warmup Iteration   2: 5514416,357 ops/s
[info] # Warmup Iteration   3: 5519330,414 ops/s
[info] # Warmup Iteration   4: 5505935,262 ops/s
[info] # Warmup Iteration   5: 5515941,141 ops/s
[info] Iteration   1: 5482761,819 ops/s
[info]                  ·gc.alloc.rate:                   4040,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4068,344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1167,888 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5528714,082 ops/s
[info]                  ·gc.alloc.rate:                   4075,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4077,461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1160,551 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5483102,151 ops/s
[info]                  ·gc.alloc.rate:                   4041,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400,385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 976,042 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5502675,700 ops/s
[info]                  ·gc.alloc.rate:                   4055,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084,538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1168,273 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 5506721,324 ops/s
[info]                  ·gc.alloc.rate:                   4058,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4086,743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1167,979 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   5500795,015 ±(99.9%) 73474,837 ops/s [Average]
[info]   (min, avg, max) = (5482761,819, 5500795,015, 5528714,082), stdev = 19081,182
[info]   CI (99.9%): [5427320,178, 5574269,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   4054,420 ±(99.9%) 55,229 MB/sec [Average]
[info]   (min, avg, max) = (4040,868, 4054,420, 4075,526), stdev = 14,343
[info]   CI (99.9%): [3999,191, 4109,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,000, 1160,000, 1160,000), stdev = 0,001
[info]   CI (99.9%): [1160,000, 1160,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,018 ±(99.9%) 0,023 B/op [Average]
[info]   (min, avg, max) = (0,012, 0,018, 0,024), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3943,494 ±(99.9%) 1169,411 MB/sec [Average]
[info]   (min, avg, max) = (3400,385, 3943,494, 4086,743), stdev = 303,692
[info]   CI (99.9%): [2774,083, 5112,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1128,147 ±(99.9%) 327,656 B/op [Average]
[info]   (min, avg, max) = (976,042, 1128,147, 1168,273), stdev = 85,091
[info]   CI (99.9%): [800,490, 1455,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91,57% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1735108,324 ops/s
[info] # Warmup Iteration   2: 8192614,227 ops/s
[info] # Warmup Iteration   3: 8369151,650 ops/s
[info] # Warmup Iteration   4: 8449851,824 ops/s
[info] # Warmup Iteration   5: 8485027,476 ops/s
[info] Iteration   1: 8491459,984 ops/s
[info]                  ·gc.alloc.rate:                   906,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249,398 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8526690,048 ops/s
[info]                  ·gc.alloc.rate:                   910,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124,065 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8504388,019 ops/s
[info]                  ·gc.alloc.rate:                   907,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248,779 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8513329,513 ops/s
[info]                  ·gc.alloc.rate:                   908,863 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124,258 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8511639,179 ops/s
[info]                  ·gc.alloc.rate:                   908,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124,285 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   8509501,349 ±(99.9%) 49698,431 ops/s [Average]
[info]   (min, avg, max) = (8491459,984, 8509501,349, 8526690,048), stdev = 12906,525
[info]   CI (99.9%): [8459802,918, 8559199,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   908,439 ±(99.9%) 5,340 MB/sec [Average]
[info]   (min, avg, max) = (906,491, 908,439, 910,282), stdev = 1,387
[info]   CI (99.9%): [903,099, 913,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,005 ±(99.9%) 0,029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,015), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   941,364 ±(99.9%) 1419,119 MB/sec [Average]
[info]   (min, avg, max) = (672,209, 941,364, 1345,698), stdev = 368,541
[info]   CI (99.9%): [≈ 0, 2360,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   174,157 ±(99.9%) 263,397 B/op [Average]
[info]   (min, avg, max) = (124,065, 174,157, 249,398), stdev = 68,403
[info]   CI (99.9%): [≈ 0, 437,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,77% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3151633,963 ops/s
[info] # Warmup Iteration   2: 5075264,718 ops/s
[info] # Warmup Iteration   3: 4992465,326 ops/s
[info] # Warmup Iteration   4: 5059609,799 ops/s
[info] # Warmup Iteration   5: 5088969,766 ops/s
[info] Iteration   1: 5062756,464 ops/s
[info]                  ·gc.alloc.rate:                   2624,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              816,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841,526 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5090433,005 ops/s
[info]                  ·gc.alloc.rate:                   2639,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              816,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 838,486 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5078483,917 ops/s
[info]                  ·gc.alloc.rate:                   2633,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              816,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715,694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841,611 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 5065817,494 ops/s
[info]                  ·gc.alloc.rate:                   2626,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              816,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 633,364 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5065333,111 ops/s
[info]                  ·gc.alloc.rate:                   2626,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              816,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720,066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 845,120 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5072564,798 ±(99.9%) 45084,432 ops/s [Average]
[info]   (min, avg, max) = (5062756,464, 5072564,798, 5090433,005), stdev = 11708,284
[info]   CI (99.9%): [5027480,366, 5117649,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2630,026 ±(99.9%) 23,857 MB/sec [Average]
[info]   (min, avg, max) = (2624,705, 2630,026, 2639,519), stdev = 6,196
[info]   CI (99.9%): [2606,169, 2653,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (816,000, 816,000, 816,000), stdev = 0,001
[info]   CI (99.9%): [816,000, 816,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,067 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,021 ±(99.9%) 0,037 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,021, 0,032), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2578,694 ±(99.9%) 1162,645 MB/sec [Average]
[info]   (min, avg, max) = (2038,645, 2578,694, 2720,066), stdev = 301,935
[info]   CI (99.9%): [1416,049, 3741,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   800,021 ±(99.9%) 358,857 B/op [Average]
[info]   (min, avg, max) = (633,364, 800,021, 845,120), stdev = 93,194
[info]   CI (99.9%): [441,165, 1158,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,97% complete, ETA 00:10:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8653133,288 ops/s
[info] # Warmup Iteration   2: 9083015,697 ops/s
[info] # Warmup Iteration   3: 9145510,473 ops/s
[info] # Warmup Iteration   4: 9157427,373 ops/s
[info] # Warmup Iteration   5: 9220734,072 ops/s
[info] Iteration   1: 9214333,678 ops/s
[info]                  ·gc.alloc.rate:                   983,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229,819 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9231863,694 ops/s
[info]                  ·gc.alloc.rate:                   985,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114,473 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 9104065,510 ops/s
[info]                  ·gc.alloc.rate:                   971,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9195782,522 ops/s
[info]                  ·gc.alloc.rate:                   981,615 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114,912 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9203455,908 ops/s
[info]                  ·gc.alloc.rate:                   982,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229,748 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   9189900,262 ±(99.9%) 191991,215 ops/s [Average]
[info]   (min, avg, max) = (9104065,510, 9189900,262, 9231863,694), stdev = 49859,509
[info]   CI (99.9%): [8997909,047, 9381891,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   981,008 ±(99.9%) 20,575 MB/sec [Average]
[info]   (min, avg, max) = (971,832, 981,008, 985,617), stdev = 5,343
[info]   CI (99.9%): [960,433, 1001,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,003 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074,974 ±(99.9%) 1418,250 MB/sec [Average]
[info]   (min, avg, max) = (671,426, 1074,974, 1345,420), stdev = 368,315
[info]   CI (99.9%): [≈ 0, 2493,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   184,219 ±(99.9%) 244,424 B/op [Average]
[info]   (min, avg, max) = (114,473, 184,219, 232,142), stdev = 63,476
[info]   CI (99.9%): [≈ 0, 428,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92,17% complete, ETA 00:10:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4669300,663 ops/s
[info] # Warmup Iteration   2: 5945974,813 ops/s
[info] # Warmup Iteration   3: 5933236,363 ops/s
[info] # Warmup Iteration   4: 5939634,550 ops/s
[info] # Warmup Iteration   5: 5956849,840 ops/s
[info] Iteration   1: 5915950,471 ops/s
[info]                  ·gc.alloc.rate:                   3187,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3372,581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 897,194 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5844729,376 ops/s
[info]                  ·gc.alloc.rate:                   3149,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705,760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728,540 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5926119,631 ops/s
[info]                  ·gc.alloc.rate:                   3192,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388,427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 899,978 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 5786979,684 ops/s
[info]                  ·gc.alloc.rate:                   3118,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395,180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 923,380 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 5913101,753 ops/s
[info]                  ·gc.alloc.rate:                   3185,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718,826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 723,696 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5877376,183 ±(99.9%) 230858,522 ops/s [Average]
[info]   (min, avg, max) = (5786979,684, 5877376,183, 5926119,631), stdev = 59953,225
[info]   CI (99.9%): [5646517,661, 6108234,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3166,730 ±(99.9%) 124,045 MB/sec [Average]
[info]   (min, avg, max) = (3118,014, 3166,730, 3192,730), stdev = 32,214
[info]   CI (99.9%): [3042,685, 3290,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,000, 848,000, 848,000), stdev = 0,001
[info]   CI (99.9%): [848,000, 848,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,019 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,019, 0,028), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3116,155 ±(99.9%) 1420,094 MB/sec [Average]
[info]   (min, avg, max) = (2705,760, 3116,155, 3395,180), stdev = 368,794
[info]   CI (99.9%): [1696,061, 4536,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   834,558 ±(99.9%) 383,244 B/op [Average]
[info]   (min, avg, max) = (723,696, 834,558, 923,380), stdev = 99,527
[info]   CI (99.9%): [451,313, 1217,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92,37% complete, ETA 00:10:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4618806,568 ops/s
[info] # Warmup Iteration   2: 4906095,069 ops/s
[info] # Warmup Iteration   3: 5000166,905 ops/s
[info] # Warmup Iteration   4: 4964810,758 ops/s
[info] # Warmup Iteration   5: 5028771,807 ops/s
[info] Iteration   1: 5000531,498 ops/s
[info]                  ·gc.alloc.rate:                   2617,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696,538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 848,729 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5020507,990 ops/s
[info]                  ·gc.alloc.rate:                   2628,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 847,239 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5008684,676 ops/s
[info]                  ·gc.alloc.rate:                   2622,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708,978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851,121 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4956175,757 ops/s
[info]                  ·gc.alloc.rate:                   2594,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712,234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861,329 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4994387,304 ops/s
[info]                  ·gc.alloc.rate:                   2615,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037,048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 641,882 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   4996057,445 ±(99.9%) 93742,258 ops/s [Average]
[info]   (min, avg, max) = (4956175,757, 4996057,445, 5020507,990), stdev = 24344,567
[info]   CI (99.9%): [4902315,187, 5089799,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2615,841 ±(99.9%) 49,801 MB/sec [Average]
[info]   (min, avg, max) = (2594,690, 2615,841, 2628,881), stdev = 12,933
[info]   CI (99.9%): [2566,040, 2665,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,017 ±(99.9%) 0,029 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,017, 0,026), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2571,564 ±(99.9%) 1150,817 MB/sec [Average]
[info]   (min, avg, max) = (2037,048, 2571,564, 2712,234), stdev = 298,863
[info]   CI (99.9%): [1420,747, 3722,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   810,060 ±(99.9%) 362,635 B/op [Average]
[info]   (min, avg, max) = (641,882, 810,060, 861,329), stdev = 94,175
[info]   CI (99.9%): [447,425, 1172,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92,57% complete, ETA 00:09:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2769900,218 ops/s
[info] # Warmup Iteration   2: 3356996,498 ops/s
[info] # Warmup Iteration   3: 3389470,526 ops/s
[info] # Warmup Iteration   4: 3411086,177 ops/s
[info] # Warmup Iteration   5: 3417780,463 ops/s
[info] Iteration   1: 3403385,341 ops/s
[info]                  ·gc.alloc.rate:                   812,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311,731 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3418001,269 ops/s
[info]                  ·gc.alloc.rate:                   816,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 309,500 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3411739,883 ops/s
[info]                  ·gc.alloc.rate:                   815,074 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 619,474 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3411556,550 ops/s
[info]                  ·gc.alloc.rate:                   815,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 309,447 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3405618,329 ops/s
[info]                  ·gc.alloc.rate:                   813,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 309,983 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3410060,274 ±(99.9%) 22154,168 ops/s [Average]
[info]   (min, avg, max) = (3403385,341, 3410060,274, 3418001,269), stdev = 5753,367
[info]   CI (99.9%): [3387906,106, 3432214,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   814,690 ±(99.9%) 5,508 MB/sec [Average]
[info]   (min, avg, max) = (812,959, 814,690, 816,646), stdev = 1,430
[info]   CI (99.9%): [809,182, 820,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (376,000, 376,000, 376,000), stdev = 0,001
[info]   CI (99.9%): [376,000, 376,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,012 ±(99.9%) 0,066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,038), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   806,143 ±(99.9%) 1155,348 MB/sec [Average]
[info]   (min, avg, max) = (670,805, 806,143, 1342,866), stdev = 300,040
[info]   CI (99.9%): [≈ 0, 1961,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   372,027 ±(99.9%) 532,661 B/op [Average]
[info]   (min, avg, max) = (309,447, 372,027, 619,474), stdev = 138,330
[info]   CI (99.9%): [≈ 0, 904,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92,77% complete, ETA 00:09:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1569359,884 ops/s
[info] # Warmup Iteration   2: 6562280,848 ops/s
[info] # Warmup Iteration   3: 6724772,064 ops/s
[info] # Warmup Iteration   4: 6706408,063 ops/s
[info] # Warmup Iteration   5: 6716083,388 ops/s
[info] Iteration   1: 6713263,050 ops/s
[info]                  ·gc.alloc.rate:                   648,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157,879 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6722617,403 ops/s
[info]                  ·gc.alloc.rate:                   649,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157,660 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 6724739,553 ops/s
[info]                  ·gc.alloc.rate:                   649,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157,301 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6738815,220 ops/s
[info]                  ·gc.alloc.rate:                   650,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156,970 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 6723524,451 ops/s
[info]                  ·gc.alloc.rate:                   649,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157,329 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6724591,936 ±(99.9%) 35276,268 ops/s [Average]
[info]   (min, avg, max) = (6713263,050, 6724591,936, 6738815,220), stdev = 9161,135
[info]   CI (99.9%): [6689315,668, 6759868,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   649,510 ±(99.9%) 3,391 MB/sec [Average]
[info]   (min, avg, max) = (648,416, 649,510, 650,874), stdev = 0,881
[info]   CI (99.9%): [646,119, 652,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,535 ±(99.9%) 4,515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,535, 2,632), stdev = 1,172
[info]   CI (99.9%): [≈ 0, 5,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,125 ±(99.9%) 1,058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,125, 0,617), stdev = 0,275
[info]   CI (99.9%): [≈ 0, 1,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672,701 ±(99.9%) 2,807 MB/sec [Average]
[info]   (min, avg, max) = (672,154, 672,701, 673,502), stdev = 0,729
[info]   CI (99.9%): [669,893, 675,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   157,428 ±(99.9%) 1,353 B/op [Average]
[info]   (min, avg, max) = (156,970, 157,428, 157,879), stdev = 0,351
[info]   CI (99.9%): [156,075, 158,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92,97% complete, ETA 00:09:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1668457,902 ops/s
[info] # Warmup Iteration   2: 2170076,282 ops/s
[info] # Warmup Iteration   3: 2142784,061 ops/s
[info] # Warmup Iteration   4: 2185297,350 ops/s
[info] # Warmup Iteration   5: 2190891,797 ops/s
[info] Iteration   1: 2188427,812 ops/s
[info]                  ·gc.alloc.rate:                   678,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482,392 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2194864,492 ops/s
[info]                  ·gc.alloc.rate:                   680,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 481,726 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2188082,774 ops/s
[info]                  ·gc.alloc.rate:                   678,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483,204 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2181615,381 ops/s
[info]                  ·gc.alloc.rate:                   676,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485,134 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2190369,357 ops/s
[info]                  ·gc.alloc.rate:                   679,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483,161 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2188671,963 ±(99.9%) 18409,810 ops/s [Average]
[info]   (min, avg, max) = (2181615,381, 2188671,963, 2194864,492), stdev = 4780,969
[info]   CI (99.9%): [2170262,153, 2207081,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   678,668 ±(99.9%) 5,679 MB/sec [Average]
[info]   (min, avg, max) = (676,544, 678,668, 680,633), stdev = 1,475
[info]   CI (99.9%): [672,989, 684,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (488,000, 488,000, 488,000), stdev = 0,001
[info]   CI (99.9%): [488,000, 488,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,018 ±(99.9%) 0,048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,030), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   671,883 ±(99.9%) 2,811 MB/sec [Average]
[info]   (min, avg, max) = (670,728, 671,883, 672,571), stdev = 0,730
[info]   CI (99.9%): [669,072, 674,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   483,123 ±(99.9%) 4,923 B/op [Average]
[info]   (min, avg, max) = (481,726, 483,123, 485,134), stdev = 1,279
[info]   CI (99.9%): [478,200, 488,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93,17% complete, ETA 00:09:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10004691,835 ops/s
[info] # Warmup Iteration   2: 10583514,997 ops/s
[info] # Warmup Iteration   3: 10644768,644 ops/s
[info] # Warmup Iteration   4: 10706946,080 ops/s
[info] # Warmup Iteration   5: 10606320,202 ops/s
[info] Iteration   1: 10739540,197 ops/s
[info]                  ·gc.alloc.rate:                   1037,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98,590 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 10709658,411 ops/s
[info]                  ·gc.alloc.rate:                   1034,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197,551 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10694171,298 ops/s
[info]                  ·gc.alloc.rate:                   1032,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98,812 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 10666198,051 ops/s
[info]                  ·gc.alloc.rate:                   1030,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198,194 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 10715254,621 ops/s
[info]                  ·gc.alloc.rate:                   1035,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98,673 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   10704964,516 ±(99.9%) 104442,799 ops/s [Average]
[info]   (min, avg, max) = (10666198,051, 10704964,516, 10739540,197), stdev = 27123,463
[info]   CI (99.9%): [10600521,717, 10809407,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1033,964 ±(99.9%) 9,628 MB/sec [Average]
[info]   (min, avg, max) = (1030,417, 1033,964, 1037,104), stdev = 2,500
[info]   CI (99.9%): [1024,336, 1043,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,004 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,009), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940,799 ±(99.9%) 1417,266 MB/sec [Average]
[info]   (min, avg, max) = (671,438, 940,799, 1344,411), stdev = 368,060
[info]   CI (99.9%): [≈ 0, 2358,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   138,364 ±(99.9%) 209,182 B/op [Average]
[info]   (min, avg, max) = (98,590, 138,364, 198,194), stdev = 54,324
[info]   CI (99.9%): [≈ 0, 347,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93,37% complete, ETA 00:08:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8820895,094 ops/s
[info] # Warmup Iteration   2: 9092231,012 ops/s
[info] # Warmup Iteration   3: 9198474,805 ops/s
[info] # Warmup Iteration   4: 9178725,915 ops/s
[info] # Warmup Iteration   5: 9202843,611 ops/s
[info] Iteration   1: 9223361,132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9218241,543 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9212929,247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9198207,226 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9177375,482 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   9206022,926 ±(99.9%) 71506,117 ops/s [Average]
[info]   (min, avg, max) = (9177375,482, 9206022,926, 9223361,132), stdev = 18569,912
[info]   CI (99.9%): [9134516,809, 9277529,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93,57% complete, ETA 00:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2997872,846 ops/s
[info] # Warmup Iteration   2: 3674412,584 ops/s
[info] # Warmup Iteration   3: 3684267,983 ops/s
[info] # Warmup Iteration   4: 3673622,562 ops/s
[info] # Warmup Iteration   5: 3673505,547 ops/s
[info] Iteration   1: 3663971,552 ops/s
[info]                  ·gc.alloc.rate:                   1173,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287,554 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3686784,558 ops/s
[info]                  ·gc.alloc.rate:                   1180,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 571,574 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3682700,897 ops/s
[info]                  ·gc.alloc.rate:                   1179,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339,235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 572,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3702569,346 ops/s
[info]                  ·gc.alloc.rate:                   1185,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 569,674 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3706870,257 ops/s
[info]                  ·gc.alloc.rate:                   1187,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284,657 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3688579,322 ±(99.9%) 65957,341 ops/s [Average]
[info]   (min, avg, max) = (3663971,552, 3688579,322, 3706870,257), stdev = 17128,912
[info]   CI (99.9%): [3622621,980, 3754536,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1181,184 ±(99.9%) 21,238 MB/sec [Average]
[info]   (min, avg, max) = (1173,305, 1181,184, 1187,122), stdev = 5,515
[info]   CI (99.9%): [1159,946, 1202,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,011 ±(99.9%) 0,045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,027), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071,607 ±(99.9%) 1411,880 MB/sec [Average]
[info]   (min, avg, max) = (669,421, 1071,607, 1340,210), stdev = 366,661
[info]   CI (99.9%): [≈ 0, 2483,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   457,156 ±(99.9%) 601,290 B/op [Average]
[info]   (min, avg, max) = (284,657, 457,156, 572,320), stdev = 156,153
[info]   CI (99.9%): [≈ 0, 1058,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93,78% complete, ETA 00:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437828,389 ops/s
[info] # Warmup Iteration   2: 453336,183 ops/s
[info] # Warmup Iteration   3: 450707,598 ops/s
[info] # Warmup Iteration   4: 455742,395 ops/s
[info] # Warmup Iteration   5: 451198,229 ops/s
[info] Iteration   1: 455128,637 ops/s
[info]                  ·gc.alloc.rate:      219,779 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 454773,404 ops/s
[info]                  ·gc.alloc.rate:                   219,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1770,375 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 454777,224 ops/s
[info]                  ·gc.alloc.rate:      219,621 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 454286,950 ops/s
[info]                  ·gc.alloc.rate:      219,364 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 453771,984 ops/s
[info]                  ·gc.alloc.rate:                   219,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1774,326 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   454547,640 ±(99.9%) 2029,217 ops/s [Average]
[info]   (min, avg, max) = (453771,984, 454547,640, 455128,637), stdev = 526,981
[info]   CI (99.9%): [452518,423, 456576,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   219,501 ±(99.9%) 0,988 MB/sec [Average]
[info]   (min, avg, max) = (219,127, 219,501, 219,779), stdev = 0,257
[info]   CI (99.9%): [218,513, 220,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   760,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,001, 760,001, 760,001), stdev = 0,001
[info]   CI (99.9%): [760,001, 760,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,002 ±(99.9%) 0,014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,008), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,005 ±(99.9%) 0,047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,027), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   204,632 ±(99.9%) 1078,965 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,632, 511,582), stdev = 280,204
[info]   CI (99.9%): [≈ 0, 1283,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   708,940 ±(99.9%) 3738,041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 708,940, 1774,326), stdev = 970,757
[info]   CI (99.9%): [≈ 0, 4446,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93,98% complete, ETA 00:08:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695805,879 ops/s
[info] # Warmup Iteration   2: 855323,477 ops/s
[info] # Warmup Iteration   3: 906989,907 ops/s
[info] # Warmup Iteration   4: 908358,954 ops/s
[info] # Warmup Iteration   5: 908945,756 ops/s
[info] Iteration   1: 904717,684 ops/s
[info]                  ·gc.alloc.rate:                   1586,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014,026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3504,040 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 904144,755 ops/s
[info]                  ·gc.alloc.rate:                   1585,817 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2338,956 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 905627,839 ops/s
[info]                  ·gc.alloc.rate:                   1588,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2337,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 899957,613 ops/s
[info]                  ·gc.alloc.rate:                   1578,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3532,975 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 906158,415 ops/s
[info]                  ·gc.alloc.rate:                   1589,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2342,723 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   904121,261 ±(99.9%) 9454,097 ops/s [Average]
[info]   (min, avg, max) = (899957,613, 904121,261, 906158,415), stdev = 2455,199
[info]   CI (99.9%): [894667,164, 913575,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1585,573 ±(99.9%) 16,438 MB/sec [Average]
[info]   (min, avg, max) = (1578,322, 1585,573, 1589,097), stdev = 4,269
[info]   CI (99.9%): [1569,135, 1602,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2760,000, 2760,000, 2760,000), stdev = 0,001
[info]   CI (99.9%): [2760,000, 2760,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,051 ±(99.9%) 0,159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,051, 0,109), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614,411 ±(99.9%) 1415,864 MB/sec [Average]
[info]   (min, avg, max) = (1343,897, 1614,411, 2020,352), stdev = 367,695
[info]   CI (99.9%): [198,547, 3030,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2811,173 ±(99.9%) 2486,705 B/op [Average]
[info]   (min, avg, max) = (2337,171, 2811,173, 3532,975), stdev = 645,789
[info]   CI (99.9%): [324,468, 5297,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94,18% complete, ETA 00:07:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179479,849 ops/s
[info] # Warmup Iteration   2: 2270037,251 ops/s
[info] # Warmup Iteration   3: 2290219,110 ops/s
[info] # Warmup Iteration   4: 2294573,635 ops/s
[info] # Warmup Iteration   5: 2308545,987 ops/s
[info] Iteration   1: 2307184,776 ops/s
[info]                  ·gc.alloc.rate:                   645,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459,384 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2310058,020 ops/s
[info]                  ·gc.alloc.rate:                   645,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 458,811 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2303454,421 ops/s
[info]                  ·gc.alloc.rate:                   644,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459,225 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2302007,029 ops/s
[info]                  ·gc.alloc.rate:                   643,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459,512 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2297286,370 ops/s
[info]                  ·gc.alloc.rate:                   642,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 460,457 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2303998,123 ±(99.9%) 18882,374 ops/s [Average]
[info]   (min, avg, max) = (2297286,370, 2303998,123, 2310058,020), stdev = 4903,693
[info]   CI (99.9%): [2285115,749, 2322880,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   644,163 ±(99.9%) 5,287 MB/sec [Average]
[info]   (min, avg, max) = (642,295, 644,163, 645,882), stdev = 1,373
[info]   CI (99.9%): [638,876, 649,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,542 ±(99.9%) 4,537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,542, 2,650), stdev = 1,178
[info]   CI (99.9%): [≈ 0, 5,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,370 ±(99.9%) 3,095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,370, 1,807), stdev = 0,804
[info]   CI (99.9%): [≈ 0, 3,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672,677 ±(99.9%) 2,794 MB/sec [Average]
[info]   (min, avg, max) = (672,140, 672,677, 673,495), stdev = 0,726
[info]   CI (99.9%): [669,883, 675,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   459,478 ±(99.9%) 2,341 B/op [Average]
[info]   (min, avg, max) = (458,811, 459,478, 460,457), stdev = 0,608
[info]   CI (99.9%): [457,137, 461,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,38% complete, ETA 00:07:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 661796,389 ops/s
[info] # Warmup Iteration   2: 1249493,645 ops/s
[info] # Warmup Iteration   3: 1260844,200 ops/s
[info] # Warmup Iteration   4: 1260239,142 ops/s
[info] # Warmup Iteration   5: 1263674,548 ops/s
[info] Iteration   1: 1264115,548 ops/s
[info]                  ·gc.alloc.rate:                   931,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 836,350 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1260817,882 ops/s
[info]                  ·gc.alloc.rate:                   929,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1678,070 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1262601,068 ops/s
[info]                  ·gc.alloc.rate:                   930,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 838,177 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1261415,276 ops/s
[info]                  ·gc.alloc.rate:                   929,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1680,422 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1257746,647 ops/s
[info]                  ·gc.alloc.rate:                   926,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 843,522 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1261339,284 ±(99.9%) 9129,442 ops/s [Average]
[info]   (min, avg, max) = (1257746,647, 1261339,284, 1264115,548), stdev = 2370,887
[info]   CI (99.9%): [1252209,843, 1270468,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   929,668 ±(99.9%) 6,836 MB/sec [Average]
[info]   (min, avg, max) = (926,945, 929,668, 931,710), stdev = 1,775
[info]   CI (99.9%): [922,831, 936,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,000, 1160,000, 1160,000), stdev = 0,001
[info]   CI (99.9%): [1160,000, 1160,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,042 ±(99.9%) 0,167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   941,893 ±(99.9%) 1419,134 MB/sec [Average]
[info]   (min, avg, max) = (671,754, 941,893, 1346,825), stdev = 368,544
[info]   CI (99.9%): [≈ 0, 2361,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1175,308 ±(99.9%) 1771,445 B/op [Average]
[info]   (min, avg, max) = (836,350, 1175,308, 1680,422), stdev = 460,039
[info]   CI (99.9%): [≈ 0, 2946,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,58% complete, ETA 00:07:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2655681,362 ops/s
[info] # Warmup Iteration   2: 2819600,101 ops/s
[info] # Warmup Iteration   3: 2873212,554 ops/s
[info] # Warmup Iteration   4: 2865514,358 ops/s
[info] # Warmup Iteration   5: 2861892,438 ops/s
[info] Iteration   1: 2862906,737 ops/s
[info]                  ·gc.alloc.rate:                   800,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370,943 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2865248,254 ops/s
[info]                  ·gc.alloc.rate:                   801,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369,574 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2859243,813 ops/s
[info]                  ·gc.alloc.rate:                   799,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370,309 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2843988,034 ops/s
[info]                  ·gc.alloc.rate:                   795,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 743,828 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2861491,707 ops/s
[info]                  ·gc.alloc.rate:                   800,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369,676 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2858575,709 ±(99.9%) 32504,906 ops/s [Average]
[info]   (min, avg, max) = (2843988,034, 2858575,709, 2865248,254), stdev = 8441,421
[info]   CI (99.9%): [2826070,803, 2891080,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   799,183 ±(99.9%) 9,027 MB/sec [Average]
[info]   (min, avg, max) = (795,142, 799,183, 801,115), stdev = 2,344
[info]   CI (99.9%): [790,156, 808,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,016 ±(99.9%) 0,086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,046), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807,334 ±(99.9%) 1155,652 MB/sec [Average]
[info]   (min, avg, max) = (672,140, 807,334, 1344,201), stdev = 300,119
[info]   CI (99.9%): [≈ 0, 1962,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   444,866 ±(99.9%) 643,541 B/op [Average]
[info]   (min, avg, max) = (369,574, 444,866, 743,828), stdev = 167,126
[info]   CI (99.9%): [≈ 0, 1088,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94,78% complete, ETA 00:06:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 941850,678 ops/s
[info] # Warmup Iteration   2: 1409552,736 ops/s
[info] # Warmup Iteration   3: 1423293,221 ops/s
[info] # Warmup Iteration   4: 1424217,942 ops/s
[info] # Warmup Iteration   5: 1429315,377 ops/s
[info] Iteration   1: 1423005,668 ops/s
[info]                  ·gc.alloc.rate:                   1012,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1482,248 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1402642,767 ops/s
[info]                  ·gc.alloc.rate:                   997,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 751,193 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1420915,657 ops/s
[info]                  ·gc.alloc.rate:                   1011,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1483,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1423879,600 ops/s
[info]                  ·gc.alloc.rate:                   1013,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669,418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739,941 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1419766,987 ops/s
[info]                  ·gc.alloc.rate:                   1010,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338,934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1484,155 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1418042,136 ±(99.9%) 33739,060 ops/s [Average]
[info]   (min, avg, max) = (1402642,767, 1418042,136, 1423879,600), stdev = 8761,927
[info]   CI (99.9%): [1384303,076, 1451781,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1009,080 ±(99.9%) 24,620 MB/sec [Average]
[info]   (min, avg, max) = (997,828, 1009,080, 1013,254), stdev = 6,394
[info]   CI (99.9%): [984,460, 1033,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1120,000, 1120,000, 1120,000), stdev = 0,001
[info]   CI (99.9%): [1120,000, 1120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,023 ±(99.9%) 0,126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,069), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071,360 ±(99.9%) 1413,178 MB/sec [Average]
[info]   (min, avg, max) = (669,251, 1071,360, 1340,277), stdev = 366,998
[info]   CI (99.9%): [≈ 0, 2484,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1188,109 ±(99.9%) 1555,676 B/op [Average]
[info]   (min, avg, max) = (739,941, 1188,109, 1484,155), stdev = 404,004
[info]   CI (99.9%): [≈ 0, 2743,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94,98% complete, ETA 00:06:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 966623,272 ops/s
[info] # Warmup Iteration   2: 1206347,331 ops/s
[info] # Warmup Iteration   3: 1198707,162 ops/s
[info] # Warmup Iteration   4: 1210489,396 ops/s
[info] # Warmup Iteration   5: 1202695,682 ops/s
[info] Iteration   1: 1209844,933 ops/s
[info]                  ·gc.alloc.rate:                   1641,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1747,322 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1217997,362 ops/s
[info]                  ·gc.alloc.rate:                   1653,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2605,993 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1210801,767 ops/s
[info]                  ·gc.alloc.rate:                   1643,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1749,813 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1211867,522 ops/s
[info]                  ·gc.alloc.rate:                   1644,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2625,878 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1198940,292 ops/s
[info]                  ·gc.alloc.rate:                   1627,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1771,496 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1209890,375 ±(99.9%) 26564,516 ops/s [Average]
[info]   (min, avg, max) = (1198940,292, 1209890,375, 1217997,362), stdev = 6898,720
[info]   CI (99.9%): [1183325,860, 1236454,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1642,013 ±(99.9%) 36,252 MB/sec [Average]
[info]   (min, avg, max) = (1627,104, 1642,013, 1653,097), stdev = 9,414
[info]   CI (99.9%): [1605,761, 1678,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2136,000, 2136,000, 2136,000), stdev = 0,001
[info]   CI (99.9%): [2136,000, 2136,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,065 ±(99.9%) 0,118 B/op [Average]
[info]   (min, avg, max) = (0,027, 0,065, 0,108), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1615,499 ±(99.9%) 1419,824 MB/sec [Average]
[info]   (min, avg, max) = (1343,006, 1615,499, 2021,971), stdev = 368,724
[info]   CI (99.9%): [195,675, 3035,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2100,100 ±(99.9%) 1813,797 B/op [Average]
[info]   (min, avg, max) = (1747,322, 2100,100, 2625,878), stdev = 471,037
[info]   CI (99.9%): [286,303, 3913,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95,18% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1257786,264 ops/s
[info] # Warmup Iteration   2: 1955000,531 ops/s
[info] # Warmup Iteration   3: 1966675,147 ops/s
[info] # Warmup Iteration   4: 1974715,904 ops/s
[info] # Warmup Iteration   5: 1982580,984 ops/s
[info] Iteration   1: 1971755,880 ops/s
[info]                  ·gc.alloc.rate:                   1653,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012,885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1606,762 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1979055,802 ops/s
[info]                  ·gc.alloc.rate:                   1659,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1068,251 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1978068,130 ops/s
[info]                  ·gc.alloc.rate:                   1659,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1604,607 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1975414,403 ops/s
[info]                  ·gc.alloc.rate:                   1656,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346,273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1072,552 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1976639,677 ops/s
[info]                  ·gc.alloc.rate:                   1657,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023,159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1610,832 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1976186,778 ±(99.9%) 10926,151 ops/s [Average]
[info]   (min, avg, max) = (1971755,880, 1976186,778, 1979055,802), stdev = 2837,487
[info]   CI (99.9%): [1965260,627, 1987112,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1657,495 ±(99.9%) 9,445 MB/sec [Average]
[info]   (min, avg, max) = (1653,642, 1657,495, 1659,944), stdev = 2,453
[info]   CI (99.9%): [1648,049, 1666,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1320,000, 1320,000, 1320,000), stdev = 0,001
[info]   CI (99.9%): [1320,000, 1320,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,046 ±(99.9%) 0,105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,066), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1748,508 ±(99.9%) 1419,107 MB/sec [Average]
[info]   (min, avg, max) = (1343,360, 1748,508, 2023,159), stdev = 368,537
[info]   CI (99.9%): [329,401, 3167,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1392,601 ±(99.9%) 1132,624 B/op [Average]
[info]   (min, avg, max) = (1068,251, 1392,601, 1610,832), stdev = 294,139
[info]   CI (99.9%): [259,977, 2525,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95,38% complete, ETA 00:06:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158929,769 ops/s
[info] # Warmup Iteration   2: 2845774,272 ops/s
[info] # Warmup Iteration   3: 2842526,654 ops/s
[info] # Warmup Iteration   4: 2822165,879 ops/s
[info] # Warmup Iteration   5: 2792713,846 ops/s
[info] Iteration   1: 2845382,665 ops/s
[info]                  ·gc.alloc.rate:                   737,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2,614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 372,488 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2861227,219 ops/s
[info]                  ·gc.alloc.rate:                   741,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370,459 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2841696,674 ops/s
[info]                  ·gc.alloc.rate:                   736,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344,311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 744,485 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2856845,674 ops/s
[info]                  ·gc.alloc.rate:                   740,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370,262 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2847181,438 ops/s
[info]                  ·gc.alloc.rate:                   738,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371,535 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2850466,734 ±(99.9%) 31638,248 ops/s [Average]
[info]   (min, avg, max) = (2841696,674, 2850466,734, 2861227,219), stdev = 8216,353
[info]   CI (99.9%): [2818828,486, 2882104,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   739,009 ±(99.9%) 8,332 MB/sec [Average]
[info]   (min, avg, max) = (736,722, 739,009, 741,871), stdev = 2,164
[info]   CI (99.9%): [730,677, 747,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0,531 ±(99.9%) 4,484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,531, 2,614), stdev = 1,165
[info]   CI (99.9%): [≈ 0, 5,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0,294 ±(99.9%) 2,480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,294, 1,446), stdev = 0,644
[info]   CI (99.9%): [≈ 0, 2,774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   807,137 ±(99.9%) 1156,310 MB/sec [Average]
[info]   (min, avg, max) = (672,150, 807,137, 1344,311), stdev = 300,290
[info]   CI (99.9%): [≈ 0, 1963,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   445,846 ±(99.9%) 642,854 B/op [Average]
[info]   (min, avg, max) = (370,262, 445,846, 744,485), stdev = 166,947
[info]   CI (99.9%): [≈ 0, 1088,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,58% complete, ETA 00:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1555686,561 ops/s
[info] # Warmup Iteration   2: 2703415,960 ops/s
[info] # Warmup Iteration   3: 2815435,579 ops/s
[info] # Warmup Iteration   4: 2827193,538 ops/s
[info] # Warmup Iteration   5: 2822859,510 ops/s
[info] Iteration   1: 2823408,174 ops/s
[info]                  ·gc.alloc.rate:                   1334,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345,769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750,215 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2825564,985 ops/s
[info]                  ·gc.alloc.rate:                   1335,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750,615 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2815188,264 ops/s
[info]                  ·gc.alloc.rate:                   1330,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754,279 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2824128,859 ops/s
[info]                  ·gc.alloc.rate:                   1335,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752,808 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2821504,498 ops/s
[info]                  ·gc.alloc.rate:                   1334,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352,577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754,265 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2821958,956 ±(99.9%) 15624,905 ops/s [Average]
[info]   (min, avg, max) = (2815188,264, 2821958,956, 2825564,985), stdev = 4057,738
[info]   CI (99.9%): [2806334,051, 2837583,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1334,080 ±(99.9%) 7,274 MB/sec [Average]
[info]   (min, avg, max) = (1330,847, 1334,080, 1335,645), stdev = 1,889
[info]   CI (99.9%): [1326,806, 1341,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,022, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,033 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (0,023, 0,033, 0,035), stdev = 0,005
[info]   CI (99.9%): [0,012, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1349,205 ±(99.9%) 10,364 MB/sec [Average]
[info]   (min, avg, max) = (1345,769, 1349,205, 1352,577), stdev = 2,691
[info]   CI (99.9%): [1338,841, 1359,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   752,436 ±(99.9%) 7,489 B/op [Average]
[info]   (min, avg, max) = (750,215, 752,436, 754,279), stdev = 1,945
[info]   CI (99.9%): [744,947, 759,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,78% complete, ETA 00:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2355808,213 ops/s
[info] # Warmup Iteration   2: 3007243,410 ops/s
[info] # Warmup Iteration   3: 3021965,785 ops/s
[info] # Warmup Iteration   4: 3028485,087 ops/s
[info] # Warmup Iteration   5: 3020657,108 ops/s
[info] Iteration   1: 3045303,410 ops/s
[info]                  ·gc.alloc.rate:                   789,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 348,722 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3050824,869 ops/s
[info]                  ·gc.alloc.rate:                   790,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347,092 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3041593,597 ops/s
[info]                  ·gc.alloc.rate:                   788,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 348,115 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3041331,036 ops/s
[info]                  ·gc.alloc.rate:                   788,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347,815 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 3036455,351 ops/s
[info]                  ·gc.alloc.rate:                   787,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 696,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3043101,653 ±(99.9%) 20563,885 ops/s [Average]
[info]   (min, avg, max) = (3036455,351, 3043101,653, 3050824,869), stdev = 5340,376
[info]   CI (99.9%): [3022537,768, 3063665,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   788,897 ±(99.9%) 5,438 MB/sec [Average]
[info]   (min, avg, max) = (787,155, 788,897, 790,980), stdev = 1,412
[info]   CI (99.9%): [783,458, 794,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,011 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,022), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807,205 ±(99.9%) 1154,443 MB/sec [Average]
[info]   (min, avg, max) = (672,146, 807,205, 1343,511), stdev = 299,805
[info]   CI (99.9%): [≈ 0, 1961,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   417,623 ±(99.9%) 600,031 B/op [Average]
[info]   (min, avg, max) = (347,092, 417,623, 696,372), stdev = 155,826
[info]   CI (99.9%): [≈ 0, 1017,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95,98% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2421154,686 ops/s
[info] # Warmup Iteration   2: 3096501,177 ops/s
[info] # Warmup Iteration   3: 3104696,735 ops/s
[info] # Warmup Iteration   4: 3105996,318 ops/s
[info] # Warmup Iteration   5: 3111867,260 ops/s
[info] Iteration   1: 3113143,675 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3119448,727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3113625,767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3105963,556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3105636,071 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3111563,559 ±(99.9%) 22405,032 ops/s [Average]
[info]   (min, avg, max) = (3105636,071, 3111563,559, 3119448,727), stdev = 5818,516
[info]   CI (99.9%): [3089158,527, 3133968,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96,18% complete, ETA 00:05:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2200451,052 ops/s
[info] # Warmup Iteration   2: 2583096,548 ops/s
[info] # Warmup Iteration   3: 2755362,447 ops/s
[info] # Warmup Iteration   4: 2766248,564 ops/s
[info] # Warmup Iteration   5: 2783119,338 ops/s
[info] Iteration   1: 2748823,253 ops/s
[info]                  ·gc.alloc.rate:                   1327,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383,669 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2734750,335 ops/s
[info]                  ·gc.alloc.rate:                   1320,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 771,270 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2742332,607 ops/s
[info]                  ·gc.alloc.rate:                   1324,183 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340,206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 769,196 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2750780,377 ops/s
[info]                  ·gc.alloc.rate:                   1328,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341,461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 767,574 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2530080,868 ops/s
[info]                  ·gc.alloc.rate:                   1221,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342,867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835,362 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2701353,488 ±(99.9%) 369467,950 ops/s [Average]
[info]   (min, avg, max) = (2530080,868, 2701353,488, 2750780,377), stdev = 95949,653
[info]   CI (99.9%): [2331885,538, 3070821,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1304,409 ±(99.9%) 178,378 MB/sec [Average]
[info]   (min, avg, max) = (1221,721, 1304,409, 1328,225), stdev = 46,324
[info]   CI (99.9%): [1126,031, 1482,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,000, 760,000, 760,000), stdev = 0,001
[info]   CI (99.9%): [760,000, 760,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0,021 ±(99.9%) 0,082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,048), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1206,947 ±(99.9%) 1155,586 MB/sec [Average]
[info]   (min, avg, max) = (670,112, 1206,947, 1342,867), stdev = 300,102
[info]   CI (99.9%): [51,361, 2362,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   705,414 ±(99.9%) 701,292 B/op [Average]
[info]   (min, avg, max) = (383,669, 705,414, 835,362), stdev = 182,123
[info]   CI (99.9%): [4,122, 1406,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96,39% complete, ETA 00:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7635,252 ops/s
[info] # Warmup Iteration   2: 12181,322 ops/s
[info] # Warmup Iteration   3: 12659,825 ops/s
[info] # Warmup Iteration   4: 13107,822 ops/s
[info] # Warmup Iteration   5: 13524,058 ops/s
[info] Iteration   1: 13476,560 ops/s
[info]                  ·gc.alloc.rate:                   1959,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              228825,139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012,595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235073,937 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 13505,183 ops/s
[info]                  ·gc.alloc.rate:                   1963,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015,441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234897,170 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 13372,681 ops/s
[info]                  ·gc.alloc.rate:                   1944,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237724,785 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 13455,281 ops/s
[info]                  ·gc.alloc.rate:                   1956,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              228824,822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022,480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236570,401 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 12527,156 ops/s
[info]                  ·gc.alloc.rate:                   1821,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              228808,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169700,114 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   13267,372 ±(99.9%) 1604,652 ops/s [Average]
[info]   (min, avg, max) = (12527,156, 13267,372, 13505,183), stdev = 416,723
[info]   CI (99.9%): [11662,720, 14872,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1928,915 ±(99.9%) 233,131 MB/sec [Average]
[info]   (min, avg, max) = (1821,342, 1928,915, 1963,401), stdev = 60,543
[info]   CI (99.9%): [1695,784, 2162,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228824,411 ±(99.9%) 37,776 B/op [Average]
[info]   (min, avg, max) = (228808,035, 228824,411, 228832,031), stdev = 9,810
[info]   CI (99.9%): [228786,635, 228862,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,113 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,064, 0,113, 0,167), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13,444 ±(99.9%) 16,841 B/op [Average]
[info]   (min, avg, max) = (7,462, 13,444, 19,598), stdev = 4,373
[info]   CI (99.9%): [≈ 0, 30,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1884,278 ±(99.9%) 1148,372 MB/sec [Average]
[info]   (min, avg, max) = (1350,835, 1884,278, 2022,480), stdev = 298,228
[info]   CI (99.9%): [735,906, 3032,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   222793,281 ±(99.9%) 114373,878 B/op [Average]
[info]   (min, avg, max) = (169700,114, 222793,281, 237724,785), stdev = 29702,533
[info]   CI (99.9%): [108419,403, 337167,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96,59% complete, ETA 00:04:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7216,434 ops/s
[info] # Warmup Iteration   2: 14989,912 ops/s
[info] # Warmup Iteration   3: 14993,367 ops/s
[info] # Warmup Iteration   4: 15186,798 ops/s
[info] # Warmup Iteration   5: 15154,075 ops/s
[info] Iteration   1: 15268,964 ops/s
[info]                  ·gc.alloc.rate:                   215,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              22256,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52727,452 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15322,656 ops/s
[info]                  ·gc.alloc.rate:      216,701 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256,029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15191,823 ops/s
[info]                  ·gc.alloc.rate:                   214,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              22252,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52994,628 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 15236,202 ops/s
[info]                  ·gc.alloc.rate:      215,311 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240,027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15213,072 ops/s
[info]                  ·gc.alloc.rate:                   214,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52918,016 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15246,543 ±(99.9%) 197,451 ops/s [Average]
[info]   (min, avg, max) = (15191,823, 15246,543, 15322,656), stdev = 51,277
[info]   CI (99.9%): [15049,092, 15443,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   215,540 ±(99.9%) 2,980 MB/sec [Average]
[info]   (min, avg, max) = (214,814, 215,540, 216,701), stdev = 0,774
[info]   CI (99.9%): [212,560, 218,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22248,833 ±(99.9%) 31,579 B/op [Average]
[info]   (min, avg, max) = (22240,027, 22248,833, 22256,029), stdev = 8,201
[info]   CI (99.9%): [22217,254, 22280,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,010 ±(99.9%) 0,049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,031), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1,074 ±(99.9%) 5,057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,074, 3,217), stdev = 1,313
[info]   CI (99.9%): [≈ 0, 6,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306,920 ±(99.9%) 1078,866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,920, 511,593), stdev = 280,178
[info]   CI (99.9%): [≈ 0, 1385,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31728,019 ±(99.9%) 111529,087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31728,019, 52994,628), stdev = 28963,750
[info]   CI (99.9%): [≈ 0, 143257,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96,79% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23523,177 ops/s
[info] # Warmup Iteration   2: 28449,815 ops/s
[info] # Warmup Iteration   3: 41262,546 ops/s
[info] # Warmup Iteration   4: 40942,817 ops/s
[info] # Warmup Iteration   5: 40964,353 ops/s
[info] Iteration   1: 41039,524 ops/s
[info]                  ·gc.alloc.rate:                   380,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19618,173 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 41317,089 ops/s
[info]                  ·gc.alloc.rate:      382,687 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 40309,970 ops/s
[info]                  ·gc.alloc.rate:                   373,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19973,372 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 41076,646 ops/s
[info]                  ·gc.alloc.rate:                   380,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19600,505 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 41144,945 ops/s
[info]                  ·gc.alloc.rate:      381,083 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   40977,635 ±(99.9%) 1494,616 ops/s [Average]
[info]   (min, avg, max) = (40309,970, 40977,635, 41317,089), stdev = 388,147
[info]   CI (99.9%): [39483,019, 42472,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   379,520 ±(99.9%) 13,872 MB/sec [Average]
[info]   (min, avg, max) = (373,331, 379,520, 382,687), stdev = 3,603
[info]   CI (99.9%): [365,648, 393,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (14576,010, 14576,010, 14576,011), stdev = 0,001
[info]   CI (99.9%): [14576,009, 14576,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,006 ±(99.9%) 0,053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,031), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,245 ±(99.9%) 2,050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,245, 1,197), stdev = 0,532
[info]   CI (99.9%): [≈ 0, 2,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306,937 ±(99.9%) 1078,926 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,937, 511,580), stdev = 280,194
[info]   CI (99.9%): [≈ 0, 1385,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11838,410 ±(99.9%) 41617,621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11838,410, 19973,372), stdev = 10807,964
[info]   CI (99.9%): [≈ 0, 53456,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96,99% complete, ETA 00:04:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1579,165 ops/s
[info] # Warmup Iteration   2: 3631,823 ops/s
[info] # Warmup Iteration   3: 3680,473 ops/s
[info] # Warmup Iteration   4: 4282,220 ops/s
[info] # Warmup Iteration   5: 4296,365 ops/s
[info] Iteration   1: 4299,197 ops/s
[info]                  ·gc.alloc.rate:                   1402,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349,387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493806,140 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4288,989 ops/s
[info]                  ·gc.alloc.rate:                   1398,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495446,049 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 4287,975 ops/s
[info]                  ·gc.alloc.rate:                   1398,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 744320,269 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 4281,352 ops/s
[info]                  ·gc.alloc.rate:                   1396,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353,943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497479,905 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4274,537 ops/s
[info]                  ·gc.alloc.rate:                   1394,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354,975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498662,137 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   4286,410 ±(99.9%) 35,456 ops/s [Average]
[info]   (min, avg, max) = (4274,537, 4286,410, 4299,197), stdev = 9,208
[info]   CI (99.9%): [4250,954, 4321,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1398,133 ±(99.9%) 11,316 MB/sec [Average]
[info]   (min, avg, max) = (1394,326, 1398,133, 1402,230), stdev = 2,939
[info]   CI (99.9%): [1386,817, 1409,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513144,097 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (513144,095, 513144,097, 513144,103), stdev = 0,003
[info]   CI (99.9%): [513144,084, 513144,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3,057 ±(99.9%) 16,117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,057, 7,663), stdev = 4,186
[info]   CI (99.9%): [≈ 0, 19,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1487,539 ±(99.9%) 1165,018 MB/sec [Average]
[info]   (min, avg, max) = (1349,387, 1487,539, 2028,744), stdev = 302,552
[info]   CI (99.9%): [322,520, 2652,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   545942,900 ±(99.9%) 427082,618 B/op [Average]
[info]   (min, avg, max) = (493806,140, 545942,900, 744320,269), stdev = 110912,000
[info]   CI (99.9%): [118860,282, 973025,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 6,000), stdev = 1,789
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97,19% complete, ETA 00:03:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6f4166c4/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 33885,519 ops/s
[info] # Warmup Iteration   2: 65846,826 ops/s
[info] # Warmup Iteration   3: 66217,160 ops/s
[info] # Warmup Iteration   4: 66307,728 ops/s
[info] # Warmup Iteration   5: 66258,410 ops/s
[info] Iteration   1: 66089,307 ops/s
[info]                  ·gc.alloc.rate:                   843,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16045,181 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 66226,367 ops/s
[info]                  ·gc.alloc.rate:                   846,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16013,205 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 64989,891 ops/s
[info]                  ·gc.alloc.rate:                   830,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16326,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 65995,649 ops/s
[info]                  ·gc.alloc.rate:                   842,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32160,376 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 65886,356 ops/s
[info]                  ·gc.alloc.rate:                   841,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16110,030 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   65837,514 ±(99.9%) 1886,878 ops/s [Average]
[info]   (min, avg, max) = (64989,891, 65837,514, 66226,367), stdev = 490,016
[info]   CI (99.9%): [63950,635, 67724,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   840,912 ±(99.9%) 24,110 MB/sec [Average]
[info]   (min, avg, max) = (830,129, 840,912, 846,090), stdev = 6,261
[info]   CI (99.9%): [816,802, 865,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100,005 ±(99.9%) 0,154 B/op [Average]
[info]   (min, avg, max) = (20099,957, 20100,005, 20100,042), stdev = 0,040
[info]   CI (99.9%): [20099,851, 20100,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,298 ±(99.9%) 2,565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,298, 1,489), stdev = 0,666
[info]   CI (99.9%): [≈ 0, 2,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809,024 ±(99.9%) 1161,573 MB/sec [Average]
[info]   (min, avg, max) = (673,736, 809,024, 1348,644), stdev = 301,657
[info]   CI (99.9%): [≈ 0, 1970,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19330,963 ±(99.9%) 27620,271 B/op [Average]
[info]   (min, avg, max) = (16013,205, 19330,963, 32160,376), stdev = 7172,897
[info]   CI (99.9%): [≈ 0, 46951,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97,39% complete, ETA 00:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82970,324 ops/s
[info] # Warmup Iteration   2: 96144,774 ops/s
[info] # Warmup Iteration   3: 95387,940 ops/s
[info] # Warmup Iteration   4: 96024,518 ops/s
[info] # Warmup Iteration   5: 95625,065 ops/s
[info] Iteration   1: 95927,689 ops/s
[info]                  ·gc.alloc.rate:                   627,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11064,848 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 96272,823 ops/s
[info]                  ·gc.alloc.rate:      629,326 MB/sec
[info]                  ·gc.alloc.rate.norm: 10288,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 95815,843 ops/s
[info]                  ·gc.alloc.rate:                   626,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11077,894 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 96137,234 ops/s
[info]                  ·gc.alloc.rate:                   628,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11002,404 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 96062,246 ops/s
[info]                  ·gc.alloc.rate:                   627,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11010,877 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   96043,167 ±(99.9%) 686,035 ops/s [Average]
[info]   (min, avg, max) = (95815,843, 96043,167, 96272,823), stdev = 178,161
[info]   CI (99.9%): [95357,132, 96729,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   627,832 ±(99.9%) 4,550 MB/sec [Average]
[info]   (min, avg, max) = (626,311, 627,832, 629,326), stdev = 1,182
[info]   CI (99.9%): [623,282, 632,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10288,004, 10288,004, 10288,005), stdev = 0,001
[info]   CI (99.9%): [10288,004, 10288,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,691 ±(99.9%) 5,863 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,691, 3,415), stdev = 1,523
[info]   CI (99.9%): [≈ 0, 6,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11,343 ±(99.9%) 96,200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,343, 56,033), stdev = 24,983
[info]   CI (99.9%): [≈ 0, 107,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538,607 ±(99.9%) 1159,401 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,607, 674,407), stdev = 301,093
[info]   CI (99.9%): [≈ 0, 1698,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8831,205 ±(99.9%) 19010,254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8831,205, 11077,894), stdev = 4936,903
[info]   CI (99.9%): [≈ 0, 27841,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97,59% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95110,800 ops/s
[info] # Warmup Iteration   2: 106595,348 ops/s
[info] # Warmup Iteration   3: 106397,393 ops/s
[info] # Warmup Iteration   4: 106745,926 ops/s
[info] # Warmup Iteration   5: 106573,063 ops/s
[info] Iteration   1: 106591,351 ops/s
[info]                  ·gc.alloc.rate:      15,171 MB/sec
[info]                  ·gc.alloc.rate.norm: 224,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106400,515 ops/s
[info]                  ·gc.alloc.rate:      15,143 MB/sec
[info]                  ·gc.alloc.rate.norm: 224,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 106417,948 ops/s
[info]                  ·gc.alloc.rate:      15,146 MB/sec
[info]                  ·gc.alloc.rate.norm: 224,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 106857,139 ops/s
[info]                  ·gc.alloc.rate:      15,209 MB/sec
[info]                  ·gc.alloc.rate.norm: 224,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 106328,174 ops/s
[info]                  ·gc.alloc.rate:      15,135 MB/sec
[info]                  ·gc.alloc.rate.norm: 224,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   106519,026 ±(99.9%) 817,383 ops/s [Average]
[info]   (min, avg, max) = (106328,174, 106519,026, 106857,139), stdev = 212,272
[info]   CI (99.9%): [105701,643, 107336,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   15,161 ±(99.9%) 0,116 MB/sec [Average]
[info]   (min, avg, max) = (15,135, 15,161, 15,209), stdev = 0,030
[info]   CI (99.9%): [15,045, 15,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (224,004, 224,004, 224,004), stdev = 0,001
[info]   CI (99.9%): [224,004, 224,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97,79% complete, ETA 00:02:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345964,113 ops/s
[info] # Warmup Iteration   2: 400589,098 ops/s
[info] # Warmup Iteration   3: 405663,781 ops/s
[info] # Warmup Iteration   4: 402345,470 ops/s
[info] # Warmup Iteration   5: 404819,661 ops/s
[info] Iteration   1: 405817,424 ops/s
[info]                  ·gc.alloc.rate:                   2174,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017,486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7824,712 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 405731,041 ops/s
[info]                  ·gc.alloc.rate:                   2173,972 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021,659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7841,238 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 405047,038 ops/s
[info]                  ·gc.alloc.rate:                   2170,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7866,759 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 399887,138 ops/s
[info]                  ·gc.alloc.rate:                   2142,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704,591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10644,324 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 405109,647 ops/s
[info]                  ·gc.alloc.rate:                   2170,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032,110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7894,352 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   404318,457 ±(99.9%) 9633,481 ops/s [Average]
[info]   (min, avg, max) = (399887,138, 404318,457, 405817,424), stdev = 2501,784
[info]   CI (99.9%): [394684,977, 413951,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2166,224 ±(99.9%) 51,638 MB/sec [Average]
[info]   (min, avg, max) = (2142,467, 2166,224, 2174,066), stdev = 13,410
[info]   CI (99.9%): [2114,586, 2217,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8432,001, 8432,001, 8432,001), stdev = 0,001
[info]   CI (99.9%): [8432,001, 8432,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0,227 ±(99.9%) 0,262 B/op [Average]
[info]   (min, avg, max) = (0,161, 0,227, 0,324), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2160,096 ±(99.9%) 1172,247 MB/sec [Average]
[info]   (min, avg, max) = (2017,486, 2160,096, 2704,591), stdev = 304,429
[info]   CI (99.9%): [987,849, 3332,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8414,277 ±(99.9%) 4801,417 B/op [Average]
[info]   (min, avg, max) = (7824,712, 8414,277, 10644,324), stdev = 1246,913
[info]   CI (99.9%): [3612,860, 13215,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97,99% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275473,312 ops/s
[info] # Warmup Iteration   2: 478317,615 ops/s
[info] # Warmup Iteration   3: 486494,778 ops/s
[info] # Warmup Iteration   4: 488961,832 ops/s
[info] # Warmup Iteration   5: 487614,939 ops/s
[info] Iteration   1: 486136,174 ops/s
[info]                  ·gc.alloc.rate:                   593,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2181,276 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 484298,119 ops/s
[info]                  ·gc.alloc.rate:                   590,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2189,724 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 487858,040 ops/s
[info]                  ·gc.alloc.rate:      595,177 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 486995,061 ops/s
[info]                  ·gc.alloc.rate:                   594,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2180,641 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 486282,023 ops/s
[info]                  ·gc.alloc.rate:                   593,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2183,882 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   486313,883 ±(99.9%) 5073,625 ops/s [Average]
[info]   (min, avg, max) = (484298,119, 486313,883, 487858,040), stdev = 1317,604
[info]   CI (99.9%): [481240,258, 491387,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   593,275 ±(99.9%) 6,218 MB/sec [Average]
[info]   (min, avg, max) = (590,813, 593,275, 595,177), stdev = 1,615
[info]   CI (99.9%): [587,057, 599,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1920,001, 1920,001, 1920,001), stdev = 0,001
[info]   CI (99.9%): [1920,001, 1920,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,291), stdev = 0,125
[info]   CI (99.9%): [≈ 0, 0,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,229 ±(99.9%) 1,553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,229, 0,943), stdev = 0,403
[info]   CI (99.9%): [≈ 0, 1,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539,416 ±(99.9%) 1161,136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,416, 674,781), stdev = 301,543
[info]   CI (99.9%): [≈ 0, 1700,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1747,105 ±(99.9%) 3760,800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1747,105, 2189,724), stdev = 976,668
[info]   CI (99.9%): [≈ 0, 5507,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,19% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1199489,387 ops/s
[info] # Warmup Iteration   2: 1307454,223 ops/s
[info] # Warmup Iteration   3: 1290380,406 ops/s
[info] # Warmup Iteration   4: 1309223,152 ops/s
[info] # Warmup Iteration   5: 1306817,657 ops/s
[info] Iteration   1: 1292730,150 ops/s
[info]                  ·gc.alloc.rate:                   676,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 821,506 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1310387,638 ops/s
[info]                  ·gc.alloc.rate:                   686,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 810,490 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1309362,899 ops/s
[info]                  ·gc.alloc.rate:                   685,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 808,652 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1304409,172 ops/s
[info]                  ·gc.alloc.rate:                   682,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 811,718 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1291666,492 ops/s
[info]                  ·gc.alloc.rate:                   676,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 818,128 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1301711,270 ±(99.9%) 34584,246 ops/s [Average]
[info]   (min, avg, max) = (1291666,492, 1301711,270, 1310387,638), stdev = 8981,419
[info]   CI (99.9%): [1267127,024, 1336295,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   681,555 ±(99.9%) 18,163 MB/sec [Average]
[info]   (min, avg, max) = (676,309, 681,555, 686,152), stdev = 4,717
[info]   CI (99.9%): [663,393, 699,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,686 ±(99.9%) 5,686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,686, 3,328), stdev = 1,477
[info]   CI (99.9%): [≈ 0, 6,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,835 ±(99.9%) 6,923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,835, 4,052), stdev = 1,798
[info]   CI (99.9%): [≈ 0, 7,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673,342 ±(99.9%) 5,625 MB/sec [Average]
[info]   (min, avg, max) = (671,489, 673,342, 674,902), stdev = 1,461
[info]   CI (99.9%): [667,717, 678,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   814,099 ±(99.9%) 21,043 B/op [Average]
[info]   (min, avg, max) = (808,652, 814,099, 821,506), stdev = 5,465
[info]   CI (99.9%): [793,056, 835,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98,39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86424,912 ops/s
[info] # Warmup Iteration   2: 123770,500 ops/s
[info] # Warmup Iteration   3: 124464,411 ops/s
[info] # Warmup Iteration   4: 125425,796 ops/s
[info] # Warmup Iteration   5: 125081,316 ops/s
[info] Iteration   1: 123924,544 ops/s
[info]                  ·gc.alloc.rate:                   4307,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078,359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51797,301 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 124225,985 ops/s
[info]                  ·gc.alloc.rate:                   4318,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4764,940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60361,356 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 125318,711 ops/s
[info]                  ·gc.alloc.rate:                   4356,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4085,511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51306,957 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 124917,362 ops/s
[info]                  ·gc.alloc.rate:                   4342,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088,991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51510,704 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 123282,751 ops/s
[info]                  ·gc.alloc.rate:                   4285,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4770,194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60895,592 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   124333,870 ±(99.9%) 3101,151 ops/s [Average]
[info]   (min, avg, max) = (123282,751, 124333,870, 125318,711), stdev = 805,359
[info]   CI (99.9%): [121232,719, 127435,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4321,849 ±(99.9%) 108,289 MB/sec [Average]
[info]   (min, avg, max) = (4285,182, 4321,849, 4356,014), stdev = 28,122
[info]   CI (99.9%): [4213,560, 4430,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54704,003, 54704,003, 54704,004), stdev = 0,001
[info]   CI (99.9%): [54704,003, 54704,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0,079 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1,002 ±(99.9%) 1,326 B/op [Average]
[info]   (min, avg, max) = (0,525, 1,002, 1,322), stdev = 0,344
[info]   CI (99.9%): [≈ 0, 2,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   4357,599 ±(99.9%) 1441,188 MB/sec [Average]
[info]   (min, avg, max) = (4078,359, 4357,599, 4770,194), stdev = 374,272
[info]   CI (99.9%): [2916,411, 5798,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55174,382 ±(99.9%) 19197,413 B/op [Average]
[info]   (min, avg, max) = (51306,957, 55174,382, 60895,592), stdev = 4985,507
[info]   CI (99.9%): [35976,969, 74371,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98,59% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 598392,070 ops/s
[info] # Warmup Iteration   2: 648352,515 ops/s
[info] # Warmup Iteration   3: 649611,289 ops/s
[info] # Warmup Iteration   4: 647084,153 ops/s
[info] # Warmup Iteration   5: 657261,000 ops/s
[info] Iteration   1: 644199,110 ops/s
[info]                  ·gc.alloc.rate:                   1879,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016,985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4926,853 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 651066,447 ops/s
[info]                  ·gc.alloc.rate:                   1899,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020,389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4883,206 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 656495,995 ops/s
[info]                  ·gc.alloc.rate:                   1915,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348,242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3232,053 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 657082,173 ops/s
[info]                  ·gc.alloc.rate:                   1917,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024,662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4849,296 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 653464,196 ops/s
[info]                  ·gc.alloc.rate:                   1906,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028,958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4886,589 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   652461,584 ±(99.9%) 20086,787 ops/s [Average]
[info]   (min, avg, max) = (644199,110, 652461,584, 657082,173), stdev = 5216,475
[info]   CI (99.9%): [632374,797, 672548,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1903,845 ±(99.9%) 58,169 MB/sec [Average]
[info]   (min, avg, max) = (1879,901, 1903,845, 1917,237), stdev = 15,106
[info]   CI (99.9%): [1845,676, 1962,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4592,001, 4592,001, 4592,001), stdev = 0,001
[info]   CI (99.9%): [4592,001, 4592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0,058 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0,141 ±(99.9%) 0,253 B/op [Average]
[info]   (min, avg, max) = (0,100, 0,141, 0,252), stdev = 0,066
[info]   CI (99.9%): [≈ 0, 0,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1887,847 ±(99.9%) 1161,671 MB/sec [Average]
[info]   (min, avg, max) = (1348,242, 1887,847, 2028,958), stdev = 301,682
[info]   CI (99.9%): [726,176, 3049,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4555,599 ±(99.9%) 2851,000 B/op [Average]
[info]   (min, avg, max) = (3232,053, 4555,599, 4926,853), stdev = 740,396
[info]   CI (99.9%): [1704,599, 7406,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98,80% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305022,868 ops/s
[info] # Warmup Iteration   2: 371101,936 ops/s
[info] # Warmup Iteration   3: 364091,689 ops/s
[info] # Warmup Iteration   4: 371196,191 ops/s
[info] # Warmup Iteration   5: 371773,083 ops/s
[info] Iteration   1: 368355,731 ops/s
[info]                  ·gc.alloc.rate:                   578,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2185,701 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 368248,883 ops/s
[info]                  ·gc.alloc.rate:                   578,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2881,220 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 369169,714 ops/s
[info]                  ·gc.alloc.rate:                   579,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2873,783 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 370625,553 ops/s
[info]                  ·gc.alloc.rate:                   582,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2854,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 370804,170 ops/s
[info]                  ·gc.alloc.rate:                   582,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2852,649 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   369440,810 ±(99.9%) 4690,026 ops/s [Average]
[info]   (min, avg, max) = (368248,883, 369440,810, 370804,170), stdev = 1217,985
[info]   CI (99.9%): [364750,784, 374130,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   580,268 ±(99.9%) 7,456 MB/sec [Average]
[info]   (min, avg, max) = (578,401, 580,268, 582,455), stdev = 1,936
[info]   CI (99.9%): [572,812, 587,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2472,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2472,001, 2472,001, 2472,001), stdev = 0,001
[info]   CI (99.9%): [2472,001, 2472,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0,722 ±(99.9%) 6,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,722, 3,526), stdev = 1,568
[info]   CI (99.9%): [≈ 0, 6,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3,084 ±(99.9%) 25,800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,084, 15,068), stdev = 6,700
[info]   CI (99.9%): [≈ 0, 28,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640,796 ±(99.9%) 278,301 MB/sec [Average]
[info]   (min, avg, max) = (511,520, 640,796, 674,151), stdev = 72,274
[info]   CI (99.9%): [362,494, 919,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2729,476 ±(99.9%) 1171,485 B/op [Average]
[info]   (min, avg, max) = (2185,701, 2729,476, 2881,220), stdev = 304,231
[info]   CI (99.9%): [1557,991, 3900,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531801,622 ops/s
[info] # Warmup Iteration   2: 793481,372 ops/s
[info] # Warmup Iteration   3: 794152,670 ops/s
[info] # Warmup Iteration   4: 791259,197 ops/s
[info] # Warmup Iteration   5: 791836,874 ops/s
[info] Iteration   1: 742240,313 ops/s
[info]                  ·gc.alloc.rate:                   565,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1428,641 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 794136,577 ops/s
[info]                  ·gc.alloc.rate:                   605,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1335,370 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 787936,697 ops/s
[info]                  ·gc.alloc.rate:                   600,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1347,786 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 790132,246 ops/s
[info]                  ·gc.alloc.rate:                   602,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1344,097 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 788027,242 ops/s
[info]                  ·gc.alloc.rate:      600,821 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   780494,615 ±(99.9%) 82911,967 ops/s [Average]
[info]   (min, avg, max) = (742240,313, 780494,615, 794136,577), stdev = 21531,975
[info]   CI (99.9%): [697582,648, 863406,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   595,102 ±(99.9%) 63,270 MB/sec [Average]
[info]   (min, avg, max) = (565,910, 595,102, 605,508), stdev = 16,431
[info]   CI (99.9%): [531,832, 658,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1200,001, 1200,001, 1200,001), stdev = 0,001
[info]   CI (99.9%): [1200,000, 1200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0,071 ±(99.9%) 0,524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,312), stdev = 0,136
[info]   CI (99.9%): [≈ 0, 0,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,149 ±(99.9%) 1,113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,149, 0,662), stdev = 0,289
[info]   CI (99.9%): [≈ 0, 1,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539,431 ±(99.9%) 1161,167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,431, 674,806), stdev = 301,551
[info]   CI (99.9%): [≈ 0, 1700,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1091,179 ±(99.9%) 2353,304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1091,179, 1428,641), stdev = 611,146
[info]   CI (99.9%): [≈ 0, 3444,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2054994,401 ops/s
[info] # Warmup Iteration   2: 2202980,914 ops/s
[info] # Warmup Iteration   3: 2192428,217 ops/s
[info] # Warmup Iteration   4: 2223891,332 ops/s
[info] # Warmup Iteration   5: 2203555,030 ops/s
[info] Iteration   1: 2204225,911 ops/s
[info]                  ·gc.alloc.rate:                   1019,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479,919 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2217706,585 ops/s
[info]                  ·gc.alloc.rate:                   1026,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 953,113 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2195148,967 ops/s
[info]                  ·gc.alloc.rate:                   1015,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 481,423 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2210460,674 ops/s
[info]                  ·gc.alloc.rate:                   1022,536 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343,269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 956,348 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2210318,363 ops/s
[info]                  ·gc.alloc.rate:                   1022,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671,783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478,320 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   2207572,100 ±(99.9%) 32453,232 ops/s [Average]
[info]   (min, avg, max) = (2195148,967, 2207572,100, 2217706,585), stdev = 8428,001
[info]   CI (99.9%): [2175118,868, 2240025,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1021,193 ±(99.9%) 15,241 MB/sec [Average]
[info]   (min, avg, max) = (1015,407, 1021,193, 1026,005), stdev = 3,958
[info]   CI (99.9%): [1005,953, 1036,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0,015 ±(99.9%) 0,081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,044), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940,386 ±(99.9%) 1416,186 MB/sec [Average]
[info]   (min, avg, max) = (671,483, 940,386, 1343,269), stdev = 367,779
[info]   CI (99.9%): [≈ 0, 2356,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   669,824 ±(99.9%) 1001,503 B/op [Average]
[info]   (min, avg, max) = (478,320, 669,824, 956,348), stdev = 260,087
[info]   CI (99.9%): [≈ 0, 1671,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99,40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1985161,225 ops/s
[info] # Warmup Iteration   2: 2111971,616 ops/s
[info] # Warmup Iteration   3: 2123390,146 ops/s
[info] # Warmup Iteration   4: 2116065,378 ops/s
[info] # Warmup Iteration   5: 2119910,771 ops/s
[info] Iteration   1: 2118825,641 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2116657,064 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2123024,114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2116808,448 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2116410,759 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2118345,205 ±(99.9%) 10732,963 ops/s [Average]
[info]   (min, avg, max) = (2116410,759, 2118345,205, 2123024,114), stdev = 2787,316
[info]   CI (99.9%): [2107612,242, 2129078,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99,60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328522,520 ops/s
[info] # Warmup Iteration   2: 404951,056 ops/s
[info] # Warmup Iteration   3: 406466,951 ops/s
[info] # Warmup Iteration   4: 408509,482 ops/s
[info] # Warmup Iteration   5: 408342,127 ops/s
[info] Iteration   1: 404896,099 ops/s
[info]                  ·gc.alloc.rate:                   598,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1988,460 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 407633,476 ops/s
[info]                  ·gc.alloc.rate:                   602,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2600,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 408063,086 ops/s
[info]                  ·gc.alloc.rate:                   603,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673,418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2597,285 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 408761,643 ops/s
[info]                  ·gc.alloc.rate:                   604,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2582,617 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 408626,504 ops/s
[info]                  ·gc.alloc.rate:                   604,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670,781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2583,458 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   407596,161 ±(99.9%) 6066,963 ops/s [Average]
[info]   (min, avg, max) = (404896,099, 407596,161, 408761,643), stdev = 1575,571
[info]   CI (99.9%): [401529,198, 413663,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   602,912 ±(99.9%) 8,999 MB/sec [Average]
[info]   (min, avg, max) = (598,906, 602,912, 604,630), stdev = 2,337
[info]   CI (99.9%): [593,913, 611,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2328,001, 2328,001, 2328,001), stdev = 0,001
[info]   CI (99.9%): [2328,001, 2328,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0,825 ±(99.9%) 6,928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,825, 4,044), stdev = 1,799
[info]   CI (99.9%): [≈ 0, 7,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3,187 ±(99.9%) 26,748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,187, 15,612), stdev = 6,946
[info]   CI (99.9%): [≈ 0, 29,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   639,990 ±(99.9%) 276,513 MB/sec [Average]
[info]   (min, avg, max) = (511,555, 639,990, 673,438), stdev = 71,810
[info]   CI (99.9%): [363,477, 916,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2470,374 ±(99.9%) 1037,800 B/op [Average]
[info]   (min, avg, max) = (1988,460, 2470,374, 2600,049), stdev = 269,513
[info]   CI (99.9%): [1432,574, 3508,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99,80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205893,925 ops/s
[info] # Warmup Iteration   2: 217007,873 ops/s
[info] # Warmup Iteration   3: 216319,324 ops/s
[info] # Warmup Iteration   4: 217526,197 ops/s
[info] # Warmup Iteration   5: 217526,709 ops/s
[info] Iteration   1: 214124,179 ops/s
[info]                  ·gc.alloc.rate:                   555,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511,526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3760,039 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 217894,161 ops/s
[info]                  ·gc.alloc.rate:                   564,917 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23,964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4874,144 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 217994,660 ops/s
[info]                  ·gc.alloc.rate:                   565,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674,749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4871,506 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 217004,705 ops/s
[info]                  ·gc.alloc.rate:                   562,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672,793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4879,390 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 216938,313 ops/s
[info]                  ·gc.alloc.rate:      562,395 MB/sec
[info]                  ·gc.alloc.rate.norm: 4080,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   216791,203 ±(99.9%) 6041,054 ops/s [Average]
[info]   (min, avg, max) = (214124,179, 216791,203, 217994,660), stdev = 1568,842
[info]   CI (99.9%): [210750,150, 222832,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   562,011 ±(99.9%) 15,753 MB/sec [Average]
[info]   (min, avg, max) = (555,055, 562,011, 565,118), stdev = 4,091
[info]   CI (99.9%): [546,258, 577,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4080,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4080,002, 4080,002, 4080,002), stdev = 0,001
[info]   CI (99.9%): [4080,002, 4080,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0,676 ±(99.9%) 5,688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,676, 3,318), stdev = 1,477
[info]   CI (99.9%): [≈ 0, 6,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4,883 ±(99.9%) 41,080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,883, 23,964), stdev = 10,668
[info]   CI (99.9%): [≈ 0, 45,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   506,788 ±(99.9%) 1124,094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,788, 674,873), stdev = 291,924
[info]   CI (99.9%): [≈ 0, 1630,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3677,016 ±(99.9%) 8130,460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3677,016, 4879,390), stdev = 2111,455
[info]   CI (99.9%): [≈ 0, 11807,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # Run complete. Total time: 02:12:58
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    835097,236 ±   52497,513   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      2194,612 ±     138,251  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4136,000 ±       0,001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0,062 ±       0,057  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0,118 ±       0,107    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      2157,836 ±    1151,592  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5      4065,078 ±    2081,951    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        16,000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5         8,000                    ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1826058,583 ±   24571,491   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1299,513 ±      17,623  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1120,000 ±       0,001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0,037 ±       0,119  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0,032 ±       0,102    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1353,051 ±       6,054  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      1166,151 ±      12,740    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        10,000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         6,000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   4319705,413 ±  139564,758   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       285,448 ±       9,255  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104,000 ±       0,001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5       306,947 ±    1078,962  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       112,191 ±     394,401    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         3,000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         5,000                    ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    194717,627 ±    2316,644   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1631,211 ±      19,453  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     13184,002 ±       0,001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0,046 ±       0,119  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0,370 ±       0,959    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      1625,393 ±    1422,402  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5     13138,687 ±   11533,926    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        12,000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5         6,000                    ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    638841,641 ±   13435,289   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1906,307 ±      39,463  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4696,001 ±       0,001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0,050 ±       0,134  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0,123 ±       0,330    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      1885,252 ±    1169,459  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5      4645,190 ±    2904,719    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        14,000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         7,000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2320107,898 ±   16110,806   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       825,504 ±       5,537  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       560,000 ±       0,001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0,012 ±       0,044  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0,008 ±       0,030    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5       809,673 ±    1161,278  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       549,285 ±     788,222    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         6,000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         3,000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  17898240,004 ±  299396,624   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       909,798 ±      15,420  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80,000 ±       0,001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0,033 ±       0,122  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0,003 ±       0,011    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5       940,963 ±    1419,707  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        82,775 ±     125,311    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         7,000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         3,000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5   9516387,535 ±   34713,244   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    342127,774 ±    5402,733   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1116,488 ±      17,601  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      5136,001 ±       0,001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0,029 ±       0,134  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0,134 ±       0,620    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      1081,301 ±    1424,256  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      4975,278 ±    6565,651    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         8,000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         5,000                    ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1763147,663 ±   25888,558   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2724,549 ±      40,750  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0,058 ±       0,067  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0,052 ±       0,059    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      2706,438 ±      30,349  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      2415,859 ±      40,927    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        20,000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         9,000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5  10688037,439 ±  920906,712   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1303,968 ±     112,236  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0,062 ±       0,170  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0,009 ±       0,025    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1345,154 ±       4,645  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       198,144 ±      17,234    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5        10,000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2847579,076 ±   41693,013   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1997,413 ±      29,302  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1104,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0,071 ±       0,044  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0,039 ±       0,025    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      2034,873 ±      11,706  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      1124,714 ±      12,222    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        15,000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         8,000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  11566115,470 ±  227738,301   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1469,791 ±      28,990  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0,046 ±       0,067  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0,006 ±       0,009    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1480,387 ±    1161,744  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       201,408 ±     156,980    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        11,000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    716383,112 ±   11140,975   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1893,545 ±      29,461  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4160,001 ±       0,001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0,050 ±       0,044  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0,110 ±       0,097    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1898,291 ±    1166,820  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      4170,572 ±    2566,461    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5         9,000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   2224935,471 ±   12339,455   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1900,092 ±      10,809  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1344,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0,067 ±       0,105  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0,047 ±       0,074    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1884,965 ±    1159,720  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5      1333,380 ±     822,183    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         8,000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  21149437,969 ±  125034,730   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       645,068 ±       3,909  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0,544 ±       4,461  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0,040 ±       0,332    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5       672,701 ±       2,973  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        50,056 ±       0,228    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         5,000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         5,000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   5944779,411 ±  248828,895   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1631,954 ±      68,313  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0,062 ±       0,113  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0,017 ±       0,031    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1625,559 ±    1430,855  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       431,016 ±     394,271    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        12,000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         7,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  25951367,060 ± 9053379,024   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       791,544 ±     275,891  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0,025 ±       0,067  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0,001 ±       0,004    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       806,743 ±    1154,013  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        48,720 ±      61,609    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         6,000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  24882449,596 ±  127510,481   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1432458,872 ±   24578,134   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2169,850 ±      37,131  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2384,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0,067 ±       0,105  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0,073 ±       0,114    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      2171,646 ±    1168,818  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      2385,335 ±    1257,018    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        16,000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5         8,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    392027,262 ±  105376,678   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2158,171 ±     579,862  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8664,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,067 ±       0,036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,268 ±       0,128    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2160,126 ±    1142,545  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      8678,827 ±    4017,421    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        16,000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5         9,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    510169,024 ±   33117,347   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       694,994 ±      45,142  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2144,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0,051 ±       0,206    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       674,608 ±       2,190  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      2081,610 ±     142,312    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1205177,313 ±  180953,523   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       802,532 ±     120,507  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048,000 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,029 ±       0,166  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0,037 ±       0,213    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       806,967 ±    1156,567  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5      1051,841 ±    1454,739    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    126027,557 ±     734,690   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4362,414 ±      25,292  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54472,003 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,067 ±       0,088  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,832 ±       1,095    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      4357,811 ±    1440,666  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     54410,646 ±   17760,272    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        32,000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        16,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                        128  thrpt    5    684364,803 ±    9873,748   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      2094,178 ±      30,004  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      4816,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,067 ±       0,165    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      2159,353 ±    1153,480  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      4964,405 ±    2589,913    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                              128  thrpt    5        16,000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                               128  thrpt    5         9,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    353089,158 ±    2843,067   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       540,250 ±       4,455  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      2408,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,707 ±       5,939  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3,147 ±      26,430    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       506,408 ±    1123,050  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      2258,461 ±    5006,871    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    674509,617 ±   13558,842   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       497,151 ±      10,063  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,079 ±       0,505  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0,185 ±       1,183    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       506,720 ±    1123,906  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5      1183,955 ±    2622,874    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3024551,403 ±   24029,668   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1399,095 ±      11,213  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0,024 ±       0,054    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1344,486 ±       6,630  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       699,587 ±       6,675    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         5,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3023139,371 ±   34764,707   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    433294,089 ±   94122,454   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       623,304 ±     135,371  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,807 ±       6,816  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         3,255 ±      27,548    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5       537,701 ±    1157,454  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1972,150 ±    4283,062    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                       128  thrpt    5    200105,775 ±    2323,608   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       510,615 ±       6,056  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5      4016,002 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,672 ±       5,673  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         5,285 ±      44,627    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5       506,767 ±    1124,034  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3988,133 ±    8837,739    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         6,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     22969,484 ±    2927,740   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1437,332 ±     183,239  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     98480,018 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         2,310 ±       8,501    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1344,522 ±       6,707  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     92207,989 ±   12639,085    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        10,000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     34712,863 ±    4349,446   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       869,582 ±     109,030  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     39424,012 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1,331 ±       6,050    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       810,568 ±    1163,138  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     36688,602 ±   51139,952    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         6,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     37474,400 ±    7997,556   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       558,308 ±     119,203  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448,011 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,677 ±       5,697  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5        27,717 ±     233,158    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       506,645 ±    1123,729  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     20763,309 ±   46051,025    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         4,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     29765,117 ±     233,360   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1577,281 ±      12,313  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     83400,014 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1,979 ±       5,517    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1490,967 ±    1168,123  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     78829,880 ±   61574,016    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        11,000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         7,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     33818,525 ±    2089,387   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1888,842 ±     117,114  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     87896,012 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,071 ±       0,231  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3,277 ±      10,648    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1885,087 ±    1155,133  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     87777,050 ±   54940,611    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     32482,556 ±     661,685   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1748,614 ±      35,607  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     84720,013 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,062 ±       0,160  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         3,026 ±       7,763    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1762,846 ±    1434,629  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     85429,544 ±   69906,811    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        17,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     37826,826 ±     234,226   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1880,178 ±      12,226  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     78224,011 ±       0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         1,212 ±       4,467    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1752,014 ±    1421,641  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     72882,637 ±   58953,379    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         7,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     36896,364 ±     499,526   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1797,096 ±      24,836  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     76656,011 ±       0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5         1,423 ±       5,198    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5      1751,248 ±    1416,752  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5     74745,381 ±   61370,572    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5         8,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5      9592,158 ±     111,187   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1236,507 ±      14,412  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    202880,044 ±       0,007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         4,104 ±      11,034    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1205,755 ±    1154,464  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    197931,139 ±  190654,904    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     19629,585 ±    1892,119   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1525,293 ±     147,363  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122287,849 ±       1,486    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         3,704 ±       8,522    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1479,452 ±    1153,285  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5    118683,312 ±   93432,525    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11,000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         5,000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     46503,990 ±     162,229   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1146,255 ±       3,715  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     38792,009 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,050 ±       0,185  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1,691 ±       6,250    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1082,317 ±    1426,670  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     36626,230 ±   48258,073    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     64298,295 ±    6265,602   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       830,875 ±      80,633  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336,007 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,717 ±       1,777    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       807,019 ±    1159,924  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     19721,351 ±   27655,526    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         6,000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     35763,212 ±     344,488   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2389,475 ±      22,973  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    105144,012 ±       0,002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,083 ±       0,127  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3,665 ±       5,587    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2444,892 ±    1431,955  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    107586,081 ±   63106,818    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18,000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        11,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     37465,097 ±     177,010   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2122,122 ±      10,221  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     89144,011 ±       0,002    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1,749 ±       2,381    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      2172,121 ±    1164,003  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     91243,396 ±   48856,178    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        16,000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         9,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     53992,832 ±     381,445   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2074,953 ±      15,173  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     60480,008 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,050 ±       0,091  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1,456 ±       2,670    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      2159,219 ±    1171,810  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     62935,098 ±   34109,099    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        16,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         8,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     54282,430 ±     332,015   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      2168,065 ±      13,635  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     62856,008 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0,050 ±       0,044  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         1,449 ±       1,273    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5      2160,649 ±    1172,381  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5     62647,927 ±   34266,070    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        16,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         8,000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    436873,281 ±   27653,300   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2209,570 ±     140,378  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7960,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,062 ±       0,057  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0,226 ±       0,218    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      2160,186 ±    1163,314  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      7785,068 ±    4270,854    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        16,000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5         8,000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1666493,161 ±   48738,648   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       525,220 ±      15,422  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,534 ±       4,461  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,501 ±       4,189    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5       506,170 ±    1122,336  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       477,075 ±    1058,637    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    740729,911 ±   59703,334   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       613,716 ±      49,427  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1304,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,046 ±       0,200  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,097 ±       0,421    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       674,624 ±       3,081  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1433,949 ±     122,671    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1986312,714 ±   51856,906   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       383,676 ±      10,068  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,671 ±       5,703  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,531 ±       4,514    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       441,911 ±     989,405  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       350,375 ±     783,938    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         8,000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    114663,791 ±    2444,747   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      4165,661 ±      87,937  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57176,004 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,071 ±       0,091  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,970 ±       1,241    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      4086,693 ±      11,397  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     56093,555 ±    1264,384    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        30,000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        16,000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                              128  thrpt    5    695670,182 ±   12020,993   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1817,626 ±      32,072  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4112,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0,104 ±       0,237    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1886,543 ±    1160,198  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      4267,021 ±    2602,945    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        14,000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    423064,992 ±    1553,809   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5       660,228 ±       2,374  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      2456,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,719 ±       6,056  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2,674 ±      22,522    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       672,674 ±       5,593  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      2502,297 ±      17,850    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1265847,678 ±   10934,387   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       585,561 ±       5,055  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,542 ±       4,461  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,675 ±       5,558    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5       640,566 ±     277,666  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       796,350 ±     343,888    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5   1136767,613 ±   33628,336   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       803,164 ±      23,840  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,029 ±       0,158    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       810,390 ±    1159,035  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1124,606 ±    1654,245    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         6,000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   1851654,662 ±   59912,481   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       856,514 ±      27,853  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,037 ±       0,200  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,032 ±       0,172    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       941,211 ±    1419,905  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       801,751 ±    1231,277    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7,000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   2100595,680 ±   10402,021   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    569960,670 ±    2816,359   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       672,179 ±       3,361  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1856,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,823 ±       6,996  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2,275 ±      19,338    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5       671,643 ±       6,933  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1854,522 ±      19,864    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                             128  thrpt    5    207063,037 ±    5979,192   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       528,384 ±      15,286  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4016,002 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,671 ±       5,647  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         5,073 ±      42,659    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       506,796 ±    1124,115  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      3857,094 ±    8551,692    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    153192,280 ±     992,863   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1841,696 ±      12,274  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     18920,003 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0,050 ±       0,134  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0,513 ±       1,377    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1886,385 ±    1159,843  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     19379,927 ±   11934,918    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        14,000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5         8,000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    452514,444 ±    2153,276   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       374,933 ±       1,728  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1304,001 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,025 ±       0,174  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,087 ±       0,604    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339,388 ±    1219,950  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1180,051 ±    4242,159    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5    942950,754 ±    8888,639   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       182,142 ±       1,748  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       204,621 ±    1078,908  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       342,305 ±    1804,879    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2,000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     97020,460 ±    1048,263   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4131,439 ±      44,715  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67016,004 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,083 ±       0,139  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1,351 ±       2,255    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      4086,279 ±      11,082  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     66283,792 ±     548,963    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        30,000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        18,000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                 128  thrpt    5    272187,129 ±   14369,506   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1242,464 ±      65,694  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7184,002 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0,218 ±       0,610    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1209,487 ±    1156,075  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      7001,334 ±    6786,301    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         9,000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         4,000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    292075,579 ±   38592,206   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1293,134 ±     170,784  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      6968,001 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,058 ±       0,174  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0,317 ±       0,944    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1208,588 ±    1157,424  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      6532,719 ±    6493,191    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9,000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5,000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   1657136,170 ±   15479,928   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       850,739 ±       7,944  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,020 ±       0,108    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       810,507 ±    1163,147  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       770,170 ±    1112,033    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   2117085,447 ±   31044,178   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       570,376 ±       8,552  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,667 ±       5,610  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,496 ±       4,172    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       506,758 ±    1124,024  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       376,750 ±     834,348    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2168269,368 ±    3930,515   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     50184,796 ±    4024,683   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2115,241 ±     170,012  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     66336,008 ±       0,003    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,058 ±       0,104  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1,842 ±       3,498    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2154,835 ±    1172,647  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     67560,390 ±   35487,990    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        16,000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         9,000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                128  thrpt    5    164923,225 ±    2675,109   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       878,609 ±      14,261  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      8384,002 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0,238 ±       0,837    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       806,350 ±    1155,288  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      7694,446 ±   11022,151    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         6,000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         3,000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    244506,099 ±   40611,188   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2516,889 ±     417,941  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16200,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0,075 ±       0,091  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0,487 ±       0,662    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      2569,722 ±    1148,900  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     16495,994 ±    4953,999    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        19,000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        10,000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    390966,412 ±    4874,123   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1883,931 ±      23,449  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7584,001 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,058 ±       0,105  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,235 ±       0,422    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1899,620 ±    1174,198  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      7647,181 ±    4727,152    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        14,000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1404766,626 ±   15747,027   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       485,576 ±       5,488  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,667 ±       5,655  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,751 ±       6,367    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474,552 ±    1068,724  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       532,049 ±    1199,847    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     90206,938 ±    1551,147   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3791,161 ±      64,829  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66144,005 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,071 ±       0,091  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1,236 ±       1,605    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3811,865 ±    1432,369  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     66509,198 ±   25152,720    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        28,000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        15,000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                 128  thrpt    5    260714,499 ±    9319,393   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2761,930 ±      99,376  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16672,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,054 ±       0,072  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0,326 ±       0,424    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2844,264 ±    1169,236  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     17167,789 ±    6956,453    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        21,000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        10,000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    252569,639 ±    5523,936   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      2144,191 ±      47,369  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     13360,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,075 ±       0,134  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0,467 ±       0,831    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2158,450 ±    1151,637  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     13444,269 ±    6977,362    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        16,000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         7,000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1314938,989 ±   12825,522   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       768,668 ±       7,606  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,033 ±       0,134  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,040 ±       0,161    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       810,335 ±    1163,582  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       970,054 ±    1396,146    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2688268,194 ±  117784,224   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       915,557 ±      40,157  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,042 ±       0,188  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,024 ±       0,109    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       940,660 ±    1417,359  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       549,799 ±     816,583    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   3019561,470 ±  268311,503   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    363371,800 ±    2448,710   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2973,697 ±      20,532  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880,001 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,096 ±       0,134  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,415 ±       0,580    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2992,025 ±    1429,974  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     12960,381 ±    6233,127    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        22,000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        13,000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                128  thrpt    5     90013,333 ±    1749,258   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       668,040 ±      12,887  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     11680,005 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,680 ±       5,678  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        11,981 ±     100,039    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       673,335 ±       5,734  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     11772,888 ±     311,379    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     30527,139 ±     239,884   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1788,216 ±      14,598  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     92192,014 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1,716 ±       4,707    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1750,956 ±    1424,593  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     90264,184 ±   73301,071    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5         7,000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5    108715,868 ±    2185,927   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       979,375 ±      19,400  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14176,004 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,029 ±       0,209  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,423 ±       3,036    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       941,138 ±    1418,073  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     13623,620 ±   20538,958    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     67281,232 ±    3009,734   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1110,492 ±      49,636  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     25976,007 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,683 ±       2,515    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1082,314 ±    1429,201  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     25349,368 ±   33824,043    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    147543,578 ±    1063,864   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       950,947 ±       7,223  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10144,003 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,222 ±       1,208    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       940,382 ±    1416,584  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     10026,921 ±   15049,118    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     39932,497 ±     291,330   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2086,763 ±      15,674  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82248,011 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,050 ±       0,185  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1,969 ±       7,287    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2036,524 ±      10,610  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     80267,997 ±     285,433    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                               128  thrpt    5     73474,679 ±    3997,318   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1321,906 ±      71,922  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     28312,006 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,033 ±       0,108  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,710 ±       2,274    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1344,472 ±       5,978  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     28799,776 ±    1527,198    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10,000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     41610,953 ±    3186,358   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       546,780 ±      42,005  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     20680,010 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,722 ±       6,081  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        27,053 ±     227,861    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       506,384 ±    1122,982  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     19200,099 ±   42279,610    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     45790,826 ±     602,883   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       413,628 ±       5,397  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     14216,009 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,858 ±       3,582    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       474,143 ±    1067,330  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     16294,601 ±   36633,975    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     49990,920 ±    1050,807   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       439,367 ±       9,261  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     13832,008 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,677 ±       5,616  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5        21,499 ±     178,333    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       474,553 ±    1068,729  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     14965,352 ±   33731,590    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     49920,558 ±     855,638   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       381,659 ±       6,626  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     12032,008 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0,671 ±       5,713  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5        21,094 ±     179,654    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5       441,907 ±     989,411  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5     13936,957 ±   31167,566    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         8,000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                              128  thrpt    5     35036,373 ±     330,128   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       523,600 ±       5,054  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     23520,013 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,674 ±       5,713  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5        30,330 ±     257,130    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506,616 ±    1123,623  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     22776,648 ±   50526,032    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     23084,657 ±     519,134   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5       865,996 ±      19,545  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     59040,018 ±       0,002    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1,714 ±       9,863    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       940,928 ±    1419,626  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     64120,442 ±   96372,837    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     22400,156 ±    1712,279   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       635,547 ±      48,619  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     44649,582 ±      13,462    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,054 ±       0,257  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3,768 ±      17,908    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       674,727 ±       3,014  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     47417,840 ±    3809,466    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     82668,875 ±   11756,492   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       215,161 ±      30,614  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,005 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,013 ±       0,113  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,247 ±       2,123    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       204,649 ±    1079,054  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3837,927 ±   20236,303    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         2,000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     18474,961 ±    1690,885   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1197,925 ±     109,623  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    102048,024 ±       0,009    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,033 ±       0,209  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2,805 ±      17,627    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1218,146 ±    1165,445  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    103320,728 ±   92908,171    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                             128  thrpt    5     18349,853 ±    1860,861   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5       632,636 ±      64,012  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     54260,978 ±      41,033    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,610 ±       5,121  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5        53,945 ±     453,279    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       539,544 ±    1161,415  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     45992,363 ±   99132,117    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     75605,423 ±    1247,240   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       998,101 ±      16,771  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     20776,006 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0,433 ±       2,358    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1073,928 ±    1416,794  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     22371,084 ±   29694,832    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         8,000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5    100316,630 ±    8876,407   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1189,588 ±     105,461  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     18664,004 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,528 ±       1,482    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1218,013 ±    1165,208  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     19138,564 ±   18643,210    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         6,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    225978,510 ±    2181,988   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       358,399 ±       3,496  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496,002 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,005 ±       0,046  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,038 ±       0,323    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       306,962 ±    1079,014  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      2140,952 ±    7525,771    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    279329,815 ±    2095,643   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     80237,782 ±     178,032   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1250,148 ±       3,019  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     24520,005 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,572 ±       1,406    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1205,905 ±    1154,058  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     23652,543 ±   22639,364    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                            128  thrpt    5     19932,458 ±     373,323   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       383,678 ±       7,213  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     30296,022 ±       0,012    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,605 ±       5,200  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5        47,609 ±     409,353    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5       441,993 ±     989,887  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     34924,958 ±   78099,849    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     30773,446 ±     217,242   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       640,111 ±       4,561  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     32736,014 ±       0,004    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0,724 ±       6,103  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5        37,106 ±     312,632    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       538,493 ±    1159,152  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     27536,087 ±   59274,070    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5    103838,594 ±    8687,365   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1362,853 ±     114,214  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20656,004 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,033 ±       0,072  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,503 ±       1,061    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1354,007 ±       7,345  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     20529,587 ±    1697,089    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10,000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    137647,021 ±    4101,964   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       537,375 ±      16,151  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144,003 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,682 ±       5,653  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         7,789 ±      64,531    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       506,670 ±    1123,768  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      5793,226 ±   12807,537    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     24979,260 ±     596,233   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1379,541 ±      33,039  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86920,017 ±       0,004    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1,309 ±       5,042    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1353,380 ±       6,524  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     85273,961 ±    1774,077    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        10,000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                 128  thrpt    5     29600,180 ±     192,755   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       565,012 ±       3,759  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30040,014 ±       0,002    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,692 ±       5,780  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        36,747 ±     306,892    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       506,680 ±    1123,814  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     26951,946 ±   59762,135    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    197093,344 ±    1534,667   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       685,271 ±       5,460  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5472,002 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,728 ±       6,092  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         5,825 ±      48,733    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       672,694 ±       5,695  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      5371,586 ±      62,081    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         5,000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    314155,331 ±    1319,339   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       317,761 ±       1,263  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,021 ±       0,179    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       204,613 ±    1078,864  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1025,120 ±    5405,164    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         2,000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    591172,252 ±    8179,998   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       453,767 ±       6,288  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,682 ±       5,625  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1,825 ±      15,055    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       474,556 ±    1068,741  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1263,822 ±    2852,117    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    632753,845 ±    3260,644   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    323946,060 ±   13703,686   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       892,496 ±      37,655  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4336,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,202 ±       0,726    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       945,661 ±    1425,407  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      4598,561 ±    6984,130    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                128  thrpt    5     48341,006 ±    4931,666   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       224,098 ±      22,885  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      7296,009 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,002 ±       0,018  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0,067 ±       0,578    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       204,630 ±    1078,955  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      6580,782 ±   34698,575    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         2,000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     42258,557 ±     259,689   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1884,923 ±      12,062  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     70200,010 ±       0,003    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,058 ±       0,132  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2,171 ±       4,909    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1887,168 ±    1170,429  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     70279,687 ±   43497,728    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        14,000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         7,000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    336715,032 ±    1980,240   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       349,177 ±       2,023  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632,001 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,533 ±       4,526  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2,493 ±      21,184    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339,335 ±    1219,645  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1586,899 ±    5705,046    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5    114697,160 ±     531,156   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1265,171 ±       5,940  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17360,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,457 ±       1,669    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1218,339 ±    1168,763  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     16717,764 ±   16041,833    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    466717,906 ±   18810,373   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       303,680 ±      12,235  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024,001 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,005 ±       0,027  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,017 ±       0,092    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       306,984 ±    1079,091  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1040,171 ±    3656,749    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     46026,280 ±     347,896   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2457,080 ±      18,704  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     84016,009 ±       0,002    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,083 ±       0,139  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2,848 ±       4,753    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2446,678 ±    1440,410  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     83652,917 ±   49028,969    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        18,000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        11,000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                128  thrpt    5     88119,318 ±     901,230   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1611,660 ±      16,641  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     28784,005 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0,743 ±       1,011    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1615,331 ±    1423,126  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     28858,282 ±   25613,436    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5     89234,533 ±     851,184   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       545,696 ±       5,199  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9624,005 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,725 ±       6,107  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        12,771 ±     107,591    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       506,292 ±    1122,735  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      8937,677 ±   19822,055    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    126415,048 ±    1921,530   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       386,860 ±       5,987  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      4816,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,520 ±       4,453  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         6,480 ±      55,533    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       339,334 ±    1219,669  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4234,597 ±   15217,268    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5    108885,320 ±    3270,421   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       359,770 ±      10,808  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      5200,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,017 ±       0,143  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,240 ±       2,067    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       339,375 ±    1219,905  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4913,590 ±   17642,206    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    123975,314 ±   18995,514   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       379,376 ±      58,162  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4816,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,664 ±       5,669  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         8,283 ±      70,613    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       441,912 ±     989,423  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      5632,344 ±   12535,580    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         8,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    125975,311 ±    2501,726   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       286,256 ±       5,764  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      3576,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5         0,010 ±       0,074  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0,131 ±       0,925    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5       306,972 ±    1079,048  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      3842,356 ±   13506,834    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         6,000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5     11138,540 ±     679,468   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1831,998 ±     112,177  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    258856,038 ±       0,016    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         7,006 ±      16,931    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1885,914 ±    1165,070  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    266093,069 ±  154808,291    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        14,000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         8,000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     11641,989 ±     279,952   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1801,309 ±      43,337  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    243506,739 ±      39,741    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3,386 ±      14,224    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1762,983 ±    1427,542  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    238519,339 ±  196965,689    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         8,000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    208970,803 ±    1714,820   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       543,864 ±       4,470  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096,002 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,606 ±       5,042  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         4,572 ±      38,030    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       507,177 ±    1125,176  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      3823,113 ±    8482,077    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      6596,502 ±      91,148   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1752,132 ±      23,897  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    418024,502 ±       3,756    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,033 ±       0,108  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         7,934 ±      25,509    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1763,454 ±    1436,110  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    420674,992 ±  341523,922    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5         8,000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                              128  thrpt    5     10680,458 ±    1534,177   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1718,170 ±     247,470  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    253171,298 ±      40,840    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,042 ±       0,170  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         6,142 ±      24,699    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1752,290 ±    1417,620  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    259219,323 ±  227883,829    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     29284,072 ±     445,413   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1517,802 ±      23,185  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     81568,015 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,058 ±       0,143  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         3,128 ±       7,690    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1478,475 ±    1157,254  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     79439,476 ±   61719,453    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     34498,173 ±     373,504   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1686,545 ±      18,463  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     76944,012 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1,711 ±       4,779    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1762,724 ±    1429,429  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     80453,714 ±   65928,810    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         8,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    379997,690 ±  104759,387   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       840,276 ±     231,699  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480,001 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,141 ±       0,527    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       942,750 ±    1421,898  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3968,835 ±    6721,913    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7,000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    455427,613 ±    2505,210   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     30692,059 ±     505,600   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1615,172 ±      26,758  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     82824,013 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,067 ±       5,037    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1611,202 ±    1423,586  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     82614,695 ±   72852,922    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                             128  thrpt    5     11777,739 ±     157,717   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       658,667 ±       8,690  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     88016,600 ±       4,845    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,623 ±       5,139  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5        82,926 ±     684,222    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       674,062 ±       4,687  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     90074,186 ±     636,186    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5    108484,594 ±    8665,060   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1767,332 ±     140,903  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     25640,004 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0,058 ±       0,067  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0,847 ±       0,981    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1750,985 ±    1417,219  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     25363,995 ±   19600,883    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        13,000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5         7,000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    518244,502 ±   10055,680   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       537,427 ±      10,447  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,531 ±       4,483  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1,606 ±      13,555    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506,155 ±    1122,324  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1537,464 ±    3411,299    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    317995,174 ±    7140,024   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       449,391 ±      10,134  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2224,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,029 ±       0,209  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,145 ±       1,043    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       371,873 ±    1331,841  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1845,350 ±    6606,721    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         3,000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         2,000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    701547,303 ±    8269,572   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       456,459 ±       5,395  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,682 ±       5,567  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,534 ±      12,514    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       474,554 ±    1068,741  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1066,040 ±    2402,676    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     83270,214 ±    2257,165   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3646,525 ±      98,997  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68920,005 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,096 ±       0,146  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1,810 ±       2,760    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      3676,461 ±    1437,539  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     69504,428 ±   27998,910    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        27,000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        15,000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                  128  thrpt    5    215770,161 ±    3132,993   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1638,615 ±      23,363  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11952,002 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0,243 ±       0,670    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1615,572 ±    1420,027  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     11788,178 ±   10452,905    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        12,000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5         6,000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    236415,048 ±    4615,757   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1404,857 ±      27,597  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9352,002 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0,250 ±       0,698    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1477,882 ±    1159,822  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5      9846,142 ±    7956,192    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        11,000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         6,000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1075486,157 ±   30373,954   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       584,964 ±      16,509  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,524 ±       4,466  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,765 ±       6,524    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       538,259 ±    1158,645  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       789,396 ±    1699,335    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    875144,609 ±    8112,619   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       689,510 ±       6,538  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,037 ±       0,204    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       675,114 ±       3,343  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1214,115 ±       7,998    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1261493,120 ±   26580,682   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       686,113 ±      14,418  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,674 ±       5,584  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,840 ±       6,951    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       673,314 ±       5,596  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       840,056 ±      22,118    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1218778,291 ±    7130,218   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     37588,120 ±    1169,101   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2033,178 ±      63,331  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     85128,011 ±       0,002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1,911 ±       4,958    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      2153,692 ±    2167,638  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     90078,017 ±   89441,056    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16,000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5         9,000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                 128  thrpt    5    147782,339 ±    3459,964   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1286,767 ±      30,152  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     13704,003 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,037 ±       0,088  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0,399 ±       0,934    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1209,473 ±    1158,322  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     12884,589 ±   12384,106    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5         9,000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5         4,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    134673,456 ±    2887,618   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1662,200 ±      35,718  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     19424,003 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,042 ±       0,080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,487 ±       0,943    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1614,252 ±    1418,296  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     18856,689 ±   16407,331    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12,000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         7,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    211652,478 ±    1814,837   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1125,363 ±       9,618  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8368,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,310 ±       1,115    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1082,225 ±    1427,680  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      8047,902 ±   10624,178    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    296645,516 ±    2409,552   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       771,996 ±       6,442  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,111 ±       0,426    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       672,890 ±       4,063  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3570,188 ±      38,107    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         2,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     78136,025 ±    1142,857   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3299,112 ±      48,306  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     66448,006 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,092 ±       0,209  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,843 ±       4,204    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      3265,488 ±    1167,296  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     65757,265 ±   22871,294    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        24,000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        13,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                             128  thrpt    5    164711,941 ±    2932,362   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1857,904 ±      33,417  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17752,003 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,050 ±       0,091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,477 ±       0,868    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1886,080 ±    1160,757  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     18024,499 ±   11166,589    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    195047,511 ±    1118,901   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       678,180 ±       4,014  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5472,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,721 ±       6,076  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         5,823 ±      49,058    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       672,672 ±       5,587  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      5427,563 ±      38,999    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    571499,206 ±    1786,992   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       578,096 ±       1,901  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,046 ±       0,351  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,126 ±       0,967    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       539,423 ±    1161,150  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1485,239 ±    3197,100    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    591269,933 ±   18364,978   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       453,846 ±      14,098  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,679 ±       5,639  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1,821 ±      15,133    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       474,560 ±    1068,748  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1266,758 ±    2865,220    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         7,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    620840,684 ±    3219,336   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    336425,621 ±    4024,653   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       926,853 ±      11,063  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,117 ±       0,671    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       945,784 ±    1423,948  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4425,820 ±    6678,811    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                            128  thrpt    5     48067,161 ±     375,069   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       222,824 ±       1,705  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      7296,009 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,002 ±       0,020    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5       204,621 ±    1078,907  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      6710,956 ±   35384,936    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         2,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     11479,914 ±     201,238   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1468,254 ±      26,002  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    201280,047 ±       0,088    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         5,125 ±      16,254    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1478,707 ±    1151,952  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    202727,290 ±  158277,877    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     12883,983 ±     313,225   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1527,453 ±      37,083  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    186576,250 ±       1,865    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         4,577 ±      12,723    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1490,395 ±    1164,265  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5    182065,632 ±  142584,452    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    227080,275 ±    3938,227   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1477,494 ±      25,779  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240,002 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0,346 ±       0,842    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1481,925 ±    1159,764  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     10270,504 ±    8028,038    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      9513,475 ±      51,001   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1771,788 ±       9,415  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    293096,091 ±       0,404    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,067 ±       0,088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5        11,016 ±      14,493    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1763,319 ±    1429,710  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    291707,122 ±  236759,142    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                        128  thrpt    5     11817,775 ±     301,505   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1396,364 ±      35,602  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    185963,553 ±      23,858    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3,340 ±      17,614    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1346,119 ±       5,292  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5    179279,066 ±    5147,538    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     24195,121 ±     323,654   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1015,882 ±      13,257  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     66080,018 ±       0,004    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,033 ±       0,166  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         2,169 ±      10,850    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1073,890 ±    1416,885  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     69856,611 ±   92203,411    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     29003,745 ±     308,029   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1115,817 ±      11,735  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     60552,015 ±       0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         1,581 ±       6,589    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1082,296 ±    1428,639  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     58739,337 ±   77605,381    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    772169,349 ±    5532,332   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1393,431 ±       9,934  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840,001 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0,054 ±       0,122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0,110 ±       0,248    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1481,451 ±    1164,850  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      3020,146 ±    2396,375    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    979450,766 ±    6834,988   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     26110,152 ±    4456,293   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1101,865 ±     188,107  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     66416,016 ±       0,003    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1,480 ±       7,819    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1071,520 ±    1412,139  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     64185,937 ±   79214,856    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                       128  thrpt    5     15062,905 ±      64,490   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       605,964 ±       2,520  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5     63312,029 ±       0,015    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,616 ±       5,081  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5        64,283 ±     530,178    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5       539,542 ±    1161,413  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     56384,441 ±  121372,502    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     29897,878 ±     412,646   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1623,142 ±      22,440  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     85440,014 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2,196 ±       7,918    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1615,016 ±    1426,409  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     85039,473 ±   75691,082    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     35063,017 ±     694,465   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1600,919 ±      31,728  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     71856,012 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1,681 ±       5,320    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1626,958 ±    1431,473  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     73059,027 ±   65019,799    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    410801,019 ±    2191,307   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1069,096 ±       5,550  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,112 ±       0,598    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1076,700 ±    1418,921  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      4124,657 ±    5430,348    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     20186,191 ±     226,191   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2078,136 ±      23,469  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    162024,022 ±       0,008    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,058 ±       0,088  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         4,545 ±       6,834    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      2036,674 ±      10,921  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    158792,491 ±    1971,317    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15,000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         9,000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                            128  thrpt    5     32977,570 ±    1210,426   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1597,675 ±      58,825  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     76248,013 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,050 ±       0,146  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2,389 ±       6,990    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1482,104 ±    1159,570  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     70708,317 ±   54504,392    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     59200,343 ±     308,464   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1436,097 ±       7,826  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     38176,007 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,058 ±       0,088  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1,550 ±       2,336    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1477,967 ±    1152,610  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     39289,802 ±   30662,159    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    143880,934 ±   25780,180   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1219,110 ±     218,373  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     13336,003 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,377 ±       1,693    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1218,432 ±    1168,242  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     13382,687 ±   13470,866    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1143296,868 ±    5718,861   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1226,246 ±       6,513  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688,000 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,057 ±       0,207    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1211,493 ±    1159,632  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1667,807 ±    1597,781    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    960380,874 ±    3705,272   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     66964,440 ±     924,970   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1556,653 ±      21,415  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     36584,006 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,685 ±       2,149    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1610,289 ±    1416,527  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     37864,353 ±   33738,293    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                           128  thrpt    5     29517,075 ±     257,880   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       423,710 ±       3,808  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     22592,014 ±       0,004    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,601 ±       5,120  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5        32,009 ±     272,557    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5       339,689 ±    1221,529  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     18105,210 ±   65085,217    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     18962,837 ±     129,115   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1667,870 ±      11,759  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    138431,856 ±       1,447    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3,803 ±       8,682    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1614,921 ±    1418,484  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    134031,935 ±  117609,971    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     19026,578 ±     227,054   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1537,320 ±      18,269  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    127159,307 ±      53,723    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         3,793 ±       9,878    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1626,267 ±    1427,861  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    134522,006 ±  118219,061    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    453568,176 ±   73528,724   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1180,584 ±     191,123  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,073 ±       0,395    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1076,931 ±    1419,231  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3767,103 ±    5281,979    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     14348,041 ±     316,100   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1981,332 ±      43,549  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    217320,032 ±       0,011    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,050 ±       0,134  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         5,471 ±      14,629    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      2035,999 ±      12,199  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    223323,090 ±    5949,039    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15,000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         9,000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                            128  thrpt    5     18516,961 ±      54,978   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1547,044 ±       5,101  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    131485,252 ±      40,577    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,037 ±       0,088  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3,184 ±       7,457    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1616,803 ±    1423,199  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    137428,388 ±  121280,520    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     43069,162 ±    1483,748   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1339,038 ±      46,061  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     48928,010 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1,819 ±       4,422    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1342,703 ±       5,217  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     49065,407 ±    1870,379    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     50776,774 ±    2618,743   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1347,156 ±      69,424  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     41752,008 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1,427 ±       3,760    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1354,343 ±       8,047  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     41980,935 ±    2236,506    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1347964,386 ±    7890,510   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1226,468 ±       7,525  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432,000 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,058 ±       0,142    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1211,452 ±    1159,616  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1414,663 ±    1356,448    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1539064,654 ±  135385,505   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5     39575,612 ±     296,174   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1197,389 ±       8,948  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     47616,010 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1,159 ±       3,642    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1071,677 ±    1412,124  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     42610,226 ±   56073,001    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                           128  thrpt    5     28235,104 ±    1818,116   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       396,131 ±      25,524  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     22080,015 ±       0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,599 ±       5,094  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5        33,016 ±     280,991    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5       442,031 ±     989,965  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     24459,457 ±   54708,147    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         9,000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     87260,906 ±     595,453   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1495,661 ±       9,852  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     26976,005 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0,025 ±       0,174  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0,451 ±       3,139    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1479,364 ±    1157,528  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     26685,944 ±   20992,431    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11,000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         6,000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    371658,550 ±    2682,774   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       744,380 ±       5,482  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,070 ±       0,284    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       672,418 ±       2,193  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2847,292 ±      21,394    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    291338,797 ±    2497,287   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       639,748 ±       5,626  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3456,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,042 ±       0,234  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,225 ±       1,263    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       674,494 ±       2,746  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3643,723 ±      41,164    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         2,000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    474099,655 ±   56904,803   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       597,668 ±      71,597  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,662 ±       5,659  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2,085 ±      17,801    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       539,048 ±    1160,348  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1786,792 ±    3854,136    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     79017,454 ±    2123,513   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3526,344 ±      95,090  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     70232,005 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,079 ±       0,154  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1,576 ±       3,064    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3536,330 ±    1153,294  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     70425,621 ±   22530,134    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26,000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        14,000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    167686,397 ±    6530,975   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1183,121 ±      46,103  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     11104,003 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0,314 ±       1,158    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1073,802 ±    1414,868  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     10090,693 ±   13430,514    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8,000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5,000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    751576,464 ±   22478,783   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       588,393 ±      17,644  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,540 ±       4,512  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,128 ±       9,432    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       538,305 ±    1158,744  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1128,851 ±    2430,303    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    537064,473 ±    6065,993   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       551,486 ±       6,096  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,029 ±       0,166  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,086 ±       0,490    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       539,434 ±    1161,175  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1580,310 ±    3401,791    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    649704,065 ±    4396,773   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       508,600 ±       3,596  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,673 ±       5,652  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1,630 ±      13,685    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       506,769 ±    1124,050  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1228,219 ±    2722,994    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    783464,428 ±    5521,905   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     33525,534 ±     755,958   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1719,245 ±      38,737  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     80704,012 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,054 ±       0,122  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2,538 ±       5,681    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1745,990 ±    1416,518  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     81929,135 ±   65822,939    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        13,000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      9200,603 ±     194,065   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1398,587 ±      29,323  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    239214,845 ±      48,645    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         4,261 ±      14,862    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1344,157 ±       5,298  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    229910,212 ±    4610,525    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      9201,403 ±     141,814   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1326,403 ±      20,465  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    226864,046 ±       0,008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         4,981 ±      12,263    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1354,191 ±       7,180  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5    231619,575 ±    3493,955    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    173640,452 ±   16591,009   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1682,339 ±     160,805  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248,002 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0,373 ±       1,139    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1752,681 ±    1421,463  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     15928,333 ±   13714,639    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        13,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5         7,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      8652,565 ±     117,050   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1573,954 ±      21,198  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    286281,194 ±       9,853    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         4,538 ±      18,985    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1626,311 ±    1426,625  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    295731,680 ±  257777,236    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        12,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5         9,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                       128  thrpt    5      9213,792 ±      93,531   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                        128  thrpt    5      1276,826 ±      13,341  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    218086,891 ±      48,357    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         6,408 ±      24,518    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1345,763 ±       4,425  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    229862,928 ±    2467,526    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                              128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     20677,604 ±     142,416   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       938,222 ±       6,502  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71410,355 ±      20,101    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,634 ±       3,341    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5       939,657 ±    1413,272  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     71513,650 ±  107481,823    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     22921,988 ±     165,093   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       971,352 ±       6,905  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     66696,018 ±       0,003    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         1,430 ±       7,787    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       946,425 ±    1427,895  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     65017,713 ±   98509,077    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    490160,798 ±    7079,499   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1111,221 ±      16,132  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         0,187 ±       0,494    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5      1211,399 ±    1159,521  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5      3886,789 ±    3685,498    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         9,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    530110,680 ±  295956,093   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     21803,331 ±     195,945   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1005,414 ±       9,081  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     72575,872 ±       1,272    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,042 ±       0,170  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         3,007 ±      12,269    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1071,702 ±    1414,093  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     77396,096 ±  102506,861    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         8,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                      128  thrpt    5     11136,100 ±     557,098   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                       128  thrpt    5       624,583 ±      31,283  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                  128  thrpt    5     88264,038 ±       0,016    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,612 ±       5,139  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5        86,206 ±     723,541    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                          128  thrpt    5       539,603 ±    1161,543  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     76431,660 ±  164577,439    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     15296,609 ±     336,435   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1516,833 ±      33,508  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    156063,822 ±       1,788    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         4,291 ±      10,130    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1479,146 ±    1157,210  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    152158,634 ±  118160,438    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     15098,344 ±     127,463   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1382,157 ±      11,463  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    144073,540 ±      62,967    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         3,035 ±       9,505    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1354,143 ±       7,485  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    141153,729 ±     966,404    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         7,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    277112,933 ±    4179,005   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1603,159 ±      24,065  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104,002 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,054 ±       0,091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,307 ±       0,518    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1615,574 ±    1422,609  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      9176,385 ±    8119,859    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        12,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     13586,748 ±     836,693   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1700,835 ±     104,809  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    197016,033 ±       0,017    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,046 ±       0,132  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         5,270 ±      15,178    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1761,543 ±    1428,236  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    203776,258 ±  159059,227    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        13,000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         9,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                           128  thrpt    5     15005,742 ±     291,287   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1416,122 ±      27,075  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    148524,065 ±      46,218    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,037 ±       0,174  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3,923 ±      18,231    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1478,728 ±    1160,035  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    155115,835 ±  122375,734    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     29397,268 ±    2742,696   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1014,496 ±      94,654  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     54312,014 ±       0,002    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,323 ±       5,507    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1073,510 ±    1415,617  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     57369,766 ±   74375,652    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         8,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     81613,950 ±     781,353   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1299,316 ±      12,471  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     25056,005 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,054 ±       0,122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         1,044 ±       2,355    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1353,984 ±       7,033  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     26110,318 ±     213,407    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    811403,577 ±   10100,860   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1113,586 ±      13,970  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160,001 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0,050 ±       0,108  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0,097 ±       0,208    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1209,258 ±    1157,719  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      2345,068 ±    2239,069    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         9,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    889277,239 ±    4098,534   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     73719,237 ±    1087,838   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1589,906 ±      23,274  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     33944,006 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,067 ±       0,105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1,424 ±       2,254    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1490,243 ±    1165,945  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     31812,668 ±   24777,760    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                          128  thrpt    5     20944,990 ±      72,584   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       463,119 ±       1,497  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     34800,020 ±       0,003    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,687 ±       5,791  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5        51,641 ±     435,481    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5       474,561 ±    1068,755  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     35670,970 ±   80329,704    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         8,000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     22415,750 ±     542,432   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       810,686 ±      19,786  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     56920,019 ±       0,008    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1,470 ±       8,000    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       806,674 ±    1154,340  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     56630,612 ±   80872,424    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         3,000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     18093,633 ±     443,802   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       506,897 ±      12,310  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     44088,179 ±       1,342    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2,181 ±      11,551    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       506,876 ±    1124,339  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     44140,901 ±   97972,712    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5    103032,601 ±    1616,379   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       258,728 ±       4,106  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952,004 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,003 ±       0,029    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       306,939 ±    1078,935  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4699,718 ±   16520,327    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     16338,058 ±     381,837   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1031,819 ±      24,037  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     99392,027 ±       0,011    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2,811 ±      10,362    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       946,599 ±    1426,442  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     91276,052 ±  138701,025    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         7,000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                               128  thrpt    5     19743,628 ±     112,290   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       635,533 ±       3,533  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     50660,602 ±      39,440    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,608 ±       5,104  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5        48,393 ±     405,996    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       641,846 ±     280,656  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     51159,557 ±   22213,571    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         5,000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     65620,201 ±     774,789   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1170,511 ±      13,749  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     28072,006 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1,198 ±       2,914    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1208,130 ±    1155,825  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     28970,306 ±   27669,440    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9,000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     87367,214 ±     861,964   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1412,235 ±      14,096  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     25440,005 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,033 ±       0,134  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,601 ±       2,417    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1354,740 ±       7,337  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     24404,413 ±     257,009    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    270016,858 ±    3379,101   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       517,467 ±       6,462  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016,002 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,606 ±       5,041  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3,539 ±      29,431    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       507,232 ±    1125,279  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      2960,763 ±    6570,756    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    326741,867 ±    2108,761   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     73504,470 ±   10248,647   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1319,385 ±     183,970  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     28248,006 ±       0,002    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,439 ±       2,071    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1340,636 ±       6,982  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     28734,225 ±    4153,180    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        10,000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                              128  thrpt    5     17133,637 ±     483,142   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       375,828 ±      10,756  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     34520,026 ±       0,014    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,605 ±       5,169  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5        55,353 ±     473,115    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       441,940 ±     989,826  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     40635,614 ±   90846,146    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    136066,306 ±    1215,958   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1971,291 ±      17,099  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     22800,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0,530 ±       0,773    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2022,644 ±      19,563  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     23394,095 ±     376,078    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        15,000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         8,000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    735258,866 ±    6351,563   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       407,397 ±       3,481  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,530 ±       4,522  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,139 ±       9,711    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339,357 ±    1219,728  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       727,373 ±    2615,762    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    420353,173 ±   10344,824   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       429,461 ±      10,518  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1608,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,029 ±       0,209  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,109 ±       0,781    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       371,817 ±    1331,624  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1397,426 ±    5004,910    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    865451,370 ±   13351,887   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       299,186 ±       4,527  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,003 ±       0,024  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,005 ±       0,044    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       204,685 ±    1079,246  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       373,339 ±    1968,529    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         2,000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     88904,985 ±    1320,335   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3811,587 ±      56,139  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     67472,005 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,108 ±       0,067  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1,916 ±       1,193    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      3813,059 ±    1431,897  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     67502,442 ±   25540,498    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        28,000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        16,000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                128  thrpt    5    248466,615 ±    3412,206   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1569,929 ±      21,598  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9944,002 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0,211 ±       0,578    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1614,681 ±    1416,227  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     10231,110 ±    9052,885    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    327205,283 ±   19940,392   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1704,949 ±     104,052  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8200,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,033 ±       0,044  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0,160 ±       0,206    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1749,116 ±    1419,477  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      8404,601 ±    6637,501    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         7,000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1631247,562 ±   18417,089   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       555,558 ±       6,233  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,524 ±       4,458  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,506 ±       4,310    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       506,128 ±    1122,239  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       488,485 ±    1084,492    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1421692,805 ±   11130,009   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       831,041 ±       6,396  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,032 ±       0,173    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       810,766 ±    1164,739  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       897,633 ±    1290,868    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6,000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1458349,408 ±    6620,398   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       496,678 ±       2,277  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,679 ±       5,672  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,733 ±       6,121    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       474,576 ±    1068,763  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       512,166 ±    1152,821    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1549039,794 ±   29452,262   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     44156,357 ±     245,760   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2132,337 ±      11,839  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     76000,009 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,058 ±       0,036  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2,078 ±       1,281    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2154,916 ±    1159,934  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     76800,218 ±   41151,502    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        16,000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                               128  thrpt    5    155408,896 ±    2001,065   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1049,077 ±      13,775  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     10624,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,338 ±       1,477    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       940,452 ±    1415,794  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      9524,303 ±   14342,502    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     45658,590 ±    3212,437   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       911,651 ±      64,083  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     31424,009 ±       0,002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0,439 ±       2,542    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       806,003 ±    1155,586  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     27749,083 ±   39084,232    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6,000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     97079,251 ±     592,418   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1021,537 ±       6,258  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     16560,004 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,203 ±       1,164    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       946,552 ±    1426,472  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     15347,304 ±   23164,433    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    291157,845 ±     346,534   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       947,154 ±       0,799  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,113 ±       0,531    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       940,652 ±    1416,770  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      5085,099 ±    7662,051    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     33405,846 ±     560,450   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1569,542 ±      26,313  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73944,013 ±       0,002    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,062 ±       0,204  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2,935 ±       9,581    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1486,229 ±    1163,396  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     70004,182 ±   54341,690    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        11,000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                 128  thrpt    5     35421,914 ±     296,581   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       591,144 ±       5,028  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     26264,012 ±       0,002    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,683 ±       5,706  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        30,410 ±     253,905    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       641,099 ±     278,989  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     28479,817 ±   12261,843    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         5,000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     64907,953 ±    2468,238   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       963,103 ±      36,389  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23352,006 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0,507 ±       1,958    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       939,727 ±    1415,251  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     22832,888 ±   34976,978    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5    124050,883 ±    8478,909   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1699,488 ±     116,357  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560,000 ±       0,051    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,037 ±       0,088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,478 ±       1,139    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1627,281 ±    1430,856  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     20698,989 ±   19329,696    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12,000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    307036,596 ±   16461,778   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       978,572 ±      52,418  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,151 ±       0,560    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1074,728 ±    1417,263  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      5520,158 ±    7401,162    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    358508,233 ±   18806,063   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     74228,772 ±    1365,597   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1100,970 ±      20,174  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     23344,006 ±       0,104    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,029 ±       0,166  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,616 ±       3,508    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1071,340 ±    1411,736  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     22707,234 ±   29826,852    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         8,000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                128  thrpt    5     11621,973 ±      81,774   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       288,049 ±       2,082  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     39008,037 ±       0,015    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,004 ±       0,035  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0,546 ±       4,703    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       306,918 ±    1078,860  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     41564,341 ±  146105,137    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     27795,401 ±    1798,612   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1447,910 ±      93,804  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     81984,015 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,054 ±       0,122  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3,069 ±       6,863    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1478,734 ±    1152,603  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     83724,660 ±   64753,967    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     32558,741 ±    3574,633   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1274,725 ±     140,030  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     61616,013 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1,232 ±       5,256    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1218,428 ±    1165,612  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     59018,422 ±   57926,007    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    558100,727 ±    6517,945   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1452,523 ±      17,159  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,062 ±       0,098  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,176 ±       0,278    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1344,758 ±       7,228  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3792,133 ±      40,878    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     24719,653 ±     239,341   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1879,766 ±      18,330  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    119672,017 ±       0,003    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2,916 ±       7,571    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1898,380 ±    1164,916  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    120859,889 ±   74229,479    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         9,000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                            128  thrpt    5     30149,387 ±     541,839   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1360,846 ±      24,095  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     71032,014 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,520 ±       5,602    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1344,177 ±       5,462  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     70162,895 ±    1037,565    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     79484,682 ±     517,190   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1682,493 ±      11,150  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     33312,005 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,058 ±       0,067  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1,154 ±       1,320    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1748,907 ±    1419,598  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     34632,768 ±   28228,251    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    173041,925 ±    8508,388   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1311,607 ±      64,087  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     11928,002 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,067 ±       0,119  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,604 ±       1,069    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1354,498 ±       7,216  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     12319,770 ±     647,989    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1457287,966 ±   10908,947   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1207,484 ±       9,381  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304,000 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,054 ±       0,131    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1209,211 ±    1156,865  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1305,595 ±    1245,831    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1763999,102 ±   54039,764   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    137575,532 ±    2664,655   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1551,034 ±      30,160  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     17744,003 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,071 ±       0,134  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,808 ±       1,528    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1625,671 ±    1431,159  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     18589,458 ±   16175,076    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         7,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                           128  thrpt    5     41134,677 ±      61,531   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       463,346 ±       0,611  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     17728,010 ±       0,003    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,684 ±       5,794  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5        26,183 ±     221,677    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474,482 ±    1068,543  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     18156,354 ±   40890,431    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     40258,032 ±    3165,351   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1445,108 ±     113,509  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56496,011 ±       0,002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,321 ±       5,836    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1490,300 ±    1173,631  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     58230,153 ±   44509,172    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    750345,561 ±   10546,605   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1464,648 ±      20,974  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072,001 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,042 ±       0,170  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,088 ±       0,358    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1344,919 ±       7,455  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2820,906 ±      38,630    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     30948,717 ±     399,952   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2252,542 ±      29,194  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    114552,013 ±       0,002    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,058 ±       0,119  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2,963 ±       6,027    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      2308,096 ±    1436,101  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    117396,483 ±   73628,628    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        17,000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        11,000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                 128  thrpt    5     40690,374 ±     620,185   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1699,198 ±      26,002  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     65720,010 ±       0,002    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,054 ±       0,091  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         2,094 ±       3,546    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1750,054 ±    1419,938  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     67684,255 ±   54852,033    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         7,000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    403686,047 ±    1614,680   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1122,448 ±       4,600  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      4376,001 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,097 ±       0,408    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1082,294 ±    1427,805  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4220,077 ±    5574,143    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8,000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1710250,164 ±   36669,950   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       999,769 ±      21,561  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,023 ±       0,097    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1074,724 ±    1417,326  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       990,277 ±    1320,048    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2057471,751 ±    7798,982   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    267096,653 ±    4315,974   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1729,709 ±      27,974  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192,002 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,147 ±       0,617    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1626,522 ±    1430,018  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      9586,042 ±    8471,028    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        12,000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                128  thrpt    5     51357,002 ±     624,973   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       344,076 ±       4,207  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     10544,008 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,010 ±       0,059  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0,318 ±       1,797    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       306,928 ±    1078,896  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      9421,700 ±   33118,755    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     81920,362 ±    2718,411   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1646,181 ±      54,693  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     31624,005 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,046 ±       0,132  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0,877 ±       2,511    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1610,501 ±    1414,511  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     30913,182 ±   26563,053    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12,000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         7,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     94376,857 ±    3170,785   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1065,972 ±      35,998  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     17776,005 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,029 ±       0,166  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,491 ±       2,817    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1080,627 ±    1424,120  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     18045,319 ±   24050,388    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    120506,387 ±    2382,216   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1269,226 ±      25,265  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     16576,003 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,326 ±       1,363    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1340,086 ±       5,686  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     17501,766 ±     314,735    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     44864,401 ±     573,775   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2231,102 ±      28,271  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     78264,010 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2,045 ±       5,406    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2308,165 ±    1436,817  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     80981,781 ±   50845,264    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        17,000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        11,000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                               128  thrpt    5     85422,698 ±     153,303   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1482,887 ±       2,161  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     27320,005 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,614 ±       1,685    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1475,350 ±    1159,705  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     27182,039 ±   21392,476    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        11,000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    152338,346 ±    1137,361   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       676,018 ±       5,068  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      6984,003 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,877 ±       7,284  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         9,063 ±      75,262    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       670,946 ±       6,962  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      6931,609 ±      58,927    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    172571,555 ±    2752,206   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       256,138 ±       4,084  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336,003 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204,619 ±    1078,896  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1873,348 ±    9877,658    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         2,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         2,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    751354,370 ±  195912,602   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       931,901 ±     242,928  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,059 ±       0,319    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       937,770 ±    1412,533  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1955,733 ±    2764,588    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    814497,280 ±    5797,874   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    229602,453 ±    3604,044   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       750,450 ±      11,743  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144,002 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,977 ±       8,275  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         6,700 ±      56,764    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       803,186 ±    1162,955  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      5506,274 ±    7985,917    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                              128  thrpt    5     30119,646 ±     463,587   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       168,104 ±       2,589  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      8784,014 ±       0,004    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,007 ±       0,058  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0,354 ±       3,045    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       204,611 ±    1078,852  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     10694,221 ±   56388,045    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         2,000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    139772,957 ±    5283,978   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1903,406 ±      71,926  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     21432,003 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,657 ±       1,740    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1886,035 ±    1169,400  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     21237,765 ±   13188,971    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        14,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    193134,012 ±   13522,856   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1026,933 ±      71,892  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8368,002 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,239 ±       0,877    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1081,823 ±    1426,073  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      8838,760 ±   11903,563    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    528226,219 ±   10188,014   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1025,790 ±      19,816  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,100 ±       0,436    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1074,856 ±    1417,603  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3204,586 ±    4252,665    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     76509,490 ±    2007,239   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3230,327 ±      84,168  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     66448,006 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,087 ±       0,191  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1,801 ±       3,953    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      3129,010 ±    1439,141  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     64388,293 ±   30492,290    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        23,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        12,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                           128  thrpt    5    144918,421 ±   11661,368   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1631,596 ±     131,108  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     17720,003 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,495 ±       0,707    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1614,955 ±    1418,901  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     17584,656 ±   16378,832    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        12,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    207282,524 ±    1568,349   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       713,331 ±       5,597  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      5416,002 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,718 ±       6,004  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         5,469 ±      45,732    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       672,652 ±       5,597  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      5107,170 ±      71,871    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    301537,101 ±    8726,528   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       297,340 ±       8,593  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       306,939 ±    1078,935  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1606,856 ±    5648,689    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         3,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1205912,615 ±   26884,603   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       894,951 ±      20,113  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168,000 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0,012 ±       0,108  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0,016 ±       0,142    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       805,988 ±    1155,499  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      1053,669 ±    1541,939    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1290113,773 ±   10825,382   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    343247,760 ±    2326,695   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       936,921 ±       6,273  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,134 ±       0,716    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5       945,531 ±    1422,422  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4335,052 ±    6516,000    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                          128  thrpt    5     42341,932 ±     736,949   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       131,722 ±       2,286  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4896,010 ±       0,002    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5       102,317 ±     880,982  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3831,599 ±   32991,225    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         1,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5      5728,955 ±      40,724   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1128,486 ±       7,867  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    310024,072 ±       0,009    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         5,727 ±      27,021    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1196,843 ±    1145,623  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    328885,363 ±  315782,009    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      5817,072 ±     923,270   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1081,012 ±     171,580  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    292456,071 ±       0,022    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         6,755 ±      35,008    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1077,358 ±    1418,703  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5    289938,408 ±  361196,720    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     43696,110 ±     910,914   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       717,439 ±      14,933  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     25840,010 ±       0,002    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         1,131 ±       9,560  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5        41,030 ±     346,834    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       800,410 ±    1139,205  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     28825,329 ±   40959,161    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         5,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      5216,291 ±     146,827   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1268,112 ±      35,767  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    382592,079 ±       0,013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         8,772 ±      32,421    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1213,992 ±    1165,897  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    365803,933 ±  345692,094    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         7,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                        128  thrpt    5      5991,795 ±     284,284   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1080,229 ±      51,201  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    283728,069 ±       0,012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         7,687 ±      19,012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1064,116 ±    1401,590  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5    280249,617 ±  377199,509    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     15968,990 ±    1318,764   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       894,823 ±      73,542  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     88193,726 ±      50,286    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'              128  thrpt    5         0,021 ±       0,182  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         128  thrpt    5         2,158 ±      18,585    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,054 ±       0,298  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         5,448 ±      30,204    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       927,313 ±    1385,794  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     91834,164 ±  142533,346    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5        50,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     18219,298 ±     502,495   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       948,623 ±      26,123  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     81944,025 ±       0,286    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,033 ±       0,176  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         2,893 ±      15,252    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       941,917 ±    1415,593  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     81494,161 ±  124087,917    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    282740,031 ±   31910,463   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1024,727 ±     115,600  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704,001 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0,142 ±       0,605    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       931,350 ±    1402,780  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      5215,497 ±    8232,811    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    324604,508 ±   13860,975   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     16687,365 ±     805,072   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       952,579 ±      45,803  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     89838,065 ±      31,944    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1,949 ±       9,178    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5       929,888 ±    1403,339  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     87879,667 ±  134871,373    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      8510,797 ±      93,971   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       542,615 ±       5,954  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    100336,049 ±       0,006    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         1,137 ±       9,700  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       211,191 ±    1801,912    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5       503,599 ±    1115,360  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     93187,756 ±  206403,214    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         7,000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5   1037350,180 ±   14764,130   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        42,185 ±       0,600  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64,000 ±       0,001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     79443,887 ±     916,600   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3584,544 ±      41,636  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     71008,005 ±       0,001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0,067 ±       0,067  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         1,320 ±       1,329    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      3675,179 ±    1434,587  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     72811,934 ±   28819,282    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        27,000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        14,000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1167244,601 ±   33558,949   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       670,465 ±      19,205  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,062 ±       0,294  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0,084 ±       0,394    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       674,512 ±       2,766  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5       909,496 ±      25,531    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5,000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         2,000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5    760675,622 ±    5534,811   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       204,937 ±       1,494  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       424,001 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,002 ±       0,021  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0,005 ±       0,045    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       204,627 ±    1078,941  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5       424,029 ±    2235,782    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         2,000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1562675,155 ±   57989,061   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        15,887 ±       0,591  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     51188,313 ±     840,012   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      2166,733 ±      35,178  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66616,008 ±       0,002    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0,054 ±       0,044  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         1,664 ±       1,355    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      2172,369 ±    1178,756  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     66820,041 ±   37452,534    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        16,000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5         9,000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    821330,175 ±   22444,252   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2609,384 ±      71,524  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5000,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0,054 ±       0,072  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0,104 ±       0,135    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      2569,396 ±    1148,780  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5      4923,675 ±    2209,188    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        19,000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         9,000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   6074346,976 ±  613556,430   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       370,543 ±      37,371  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0,530 ±       4,520  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0,136 ±       1,157    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       339,345 ±    1219,694  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        86,997 ±     312,571    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         7,000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5   1035692,309 ±   12725,186   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1284,556 ±      15,990  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1952,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0,033 ±       0,146  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5         0,051 ±       0,221    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5      1353,020 ±       6,336  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5      2056,052 ±      22,075    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        10,000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         5,000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   8658342,062 ± 3016148,294   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       396,113 ±     138,062  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0,651 ±       5,471  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         0,114 ±       0,957    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       339,592 ±    1220,975  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        59,346 ±     213,401    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3,000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         5,000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    339796,367 ±    7851,602   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1915,582 ±      44,585  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8872,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0,054 ±       0,134  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0,250 ±       0,617    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1898,383 ±    1166,975  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5      8795,346 ±    5473,974    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        14,000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         7,000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                N/A  thrpt    5    835931,012 ±    6662,122   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1160,032 ±       9,508  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      2184,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0,033 ±       0,108  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0,063 ±       0,203    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1209,041 ±    1157,056  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5      2276,497 ±    2181,316    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         9,000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         5,000                    ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      4185,142 ±     382,083   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      1976,753 ±     180,323  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    743312,099 ±       0,021    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0,150 ±       0,143  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5        56,581 ±      58,686    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      1900,057 ±    1174,286  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5    715720,724 ±  467954,268    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        14,000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         9,000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5837,445 ±     255,032   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2412,436 ±     104,713  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    650392,072 ±       0,010    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0,087 ±       0,088  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        23,585 ±      23,920    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      2443,184 ±    1430,005  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    659197,508 ±  399990,569    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        18,000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        11,000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     47978,856 ±     325,930   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       798,229 ±       5,296  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     26184,009 ±       0,002    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0,025 ±       0,105  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0,819 ±       3,431    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       807,968 ±    1157,168  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5     26508,264 ±   38050,058    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         6,000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         3,000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4563,187 ±     107,218   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       839,145 ±      19,609  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    289416,094 ±       0,025    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0,037 ±       0,174  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        12,878 ±      59,739    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5       808,064 ±    1161,107  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5    278565,992 ±  397821,626    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         6,000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         4,000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      4746,012 ±    1002,506   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       581,322 ±     122,811  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    192757,268 ±       3,541    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0,192 ±       1,564  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5        65,026 ±     529,733    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       539,169 ±    1160,602  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5    176343,854 ±  381244,890    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         4,000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         3,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      7099,363 ±     155,738   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       189,720 ±       4,182  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     42056,058 ±       0,009    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       204,615 ±    1078,874  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5     45636,121 ±  240626,104    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2,000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         4,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      7315,900 ±     164,670   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       142,029 ±       3,203  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     30552,058 ±       0,008    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5       102,320 ±     881,010  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5     22209,221 ±  191228,094    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         1,000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         1,000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      8551,587 ±     274,476   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      1991,659 ±      64,130  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    366556,499 ±      46,370    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0,079 ±       0,123  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5        14,561 ±      22,575    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      2020,700 ±      22,038  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    371927,341 ±   15214,647    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        15,000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        10,000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                            N/A  thrpt    5     12726,652 ±     179,247   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       293,401 ±       4,131  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5     36280,035 ±       0,013    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0,001 ±       0,012  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0,180 ±       1,546    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       306,950 ±    1078,972  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5     38028,248 ±  133675,724    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     16405,822 ±     169,543   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       572,527 ±       5,959  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     54920,027 ±       0,010    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0,117 ±       0,872  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        11,165 ±      83,460    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       539,280 ±    1160,841  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     51779,812 ±  111461,113    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         3,000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     25812,225 ±     886,134   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       483,785 ±      16,605  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     29496,016 ±       0,002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0,698 ±       5,874  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        42,341 ±     356,378    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       474,600 ±    1068,842  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5     28998,867 ±   65476,289    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2641,761 ±      24,620   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1678,351 ±      15,565  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    999800,154 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0,029 ±       0,091  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        17,382 ±      54,614    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1624,386 ±    1424,443  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5    967710,091 ±  849833,771    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        11,000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                N/A  thrpt    5      9037,889 ±     207,291   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1109,862 ±      25,085  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5    193263,122 ±      50,360    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0,012 ±       0,072  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         2,181 ±      12,489    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1073,781 ±    1415,029  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5    187052,595 ±  247286,639    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         8,000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      8874,827 ±     115,446   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1709,356 ±      22,317  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    303125,548 ±      47,980    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0,058 ±       0,274  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        10,335 ±      48,574    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1754,929 ±    1420,066  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    311310,056 ±  253966,304    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        13,000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5         8,000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     58815,732 ±    1814,256   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       549,827 ±      17,042  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712,007 ±       0,002    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0,609 ±       5,124  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        16,249 ±     136,676    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       506,404 ±    1123,016  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     13552,954 ±   29953,140    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     45003,549 ±     317,739   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       670,050 ±       4,865  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431,864 ±       0,194    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0,161 ±       1,208  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         5,641 ±      42,358    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       674,113 ±       1,488  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5     23574,033 ±     164,917    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         5,000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         3,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     84486,471 ±     733,534   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       635,177 ±       5,412  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832,005 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5         0,691 ±       5,812  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        12,819 ±     107,879    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       538,763 ±    1159,740  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5     10033,245 ±   21597,514    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         4,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5    116359,184 ±     597,471   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0,004 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      6750,932 ±     553,231   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      1988,814 ±     163,280  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    463631,831 ±       2,745    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0,058 ±       0,105  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        13,502 ±      23,762    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5      2033,064 ±      12,855  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5    474114,472 ±   37780,797    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        15,000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5         9,000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                               N/A  thrpt    5      4955,725 ±     100,641   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                N/A  thrpt    5       274,880 ±       5,627  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                           N/A  thrpt    5     87296,082 ±       0,002    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0,002 ±       0,015  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0,754 ±       4,650    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       306,895 ±    1078,780  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5     97798,173 ±  343778,239    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                     N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                      N/A  thrpt    5         5,000                    ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   5757292,794 ±  280395,622   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3570,396 ±     174,776  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976,000 ±       0,001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0,071 ±       0,091  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0,019 ±       0,026    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      3666,502 ±    1424,910  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5      1003,147 ±     427,939    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        27,000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        15,000                    ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  47017857,778 ± 2220691,075   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       478,040 ±      22,540  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16,000 ±       0,001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0,529 ±       4,479  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0,018 ±       0,149    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5       474,065 ±    1067,027  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        15,916 ±      36,005    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         4,000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   9673376,757 ±  112005,734   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3638,699 ±      41,957  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       592,000 ±       0,001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0,075 ±       0,072  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0,012 ±       0,012    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      3672,772 ±    1426,159  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5       597,484 ±     228,950    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        27,000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        14,000                    ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  57942684,782 ± 1412092,015   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  39930431,031 ±  659207,853   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1420,810 ±      23,778  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5        56,000 ±       0,001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0,037 ±       0,088  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0,001 ±       0,003    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1344,849 ±       5,385  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        53,007 ±       0,864    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5        10,000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         5,000                    ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   8252118,181 ±  441491,479   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      3985,169 ±     213,096  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       760,000 ±       0,001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0,062 ±       0,139  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0,012 ±       0,026    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      3939,238 ±    1196,697  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5       751,544 ±     241,922    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        29,000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        15,000                    ms
[info] IntBenchmark.readUPickle                                                                          N/A  thrpt    5  10955002,334 ±   70616,878   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                           N/A  thrpt    5      4621,815 ±      29,287  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                      N/A  thrpt    5       664,000 ±       0,001    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0,087 ±       0,067  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5         0,013 ±       0,010    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5      4627,015 ±    1167,459  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       664,789 ±     170,438    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                N/A  thrpt    5        34,000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                 N/A  thrpt    5        17,000                    ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  23943315,781 ±  392537,852   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2191,113 ±      35,775  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       144,000 ±       0,001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0,067 ±       0,119  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0,004 ±       0,008    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      2158,688 ±    1173,018  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5       141,868 ±      76,991    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        16,000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         8,000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  64006454,454 ±  743112,787   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1952,246 ±      22,606  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48,000 ±       0,001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0,058 ±       0,154  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0,001 ±       0,004    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1888,190 ±    1171,100  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        46,433 ±      28,979    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        14,000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  14790740,636 ±  317478,570   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      2932,277 ±      62,998  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312,000 ±       0,001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0,071 ±       0,108  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0,008 ±       0,011    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      2992,069 ±    1430,415  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       318,212 ±     145,831    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        22,000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        11,000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  50610060,838 ± 6672742,361   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5      1029,034 ±     135,909  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32,000 ±       0,001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0,033 ±       0,122  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0,001 ±       0,004    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5      1074,997 ±    1418,148  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        33,273 ±      41,890    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         8,000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         3,000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  57742038,126 ± 1293984,151   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  45312242,809 ±  531300,792   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2303,320 ±      26,349  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        80,000 ±       0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0,054 ±       0,091  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0,002 ±       0,003    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5      2298,272 ±    1411,813  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        79,819 ±      48,831    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        17,000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2786935,218 ±  158571,066   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2280,809 ±     130,017  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1288,000 ±       0,001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0,054 ±       0,091  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0,030 ±       0,050    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      2292,383 ±    1413,124  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      1296,593 ±     858,416    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        17,000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         9,000                    ms
[info] IntBenchmark.writeUPickle                                                                         N/A  thrpt    5  13604486,096 ±  356830,743   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                          N/A  thrpt    5      2627,869 ±      68,869  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                     N/A  thrpt    5       304,000 ±       0,001    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0,054 ±       0,091  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0,006 ±       0,011    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      2571,258 ±    1182,907  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5       297,530 ±     139,363    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                               N/A  thrpt    5        19,000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                N/A  thrpt    5         9,000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    176574,592 ±    2069,379   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      3239,618 ±      38,515  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872,002 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,058 ±       0,088  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,520 ±       0,786    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      3256,266 ±    1153,724  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     29021,124 ±   10313,421    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        24,000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        12,000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     25433,393 ±     295,344   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1978,091 ±      23,152  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122400,017 ±       0,003    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,071 ±       0,176  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         4,380 ±      10,878    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1898,928 ±    1162,757  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    117506,596 ±   72063,534    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        14,000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    136569,559 ±    1902,953   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1517,537 ±      21,055  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     17488,003 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,046 ±       0,067  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,527 ±       0,767    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1489,591 ±    1158,893  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     17166,719 ±   13374,368    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11,000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         6,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    551172,561 ±   12710,733   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1140,322 ±      25,926  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256,001 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,062 ±       0,150  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,179 ±       0,428    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1209,326 ±    1157,089  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3455,102 ±    3330,339    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    592724,604 ±    9253,492   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       578,485 ±       9,024  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536,001 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5         0,677 ±       5,586  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         1,792 ±      14,784    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5       641,351 ±     279,524  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      1703,209 ±     752,154    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         5,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         6,000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     63605,668 ±    4377,864   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1391,253 ±      96,022  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     34424,007 ±       0,002    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,033 ±       0,134  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,833 ±       3,404    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1489,201 ±    1159,504  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     36825,025 ±   27815,418    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        11,000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    432163,541 ±   13679,958   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2932,791 ±      92,823  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10680,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,067 ±       0,067  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0,242 ±       0,241    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2981,416 ±    1418,478  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     10855,840 ±    5102,245    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        22,000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        11,000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    357250,266 ±    4650,211   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       946,108 ±      12,375  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4168,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,037 ±       0,200  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,165 ±       0,880    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       945,805 ±    1422,749  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4169,172 ±    6302,756    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1343474,836 ±    9929,430   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      2622,478 ±      18,928  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3072,000 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,054 ±       0,122  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,063 ±       0,142    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      2571,454 ±    1150,546  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3012,539 ±    1358,500    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        19,000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        10,000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    122101,183 ±    1754,095   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      4421,128 ±      63,292  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56984,003 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,071 ±       0,091  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0,913 ±       1,185    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      4357,894 ±    1440,123  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     56180,690 ±   19208,799    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        32,000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        17,000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    636769,871 ±    8197,986   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2780,475 ±      35,784  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      6872,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,050 ±       0,044  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,124 ±       0,109    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2844,334 ±    1169,027  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      7030,829 ±    2938,960    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        21,000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        11,000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    357172,574 ±    5080,720   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       544,653 ±       7,863  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2400,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0,711 ±       6,037  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         3,148 ±      26,707    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       506,362 ±    1122,928  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      2233,662 ±    4952,966    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    793687,700 ±   20030,449   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       580,964 ±      14,589  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1152,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,067 ±       0,486  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,132 ±       0,961    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       539,288 ±    1160,859  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1070,096 ±    2303,681    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         2,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2183457,885 ±   37482,972   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1009,962 ±      17,249  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728,000 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,015 ±       0,082    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       940,429 ±    1415,567  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       677,505 ±    1015,010    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2606127,581 ±   14640,173   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    427536,010 ±    3274,232   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       615,019 ±       4,749  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,824 ±       6,914  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         3,038 ±      25,502    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       537,672 ±    1157,390  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1978,374 ±    4258,700    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    197045,450 ±    3746,180   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       502,811 ±       9,572  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4016,002 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,666 ±       5,621  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         5,315 ±      44,870    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       372,231 ±    1333,357  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      2979,289 ±   10673,950    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         3,000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     65906,134 ±    1124,724   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2220,181 ±      37,097  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     53016,006 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,046 ±       0,088  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,095 ±       2,105    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      2160,150 ±    1154,772  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     51606,473 ±   28528,584    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        16,000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     99081,423 ±    1452,614   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1781,944 ±      26,167  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28304,004 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,033 ±       0,044  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,529 ±       0,693    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1762,446 ±    1427,494  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     28003,590 ±   22866,210    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        13,000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         8,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5     93352,091 ±     174,031   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1431,732 ±       2,710  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24136,005 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0,050 ±       0,091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0,842 ±       1,541    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1344,870 ±       6,779  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     22671,705 ±     145,358    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        10,000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         6,000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     19571,209 ±     420,113   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1364,135 ±      29,251  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109696,023 ±       0,009    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,025 ±       0,105  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         2,004 ±       8,377    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1353,247 ±       7,022  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    108822,652 ±    1942,220    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10,000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         6,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    169773,978 ±    1570,718   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1255,647 ±      11,378  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     11640,002 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0,037 ±       0,143  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0,347 ±       1,329    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1217,691 ±    1167,399  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     11290,209 ±   10848,436    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         5,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    565905,440 ±    6105,834   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       624,215 ±       6,691  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736,001 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0,681 ±       5,638  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         1,890 ±      15,649    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       538,769 ±    1159,752  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1499,465 ±    3227,712    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         3,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    545971,782 ±    2618,611   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5,551 ±       0,027  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16,001 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     23545,999 ±     109,953   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       449,541 ±       2,156  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30048,157 ±       1,199    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,075 ±       0,560  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         5,010 ±      37,438    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5       371,814 ±    1331,642  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     24853,015 ±   89005,434    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         3,000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         4,000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2522374,705 ±   39408,086   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3474,686 ±      54,342  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2168,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0,071 ±       0,072  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0,044 ±       0,045    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      3528,541 ±    1193,136  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5      2202,216 ±     780,363    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        26,000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        12,000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    967720,097 ±   26060,918   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       614,915 ±      16,535  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5      1000,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0,532 ±       4,495  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         0,864 ±       7,292    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       538,277 ±    1158,686  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5       876,887 ±    1887,687    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         3,000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    350843,331 ±    4388,228   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       686,622 ±       8,706  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      3080,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5         0,062 ±       0,372  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5         0,281 ±       1,675    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       674,527 ±       2,679  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5      3025,772 ±      38,735    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         3,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    851936,414 ±    6240,229   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       640,932 ±       4,702  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1184,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5         0,653 ±       5,626  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5         1,204 ±      10,370    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5       539,050 ±    1160,352  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5       995,580 ±    2143,062    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         4,000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         4,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4876150,012 ±  387602,100   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      1561,540 ±     124,154  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       504,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5         0,050 ±       0,108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5         0,016 ±       0,034    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5      1480,923 ±    1157,695  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5       477,756 ±     363,509    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        11,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5         6,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   9926753,710 ±  457362,241   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       807,341 ±      37,150  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       128,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5         0,029 ±       0,108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5         0,005 ±       0,017    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5       807,350 ±    1155,844  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5       127,841 ±     179,929    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         6,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         2,000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    220829,856 ±    1392,954   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1493,005 ±       9,558  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     10640,002 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0,058 ±       0,119  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0,416 ±       0,849    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5      1488,941 ±    1162,568  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     10608,550 ±    8209,332    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5        11,000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         6,000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                              N/A  thrpt    5    324428,313 ±  126859,942   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                               N/A  thrpt    5       636,562 ±     248,865  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                          N/A  thrpt    5      3088,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0,699 ±       5,883  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         3,230 ±      27,082    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       673,053 ±       6,246  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5      3295,825 ±    1461,732    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                    N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                     N/A  thrpt    5         4,000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5   1030854,317 ±   29751,970   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        57,642 ±       1,674  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       102,311 ±     880,925  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       157,568 ±    1356,707    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1,000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         1,000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     69862,658 ±    4305,566   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3245,888 ±     199,909  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     73120,006 ±       0,001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,087 ±       0,067  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1,968 ±       1,450    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      3265,302 ±    1174,504  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     73610,088 ±   28477,987    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24,000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        12,000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1175239,021 ±   80561,352   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       675,127 ±      46,047  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,062 ±       0,330  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,083 ±       0,440    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       674,367 ±    1834,968  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       896,071 ±    2439,922    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5,000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5    760259,911 ±   13320,599   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       212,556 ±       3,748  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440,001 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,002 ±       0,018  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,004 ±       0,038    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204,654 ±    1079,080  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       424,625 ±    2238,970    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2,000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1035568,832 ±    5167,774   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        10,528 ±       0,053  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     50392,461 ±     613,823   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2132,572 ±      26,170  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66600,008 ±       0,001    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,075 ±       0,072  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2,340 ±       2,223    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2171,883 ±    1164,591  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     67817,590 ±   35939,853    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        16,000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    262800,159 ±   14540,639   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1028,610 ±      56,928  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160,002 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0,025 ±       0,132  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0,150 ±       0,791    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5       940,334 ±    1416,150  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5      5636,040 ±    8541,813    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         7,000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         4,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     30096,101 ±     211,834   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1643,360 ±      11,401  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85936,014 ±       0,002    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5         0,037 ±       0,215  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         1,956 ±      11,223    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1625,898 ±    1431,376  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     85005,849 ±   74458,711    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12,000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5         8,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    151650,461 ±    1235,480   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1853,115 ±      15,093  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     19232,003 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0,054 ±       0,091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0,562 ±       0,948    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5      1898,247 ±    1164,626  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5     19699,693 ±   12069,768    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        14,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         8,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    376615,037 ±   25611,174   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1793,832 ±     122,379  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0,046 ±       0,164  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0,190 ±       0,681    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5      1752,141 ±    1428,782  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      7309,627 ±    5686,677    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        13,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5         7,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    474606,070 ±    5892,240   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1626,093 ±      20,241  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5         0,050 ±       0,091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5         0,166 ±       0,303    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5      1615,642 ±    1419,907  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5      5357,602 ±    4713,473    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        12,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         6,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     56177,834 ±     806,855   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1408,491 ±      20,306  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     39456,007 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5         0,029 ±       0,122  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0,819 ±       3,428    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1489,130 ±    1161,248  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5     41737,864 ±   33209,029    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11,000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         6,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     77973,103 ±    1078,787   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1612,371 ±      22,473  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     32544,005 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,033 ±       0,122  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,672 ±       2,452    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1615,036 ±    1419,036  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     32593,251 ±   28532,251    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        12,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5         7,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    142607,366 ±    5325,298   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       705,348 ±      26,338  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7784,003 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0,017 ±       0,067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0,183 ±       0,738    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5       674,857 ±       2,648  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      7448,111 ±     296,488    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         5,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         3,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    207856,607 ±    3300,491   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5       855,807 ±      13,536  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480,002 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5         0,025 ±       0,104  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5         0,189 ±       0,789    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5       941,183 ±    1419,738  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5      7122,606 ±   10694,973    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         7,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         4,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     19387,750 ±     384,120   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1110,245 ±      21,682  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90128,023 ±       0,011    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,029 ±       0,091  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         2,359 ±       7,390    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1216,765 ±    1164,565  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     98682,401 ±   93319,806    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5         9,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         6,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    145206,715 ±   16597,513   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1461,386 ±     167,055  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     15840,003 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5         0,042 ±       0,127  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5         0,455 ±       1,385    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5      1489,423 ±    1173,829  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5     16141,012 ±   12412,546    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5        11,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         7,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    581564,975 ±   18716,335   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       647,405 ±      20,823  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752,001 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5         0,666 ±       5,597  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5         1,797 ±      15,109    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5       539,029 ±    1160,306  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5      1459,978 ±    3143,166    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         4,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         3,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    629495,488 ±   10574,703   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        12,800 ±       0,214  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32,001 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     23577,853 ±     249,685   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5       483,355 ±       5,300  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32264,018 ±       0,003    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5         0,062 ±       0,494  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         4,165 ±      32,960    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5       506,784 ±    1124,102  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     33852,756 ±   75036,983    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         4,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         4,000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     82241,314 ±    4888,726   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1438,532 ±      85,647  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     27528,005 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,037 ±       0,132  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,716 ±       2,499    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1478,843 ±    1152,518  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     28310,343 ±   22278,451    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    162661,692 ±    1354,304   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       695,370 ±       5,853  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6728,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,079 ±       0,551  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,767 ±       5,341    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       809,579 ±    1157,844  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      7836,286 ±   11265,475    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         6,000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    231991,826 ±    5713,968   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       826,673 ±      20,301  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608,002 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,012 ±       0,044  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,084 ±       0,297    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       806,976 ±    1159,609  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      5469,165 ±    7763,209    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6,000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     46940,229 ±     376,557   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1946,094 ±      15,731  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65248,009 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,046 ±       0,154  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,534 ±       5,158    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1900,160 ±    1164,015  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     63698,451 ±   38799,522    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        14,000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         9,000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                             128  thrpt    5    131450,050 ±   27725,044   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1218,134 ±     257,113  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     14584,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,025 ±       0,067  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,305 ±       0,850    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1209,348 ±    1157,024  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     14565,389 ±   14937,338    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9,000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    293057,300 ±    1917,605   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1379,493 ±       9,224  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      7408,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,025 ±       0,067  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0,134 ±       0,361    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1343,653 ±       5,269  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      7215,554 ±      51,068    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10,000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    559429,463 ±    3196,318   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       449,329 ±       2,429  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,071 ±       0,566  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,199 ±       1,592    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       371,882 ±    1331,910  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1047,022 ±    3750,739    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         3,000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    672597,246 ±   15367,538   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       355,591 ±       8,078  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       832,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,003 ±       0,029  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,008 ±       0,068    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       306,948 ±    1078,966  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       720,267 ±    2531,905    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    772465,826 ±   16506,522   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     37787,650 ±     742,637   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1957,786 ±      38,320  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     81536,011 ±       0,002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,054 ±       0,122  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2,256 ±       5,062    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1883,183 ±    1153,025  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     78449,102 ±   48479,511    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                            128  thrpt    5    152915,048 ±    5227,755   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1137,155 ±      38,739  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     11704,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,037 ±       0,105  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,387 ±       1,087    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1209,242 ±    1156,934  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     12455,192 ±   12025,664    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         9,000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] NestedStructsBenchmark.readCirce                                                                  128  thrpt    5     69284,201 ±    1096,399   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      3138,324 ±      49,905  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     71288,006 ±       0,001    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,162 ±       0,351  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         3,691 ±       8,018    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      3117,946 ±    1412,765  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     70827,622 ±   32167,480    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        23,000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        12,000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                           128  thrpt    5    141567,977 ±    2603,842   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1825,694 ±      33,176  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     20296,003 ±       0,001    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,083 ±       0,150  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,926 ±       1,668    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1898,663 ±    1167,071  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     21104,133 ±   12899,224    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        14,000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                          128  thrpt    5    575484,411 ±    3156,773   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1503,581 ±       8,235  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4112,001 ±       0,001    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,046 ±       0,036  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,125 ±       0,099    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1479,814 ±    1157,167  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4047,659 ±    3184,306    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        11,000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                               128  thrpt    5     17852,390 ±     364,300   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2274,774 ±      45,344  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    200528,024 ±       0,010    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,033 ±       0,072  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2,934 ±       6,282    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2308,088 ±    1436,711  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5    203536,479 ±  128817,659    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        17,000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        12,000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                 128  thrpt    5     44293,850 ±     309,296   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      2472,216 ±      17,693  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     87840,010 ±       0,002    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0,092 ±       0,257  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         3,253 ±       9,132    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2566,955 ±    1162,260  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     91216,792 ±   41659,102    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        19,000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        10,000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                          128  thrpt    5    233243,311 ±   27145,442   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1084,813 ±     126,348  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      7320,002 ±       0,001    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,037 ±       0,119  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,254 ±       0,796    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1080,965 ±    1423,219  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      7261,504 ±    9151,568    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1236878,019 ±    8984,307   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       622,453 ±       4,366  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       792,000 ±       0,001    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,672 ±       5,650  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,852 ±       7,166    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       539,047 ±    1160,347  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       685,642 ±    1475,903    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1277700,274 ±   95838,286   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻³                  B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                              128  thrpt    5     36650,194 ±     669,279   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1962,797 ±      35,686  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     84280,011 ±       0,002    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,067 ±       0,105  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2,857 ±       4,469    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2034,259 ±      12,643  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     87350,040 ±    1693,969    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    762109,136 ±    3365,181   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2328,288 ±      10,397  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4808,001 ±       0,001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0,067 ±       0,067  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0,138 ±       0,139    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      2295,574 ±    1424,239  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      4740,581 ±    2945,377    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        17,000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1685918,397 ±   42135,219   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1276,921 ±      32,149  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1192,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0,058 ±       0,143  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0,054 ±       0,134    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5      1353,067 ±       6,068  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5      1263,131 ±      36,157    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5        10,000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         6,000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   8027171,412 ±  830836,638   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       244,826 ±      25,364  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0,002 ±       0,018  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       204,631 ±    1078,959  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5        40,871 ±     215,662    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         2,000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         3,000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    255539,402 ±    2654,785   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1810,789 ±      18,762  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     11152,002 ±       0,001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0,050 ±       0,072  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0,308 ±       0,440    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1897,643 ±    1166,922  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5     11687,976 ±    7211,630    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        14,000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5         7,000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5   1059733,272 ±   11305,977   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1583,721 ±      17,390  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2352,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0,062 ±       0,057  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0,093 ±       0,084    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1613,114 ±    1421,168  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      2394,964 ±    2094,726    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        12,000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         7,000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2712896,860 ±   24078,901   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1116,995 ±       9,715  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       648,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0,029 ±       0,108  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0,017 ±       0,062    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5      1080,944 ±    1423,734  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5       627,390 ±     829,657    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         8,000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   6574833,678 ±  325446,306   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       735,292 ±      36,412  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       176,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0,684 ±       5,580  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0,167 ±       1,367    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       807,397 ±    1152,874  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       193,214 ±     274,705    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         6,000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         4,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   6516250,894 ±   81008,084   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       397,485 ±       5,018  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5         0,667 ±       5,712  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5         0,162 ±       1,385    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5       441,910 ±     989,394  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5       106,801 ±     239,453    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         4,000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    362008,095 ±   33996,399   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      1843,960 ±     173,074  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8016,001 ±       0,001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0,054 ±       0,185  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0,235 ±       0,794    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1762,602 ±    1427,587  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      7679,008 ±    6529,455    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        13,000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5         7,000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     75084,082 ±     309,314   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      2146,588 ±       8,555  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     44992,006 ±       0,001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0,058 ±       0,174  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         1,222 ±       3,640    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      2159,058 ±    1153,163  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     45253,681 ±   24180,476    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        16,000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5         9,000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    122740,027 ±    9438,686   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1890,499 ±     145,499  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24240,003 ±       0,001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,042 ±       0,139  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,536 ±       1,786    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1899,262 ±    1169,999  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     24385,139 ±   15705,900    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        14,000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    181714,641 ±    2671,582   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2669,489 ±      39,443  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120,002 ±       0,001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,062 ±       0,057  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0,541 ±       0,494    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2572,567 ±    1164,641  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     22278,905 ±   10027,261    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        19,000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     58796,572 ±    4201,602   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3091,818 ±     220,825  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     82760,007 ±       0,001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0,075 ±       0,134  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         2,015 ±       3,681    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      3129,255 ±    1432,131  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     83788,967 ±   38982,507    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23,000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        14,000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                    128  thrpt    5     88573,980 ±    3494,858   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1806,498 ±      70,597  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5     32096,005 ±       0,001    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0,037 ±       0,105  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0,669 ±       1,902    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1886,649 ±    1160,609  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     33537,877 ±   21024,303    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        14,000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5         7,000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    286097,430 ±    4271,044   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1361,226 ±      20,226  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      7488,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0,046 ±       0,119  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0,251 ±       0,652    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1343,232 ±       6,682  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5      7389,112 ±     121,194    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        10,000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         5,000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    601092,186 ±    5453,564   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       519,427 ±       4,713  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,083 ±       0,586  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0,217 ±       1,530    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506,792 ±    1124,100  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1326,794 ±    2943,731    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4,000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         3,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    874652,212 ±   95453,682   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       471,278 ±      51,450  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848,000 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,675 ±       5,678  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1,275 ±      10,744    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       474,549 ±    1068,733  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       859,928 ±    1955,155    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         4,000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    885909,323 ±   14371,193   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         9,007 ±       0,146  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16,000 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     37399,093 ±     522,005   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1930,783 ±      27,182  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     81248,011 ±       0,002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0,058 ±       0,105  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2,454 ±       4,402    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1882,962 ±    1163,703  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     79267,260 ±   49697,404    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14,000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5         7,000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    151416,015 ±    3570,834   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1133,836 ±      26,464  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     11784,003 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0,037 ±       0,088  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0,389 ±       0,913    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1209,255 ±    1157,218  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     12555,448 ±   11864,008    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5         9,000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5         5,000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   5500795,015 ±   73474,837   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      4054,420 ±      55,229  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1160,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,062 ±       0,080  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,018 ±       0,023    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      3943,494 ±    1169,411  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1128,147 ±     327,656    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        29,000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        14,000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   8509501,349 ±   49698,431   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       908,439 ±       5,340  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       168,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,029 ±       0,156  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,005 ±       0,029    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5       941,364 ±    1419,119  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       174,157 ±     263,397    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         7,000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5         5,000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   5072564,798 ±   45084,432   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2630,026 ±      23,857  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       816,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,067 ±       0,119  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,021 ±       0,037    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      2578,694 ±    1162,645  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       800,021 ±     358,857    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        19,000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        10,000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   9189900,262 ±  191991,215   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       981,008 ±      20,575  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       168,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,017 ±       0,067  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,003 ±       0,012    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1074,974 ±    1418,250  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       184,219 ±     244,424    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8,000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         4,000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   5877376,183 ±  230858,522   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3166,730 ±     124,045  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       848,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,071 ±       0,091  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,019 ±       0,025    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      3116,155 ±    1420,094  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       834,558 ±     383,244    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        23,000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        11,000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                           128  thrpt    5   4996057,445 ±   93742,258   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      2615,841 ±      49,801  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5       824,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,054 ±       0,091  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0,017 ±       0,029    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      2571,564 ±    1150,817  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       810,060 ±     362,635    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        19,000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5        11,000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   3410060,274 ±   22154,168   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       814,690 ±       5,508  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       376,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,025 ±       0,143  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0,012 ±       0,066    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       806,143 ±    1155,348  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       372,027 ±     532,661    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6,000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   6724591,936 ±   35276,268   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       649,510 ±       3,391  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,535 ±       4,515  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,125 ±       1,058    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5       672,701 ±       2,807  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       157,428 ±       1,353    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5,000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         4,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2188671,963 ±   18409,810   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       678,668 ±       5,679  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       488,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0,025 ±       0,067  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0,018 ±       0,048    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       671,883 ±       2,811  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       483,123 ±       4,923    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5,000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5  10704964,516 ±  104442,799   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1033,964 ±       9,628  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0,029 ±       0,122  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0,004 ±       0,018    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       940,799 ±    1417,266  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       138,364 ±     209,182    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   9206022,926 ±   71506,117   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   3688579,322 ±   65957,341   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1181,184 ±      21,238  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,025 ±       0,105  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,011 ±       0,045    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1071,607 ±    1411,880  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       457,156 ±     601,290    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         8,000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                          128  thrpt    5    454547,640 ±    2029,217   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       219,501 ±       0,988  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5       760,001 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,002 ±       0,014  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,005 ±       0,047    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5       204,632 ±    1078,965  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       708,940 ±    3738,041    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         2,000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5    904121,261 ±    9454,097   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1585,573 ±      16,438  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2760,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0,029 ±       0,091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0,051 ±       0,159    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1614,411 ±    1415,864  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      2811,173 ±    2486,705    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5        12,000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   2303998,123 ±   18882,374   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       644,163 ±       5,287  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       440,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5         0,542 ±       4,537  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0,370 ±       3,095    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5       672,677 ±       2,794  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       459,478 ±       2,341    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         5,000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1261339,284 ±    9129,442   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       929,668 ±       6,836  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      1160,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0,033 ±       0,134  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0,042 ±       0,167    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       941,893 ±    1419,134  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1175,308 ±    1771,445    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         7,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2858575,709 ±   32504,906   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       799,183 ±       9,027  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       440,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,029 ±       0,156  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0,016 ±       0,086    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       807,334 ±    1155,652  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       444,866 ±     643,541    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1418042,136 ±   33739,060   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1009,080 ±      24,620  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      1120,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,021 ±       0,113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,023 ±       0,126    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1071,360 ±    1413,178  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1188,109 ±    1555,676    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         8,000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                        128  thrpt    5   1209890,375 ±   26564,516   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1642,013 ±      36,252  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      2136,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,050 ±       0,091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,065 ±       0,118    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1615,499 ±    1419,824  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      2100,100 ±    1813,797    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                              128  thrpt    5        12,000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                               128  thrpt    5         6,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1976186,778 ±   10926,151   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1657,495 ±       9,445  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1320,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0,058 ±       0,132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0,046 ±       0,105    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1748,508 ±    1419,107  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1392,601 ±    1132,624    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        13,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5         7,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2850466,734 ±   31638,248   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       739,009 ±       8,332  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5         0,531 ±       4,484  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0,294 ±       2,480    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5       807,137 ±    1156,310  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       445,846 ±     642,854    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         6,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2821958,956 ±   15624,905   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1334,080 ±       7,274  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0,058 ±       0,036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0,033 ±       0,020    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1349,205 ±      10,364  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       752,436 ±       7,489    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        10,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   3043101,653 ±   20563,885   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       788,897 ±       5,438  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0,021 ±       0,080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0,011 ±       0,041    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       807,205 ±    1154,443  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       417,623 ±     600,031    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         6,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3111563,559 ±   22405,032   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2701353,488 ±  369467,950   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1304,409 ±     178,378  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       760,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,037 ±       0,143  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,021 ±       0,082    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1206,947 ±    1155,586  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       705,414 ±     701,292    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         9,000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     13267,372 ±    1604,652   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1928,915 ±     233,131  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    228824,411 ±      37,776    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0,113 ±       0,143  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        13,444 ±      16,841    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1884,278 ±    1148,372  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5    222793,281 ±  114373,878    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        14,000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         8,000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     15246,543 ±     197,451   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       215,540 ±       2,980  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     22248,833 ±      31,579    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0,010 ±       0,049  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         1,074 ±       5,057    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       306,920 ±    1078,866  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5     31728,019 ±  111529,087    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         3,000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         4,000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     40977,635 ±    1494,616   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       379,520 ±      13,872  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     14576,010 ±       0,002    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0,006 ±       0,053  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0,245 ±       2,050    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       306,937 ±    1078,926  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     11838,410 ±   41617,621    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      4286,410 ±      35,456   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1398,133 ±      11,316  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    513144,097 ±       0,013    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0,008 ±       0,044  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         3,057 ±      16,117    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1487,539 ±    1165,018  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    545942,900 ±  427082,618    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        11,000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        16,000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     65837,514 ±    1886,878   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       840,912 ±      24,110  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20100,005 ±       0,154    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0,012 ±       0,108  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0,298 ±       2,565    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       809,024 ±    1161,573  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     19330,963 ±   27620,271    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         6,000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         4,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     96043,167 ±     686,035   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       627,832 ±       4,550  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10288,004 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0,691 ±       5,863  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        11,343 ±      96,200    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       538,607 ±    1159,401  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5      8831,205 ±   19010,254    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4,000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         3,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5    106519,026 ±     817,383   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        15,161 ±       0,116  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       224,004 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    404318,457 ±    9633,481   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2166,224 ±      51,638  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      8432,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0,058 ±       0,067  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0,227 ±       0,262    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2160,096 ±    1172,247  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      8414,277 ±    4801,417    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        16,000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    486313,883 ±    5073,625   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       593,275 ±       6,218  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1920,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0,071 ±       0,480  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0,229 ±       1,553    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       539,416 ±    1161,136  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1747,105 ±    3760,800    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1301711,270 ±   34584,246   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       681,555 ±      18,163  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824,000 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,686 ±       5,686  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,835 ±       6,923    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       673,342 ±       5,625  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       814,099 ±      21,043    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4,000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    124333,870 ±    3101,151   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      4321,849 ±     108,289  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54704,003 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,079 ±       0,105  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1,002 ±       1,326    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      4357,599 ±    1441,188  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     55174,382 ±   19197,413    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        32,000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        17,000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                             128  thrpt    5    652461,584 ±   20086,787   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1903,845 ±      58,169  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4592,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0,058 ±       0,105  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0,141 ±       0,253    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1887,847 ±    1161,671  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      4555,599 ±    2851,000    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    369440,810 ±    4690,026   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       580,268 ±       7,456  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      2472,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0,722 ±       6,036  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3,084 ±      25,800    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       640,796 ±     278,301  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      2729,476 ±    1171,485    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    780494,615 ±   82911,967   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       595,102 ±      63,270  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0,071 ±       0,524  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0,149 ±       1,113    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       539,431 ±    1161,167  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1091,179 ±    2353,304    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   2207572,100 ±   32453,232   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1021,193 ±      15,241  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728,000 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0,021 ±       0,113  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0,015 ±       0,081    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       940,386 ±    1416,186  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       669,824 ±    1001,503    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7,000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   2118345,205 ±   10732,963   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    407596,161 ±    6066,963   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       602,912 ±       8,999  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0,825 ±       6,928  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3,187 ±      26,748    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       639,990 ±     276,513  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2470,374 ±    1037,800    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                            128  thrpt    5    216791,203 ±    6041,054   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       562,011 ±      15,753  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      4080,002 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0,676 ±       5,688  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         4,883 ±      41,080    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5       506,788 ±    1124,094  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3677,016 ±    8130,460    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 8131 s, completed 1 лип. 2018 0:35:20
